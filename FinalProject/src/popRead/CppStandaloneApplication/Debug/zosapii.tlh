// Created by Microsoft (R) C/C++ Compiler Version 14.10.25019.0 (4ddbf15b).
//
// e:\users\byrdie\school\classes\eele582_opticaldesign\finalproject\src\popread\cppstandaloneapplication\debug\zosapii.tlh
//
// C++ source equivalent of type library C:\\Program Files\\Zemax OpticStudio\\ZOS-API\\Libraries\\ZOSAPII.tlb
// compiler-generated file created 04/25/17 at 10:13:34 - DO NOT EDIT!

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

namespace ZOSAPI_Interfaces {

//
// Forward references and typedefs
//

struct __declspec(uuid("ea433010-2bac-43c4-857c-7aeac4a8cce0"))
/* LIBID */ __ZOSAPI_Interfaces;
enum SystemType;
enum LicenseStatusType;
enum UpdateStatus;
enum ZOSAPI_Mode;
enum LensUpdateMode;
struct __declspec(uuid("ed0b14a9-df23-4748-aee9-1c71ae48073b"))
/* dual interface */ IZOSAPI_Connection;
struct __declspec(uuid("aab429ca-15a5-4934-98d5-a4257e9e04ab"))
/* dual interface */ IZOSAPI_Application;
struct __declspec(uuid("652e9881-9769-40ae-a08e-176b0bfcf464"))
/* dual interface */ IOpticalSystem;
struct __declspec(uuid("dba8cefe-572f-4b3a-a3d8-90db538b3bdc"))
/* dual interface */ IConvertToNSCGroup;
enum RayPatternOption;
enum CriticalRayType;
struct __declspec(uuid("fb5d6d75-661b-498f-9474-d9690057ef16"))
/* dual interface */ ICriticalRaysetGenerator;
struct __declspec(uuid("579a6c87-f687-4013-bc63-ba3f5ab50563"))
/* dual interface */ IMFCalculator;
struct __declspec(uuid("422ddc8a-d2f6-408c-ab1b-8126ca30a8c1"))
/* dual interface */ IDesignLockdown;
struct __declspec(uuid("faa2258a-3c52-4eb5-b65f-a7b6ae7e6cae"))
/* dual interface */ IOpticalSystemTools;
enum RunStatus;
struct __declspec(uuid("e804d25d-924b-4ef8-9fad-e3587119e9c8"))
/* dual interface */ ISystemTool;
enum QuickAdjustType;
enum QuickAdjustCriterion;
struct __declspec(uuid("6f19f415-7226-4e8d-bbb9-d5fedcd9911d"))
/* dual interface */ IQuickAdjust;
enum QuickFocusCriterion;
struct __declspec(uuid("9bf20a54-8406-4443-8e45-9987d28d42d3"))
/* dual interface */ IQuickFocus;
enum ArchiveFileStatus;
struct __declspec(uuid("921bea91-e126-4d0c-a3df-3ab181f88c74"))
/* dual interface */ IRestoreArchive;
struct __declspec(uuid("22a352dd-3f84-489c-bbc0-3e44a146389e"))
/* dual interface */ ICreateArchive;
enum RayPatternType;
enum SplineSegmentsType;
enum CADFileType;
enum CADToleranceType;
enum CADAngularToleranceType;
struct __declspec(uuid("cece2eb0-93a7-45dc-9a68-e45c94bf9e30"))
/* dual interface */ IExportCAD;
enum ScaleToUnits;
struct __declspec(uuid("6517c7ca-303f-4d9b-bef1-96fceba55ac0"))
/* dual interface */ IScale;
struct __declspec(uuid("2935ec13-970d-4c33-90d1-9870ad5630ca"))
/* dual interface */ IComputeRMSSpotSize;
enum SetupModes;
enum SetupPolynomials;
enum SetupCaches;
enum SetupChanges;
enum Criterions;
enum CriterionComps;
enum CriterionFields;
enum MonteCarloStatistics;
struct __declspec(uuid("8f8dc755-5010-48c3-89ec-6a3154f2bb43"))
/* dual interface */ ITolerancing;
enum ZRDFormatType;
struct __declspec(uuid("d7bb5e27-8a09-47bd-88ca-75c60042eec0"))
/* dual interface */ INSCRayTrace;
enum LTRaySampling;
enum LTEdgeSasmpling;
struct __declspec(uuid("7b974dca-5ed6-4756-94c9-23859d06c894"))
/* dual interface */ ILightningTrace;
enum RaysType;
enum OPDMode;
struct __declspec(uuid("3c1dfe73-da99-42c9-b7d1-2bbd9642b211"))
/* dual interface */ IBatchRayTrace;
struct __declspec(uuid("182ee3aa-9702-4792-8449-bb7a38980205"))
/* dual interface */ IRayTraceNormUnpolData;
struct __declspec(uuid("b732db4d-d3cd-4bbb-9a26-b4c46a66b609"))
/* dual interface */ IRayTraceDirectUnpolData;
struct __declspec(uuid("30afffe4-c357-4d07-bf47-2cf989b93de3"))
/* dual interface */ IRayTraceNormPolData;
struct __declspec(uuid("bc99e52b-73a9-4764-adc4-178257b8608a"))
/* dual interface */ IRayTraceDirectPolData;
enum NSCTraceOptions;
struct __declspec(uuid("a78e9ca6-aec2-4c23-ad7e-43ee8dd65dfb"))
/* dual interface */ IRayTraceNSCData;
struct __declspec(uuid("eceba620-529b-490d-bbc3-9ee693eef4f6"))
/* dual interface */ IRayTraceNSCSourceData;
struct BatchRayTraceDataEntry;
struct __declspec(uuid("b48d3a45-0fe6-44b1-9bdf-e6a1d6b7546b"))
/* dual interface */ IZRDReader;
struct __declspec(uuid("c71ba61b-9bc1-4092-88b2-9b51a89d7ece"))
/* dual interface */ IZRDReaderResults;
enum RayStatus;
struct RayPathDataEntry;
enum OptimizationAlgorithm;
enum OptimizationCycles;
struct __declspec(uuid("c6e99d19-b473-4a05-a314-8db45b01d130"))
/* dual interface */ ILocalOptimization;
enum OptimizationSaveCount;
struct __declspec(uuid("a15eea94-e93e-4723-9b71-b0b3cd8b018c"))
/* dual interface */ IGlobalOptimization;
struct __declspec(uuid("2f251021-fbf5-4e68-bcab-2ebf846d80d4"))
/* dual interface */ IHammerOptimization;
enum WizardType;
enum DefaultAndDegrees;
enum DefaultAndFringes;
struct __declspec(uuid("8b723db3-b1c5-4420-852c-f03851282321"))
/* dual interface */ IWizard;
struct __declspec(uuid("41525713-b184-4c4e-9320-c15f64ecb0ae"))
/* dual interface */ INSCWizard;
struct __declspec(uuid("2c08e2b5-2d12-44b4-9886-1d12f44a9160"))
/* dual interface */ INSCOptimizationWizard;
struct __declspec(uuid("36702e27-6d71-475d-b3eb-ed06c9dee2a9"))
/* dual interface */ INSCBitmapWizard;
struct __declspec(uuid("b3b71b8d-0103-4e30-a8d8-4623e4830c86"))
/* dual interface */ IImageData;
struct __declspec(uuid("4d913223-a453-44f5-9df0-0c7d74b75555"))
/* dual interface */ INSCRoadwayLightingWizard;
struct __declspec(uuid("29fd5871-6bfa-4f46-b49c-7c39328a06a8"))
/* dual interface */ ISEQOptimizationWizard;
struct __declspec(uuid("97b4c0ec-6129-4d36-b252-d687a648b8f4"))
/* dual interface */ IToleranceWizard;
struct __declspec(uuid("7b460a95-0155-4df4-bb9f-d4020dc05d76"))
/* dual interface */ INSCToleranceWizard;
struct __declspec(uuid("9e002cfb-3dfc-47b2-9300-48e08f3e6594"))
/* dual interface */ ISEQToleranceWizard;
enum ZemaxSystemUnits;
enum ZemaxSourceUnits;
enum ZemaxAnalysisUnits;
enum ZemaxUnitPrefix;
enum ZemaxAfocalModeUnits;
enum ZemaxMTFUnits;
enum ZemaxApertureType;
enum ZemaxApodizationType;
enum WavelengthPreset;
enum QuadratureSteps;
enum FieldType;
enum PolarizationMethod;
enum ReferenceOPDSetting;
enum ParaxialRaysSetting;
enum HuygensIntegralSettings;
enum FNumberComputationType;
enum RayAimingMethod;
struct __declspec(uuid("038f1c7d-a0d5-407d-b0a8-4ef52b8e7992"))
/* dual interface */ ISystemData;
struct __declspec(uuid("3e7ed240-5aa3-42c6-b6d9-3fb8b4bf822d"))
/* dual interface */ ISurfaceSelection;
struct __declspec(uuid("5ed309b8-e522-48ce-9481-521e00e71273"))
/* dual interface */ ISDApertureData;
struct __declspec(uuid("faabd3a3-c146-4723-a7b6-a93ba1d158a5"))
/* dual interface */ ISDEnvironmentData;
struct __declspec(uuid("3d86558b-38c6-44e2-9d8a-a4a6aa52850e"))
/* dual interface */ ISDPolarizationData;
struct __declspec(uuid("93927409-11d7-461e-a71d-a1fdaaa59e3d"))
/* dual interface */ ISDAdvancedData;
struct __declspec(uuid("61d96bc4-158b-41d8-8cdc-95068a3e9e57"))
/* dual interface */ ISDRayAimingData;
struct __declspec(uuid("3543d3f3-16ed-4b9a-b033-9cdd7fc95554"))
/* dual interface */ ISDMaterialCatalogData;
struct __declspec(uuid("731b798f-1126-45fb-890e-632abed92bc6"))
/* dual interface */ ISDTitleNotes;
struct __declspec(uuid("ff41d6ca-de03-43ed-bf29-4fc2b3e4ef57"))
/* dual interface */ ISDFiles;
struct __declspec(uuid("8dec3467-c25e-4e82-8a95-6a6be7592dcc"))
/* dual interface */ ISDUnitsData;
struct __declspec(uuid("8b8c12b1-f85d-4f3a-b309-80c60afd48aa"))
/* dual interface */ IWavelengths;
struct __declspec(uuid("dc212171-dbf3-42ec-a727-b70d2677d611"))
/* dual interface */ IWavelength;
enum FieldNormalizationType;
struct __declspec(uuid("ee58e697-9a2a-49e5-8af2-36269bdf170e"))
/* dual interface */ IFields;
struct __declspec(uuid("56aa7e6d-e7b6-4685-b720-576adc466932"))
/* dual interface */ IField;
struct __declspec(uuid("9855725c-3492-4050-a229-48e3d5327b3f"))
/* dual interface */ ISDNonSeqData;
struct __declspec(uuid("7bb031c2-82a1-478f-ae4e-5cb0c332710f"))
/* dual interface */ ISDNamedFilters;
enum CellDataType;
enum EditorType;
enum ReflectTransmitCode;
enum SampleSides;
enum Samplings;
struct __declspec(uuid("503f0796-3cad-48e3-b14a-4566a23647da"))
/* dual interface */ IEditor;
struct __declspec(uuid("fefb8447-028d-427e-b522-8aae1477e979"))
/* dual interface */ IEditorRow;
enum SolveStatus;
struct __declspec(uuid("893e39c0-c5f0-41d9-b159-4b0dc4b0929e"))
/* dual interface */ IEditorCell;
enum SolveType;
struct __declspec(uuid("455604cf-7550-42af-8724-7fbb8b8492f7"))
/* dual interface */ ISolveData;
struct __declspec(uuid("d57a0025-8be3-4542-8499-e514f4ebc232"))
/* dual interface */ ISolveNone;
struct __declspec(uuid("11ebe1fd-9515-4d12-8819-50d89b75e325"))
/* dual interface */ ISolveFixed;
struct __declspec(uuid("b5761db0-5104-4986-b79d-be84d66b8966"))
/* dual interface */ ISolveVariable;
struct __declspec(uuid("273c96e7-63c2-4d9f-85c7-100cb439c5bb"))
/* dual interface */ ISolveSurfacePickup;
struct __declspec(uuid("2e0466cd-b7b7-47f1-a42f-b86bee848581"))
/* dual interface */ ISolveZPLMacro;
struct __declspec(uuid("fa0850cf-85ed-433b-a658-17b325e3cb94"))
/* dual interface */ ISolveMarginalRayAngle;
struct __declspec(uuid("4119e845-367d-49c3-a383-d62ddc02a3ef"))
/* dual interface */ ISolveMarginalRayHeight;
struct __declspec(uuid("579a0f14-83cf-4d65-8eb8-b611b1b1dd7b"))
/* dual interface */ ISolveChiefRayAngle;
struct __declspec(uuid("ebe9fd2e-1454-4ebb-b7f8-7a8ac6769022"))
/* dual interface */ ISolveMarginalRayNormal;
struct __declspec(uuid("8ef3f759-da44-4da0-9038-25b7c4153033"))
/* dual interface */ ISolveChiefRayNormal;
struct __declspec(uuid("6b54fec2-ce43-411f-9028-05f9887a0c84"))
/* dual interface */ ISolveAplanatic;
struct __declspec(uuid("88b8ca7d-cbd2-4a2b-ab48-ad865abcf07a"))
/* dual interface */ ISolveElementPower;
struct __declspec(uuid("cdedbf4e-0ac0-4e77-981c-587d2345c64c"))
/* dual interface */ ISolveCocentricSurface;
struct __declspec(uuid("7e0adf19-0637-4559-b438-ffb30bf7a033"))
/* dual interface */ ISolveCocentricRadius;
struct __declspec(uuid("9dd6374c-c06b-43c9-bec3-0c5ba85ff22e"))
/* dual interface */ ISolveFNumber;
struct __declspec(uuid("9535a223-d5eb-4a68-a129-e763b44e1d82"))
/* dual interface */ ISolveChiefRayHeight;
struct __declspec(uuid("246f2842-fb6c-4904-a0b2-4c85b0f1f4c2"))
/* dual interface */ ISolveEdgeThickness;
struct __declspec(uuid("029f70fb-61e4-4d75-8132-40c631923bde"))
/* dual interface */ ISolveOpticalPathDifference;
struct __declspec(uuid("63f1d034-a863-4f32-9030-3677292eecf7"))
/* dual interface */ ISolvePosition;
struct __declspec(uuid("2a464c7b-9e51-466f-a822-977e323f6632"))
/* dual interface */ ISolveCompensator;
struct __declspec(uuid("33c734f5-97a2-46e3-8a02-4eb1b8e7e91e"))
/* dual interface */ ISolveCenterOfCurvature;
struct __declspec(uuid("2451ef44-7855-4f5f-8a5d-063fe73f8762"))
/* dual interface */ ISolvePupilPosition;
struct __declspec(uuid("d6bc3be0-100f-45ad-8c49-7befc911ca23"))
/* dual interface */ ISolveMaterialModel;
struct __declspec(uuid("80ef2a3d-1989-4c38-84dc-64db1e3f9ab5"))
/* dual interface */ ISolveMaterialSubstitute;
struct __declspec(uuid("5048d542-c6ff-43c6-86ab-977ae0c4bf6e"))
/* dual interface */ ISolveMaterialOffset;
struct __declspec(uuid("e24497c1-9e0b-4407-b0b7-3c9591d00699"))
/* dual interface */ ISolveAutomatic;
struct __declspec(uuid("f2dde082-878f-488e-a2da-253a12681f8b"))
/* dual interface */ ISolveMaximum;
struct __declspec(uuid("acef0ef2-a4dc-4c42-b3b0-65963752ee55"))
/* dual interface */ ISolvePickupChiefRay;
struct __declspec(uuid("8bbfb4fc-e857-4653-bee7-ee77b5ffafd0"))
/* dual interface */ ISolveObjectPickup;
struct __declspec(uuid("ba000e7b-2b55-497c-bdc1-980f96b2a39b"))
/* dual interface */ ISolveConfigPickup;
struct __declspec(uuid("e4f538c7-de3b-4729-b4ba-d950126704ec"))
/* dual interface */ ISolveThermalPickup;
enum ObjectType;
enum ObjectColumn;
enum DetectorDataType;
enum PolarDetectorDataType;
enum InterpolateChoices;
enum OrderChoices;
enum HologramTypes;
enum DiffractiveFaceChoices;
enum PixelAddressing;
enum ShapeChoices;
enum UniformAngleChoices;
enum EndCapOptions;
enum ApertureShapes;
struct __declspec(uuid("f3b16461-abca-4989-9903-b7ddda03d5b0"))
/* dual interface */ INonSeqEditor;
struct __declspec(uuid("71269f29-b306-4f04-aec0-e1e2fb88c6e0"))
/* dual interface */ IObjectTypeSettings;
struct __declspec(uuid("4e663289-db55-4a9b-901a-903f185d1d7b"))
/* dual interface */ INCERow;
struct __declspec(uuid("86dd3cad-4777-4e5b-b391-f906bd2d3e29"))
/* dual interface */ IFaceData;
struct __declspec(uuid("8364239e-0f1f-42d1-9995-a3b8d075cc0c"))
/* dual interface */ IObject;
struct __declspec(uuid("bdfc66ca-b515-452e-ae24-e62b1bc72590"))
/* dual interface */ IObjectDetector;
struct __declspec(uuid("baedfac0-6510-4e3f-84cf-d3551a05121b"))
/* dual interface */ IObjectAnnularAsphericLens;
struct __declspec(uuid("44edd66b-7623-4feb-b196-a85e5fbe5009"))
/* dual interface */ IObjectAnnularAxialLens;
struct __declspec(uuid("f70d36dd-f311-4e49-abc3-5b9b732eab86"))
/* dual interface */ IObjectAnnularVolume;
struct __declspec(uuid("ad54737f-a986-4cc4-a678-a26db1c02051"))
/* dual interface */ IObjectAnnulus;
struct __declspec(uuid("a530ddb6-6b4d-45a9-b3ed-c0e3ed56ced4"))
/* dual interface */ IObjectArray;
struct __declspec(uuid("88f7ad5a-1f78-430e-80c1-4fa7f24808f8"))
/* dual interface */ IObjectArrayRing;
struct __declspec(uuid("1c763e72-6890-4aad-adae-42f5347f5367"))
/* dual interface */ IObjectAsphericSurface;
struct __declspec(uuid("d4abfe0c-1509-4693-ae69-eccb136ab795"))
/* dual interface */ IObjectAsphericSurface2;
struct __declspec(uuid("0ade32ac-7446-41da-a0eb-7b98d0e388b3"))
/* dual interface */ IObjectAxiconSurface;
struct __declspec(uuid("187fac6c-b789-4fec-b779-7129d15da9b3"))
/* dual interface */ IObjectBiconicLens;
struct __declspec(uuid("17d4b5ec-75df-4016-8212-7e5dbfb926a7"))
/* dual interface */ IObjectBiconicSurface;
struct __declspec(uuid("c0ed5a86-8d05-4656-b4bb-7ca0580d118f"))
/* dual interface */ IObjectBiconicZernike;
struct __declspec(uuid("1678d195-99bd-4738-b535-487216f91258"))
/* dual interface */ IObjectBiconicZernikeSurface;
struct __declspec(uuid("36373754-f021-44c0-8035-46548aa27ba5"))
/* dual interface */ IObjectXYPolynomial;
struct __declspec(uuid("e022520c-2e8f-45a1-8fc7-a1d8c4842a8e"))
/* dual interface */ IObjectBinary1;
struct __declspec(uuid("edf33258-2da4-47a9-bdc3-0eb4af6f0058"))
/* dual interface */ IObjectBinary2;
struct __declspec(uuid("9e63b73f-4936-4a3f-b3aa-7325506efd50"))
/* dual interface */ IObjectBinary2A;
struct __declspec(uuid("335fc343-2944-4add-9d3c-a48e629a68c6"))
/* dual interface */ IObjectBoolean;
struct __declspec(uuid("c613e3fa-c62d-4467-be48-ad5672f1ace2"))
/* dual interface */ IObjectCADAssemblyAutodeskInventor;
struct __declspec(uuid("df6591e4-c293-4612-a63a-4d163370f78e"))
/* dual interface */ IObjectCADAssemblyCreoParametric;
struct __declspec(uuid("3a0dc198-de8d-4c48-852d-6d55a8a94aab"))
/* dual interface */ IObjectCADAssemblySolidWorks;
struct __declspec(uuid("30fc8ac7-1b84-4579-a7d6-fac2027a7bb2"))
/* dual interface */ IObjectCADPartAutodeskInventor;
struct __declspec(uuid("7bb906d8-6325-4386-8d36-8b64159bd7a1"))
/* dual interface */ IObjectCADPartCreoParametric;
struct __declspec(uuid("2e9994a5-e601-4cc6-83dd-0249d09e628e"))
/* dual interface */ IObjectCADPartSolidWorks;
struct __declspec(uuid("2740f748-f663-4f25-9b47-3cfac7ef3b3d"))
/* dual interface */ IObjectCADPartSTEPIGESSAT;
struct __declspec(uuid("63d00e64-0775-46e5-9933-98ae24d720bc"))
/* dual interface */ IObjectCADPartSTL;
struct __declspec(uuid("a11784d7-d4a2-44b2-b08e-fc4b058dc430"))
/* dual interface */ IObjectCADPartZPD;
struct __declspec(uuid("9619e0a5-6b7b-4013-a2bb-89d30b9e1053"))
/* dual interface */ IObjectCone;
struct __declspec(uuid("b92c47e6-4fe0-45e5-a40b-8a525601bc06"))
/* dual interface */ IObjectCPC;
struct __declspec(uuid("677d7ba2-73fb-414b-b115-9011b1357dfb"))
/* dual interface */ IObjectCPCRectangular;
struct __declspec(uuid("4e73d6dc-8e80-47fa-a32b-c9c4a5f6f8da"))
/* dual interface */ IObjectCylinderPipe;
struct __declspec(uuid("399768b6-19ba-46d0-89cc-7700b9c4c6fc"))
/* dual interface */ IObjectCylinderVolume;
struct __declspec(uuid("bb1b48c6-c69b-4921-8914-77ce978a96cb"))
/* dual interface */ IObjectCylinder2Pipe;
struct __declspec(uuid("47bfc03a-0005-4e43-b03b-cb7131b73fba"))
/* dual interface */ IObjectCylinder2Volume;
struct __declspec(uuid("bba8560e-48b9-4325-aefd-378ec390d26f"))
/* dual interface */ IObjectDetectorColor;
struct __declspec(uuid("b9e767c5-f6e7-4754-8e31-29555be2ce7e"))
/* dual interface */ IObjectDetectorPolar;
struct __declspec(uuid("a249ac0b-7f12-464f-9ff7-5ad0b6a501da"))
/* dual interface */ IObjectDetectorRectangle;
struct __declspec(uuid("803b4bf3-4764-4025-b58d-2dc854c073d3"))
/* dual interface */ IObjectDetectorSurface;
struct __declspec(uuid("eb6d7dcc-caa2-4445-a811-7498ddcb5396"))
/* dual interface */ IObjectDetectorVolume;
struct __declspec(uuid("9cd57dc6-6eb7-4cc5-986c-a3f8ff7fce60"))
/* dual interface */ IObjectDiffractionGrating;
struct __declspec(uuid("6b3a58b6-8f91-486a-aed5-1ee66bce4683"))
/* dual interface */ IObjectDualBEFSurface;
struct __declspec(uuid("06e6bc8e-3021-48ce-8704-cb2497a5e76f"))
/* dual interface */ IObjectEllipse;
struct __declspec(uuid("a1b6069c-ec7f-4543-aa23-2104fca64fbe"))
/* dual interface */ IObjectEllipticalVolume;
struct __declspec(uuid("10f36ed3-ff59-4f0a-81ac-e10d57e56993"))
/* dual interface */ IObjectEvenAsphereLens;
struct __declspec(uuid("14fedc57-61f5-463f-ad3a-415bf244f278"))
/* dual interface */ IObjectExtendedOddAsphereLens;
struct __declspec(uuid("540718ee-fc4a-41d5-a4e9-d736ddfd4320"))
/* dual interface */ IObjectExtendedPolynomialLens;
struct __declspec(uuid("db135810-f755-49c6-884d-4c42dd657cad"))
/* dual interface */ IObjectExtendedPolynomialSurface;
struct __declspec(uuid("83cef302-3601-4606-aadd-1b7b1fa7e999"))
/* dual interface */ IObjectExtruded;
struct __declspec(uuid("316982b1-a057-49ba-b851-d754fada16c0"))
/* dual interface */ IObjectFacetedSurface;
struct __declspec(uuid("4c152ce0-0865-4160-833b-3dcb191de8fd"))
/* dual interface */ IObjectFreeformZ;
struct __declspec(uuid("4691bc69-f666-4b7c-8f64-45e5ba91c132"))
/* dual interface */ IObjectFresnel1;
struct __declspec(uuid("535f26f7-94c3-4310-8f5e-a3c6477d9694"))
/* dual interface */ IObjectFresnel2;
struct __declspec(uuid("4f36d323-a426-471e-8cee-d227fa161384"))
/* dual interface */ IObjectGridSagLens;
struct __declspec(uuid("6482dd30-1a0d-4553-870c-d70cca2484b9"))
/* dual interface */ IObjectGridSagFrontBack;
struct __declspec(uuid("02e2280a-8d82-4dc8-8368-c5c21cdc6e48"))
/* dual interface */ IObjectGridSagSurface;
struct __declspec(uuid("1e78b338-0686-4b66-8a3d-810e3dcd9233"))
/* dual interface */ IObjectHexagonalLensletArray;
struct __declspec(uuid("b4a660ae-cd15-4ae3-a830-5b4a879a619c"))
/* dual interface */ IObjectHologramLens;
struct __declspec(uuid("b75df9fb-85bd-41b4-9f1d-22c463cc2d33"))
/* dual interface */ IObjectHologramSurface;
struct __declspec(uuid("9a7f656d-cc09-4041-ace2-2efff884d3cc"))
/* dual interface */ IObjectJonesMatrix;
struct __declspec(uuid("da272a3e-85eb-4523-927c-b5a5b4d8aec7"))
/* dual interface */ IObjectLensletArray1;
struct __declspec(uuid("53e73223-7faf-4a93-816d-26e82ac28d4a"))
/* dual interface */ IObjectLensletArray2;
struct __declspec(uuid("06604887-b8ac-4337-9c48-bac64ec4bae7"))
/* dual interface */ IObjectMEMS;
struct __declspec(uuid("4601d5c8-3836-43d9-b1e8-847084474c3e"))
/* dual interface */ IObjectNullObject;
struct __declspec(uuid("fe577194-fb8a-4f4b-b087-042464b9c0fd"))
/* dual interface */ IObjectOddAsphereLens;
struct __declspec(uuid("883d0904-48c1-4e87-b34f-7983a3240693"))
/* dual interface */ IObjectParaxialLens;
struct __declspec(uuid("28ea36c2-799d-4a05-9f57-1a16b9bc78ea"))
/* dual interface */ IObjectPolygon;
struct __declspec(uuid("35cbdaaf-3e6f-401c-841d-4607fd22c774"))
/* dual interface */ IObjectRayRotator;
struct __declspec(uuid("e957786b-0e7a-4241-9a8b-d917261f1606"))
/* dual interface */ IObjectRectangularCorner;
struct __declspec(uuid("c456c957-2a2d-4104-b9f9-99f2e8a10a22"))
/* dual interface */ IObjectRectangle;
struct __declspec(uuid("934c37c2-f5f4-4c2c-87d0-755549b8bba9"))
/* dual interface */ IObjectRectangularPipe;
struct __declspec(uuid("3c05ae4c-d93f-4cdc-b29f-850735b5d7d1"))
/* dual interface */ IObjectRectangularPipeGrating;
struct __declspec(uuid("8e621ffa-9c58-4ae6-9d20-139a6afa844e"))
/* dual interface */ IObjectRectangularRoof;
struct __declspec(uuid("30383e41-43a8-4fe7-917f-693b634fd552"))
/* dual interface */ IObjectRectangularTorusSurface;
struct __declspec(uuid("973d5acf-4113-4c4e-836a-7895ffed9faf"))
/* dual interface */ IObjectRectangularTorusVolume;
struct __declspec(uuid("46ba1c70-4a75-472a-9466-86b4d84766ef"))
/* dual interface */ IObjectRectangularVolume;
struct __declspec(uuid("6b8d2679-5761-42b9-9a01-9748bf087f18"))
/* dual interface */ IObjectRectangularVolumeGrating;
struct __declspec(uuid("e1293b52-cf67-4c1b-8be5-6126ce251dcf"))
/* dual interface */ IObjectReverseRadianceDetector;
struct __declspec(uuid("987425ff-127c-4307-8bc9-c4c70b7a349e"))
/* dual interface */ IObjectReverseRadianceTarget;
struct __declspec(uuid("4d155209-af86-4313-a601-dd8aba50f9fd"))
/* dual interface */ IObjectSlide;
struct __declspec(uuid("d4af8c1f-8096-4485-8a28-8f6b98840073"))
/* dual interface */ IObjectSources;
struct __declspec(uuid("d7ee325c-43f7-4252-86ed-1320a91df952"))
/* dual interface */ IObjectSourceDiffractive;
struct __declspec(uuid("147e5301-cb17-4603-b701-cb0613c77a7d"))
/* dual interface */ IObjectSourceDiode;
struct __declspec(uuid("f315e80d-a292-4c1a-b437-109068257921"))
/* dual interface */ IObjectSourceDLL;
struct __declspec(uuid("86d2086c-0b12-41a9-a961-1b4d249da8db"))
/* dual interface */ IObjectSourceEllipse;
struct __declspec(uuid("9045ceef-1e8a-4cc2-81c9-44402d6ac522"))
/* dual interface */ IObjectSourceEULUMDATFile;
struct __declspec(uuid("af9feb1a-eeaf-43cf-8701-38a968c0deb8"))
/* dual interface */ IObjectSourceFilament;
struct __declspec(uuid("34e6bfd3-e92d-4abf-8ea2-295c1e2082c2"))
/* dual interface */ IObjectSourceFile;
struct __declspec(uuid("60ac7ed2-27d5-47c8-94f8-71ee885509eb"))
/* dual interface */ IObjectSourceGaussian;
struct __declspec(uuid("7effea2c-fdf9-46b1-b651-3743e235116b"))
/* dual interface */ IObjectSourceIESNAFile;
struct __declspec(uuid("cf07cf78-4348-4d06-8517-388bf36c18ad"))
/* dual interface */ IObjectSourceImported;
struct __declspec(uuid("d410de95-a9e9-4205-8fdf-dcd8d713e4e8"))
/* dual interface */ IObjectSourceObject;
struct __declspec(uuid("85ee2509-82c1-4a53-9509-ec3e3b71b300"))
/* dual interface */ IObjectSourcePoint;
struct __declspec(uuid("a1d9f217-bc39-450b-babc-49c7283f74b3"))
/* dual interface */ IObjectSourceRadial;
struct __declspec(uuid("a3e72872-934b-4247-9fb7-2084efe387f6"))
/* dual interface */ IObjectSourceRay;
struct __declspec(uuid("a6d76811-318f-4f84-be0e-3e4dc52be748"))
/* dual interface */ IObjectSourceRectangle;
struct __declspec(uuid("20dbcd39-a76f-4952-bca3-df98d05a747a"))
/* dual interface */ IObjectSourceTube;
struct __declspec(uuid("d63a5d2d-4c53-4c79-b18e-91538e3b306d"))
/* dual interface */ IObjectSourceTwoAngle;
struct __declspec(uuid("5401b936-c6ac-4f58-9b4b-346632c47ef1"))
/* dual interface */ IObjectSourceVolumeCylindrical;
struct __declspec(uuid("d70afca7-b975-4508-9911-32848e1ec43c"))
/* dual interface */ IObjectSourceVolumeElliptical;
struct __declspec(uuid("8063d292-d7e5-4b3c-bb64-e9e2c0a1d45f"))
/* dual interface */ IObjectSourceVolumeRectangular;
struct __declspec(uuid("2d5817f9-5fc2-4444-a9c9-8b081141b515"))
/* dual interface */ IObjectSphere;
struct __declspec(uuid("28e5d9fd-5ae4-42f9-9295-85c044d16018"))
/* dual interface */ IObjectStandardLens;
struct __declspec(uuid("9b823eb9-d594-4bd4-8f4a-9b8b610a281d"))
/* dual interface */ IObjectStandardSurface;
struct __declspec(uuid("7af8b68a-3a0d-48b8-9221-0bc69bc579d1"))
/* dual interface */ IObjectSwept;
struct __declspec(uuid("b3a1ff25-9792-41a9-bd05-ee14fdd91e56"))
/* dual interface */ IObjectTabulatedFactedRadial;
struct __declspec(uuid("58d19c07-4bcd-454f-9b6d-3bfd2bdcb69a"))
/* dual interface */ IObjectTabulatedFactedToroid;
struct __declspec(uuid("b863a269-f995-45f2-9e86-27edaf0c2e19"))
/* dual interface */ IObjectTabulatedFrenselRadial;
struct __declspec(uuid("42809cc8-2a4f-47a6-be2f-536a1fbf2a73"))
/* dual interface */ IObjectToroidalHologram;
struct __declspec(uuid("9fd97b21-e3fa-420c-a2aa-f4c334e335a1"))
/* dual interface */ IObjectToroidalLens;
struct __declspec(uuid("6be73df2-eef7-4ea3-bf3d-31c94a9256cc"))
/* dual interface */ IObjectToroidalSurface;
struct __declspec(uuid("a99d9e88-002c-4e03-9309-f7fa4c8df644"))
/* dual interface */ IObjectToroidalSurfaceOddASphere;
struct __declspec(uuid("2af24471-07c3-43b5-ad4f-f83eff96e05f"))
/* dual interface */ IObjectTorusSurface;
struct __declspec(uuid("3554ff4c-bd49-4c99-b2d9-5ee4ad3eeeae"))
/* dual interface */ IObjectTorusVolume;
struct __declspec(uuid("9b484983-5e50-436b-92a9-3c85ae00adf2"))
/* dual interface */ IObjectTriangularCorner;
struct __declspec(uuid("ab6278ce-59d9-427e-901d-e1aac0f5e79d"))
/* dual interface */ IObjectTriangle;
struct __declspec(uuid("a57f18a3-49e5-4712-85e0-9cff999de110"))
/* dual interface */ IObjectUserDefinedObject;
struct __declspec(uuid("889aaec4-940f-4dc8-bd64-916fc95bad36"))
/* dual interface */ IObjectWolterSurface;
struct __declspec(uuid("59f1acde-da78-48ad-88f1-f07aff3ea892"))
/* dual interface */ IObjectZernikeSurface;
enum RaysIgnoreObjectType;
enum DetectorShowAsType;
struct __declspec(uuid("827091cf-1eff-4fa6-8200-f3777b9a2d7a"))
/* dual interface */ INCETypeData;
enum DrawingResolutionType;
struct __declspec(uuid("eda57d36-7943-40e2-bc76-97e750de7b55"))
/* dual interface */ INCEDrawData;
enum SourceBulkScatterMode;
enum SourceSamplingMethod;
enum ArrayMode;
enum SourceColorMode;
struct __declspec(uuid("81e1b931-e1b9-4a82-b9fa-1fe8fa26fab9"))
/* dual interface */ ISourceColorSettings;
struct __declspec(uuid("6467a99c-5740-45b6-8037-1b4744bf51f5"))
/* dual interface */ ISCS_SystemWavelengths;
struct __declspec(uuid("b9e1420d-0517-4761-aa96-204651d15d40"))
/* dual interface */ ISCS_CIE1931Tristimulus;
struct __declspec(uuid("e8c13ed6-6d6f-4e79-bac3-624de5e0b279"))
/* dual interface */ ISCS_CIE1931Chromaticity;
struct __declspec(uuid("0b95a86a-e968-4749-aa2a-d78fa4abbb28"))
/* dual interface */ ISCS_CIE1931RGB;
struct __declspec(uuid("4488f86a-f688-47bd-94c4-791fbbd6903f"))
/* dual interface */ ISCS_UniformPowerSpectrum;
struct __declspec(uuid("8fd7e197-30a0-4feb-93fe-86a59cae5438"))
/* dual interface */ ISCS_D65White;
struct __declspec(uuid("41a4a8c5-4a12-4c5e-8e31-3af2e1d66da0"))
/* dual interface */ ISCS_ColorTemperature;
struct __declspec(uuid("2dd91263-5dba-4a99-ae5b-79ff80f8c751"))
/* dual interface */ ISCS_BlackBodySpectrum;
struct __declspec(uuid("11e0d2eb-7d3c-4c39-b405-9ff6db4459af"))
/* dual interface */ ISCS_SpectrumFile;
struct __declspec(uuid("806dabbc-1bc0-40b5-8e1d-d7101814c483"))
/* dual interface */ ISCS_CIE1976;
struct __declspec(uuid("436876b8-0ac5-47d3-acfb-13d389e85bf4"))
/* dual interface */ INCESourcesData;
struct __declspec(uuid("3169f0f3-a49d-4f95-8da6-d2c36f239125"))
/* dual interface */ INCECoatScatterData;
enum FaceIsType;
enum ObjectScatteringTypes;
struct __declspec(uuid("dd3cc5f0-b9d8-4db1-af39-3fcf39634d58"))
/* dual interface */ INCECoatScatterFaceData;
struct __declspec(uuid("b100f3a3-9e0f-44f3-8283-fb28b558234c"))
/* dual interface */ IObjectScatteringSettings;
struct __declspec(uuid("bffd46b0-e5f2-4e1b-861a-6bdc0deccb64"))
/* dual interface */ IOSS_None;
struct __declspec(uuid("14a5bc0c-5d5c-4bd3-ac61-08edd8ef643f"))
/* dual interface */ IOSS_Lambertian;
struct __declspec(uuid("cd1ff047-249e-4d1a-a023-96f5d95a0e0c"))
/* dual interface */ IOSS_Gaussian;
struct __declspec(uuid("6084a314-1611-46a0-b4f2-d790bdd74890"))
/* dual interface */ IOSS_ABg;
struct __declspec(uuid("b29a17c3-99e6-4da4-8ab2-e0e20f0110b7"))
/* dual interface */ IOSS_ABgFile;
struct __declspec(uuid("bc86d647-1e05-40fa-8032-2f8baee38586"))
/* dual interface */ IOSS_BSDF;
struct __declspec(uuid("e311eeae-528a-40ba-b3d5-d1dd88205471"))
/* dual interface */ IOSS_User;
struct __declspec(uuid("3cb86c69-fa04-4de3-b398-0f8c8fe9439c"))
/* dual interface */ IOSS_ISScatterCatalog;
enum ScatterToType;
struct __declspec(uuid("b695bbd2-c9e3-4082-93c9-0cb8c1653734"))
/* dual interface */ IImportanceSamplingSettings;
struct __declspec(uuid("ea39fbfa-23b6-45b5-bf83-fc2d6996eb72"))
/* dual interface */ INCEScatterToData;
enum VolumePhysicsModelType;
struct __declspec(uuid("35100590-d2f0-4f87-b8f4-84988847b8b0"))
/* dual interface */ INCEVolumePhysicsData;
struct __declspec(uuid("cc8284c5-3cda-4785-b248-ca5bbef127a9"))
/* dual interface */ IVolumePhysicsModelSettings;
struct __declspec(uuid("fb758ebf-9794-4f94-9646-3f65406993d3"))
/* dual interface */ IVPMS_None;
struct __declspec(uuid("d81cd05a-39a4-434a-8b00-9d5eaf5af30e"))
/* dual interface */ IVMPS_AngleScattering;
struct __declspec(uuid("63b4ac7d-5988-4ceb-9b85-949efbd07d63"))
/* dual interface */ IVMPS_DLLDefinedScattering;
enum EfficiencySpectrumType;
struct __declspec(uuid("4690a6e3-2b9d-40c5-95d8-5dea4f909da6"))
/* dual interface */ IVMPS_PhotoluminscenceModel;
enum NCEIndexType;
struct __declspec(uuid("1a128ab2-2e65-4cad-aa6b-a591c5d38798"))
/* dual interface */ INCEIndexData;
struct __declspec(uuid("4a45cb97-5f3a-48aa-9bde-3702abc4e9a6"))
/* dual interface */ IIndexModelSettings;
struct __declspec(uuid("13f8db2c-efcd-43de-968f-a0756be21d37"))
/* dual interface */ IIMS_Isotropic;
enum BirefringentMode;
enum BirefringentReflections;
struct __declspec(uuid("dcc6b678-7f58-47ea-9e31-30edb1778f94"))
/* dual interface */ IIMS_Birefringent;
struct __declspec(uuid("2ae36042-76a4-4365-9703-0328bf5e7f16"))
/* dual interface */ IIMS_GRIN;
enum DiffractionSplitType;
struct __declspec(uuid("ab95ab66-d90d-4489-b06b-d9b15154aa92"))
/* dual interface */ INCEDiffractionData;
struct __declspec(uuid("2bc92086-becc-409d-8d49-c059ea849246"))
/* dual interface */ INCECADData;
enum SurfaceType;
enum SurfaceColumn;
enum ConversionOrder;
enum InterpolationMethod;
enum QTypes;
enum CoordinateConversionResult;
enum PupilApodizationType;
struct __declspec(uuid("2850046c-592f-4d0f-bce4-186b95ba2d7f"))
/* dual interface */ ILensDataEditor;
struct __declspec(uuid("fd772d17-ca89-417d-a292-51f448bde81f"))
/* dual interface */ ISurfaceTypeSettings;
struct __declspec(uuid("774c8955-b4d3-4232-95ce-3b4cd460e8b3"))
/* dual interface */ ILDERow;
struct __declspec(uuid("33c05440-fbef-4efb-8e0d-d1123f200d4f"))
/* dual interface */ ISurface;
struct __declspec(uuid("3716860f-4817-4480-b79e-a16ebdfa6e6f"))
/* dual interface */ ISurfaceXYPolynomial;
struct __declspec(uuid("751c6d6a-bd6c-4bb1-997f-2a48973a84de"))
/* dual interface */ ISurfaceNthOrderTerms;
struct __declspec(uuid("a518ff41-058e-4081-93bd-fadac1914861"))
/* dual interface */ ISurfaceNthEvenOrderTerms;
struct __declspec(uuid("7b119854-b3c6-49c9-a076-c5dd23d04f14"))
/* dual interface */ ISurfaceNthThickness;
struct __declspec(uuid("beaa3da7-a16d-4ac7-a7e6-ca2ef2abfc9e"))
/* dual interface */ ISurfaceCoeff_P_NthPower;
struct __declspec(uuid("d1f2452c-ed16-4649-aa1a-f6e44b4d6f82"))
/* dual interface */ ISurfaceCoeff_R_NthPower;
struct __declspec(uuid("5e588941-4723-4bde-ab61-a0ec79a37043"))
/* dual interface */ ISurfaceCoeff_P_NthEvenPower;
struct __declspec(uuid("8631f57e-cd98-4062-9b31-a2156d525cb8"))
/* dual interface */ ISurfaceCoeff_R_NthEvenPower;
struct __declspec(uuid("3f83b66b-ec9f-444e-92b5-137ef364a275"))
/* dual interface */ ISurfaceCoeff_X_NthEvenPower_8;
struct __declspec(uuid("6998db38-ae18-4ac5-8b21-dd15025b1ff0"))
/* dual interface */ ISurfaceCoeff_X_NthEvenPower;
struct __declspec(uuid("5eb29f42-52a8-4a2d-b183-1a9c6d956e90"))
/* dual interface */ ISurfaceCoeff_Y_NthEvenPower_8;
struct __declspec(uuid("d05054e1-7aa3-4164-a7e4-3fda1e585bdb"))
/* dual interface */ ISurfaceCoeff_Y_NthEvenPower;
struct __declspec(uuid("d4347bc1-7605-4747-96f3-f6c47f023662"))
/* dual interface */ ISurfaceCoeff_X1P1X2P2_NthEvenPower;
struct __declspec(uuid("d81fc75d-9990-4b07-9960-1737e7fbed37"))
/* dual interface */ ISurfaceNthZernike;
struct __declspec(uuid("1468c9e7-0cf7-4bf8-8ad4-7a7bf86c6254"))
/* dual interface */ ISurfaceAPBC;
struct __declspec(uuid("ca5f5e13-ed59-4e80-9375-d93de6bd1981"))
/* dual interface */ ISurfaceStandard;
struct __declspec(uuid("735bc140-2235-47e0-b96e-bbfcb244754a"))
/* dual interface */ ISurfaceABCD;
struct __declspec(uuid("a6195fdb-56fe-4e67-b64b-e5fc6526fe59"))
/* dual interface */ ISurfaceAlternateEven;
struct __declspec(uuid("7014f570-7e9b-4360-b326-5cbae6c63923"))
/* dual interface */ ISurfaceAlternateOdd;
struct __declspec(uuid("aae74124-ae40-4bbd-8ad5-4bbbe212412c"))
/* dual interface */ ISurfaceAnnularZernikeSag;
struct __declspec(uuid("71430e2e-4c44-4116-a412-4f31bc6d3889"))
/* dual interface */ ISurfaceAtmospheric;
struct __declspec(uuid("fada3847-9fd9-4c02-8a6a-3af139e5a4e2"))
/* dual interface */ ISurfaceBiconic;
struct __declspec(uuid("17a514fc-acea-4b5a-8ec9-c61119437b6d"))
/* dual interface */ ISurfaceBiconicZernike;
struct __declspec(uuid("6705dcae-ed22-44f5-8349-f18b5ef13c85"))
/* dual interface */ ISurfaceBinary1;
struct __declspec(uuid("88a297a5-206c-4c82-94e0-a572de1d40ed"))
/* dual interface */ ISurfaceBinary2;
struct __declspec(uuid("c0ee1b60-5999-4e1f-9410-bb67946661a1"))
/* dual interface */ ISurfaceBinary3;
struct __declspec(uuid("5fa944ed-1a9d-414c-b59c-e6d401dd825c"))
/* dual interface */ ISurfaceBinary4;
struct __declspec(uuid("f8bbb68a-6313-49d2-ac10-6846eabfa580"))
/* dual interface */ ISurfaceBirefringentIn;
struct __declspec(uuid("484c1b7b-f53f-4085-968c-658909dd3989"))
/* dual interface */ ISurfaceBirefringentOut;
struct __declspec(uuid("be3a6768-2025-41c5-9619-dcc35e290b2f"))
/* dual interface */ ISurfaceBlackBoxLens;
struct __declspec(uuid("eb95a026-36eb-4259-baa1-b3b70ce62d53"))
/* dual interface */ ISurfaceChebyShv;
struct __declspec(uuid("7089cb24-8485-4d35-b982-17a1ee5ef589"))
/* dual interface */ ISurfaceConjugate;
struct __declspec(uuid("9aa2d1da-633c-49bd-ab74-403ffb266f22"))
/* dual interface */ ISurfaceCoordinateBreak;
struct __declspec(uuid("70a721dc-d8d3-4a71-a824-b9cb084abd49"))
/* dual interface */ ISurfaceCubicSpline;
struct __declspec(uuid("da4946d0-57f2-4cb7-b579-f3d15faadbf9"))
/* dual interface */ ISurfaceCylinderFrensel;
struct __declspec(uuid("1cd33aa5-dcbd-4dd3-9277-19684f0f2b02"))
/* dual interface */ ISurfaceData;
struct __declspec(uuid("b5ff855c-b239-4a3e-bb70-addf3d206918"))
/* dual interface */ ISurfaceDiffractionGrating;
struct __declspec(uuid("29bc3501-e30b-423a-8c3b-9c3542ae64cd"))
/* dual interface */ ISurfaceEllipticalGrating1;
struct __declspec(uuid("a0357781-22c6-4ffb-8531-8a6e2dcef409"))
/* dual interface */ ISurfaceEllipticalGrating2;
struct __declspec(uuid("5127f082-f2be-45ad-8c01-38b62b276047"))
/* dual interface */ ISurfaceEvenAspheric;
struct __declspec(uuid("299f052e-ca77-42f6-a140-094a44389601"))
/* dual interface */ ISurfaceExtendedToroidalGrating;
struct __declspec(uuid("e0550c75-793e-4c71-a8f0-2e4eebf6f9c8"))
/* dual interface */ ISurfaceExtendedAsphere;
struct __declspec(uuid("1d657164-b039-42c4-a255-cb6d4a3009b0"))
/* dual interface */ ISurfaceExtendedCubicSpline;
struct __declspec(uuid("76bf0805-5cfb-4d0a-8be6-8fd684e27736"))
/* dual interface */ ISurfaceExtendedFresnel;
struct __declspec(uuid("928a96db-9539-44a9-9570-2e21d62ffc93"))
/* dual interface */ ISurfaceExtendedOddAsphere;
struct __declspec(uuid("cebc6371-ecae-47ad-b875-5f48e1b9d53c"))
/* dual interface */ ISurfaceExtendedPolynomial;
struct __declspec(uuid("f9b4bed3-b199-48de-8424-e92253c75aef"))
/* dual interface */ ISurfaceFresnel;
struct __declspec(uuid("79a508de-1a94-4842-88e3-ff48c7b3d59b"))
/* dual interface */ ISurfaceGeneralizedFresnel;
struct __declspec(uuid("4d79895b-2f63-4707-b232-abd023ee5112"))
/* dual interface */ ISurfaceGradient1;
struct __declspec(uuid("a6c133cd-6960-4b33-bc23-93b8bec1356d"))
/* dual interface */ ISurfaceGradient2;
struct __declspec(uuid("ca871284-ced0-44ac-8fa3-6871297e1ad3"))
/* dual interface */ ISurfaceGradient3;
struct __declspec(uuid("dca5be1a-f3e2-473f-a894-e0984b83f37d"))
/* dual interface */ ISurfaceGradient4;
struct __declspec(uuid("85dd0f2d-6dab-4dd1-a7cd-f24ac999d31c"))
/* dual interface */ ISurfaceGradient5;
struct __declspec(uuid("7a02ebbe-8a01-46a6-9b1d-a5bb25cfae51"))
/* dual interface */ ISurfaceGradient6;
struct __declspec(uuid("e1165182-191c-4b82-8537-a1cbb92a1bd4"))
/* dual interface */ ISurfaceGradient7;
struct __declspec(uuid("c7ce2277-d2ea-4b8f-b367-bb57d503a456"))
/* dual interface */ ISurfaceGradient9;
struct __declspec(uuid("1773e32a-67c3-4b2f-add4-ca5034dc49fc"))
/* dual interface */ ISurfaceGradient10;
struct __declspec(uuid("d0c34ad0-2223-41d0-a4d3-c1880bd31738"))
/* dual interface */ ISurfaceGradient12;
struct __declspec(uuid("79563ead-6fcf-42da-acb5-edc78871a64e"))
/* dual interface */ ISurfaceGradium;
struct __declspec(uuid("cc9eb238-1a7f-4956-8937-efa8364f0b26"))
/* dual interface */ ISurfaceGridGradient;
struct __declspec(uuid("16a5ed54-63d9-46cc-9fa7-23ec4ff018cc"))
/* dual interface */ ISurfaceGridPhase;
struct __declspec(uuid("6412ce38-37db-44ce-8b6c-9dacb606e4f7"))
/* dual interface */ ISurfaceGridSag;
struct __declspec(uuid("6c25eb5c-a7d3-4405-83d8-efd97b535947"))
/* dual interface */ ISurfaceHologram1;
struct __declspec(uuid("b2266597-4aa5-44b0-9c17-edc542416e40"))
/* dual interface */ ISurfaceHologram2;
struct __declspec(uuid("33a7f8da-435d-40d9-813b-7f196bc86812"))
/* dual interface */ ISurfaceIrregular;
struct __declspec(uuid("23270c40-697b-47d9-b42a-222cd2ee4346"))
/* dual interface */ ISurfaceJonesMatrix;
struct __declspec(uuid("b26d7745-8e6f-4889-943b-07c58e12c473"))
/* dual interface */ ISurfaceNonSequential;
struct __declspec(uuid("55f85aed-64ef-4ff8-a434-32ec54adf6be"))
/* dual interface */ ISurfaceOddAsphere;
struct __declspec(uuid("8c204bc8-8235-425d-b8ed-254f8441411e"))
/* dual interface */ ISurfaceOddCosine;
struct __declspec(uuid("e69eecd5-7a79-477b-b470-95b89a243f3c"))
/* dual interface */ ISurfaceOpticallyFabricatedHologram;
struct __declspec(uuid("da1d83d8-292e-4668-ab0c-4c8b5540c0a5"))
/* dual interface */ ISurfaceParaxial;
struct __declspec(uuid("ee363065-bc12-4ab2-b9d1-ecf9d3043649"))
/* dual interface */ ISurfaceParaxialXY;
struct __declspec(uuid("d9e22f13-027d-456a-aa31-70f1b3f5a8bf"))
/* dual interface */ ISurfacePeriodic;
struct __declspec(uuid("5b23531c-ec42-4632-a63e-ef8b7beaf336"))
/* dual interface */ ISurfacePolynomial;
struct __declspec(uuid("e5dc1cac-0ab3-474b-ab7e-376f274feaf3"))
/* dual interface */ ISurfaceQTypeAsphere;
struct __declspec(uuid("cf433230-1bdb-48c4-8ecd-2e2682dc39a7"))
/* dual interface */ ISurfaceRadialGrating;
struct __declspec(uuid("a06c9bd1-d5c5-4545-a308-23caf5c4f3f6"))
/* dual interface */ ISurfaceRadialNurbs;
struct __declspec(uuid("f353b11d-a685-4e86-8855-0305b1cc8680"))
/* dual interface */ ISurfaceRetroReflect;
struct __declspec(uuid("fbcd55b0-8619-4686-938f-c29bcb3f2576"))
/* dual interface */ ISurfaceSlide;
struct __declspec(uuid("1863ea26-9cde-4946-83de-392ce81ff3b0"))
/* dual interface */ ISurfaceSuperconic;
struct __declspec(uuid("fa2ca9de-880d-4db5-a67d-cce119cc79f7"))
/* dual interface */ ISurfaceTilted;
struct __declspec(uuid("b60cc842-f659-496e-8c1f-71b4b0ea56c4"))
/* dual interface */ ISurfaceToroidal;
struct __declspec(uuid("2f66201f-95c9-4b86-8724-bfff2ff7a75b"))
/* dual interface */ ISurfaceToroidalGrat;
struct __declspec(uuid("bc6ab6ca-1619-43d4-903d-85cd29c01590"))
/* dual interface */ ISurfaceToroidalHologram;
struct __declspec(uuid("513e85b8-b351-4a52-985b-d9840367c344"))
/* dual interface */ ISurfaceToroidalNurbs;
struct __declspec(uuid("05448d1b-31c0-4397-ba47-ed2381592847"))
/* dual interface */ ISurfaceVariableLineSpaceGrating;
struct __declspec(uuid("920c1623-df44-4b49-a07b-fc1f08e3b0d3"))
/* dual interface */ ISurfaceZernikeAnnularPhase;
struct __declspec(uuid("233dba22-a8dd-48c8-a8bc-22a5c225c14f"))
/* dual interface */ ISurfaceZernikeFringePhase;
struct __declspec(uuid("747d3c2c-82d3-4841-b4aa-b2216486a53f"))
/* dual interface */ ISurfaceZernikeFringeSag;
struct __declspec(uuid("98de5872-a983-4f6d-b0c8-2e8c2c2318b7"))
/* dual interface */ ISurfaceZernikeStandardPhase;
struct __declspec(uuid("e2bf4d28-6166-4035-875e-394f1f658806"))
/* dual interface */ ISurfaceZernikeStandardSag;
struct __declspec(uuid("69807bda-440d-4f8c-a58d-1fb5cce87be2"))
/* dual interface */ ISurfaceZonePlate;
struct __declspec(uuid("b671c677-b21f-49e9-bc66-0e4f1719596c"))
/* dual interface */ ILDETypeData;
enum SurfaceEdgeDraw;
enum SubstrateType;
struct __declspec(uuid("d7a6a815-bb18-4a8a-83f7-2d99611b9bfb"))
/* dual interface */ ILDEDrawData;
enum SurfaceApertureTypes;
struct __declspec(uuid("727c3391-398e-4ef3-9045-a58d5ff1028e"))
/* dual interface */ ILDEApertureData;
struct __declspec(uuid("22c145ff-5289-4675-859e-7e182a342965"))
/* dual interface */ ISurfaceApertureType;
struct __declspec(uuid("121ce465-077c-4e65-807b-c0bdb12b7d57"))
/* dual interface */ ISurfaceApertureNone;
struct __declspec(uuid("ccaae35d-ae2a-4964-ad2b-50627010f8c8"))
/* dual interface */ ISurfaceApertureCircular;
struct __declspec(uuid("a6e2842e-5ace-4e68-b475-c00bca74f1e9"))
/* dual interface */ ISurfaceApertureUser;
struct __declspec(uuid("8be6c8aa-543b-4b54-b33f-7b27b49668e0"))
/* dual interface */ ISurfaceApertureSpider;
struct __declspec(uuid("e4ece7a6-63cb-474b-854d-51c168845ea2"))
/* dual interface */ ISurfaceApertureRectangular;
struct __declspec(uuid("af23adf0-e641-43af-b054-a27dd333f357"))
/* dual interface */ ISurfaceApertureElliptical;
struct __declspec(uuid("041c78b9-c959-4788-81e4-295647d14c9b"))
/* dual interface */ ISurfaceApertureFloating;
enum SurfaceScatteringTypes;
struct __declspec(uuid("1a1527af-00a2-4f51-a8b6-1cfeda81acca"))
/* dual interface */ ILDEScatteringData;
struct __declspec(uuid("40ff1060-03ac-41e4-95f6-667c6c40295b"))
/* dual interface */ ISurfaceScatteringType;
struct __declspec(uuid("e783e16f-0674-4638-81c9-d6f9bcf19b64"))
/* dual interface */ ISurfaceScatteringNone;
struct __declspec(uuid("0595d2ee-f1d1-41a4-bd67-28543cf7c1a3"))
/* dual interface */ ISurfaceScatteringLambertian;
struct __declspec(uuid("4bdd3e74-b63c-415e-936b-2cc27bbda53c"))
/* dual interface */ ISurfaceScatteringGaussian;
struct __declspec(uuid("84385ea1-84d8-4fa0-aeae-11f5bacc0ada"))
/* dual interface */ ISurfaceScatteringABg;
struct __declspec(uuid("fc24ce3a-8b8d-4570-88ac-dda6887c7aca"))
/* dual interface */ ISurfaceScatteringABgFile;
struct __declspec(uuid("3873506b-48da-4ac5-8544-d63a88659fb5"))
/* dual interface */ ISurfaceScatteringBSDF;
struct __declspec(uuid("e4942d08-f3fe-4f93-94e1-c28f4d3aafce"))
/* dual interface */ ISurfaceScatteringUser;
struct __declspec(uuid("feb4d289-6e0e-4031-9435-848b3d2402bc"))
/* dual interface */ ISurfaceScatteringCatalog;
enum TiltDecenterOrderType;
enum TiltDecenterPickupType;
enum CoordinateReturnType;
struct __declspec(uuid("8b72b0c2-8224-4112-8d46-da416ff6d23d"))
/* dual interface */ ILDETiltDecenterData;
enum PilotRadiusMode;
enum XYSampling;
struct __declspec(uuid("8c61c999-6da6-423b-a09e-76b5100af9ba"))
/* dual interface */ ILDEPhysicalOpticsData;
struct __declspec(uuid("5c60fb77-89f2-4de6-bb1a-3b146036ccd7"))
/* dual interface */ ILDECoatingData;
enum CoatingStatusType;
struct __declspec(uuid("a5cdb874-fc2a-49d0-8d98-1c28f5cd39ad"))
/* dual interface */ ILDECoatingSettings;
struct __declspec(uuid("6350e10b-0f15-4b0b-bf9c-ead106d9406f"))
/* dual interface */ ILDEImportData;
enum ToleranceOperandType;
enum ToleranceColumn;
struct __declspec(uuid("62f3b7ae-2bf9-4005-90b3-d8b769436ef6"))
/* dual interface */ IToleranceDataEditor;
struct __declspec(uuid("79ebc8f8-8745-4790-8453-b42eadd3ff85"))
/* dual interface */ ITDERow;
enum MeritOperandType;
enum MeritColumn;
struct __declspec(uuid("733800f9-d6a9-4530-800e-14e31e9d34a6"))
/* dual interface */ IMeritFunctionEditor;
struct __declspec(uuid("d0e50824-eb22-4884-bfcb-99ed98c67599"))
/* dual interface */ IMFERow;
enum MultiConfigOperandType;
struct __declspec(uuid("57b4116f-8a5b-4d29-b750-443521c07e91"))
/* dual interface */ IMultiConfigEditor;
struct __declspec(uuid("ae69b825-a398-48ce-b1a8-7aa1e4435293"))
/* dual interface */ IMCERow;
enum ZemaxColor;
enum ZemaxOpacity;
struct __declspec(uuid("53fc0963-b84e-4871-a3d4-25a0a0dc2ab1"))
/* dual interface */ IVectorData;
struct __declspec(uuid("b6495ec7-f923-4090-87fe-4e6f37e0121a"))
/* dual interface */ IMatrixData;
enum SettingsDataType;
struct __declspec(uuid("42d06af0-fb89-4e98-a0e6-7b197348f699"))
/* dual interface */ ISettingsData;
enum AnalysisIDM;
struct __declspec(uuid("b96379c2-d2ce-417c-827e-7bf644637c95"))
/* dual interface */ I_Analyses;
enum ErrorType;
struct __declspec(uuid("4d96d146-624f-48ab-bee2-5c1437e9925f"))
/* dual interface */ IMessage;
struct __declspec(uuid("b8695a85-282b-4958-8b48-c71ee40f7eaa"))
/* dual interface */ IMessages;
struct __declspec(uuid("d8be2cb0-9a28-4cfc-963c-730c5fd1d054"))
/* dual interface */ IA_;
enum UserAnalysisDataType;
struct __declspec(uuid("569a0e6d-b1d4-4860-8e93-93fd9108e4ee"))
/* dual interface */ IUserAnalysisData;
struct __declspec(uuid("92525150-c2fd-467a-95f3-0c98b2a54129"))
/* dual interface */ IUser2DLineData;
enum GridPlotType;
struct __declspec(uuid("7c80a4f4-b5bf-40d2-9381-3a11f8830c4a"))
/* dual interface */ IUserGridData;
struct __declspec(uuid("070ddeb5-df6c-403f-b9e7-9c63e25cecd5"))
/* dual interface */ IUserGridRGBData;
struct __declspec(uuid("910f4534-e095-4241-9e41-3913250559a7"))
/* dual interface */ IUserTextData;
enum SurfaceCurvatureData;
enum SurfaceCurvatureCrossData;
enum SurfacePhaseData;
enum SurfaceSagData;
enum SampleSizes;
enum SampleSizes_Pow2Plus1;
enum SampleSizes_Pow2Plus1_X;
enum ShowAs;
enum DetectorViewerShowAsTypes;
enum DetectorViewerShowDataTypes;
enum HuygensSurfaceMftShowAsTypes;
enum HuygensShowAsTypes;
enum Beam;
struct __declspec(uuid("e1fba4e6-b9dc-44a4-9958-60003d26e1a0"))
/* dual interface */ IAR_;
struct __declspec(uuid("f7b1b0f1-4b73-4cb4-9a7e-73962faf4233"))
/* dual interface */ IAR_Rgb;
struct __declspec(uuid("2cac9767-602e-4b98-9700-2e4e72a69d28"))
/* dual interface */ IAR_ScatterPoint;
struct __declspec(uuid("6a0796ab-7f18-4bde-a71d-60ce339e48a0"))
/* dual interface */ IAR_ScatterPointRgb;
struct __declspec(uuid("07e9bd52-d30e-4f40-8f74-fdf29082f043"))
/* dual interface */ IAR_MetaData;
struct __declspec(uuid("037a128a-01ab-479c-bfb3-c45e92a52bec"))
/* dual interface */ IAR_HeaderData;
struct __declspec(uuid("bd067d0a-ae8d-4c84-a8bd-a8680b9fe3e8"))
/* dual interface */ IAR_XYZ;
struct __declspec(uuid("574dbe70-bb55-4a0a-bced-8d08b24c10e2"))
/* dual interface */ IAR_DataGrid;
struct __declspec(uuid("87a51042-19d2-4d01-85d4-02fff599d79a"))
/* dual interface */ IAR_DataGridRgb;
struct __declspec(uuid("5570536f-0c5f-41c9-ad2c-c56b280319e6"))
/* dual interface */ IAR_DataSeries;
struct __declspec(uuid("5c88b347-e31c-426b-9488-02e148ec2886"))
/* dual interface */ IAR_DataSeriesRgb;
struct __declspec(uuid("7b7b1d1c-1b7a-47d6-8cd5-3dbbc4b6c8a2"))
/* dual interface */ IAR_DataScatterPoints;
struct __declspec(uuid("97788734-b5df-479c-a7ad-31b647f8e6f8"))
/* dual interface */ IAR_DataScatterPointsRgb;
struct __declspec(uuid("13eb31a2-68f3-40a7-990f-1dc09be61a28"))
/* dual interface */ IAR_RayInfo;
struct __declspec(uuid("10cb0805-6d74-430f-8d18-40045ada4e43"))
/* dual interface */ IAR_RayData;
struct __declspec(uuid("04576353-2f54-425d-8ce1-b74002f0628c"))
/* dual interface */ IAR_CriticalRayData;
struct __declspec(uuid("81f3e249-59d5-468b-92eb-2b3ce7c423e4"))
/* dual interface */ IAR_CriticalRayInfo;
struct __declspec(uuid("033b7ede-0ab4-44ca-8485-f23dbfc188fb"))
/* dual interface */ IAR_SpotDataResult;
struct __declspec(uuid("a3cf12b7-6361-41c1-bce5-11b246c07227"))
/* dual interface */ IAR_SpotDataResultMatrix;
struct __declspec(uuid("b8b620e8-3c5a-4677-b44c-7e57cd8ea2c1"))
/* dual interface */ IAR_PathAnalysisData;
struct __declspec(uuid("6bf1dff7-e038-4661-be64-04f3af547816"))
/* dual interface */ IAR_PathAnalysisEntry;
struct __declspec(uuid("e1d1ed07-94c5-4268-a6fe-67c09a0fc290"))
/* dual interface */ IAS_;
struct __declspec(uuid("88f2d30a-46ac-4074-b541-2768185b9a8d"))
/* dual interface */ IAS_Field;
struct __declspec(uuid("6d82abb7-7b0e-4ea0-bc92-a94cc09768cd"))
/* dual interface */ IAS_Surface;
struct __declspec(uuid("af3381d9-0d13-4bcd-a7a7-42abb50529c0"))
/* dual interface */ IAS_Detector;
struct __declspec(uuid("5332e4e7-51de-4ef6-9d30-564f8695840c"))
/* dual interface */ IAS_Wavelength;
enum HuygensPsfTypes;
enum DetectorViewerScaleTypes;
enum PsfTypes;
enum PsfSpread;
enum Rotations;
enum Polarizations;
enum ScanTypes;
enum DisplayOption;
struct __declspec(uuid("87c59792-5ec0-4dc3-8e90-4e7e15568bcf"))
/* dual interface */ IAS_CriticalRayTracer;
struct __declspec(uuid("a6ec2613-1a0e-4b49-9aa4-88f506399fdd"))
/* dual interface */ IAS_Interferogram;
struct __declspec(uuid("5bcc6767-e4ad-4428-812a-f800aa512cf8"))
/* dual interface */ IAS_WavefrontMap;
struct __declspec(uuid("d7427a7b-cac0-41b9-8bbe-1097582183f8"))
/* dual interface */ IAS_XXXTemplateXXX;
enum ZOSAPI_Analysis_Settings_Wavefront_DataType;
enum KnifeType;
enum FoucaultShowAs;
enum Types;
struct __declspec(uuid("a2554db1-ac95-402a-b53b-283e86ca4792"))
/* dual interface */ IAS_Foucault;
struct __declspec(uuid("8f426da5-bdda-4956-ac0e-e4a6560916ca"))
/* dual interface */ IAS_SurfaceSag;
struct __declspec(uuid("26e1fb33-8e8e-4e8b-a5a6-e56581c9eda2"))
/* dual interface */ IAS_SurfacePhase;
struct __declspec(uuid("af426711-0db1-4738-8183-80fb4c8f7829"))
/* dual interface */ IAS_SurfaceCurvature;
struct __declspec(uuid("f9d33a39-c401-4e69-8cae-6f565d5de4cb"))
/* dual interface */ IAS_SurfaceSagCross;
struct __declspec(uuid("ee2e4c4c-fb5a-45f2-8e9c-67534fdc8ad9"))
/* dual interface */ IAS_SurfacePhaseCross;
struct __declspec(uuid("08e39510-9647-467c-97cf-fdaab294b6a5"))
/* dual interface */ IAS_SurfaceCurvatureCross;
enum Patterns;
enum Reference;
enum ShowScales;
enum ColorRaysBy;
struct __declspec(uuid("9ff6cd79-d587-4745-8b70-defb4e33eb7f"))
/* dual interface */ IAS_Spot;
struct __declspec(uuid("ed7a7536-63a9-4463-be65-2a062ee0d1df"))
/* dual interface */ IAS_RMSFieldMap;
enum Method;
enum FieldDensities;
enum FocusDensities;
enum WaveDensities;
enum RayDensities;
enum ReferTo;
enum Orientations;
struct __declspec(uuid("c56bc141-e5f2-4771-bef2-652eb0d5b88f"))
/* dual interface */ IAS_RMSField;
struct __declspec(uuid("c10ce9df-309e-431b-8263-5b51ea781c5e"))
/* dual interface */ IAS_RMSLambdaDiagram;
struct __declspec(uuid("ca8ea978-53f2-4fd5-953c-f9d00ae1f613"))
/* dual interface */ IAS_RMSFocus;
enum ZOSAPI_Analysis_Settings_RMS_RMSField_DataType;
enum ZOSAPI_Analysis_Settings_RMS_RMSFieldMap_DataType;
struct __declspec(uuid("c09da643-f633-4074-8f9a-f5e1306c55a9"))
/* dual interface */ IAS_DetectorViewer;
struct __declspec(uuid("f09485e3-3b98-4005-8d76-2059478de923"))
/* dual interface */ IAS_FftPsfCrossSection;
struct __declspec(uuid("90108689-029d-44f2-97f8-9ac7da84c64e"))
/* dual interface */ IAS_FftPsfLineEdgeSpread;
struct __declspec(uuid("56faf916-4711-48eb-8193-3127aad0e084"))
/* dual interface */ IAS_HuygensPsfCrossSection;
struct __declspec(uuid("f9ecd9a5-e212-4510-a438-df29c2717ee3"))
/* dual interface */ IAS_HuygensPsf;
enum PsfSampling;
enum PsfRotation;
enum FftPsfType;
struct __declspec(uuid("d32f67cc-60df-4c7d-b47c-9bc1cf384533"))
/* dual interface */ IAS_FftPsf;
struct __declspec(uuid("a97fdb1f-3d9d-473b-b452-c9c7e3e699e8"))
/* dual interface */ IAS_HuygensThroughFocusMtf;
struct __declspec(uuid("3c87ee44-c997-46c1-8788-529613e0f616"))
/* dual interface */ IAS_HuygensSurfaceMtf;
struct __declspec(uuid("5176eacf-508c-447e-9d5a-490104eaec64"))
/* dual interface */ IAS_HuygensMtfvsField;
struct __declspec(uuid("b662cb93-8103-4359-85ee-e8042b64babd"))
/* dual interface */ IAS_GeometricMtfvsField;
struct __declspec(uuid("9939d304-e27d-4091-8226-9639286750a6"))
/* dual interface */ IAS_GeometricMtfMap;
struct __declspec(uuid("a5109f82-50cc-4934-afb1-e70162997a6a"))
/* dual interface */ IAS_GeometricMtf;
struct __declspec(uuid("53e14e49-2013-4565-a500-7057bdf5fb2a"))
/* dual interface */ IAS_GeometricThroughFocusMtf;
struct __declspec(uuid("f2937106-c97d-4144-b99a-bfd738ab089b"))
/* dual interface */ IAS_FftThroughFocusMtf;
enum MtfTypes;
struct __declspec(uuid("f0cdf654-11cf-49c6-9d6a-6f61993822ab"))
/* dual interface */ IAS_FftMtf;
enum MtfDataTypes;
enum ShowAsTypes;
struct __declspec(uuid("32634f60-6b54-415b-978b-c34249771947"))
/* dual interface */ IAS_FftMtfMap;
enum SurfaceMtfTypes;
struct __declspec(uuid("07ca848e-f712-4e17-8a3c-512c3c5c99ca"))
/* dual interface */ IAS_FftSurfaceMtf;
struct __declspec(uuid("14ace4dc-676f-4b4c-8585-a5f2f0e036e4"))
/* dual interface */ IAS_FftMtfvsField;
enum HuygensMtfTypes;
struct __declspec(uuid("8b37d664-3cd9-41f3-9abf-a8ead68e56e7"))
/* dual interface */ IAS_HuygensMtf;
enum SagittalAberrationComponent;
enum TangentialAberrationComponent;
struct __declspec(uuid("eb02a480-7000-4b85-a0b9-98eab30b96a9"))
/* dual interface */ IAS_Fan;
enum GeometricLineEdgeSpreadTypes;
struct __declspec(uuid("5434f735-f258-4a1e-b16d-c1fa426c0618"))
/* dual interface */ IAS_GeometricLineEdgeSpread;
enum EncircledEnergyTypes;
enum ReferToTypes;
struct __declspec(uuid("fbfe00c5-8fca-457d-939b-96b650811e79"))
/* dual interface */ IAS_DiffractionEncircledEnergy;
struct __declspec(uuid("103dfa9d-c6c9-49df-942c-4bf5553469f3"))
/* dual interface */ IAS_GeometricEncircledEnergy;
enum ExtendedSourceTypes;
struct __declspec(uuid("e387594f-f19f-4794-8b96-835a9cde6a86"))
/* dual interface */ IAS_ExtendedSourceEncircledEnergy;
struct __declspec(uuid("7554c6d6-f76b-4671-a23e-5e89023ab1d7"))
/* dual interface */ IAS_ZernikeFringeCoefficients;
struct __declspec(uuid("8556f78b-1e22-4994-a960-508502f8a594"))
/* dual interface */ IAS_ZernikeAnnularCoefficients;
struct __declspec(uuid("71fc34ca-cd91-4711-93b0-9fc5771e33b2"))
/* dual interface */ IAS_FocalShiftDiagram;
struct __declspec(uuid("385dafbb-350f-4612-8608-748541b87b11"))
/* dual interface */ IAS_GridDistortion;
struct __declspec(uuid("a3366b2a-8c3a-4c39-bc12-0ee405bebcda"))
/* dual interface */ IAS_LateralColor;
struct __declspec(uuid("8f625b27-f93d-433d-8898-ac299a5bd653"))
/* dual interface */ IAS_LongitudinalAberration;
enum RayTraceType;
struct __declspec(uuid("da20bbdb-d41f-4532-b148-7694469c0251"))
/* dual interface */ IAS_RayTrace;
struct __declspec(uuid("66c2141c-9320-469c-85f8-b35f1147dd54"))
/* dual interface */ IAS_SeidelDiagram;
enum Distortions;
enum DisplayAsTypes;
struct __declspec(uuid("7d93126d-ae09-416a-ab2d-b10f19c0293a"))
/* dual interface */ IAS_FieldCurvatureAndDistortion;
struct __declspec(uuid("145d0aad-e5ee-442f-be24-6e2d0fb70167"))
/* dual interface */ IAS_SeidelCoefficients;
enum FieldScanDirections;
enum ZernikeCoefficientTypes;
struct __declspec(uuid("4812d1cd-db6b-4767-a14b-34d2f73366e9"))
/* dual interface */ IAS_ZernikeCoefficientsVsField;
struct __declspec(uuid("0333ec45-6aa0-4cb3-8acd-c5005282edd5"))
/* dual interface */ IAS_ZernikeStandardCoefficients;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(IConvertToNSCGroup, __uuidof(IConvertToNSCGroup));
_COM_SMARTPTR_TYPEDEF(ICriticalRaysetGenerator, __uuidof(ICriticalRaysetGenerator));
_COM_SMARTPTR_TYPEDEF(IMFCalculator, __uuidof(IMFCalculator));
_COM_SMARTPTR_TYPEDEF(IDesignLockdown, __uuidof(IDesignLockdown));
_COM_SMARTPTR_TYPEDEF(ISystemTool, __uuidof(ISystemTool));
_COM_SMARTPTR_TYPEDEF(IQuickAdjust, __uuidof(IQuickAdjust));
_COM_SMARTPTR_TYPEDEF(IQuickFocus, __uuidof(IQuickFocus));
_COM_SMARTPTR_TYPEDEF(IRestoreArchive, __uuidof(IRestoreArchive));
_COM_SMARTPTR_TYPEDEF(ICreateArchive, __uuidof(ICreateArchive));
_COM_SMARTPTR_TYPEDEF(IExportCAD, __uuidof(IExportCAD));
_COM_SMARTPTR_TYPEDEF(IScale, __uuidof(IScale));
_COM_SMARTPTR_TYPEDEF(IComputeRMSSpotSize, __uuidof(IComputeRMSSpotSize));
_COM_SMARTPTR_TYPEDEF(ITolerancing, __uuidof(ITolerancing));
_COM_SMARTPTR_TYPEDEF(ILightningTrace, __uuidof(ILightningTrace));
_COM_SMARTPTR_TYPEDEF(IRayTraceNormUnpolData, __uuidof(IRayTraceNormUnpolData));
_COM_SMARTPTR_TYPEDEF(IRayTraceDirectUnpolData, __uuidof(IRayTraceDirectUnpolData));
_COM_SMARTPTR_TYPEDEF(IRayTraceNormPolData, __uuidof(IRayTraceNormPolData));
_COM_SMARTPTR_TYPEDEF(IRayTraceDirectPolData, __uuidof(IRayTraceDirectPolData));
_COM_SMARTPTR_TYPEDEF(IRayTraceNSCData, __uuidof(IRayTraceNSCData));
_COM_SMARTPTR_TYPEDEF(IRayTraceNSCSourceData, __uuidof(IRayTraceNSCSourceData));
_COM_SMARTPTR_TYPEDEF(IBatchRayTrace, __uuidof(IBatchRayTrace));
_COM_SMARTPTR_TYPEDEF(IZRDReaderResults, __uuidof(IZRDReaderResults));
_COM_SMARTPTR_TYPEDEF(IZRDReader, __uuidof(IZRDReader));
_COM_SMARTPTR_TYPEDEF(ILocalOptimization, __uuidof(ILocalOptimization));
_COM_SMARTPTR_TYPEDEF(IGlobalOptimization, __uuidof(IGlobalOptimization));
_COM_SMARTPTR_TYPEDEF(IHammerOptimization, __uuidof(IHammerOptimization));
_COM_SMARTPTR_TYPEDEF(IWizard, __uuidof(IWizard));
_COM_SMARTPTR_TYPEDEF(INSCWizard, __uuidof(INSCWizard));
_COM_SMARTPTR_TYPEDEF(INSCOptimizationWizard, __uuidof(INSCOptimizationWizard));
_COM_SMARTPTR_TYPEDEF(IImageData, __uuidof(IImageData));
_COM_SMARTPTR_TYPEDEF(INSCBitmapWizard, __uuidof(INSCBitmapWizard));
_COM_SMARTPTR_TYPEDEF(INSCRoadwayLightingWizard, __uuidof(INSCRoadwayLightingWizard));
_COM_SMARTPTR_TYPEDEF(ISEQOptimizationWizard, __uuidof(ISEQOptimizationWizard));
_COM_SMARTPTR_TYPEDEF(IToleranceWizard, __uuidof(IToleranceWizard));
_COM_SMARTPTR_TYPEDEF(INSCToleranceWizard, __uuidof(INSCToleranceWizard));
_COM_SMARTPTR_TYPEDEF(ISEQToleranceWizard, __uuidof(ISEQToleranceWizard));
_COM_SMARTPTR_TYPEDEF(ISurfaceSelection, __uuidof(ISurfaceSelection));
_COM_SMARTPTR_TYPEDEF(ISDApertureData, __uuidof(ISDApertureData));
_COM_SMARTPTR_TYPEDEF(ISDEnvironmentData, __uuidof(ISDEnvironmentData));
_COM_SMARTPTR_TYPEDEF(ISDPolarizationData, __uuidof(ISDPolarizationData));
_COM_SMARTPTR_TYPEDEF(ISDAdvancedData, __uuidof(ISDAdvancedData));
_COM_SMARTPTR_TYPEDEF(ISDRayAimingData, __uuidof(ISDRayAimingData));
_COM_SMARTPTR_TYPEDEF(ISDMaterialCatalogData, __uuidof(ISDMaterialCatalogData));
_COM_SMARTPTR_TYPEDEF(ISDTitleNotes, __uuidof(ISDTitleNotes));
_COM_SMARTPTR_TYPEDEF(ISDFiles, __uuidof(ISDFiles));
_COM_SMARTPTR_TYPEDEF(ISDUnitsData, __uuidof(ISDUnitsData));
_COM_SMARTPTR_TYPEDEF(IWavelength, __uuidof(IWavelength));
_COM_SMARTPTR_TYPEDEF(IWavelengths, __uuidof(IWavelengths));
_COM_SMARTPTR_TYPEDEF(IField, __uuidof(IField));
_COM_SMARTPTR_TYPEDEF(IFields, __uuidof(IFields));
_COM_SMARTPTR_TYPEDEF(ISDNonSeqData, __uuidof(ISDNonSeqData));
_COM_SMARTPTR_TYPEDEF(ISDNamedFilters, __uuidof(ISDNamedFilters));
_COM_SMARTPTR_TYPEDEF(ISystemData, __uuidof(ISystemData));
_COM_SMARTPTR_TYPEDEF(ISolveNone, __uuidof(ISolveNone));
_COM_SMARTPTR_TYPEDEF(ISolveFixed, __uuidof(ISolveFixed));
_COM_SMARTPTR_TYPEDEF(ISolveVariable, __uuidof(ISolveVariable));
_COM_SMARTPTR_TYPEDEF(ISolveZPLMacro, __uuidof(ISolveZPLMacro));
_COM_SMARTPTR_TYPEDEF(ISolveMarginalRayAngle, __uuidof(ISolveMarginalRayAngle));
_COM_SMARTPTR_TYPEDEF(ISolveMarginalRayHeight, __uuidof(ISolveMarginalRayHeight));
_COM_SMARTPTR_TYPEDEF(ISolveChiefRayAngle, __uuidof(ISolveChiefRayAngle));
_COM_SMARTPTR_TYPEDEF(ISolveMarginalRayNormal, __uuidof(ISolveMarginalRayNormal));
_COM_SMARTPTR_TYPEDEF(ISolveChiefRayNormal, __uuidof(ISolveChiefRayNormal));
_COM_SMARTPTR_TYPEDEF(ISolveAplanatic, __uuidof(ISolveAplanatic));
_COM_SMARTPTR_TYPEDEF(ISolveElementPower, __uuidof(ISolveElementPower));
_COM_SMARTPTR_TYPEDEF(ISolveCocentricSurface, __uuidof(ISolveCocentricSurface));
_COM_SMARTPTR_TYPEDEF(ISolveCocentricRadius, __uuidof(ISolveCocentricRadius));
_COM_SMARTPTR_TYPEDEF(ISolveFNumber, __uuidof(ISolveFNumber));
_COM_SMARTPTR_TYPEDEF(ISolveChiefRayHeight, __uuidof(ISolveChiefRayHeight));
_COM_SMARTPTR_TYPEDEF(ISolveEdgeThickness, __uuidof(ISolveEdgeThickness));
_COM_SMARTPTR_TYPEDEF(ISolveOpticalPathDifference, __uuidof(ISolveOpticalPathDifference));
_COM_SMARTPTR_TYPEDEF(ISolvePosition, __uuidof(ISolvePosition));
_COM_SMARTPTR_TYPEDEF(ISolveCompensator, __uuidof(ISolveCompensator));
_COM_SMARTPTR_TYPEDEF(ISolveCenterOfCurvature, __uuidof(ISolveCenterOfCurvature));
_COM_SMARTPTR_TYPEDEF(ISolvePupilPosition, __uuidof(ISolvePupilPosition));
_COM_SMARTPTR_TYPEDEF(ISolveMaterialModel, __uuidof(ISolveMaterialModel));
_COM_SMARTPTR_TYPEDEF(ISolveMaterialSubstitute, __uuidof(ISolveMaterialSubstitute));
_COM_SMARTPTR_TYPEDEF(ISolveMaterialOffset, __uuidof(ISolveMaterialOffset));
_COM_SMARTPTR_TYPEDEF(ISolveAutomatic, __uuidof(ISolveAutomatic));
_COM_SMARTPTR_TYPEDEF(ISolveMaximum, __uuidof(ISolveMaximum));
_COM_SMARTPTR_TYPEDEF(ISolvePickupChiefRay, __uuidof(ISolvePickupChiefRay));
_COM_SMARTPTR_TYPEDEF(ISolveConfigPickup, __uuidof(ISolveConfigPickup));
_COM_SMARTPTR_TYPEDEF(ISolveThermalPickup, __uuidof(ISolveThermalPickup));
_COM_SMARTPTR_TYPEDEF(ISolveObjectPickup, __uuidof(ISolveObjectPickup));
_COM_SMARTPTR_TYPEDEF(IObjectTypeSettings, __uuidof(IObjectTypeSettings));
_COM_SMARTPTR_TYPEDEF(IFaceData, __uuidof(IFaceData));
_COM_SMARTPTR_TYPEDEF(IObjectDetector, __uuidof(IObjectDetector));
_COM_SMARTPTR_TYPEDEF(IObjectCADPartAutodeskInventor, __uuidof(IObjectCADPartAutodeskInventor));
_COM_SMARTPTR_TYPEDEF(IObjectCADPartCreoParametric, __uuidof(IObjectCADPartCreoParametric));
_COM_SMARTPTR_TYPEDEF(IObjectCADPartSolidWorks, __uuidof(IObjectCADPartSolidWorks));
_COM_SMARTPTR_TYPEDEF(IObjectCADPartZPD, __uuidof(IObjectCADPartZPD));
_COM_SMARTPTR_TYPEDEF(IObjectNullObject, __uuidof(IObjectNullObject));
_COM_SMARTPTR_TYPEDEF(IObjectSourceDLL, __uuidof(IObjectSourceDLL));
_COM_SMARTPTR_TYPEDEF(IObjectUserDefinedObject, __uuidof(IObjectUserDefinedObject));
_COM_SMARTPTR_TYPEDEF(ISCS_SystemWavelengths, __uuidof(ISCS_SystemWavelengths));
_COM_SMARTPTR_TYPEDEF(ISCS_CIE1931Tristimulus, __uuidof(ISCS_CIE1931Tristimulus));
_COM_SMARTPTR_TYPEDEF(ISCS_CIE1931Chromaticity, __uuidof(ISCS_CIE1931Chromaticity));
_COM_SMARTPTR_TYPEDEF(ISCS_CIE1931RGB, __uuidof(ISCS_CIE1931RGB));
_COM_SMARTPTR_TYPEDEF(ISCS_UniformPowerSpectrum, __uuidof(ISCS_UniformPowerSpectrum));
_COM_SMARTPTR_TYPEDEF(ISCS_D65White, __uuidof(ISCS_D65White));
_COM_SMARTPTR_TYPEDEF(ISCS_ColorTemperature, __uuidof(ISCS_ColorTemperature));
_COM_SMARTPTR_TYPEDEF(ISCS_BlackBodySpectrum, __uuidof(ISCS_BlackBodySpectrum));
_COM_SMARTPTR_TYPEDEF(ISCS_SpectrumFile, __uuidof(ISCS_SpectrumFile));
_COM_SMARTPTR_TYPEDEF(ISCS_CIE1976, __uuidof(ISCS_CIE1976));
_COM_SMARTPTR_TYPEDEF(ISourceColorSettings, __uuidof(ISourceColorSettings));
_COM_SMARTPTR_TYPEDEF(INCESourcesData, __uuidof(INCESourcesData));
_COM_SMARTPTR_TYPEDEF(IOSS_None, __uuidof(IOSS_None));
_COM_SMARTPTR_TYPEDEF(IOSS_Lambertian, __uuidof(IOSS_Lambertian));
_COM_SMARTPTR_TYPEDEF(IOSS_Gaussian, __uuidof(IOSS_Gaussian));
_COM_SMARTPTR_TYPEDEF(IOSS_ABg, __uuidof(IOSS_ABg));
_COM_SMARTPTR_TYPEDEF(IOSS_ABgFile, __uuidof(IOSS_ABgFile));
_COM_SMARTPTR_TYPEDEF(IOSS_BSDF, __uuidof(IOSS_BSDF));
_COM_SMARTPTR_TYPEDEF(IOSS_User, __uuidof(IOSS_User));
_COM_SMARTPTR_TYPEDEF(IOSS_ISScatterCatalog, __uuidof(IOSS_ISScatterCatalog));
_COM_SMARTPTR_TYPEDEF(IObjectScatteringSettings, __uuidof(IObjectScatteringSettings));
_COM_SMARTPTR_TYPEDEF(INCECoatScatterFaceData, __uuidof(INCECoatScatterFaceData));
_COM_SMARTPTR_TYPEDEF(INCECoatScatterData, __uuidof(INCECoatScatterData));
_COM_SMARTPTR_TYPEDEF(IImportanceSamplingSettings, __uuidof(IImportanceSamplingSettings));
_COM_SMARTPTR_TYPEDEF(INCEScatterToData, __uuidof(INCEScatterToData));
_COM_SMARTPTR_TYPEDEF(IVPMS_None, __uuidof(IVPMS_None));
_COM_SMARTPTR_TYPEDEF(IVMPS_AngleScattering, __uuidof(IVMPS_AngleScattering));
_COM_SMARTPTR_TYPEDEF(IVMPS_DLLDefinedScattering, __uuidof(IVMPS_DLLDefinedScattering));
_COM_SMARTPTR_TYPEDEF(IVMPS_PhotoluminscenceModel, __uuidof(IVMPS_PhotoluminscenceModel));
_COM_SMARTPTR_TYPEDEF(IVolumePhysicsModelSettings, __uuidof(IVolumePhysicsModelSettings));
_COM_SMARTPTR_TYPEDEF(INCEVolumePhysicsData, __uuidof(INCEVolumePhysicsData));
_COM_SMARTPTR_TYPEDEF(IIMS_Isotropic, __uuidof(IIMS_Isotropic));
_COM_SMARTPTR_TYPEDEF(IIMS_Birefringent, __uuidof(IIMS_Birefringent));
_COM_SMARTPTR_TYPEDEF(IIMS_GRIN, __uuidof(IIMS_GRIN));
_COM_SMARTPTR_TYPEDEF(IIndexModelSettings, __uuidof(IIndexModelSettings));
_COM_SMARTPTR_TYPEDEF(INCEIndexData, __uuidof(INCEIndexData));
_COM_SMARTPTR_TYPEDEF(INCEDiffractionData, __uuidof(INCEDiffractionData));
_COM_SMARTPTR_TYPEDEF(INCECADData, __uuidof(INCECADData));
_COM_SMARTPTR_TYPEDEF(ISolveSurfacePickup, __uuidof(ISolveSurfacePickup));
_COM_SMARTPTR_TYPEDEF(ISolveData, __uuidof(ISolveData));
_COM_SMARTPTR_TYPEDEF(ISurfaceTypeSettings, __uuidof(ISurfaceTypeSettings));
_COM_SMARTPTR_TYPEDEF(ISurfaceStandard, __uuidof(ISurfaceStandard));
_COM_SMARTPTR_TYPEDEF(ISurfaceAlternateEven, __uuidof(ISurfaceAlternateEven));
_COM_SMARTPTR_TYPEDEF(ISurfaceAlternateOdd, __uuidof(ISurfaceAlternateOdd));
_COM_SMARTPTR_TYPEDEF(ISurfaceBlackBoxLens, __uuidof(ISurfaceBlackBoxLens));
_COM_SMARTPTR_TYPEDEF(ISurfaceEvenAspheric, __uuidof(ISurfaceEvenAspheric));
_COM_SMARTPTR_TYPEDEF(ISurfaceFresnel, __uuidof(ISurfaceFresnel));
_COM_SMARTPTR_TYPEDEF(ISurfaceOddAsphere, __uuidof(ISurfaceOddAsphere));
_COM_SMARTPTR_TYPEDEF(ISurfacePolynomial, __uuidof(ISurfacePolynomial));
_COM_SMARTPTR_TYPEDEF(ISurfaceRetroReflect, __uuidof(ISurfaceRetroReflect));
_COM_SMARTPTR_TYPEDEF(ILDEDrawData, __uuidof(ILDEDrawData));
_COM_SMARTPTR_TYPEDEF(ISurfaceApertureNone, __uuidof(ISurfaceApertureNone));
_COM_SMARTPTR_TYPEDEF(ISurfaceApertureCircular, __uuidof(ISurfaceApertureCircular));
_COM_SMARTPTR_TYPEDEF(ISurfaceApertureUser, __uuidof(ISurfaceApertureUser));
_COM_SMARTPTR_TYPEDEF(ISurfaceApertureSpider, __uuidof(ISurfaceApertureSpider));
_COM_SMARTPTR_TYPEDEF(ISurfaceApertureRectangular, __uuidof(ISurfaceApertureRectangular));
_COM_SMARTPTR_TYPEDEF(ISurfaceApertureElliptical, __uuidof(ISurfaceApertureElliptical));
_COM_SMARTPTR_TYPEDEF(ISurfaceApertureFloating, __uuidof(ISurfaceApertureFloating));
_COM_SMARTPTR_TYPEDEF(ISurfaceApertureType, __uuidof(ISurfaceApertureType));
_COM_SMARTPTR_TYPEDEF(ILDEApertureData, __uuidof(ILDEApertureData));
_COM_SMARTPTR_TYPEDEF(ISurfaceScatteringNone, __uuidof(ISurfaceScatteringNone));
_COM_SMARTPTR_TYPEDEF(ISurfaceScatteringLambertian, __uuidof(ISurfaceScatteringLambertian));
_COM_SMARTPTR_TYPEDEF(ISurfaceScatteringGaussian, __uuidof(ISurfaceScatteringGaussian));
_COM_SMARTPTR_TYPEDEF(ISurfaceScatteringABg, __uuidof(ISurfaceScatteringABg));
_COM_SMARTPTR_TYPEDEF(ISurfaceScatteringABgFile, __uuidof(ISurfaceScatteringABgFile));
_COM_SMARTPTR_TYPEDEF(ISurfaceScatteringBSDF, __uuidof(ISurfaceScatteringBSDF));
_COM_SMARTPTR_TYPEDEF(ISurfaceScatteringUser, __uuidof(ISurfaceScatteringUser));
_COM_SMARTPTR_TYPEDEF(ISurfaceScatteringCatalog, __uuidof(ISurfaceScatteringCatalog));
_COM_SMARTPTR_TYPEDEF(ISurfaceScatteringType, __uuidof(ISurfaceScatteringType));
_COM_SMARTPTR_TYPEDEF(ILDEScatteringData, __uuidof(ILDEScatteringData));
_COM_SMARTPTR_TYPEDEF(ILDETiltDecenterData, __uuidof(ILDETiltDecenterData));
_COM_SMARTPTR_TYPEDEF(ILDEPhysicalOpticsData, __uuidof(ILDEPhysicalOpticsData));
_COM_SMARTPTR_TYPEDEF(ILDECoatingSettings, __uuidof(ILDECoatingSettings));
_COM_SMARTPTR_TYPEDEF(ILDECoatingData, __uuidof(ILDECoatingData));
_COM_SMARTPTR_TYPEDEF(ILDEImportData, __uuidof(ILDEImportData));
_COM_SMARTPTR_TYPEDEF(INCETypeData, __uuidof(INCETypeData));
_COM_SMARTPTR_TYPEDEF(INCEDrawData, __uuidof(INCEDrawData));
_COM_SMARTPTR_TYPEDEF(ILDETypeData, __uuidof(ILDETypeData));
_COM_SMARTPTR_TYPEDEF(IVectorData, __uuidof(IVectorData));
_COM_SMARTPTR_TYPEDEF(IMatrixData, __uuidof(IMatrixData));
_COM_SMARTPTR_TYPEDEF(ISettingsData, __uuidof(ISettingsData));
_COM_SMARTPTR_TYPEDEF(INSCRayTrace, __uuidof(INSCRayTrace));
_COM_SMARTPTR_TYPEDEF(IOpticalSystemTools, __uuidof(IOpticalSystemTools));
_COM_SMARTPTR_TYPEDEF(IMessage, __uuidof(IMessage));
_COM_SMARTPTR_TYPEDEF(IMessages, __uuidof(IMessages));
_COM_SMARTPTR_TYPEDEF(IUser2DLineData, __uuidof(IUser2DLineData));
_COM_SMARTPTR_TYPEDEF(IUserGridData, __uuidof(IUserGridData));
_COM_SMARTPTR_TYPEDEF(IUserGridRGBData, __uuidof(IUserGridRGBData));
_COM_SMARTPTR_TYPEDEF(IUserTextData, __uuidof(IUserTextData));
_COM_SMARTPTR_TYPEDEF(IUserAnalysisData, __uuidof(IUserAnalysisData));
_COM_SMARTPTR_TYPEDEF(IAR_Rgb, __uuidof(IAR_Rgb));
_COM_SMARTPTR_TYPEDEF(IAR_ScatterPoint, __uuidof(IAR_ScatterPoint));
_COM_SMARTPTR_TYPEDEF(IAR_ScatterPointRgb, __uuidof(IAR_ScatterPointRgb));
_COM_SMARTPTR_TYPEDEF(IAR_MetaData, __uuidof(IAR_MetaData));
_COM_SMARTPTR_TYPEDEF(IAR_HeaderData, __uuidof(IAR_HeaderData));
_COM_SMARTPTR_TYPEDEF(IAR_XYZ, __uuidof(IAR_XYZ));
_COM_SMARTPTR_TYPEDEF(IAR_DataGrid, __uuidof(IAR_DataGrid));
_COM_SMARTPTR_TYPEDEF(IAR_DataGridRgb, __uuidof(IAR_DataGridRgb));
_COM_SMARTPTR_TYPEDEF(IAR_DataSeries, __uuidof(IAR_DataSeries));
_COM_SMARTPTR_TYPEDEF(IAR_DataSeriesRgb, __uuidof(IAR_DataSeriesRgb));
_COM_SMARTPTR_TYPEDEF(IAR_DataScatterPoints, __uuidof(IAR_DataScatterPoints));
_COM_SMARTPTR_TYPEDEF(IAR_DataScatterPointsRgb, __uuidof(IAR_DataScatterPointsRgb));
_COM_SMARTPTR_TYPEDEF(IAR_RayInfo, __uuidof(IAR_RayInfo));
_COM_SMARTPTR_TYPEDEF(IAR_RayData, __uuidof(IAR_RayData));
_COM_SMARTPTR_TYPEDEF(IAR_CriticalRayInfo, __uuidof(IAR_CriticalRayInfo));
_COM_SMARTPTR_TYPEDEF(IAR_CriticalRayData, __uuidof(IAR_CriticalRayData));
_COM_SMARTPTR_TYPEDEF(IAR_SpotDataResult, __uuidof(IAR_SpotDataResult));
_COM_SMARTPTR_TYPEDEF(IAR_SpotDataResultMatrix, __uuidof(IAR_SpotDataResultMatrix));
_COM_SMARTPTR_TYPEDEF(IAR_PathAnalysisEntry, __uuidof(IAR_PathAnalysisEntry));
_COM_SMARTPTR_TYPEDEF(IAR_PathAnalysisData, __uuidof(IAR_PathAnalysisData));
_COM_SMARTPTR_TYPEDEF(IAR_, __uuidof(IAR_));
_COM_SMARTPTR_TYPEDEF(IAS_, __uuidof(IAS_));
_COM_SMARTPTR_TYPEDEF(IA_, __uuidof(IA_));
_COM_SMARTPTR_TYPEDEF(I_Analyses, __uuidof(I_Analyses));
_COM_SMARTPTR_TYPEDEF(IAS_Field, __uuidof(IAS_Field));
_COM_SMARTPTR_TYPEDEF(IAS_Surface, __uuidof(IAS_Surface));
_COM_SMARTPTR_TYPEDEF(IAS_Detector, __uuidof(IAS_Detector));
_COM_SMARTPTR_TYPEDEF(IAS_Wavelength, __uuidof(IAS_Wavelength));
_COM_SMARTPTR_TYPEDEF(IAS_CriticalRayTracer, __uuidof(IAS_CriticalRayTracer));
_COM_SMARTPTR_TYPEDEF(IAS_Interferogram, __uuidof(IAS_Interferogram));
_COM_SMARTPTR_TYPEDEF(IAS_WavefrontMap, __uuidof(IAS_WavefrontMap));
_COM_SMARTPTR_TYPEDEF(IAS_XXXTemplateXXX, __uuidof(IAS_XXXTemplateXXX));
_COM_SMARTPTR_TYPEDEF(IAS_Foucault, __uuidof(IAS_Foucault));
_COM_SMARTPTR_TYPEDEF(IAS_SurfaceSag, __uuidof(IAS_SurfaceSag));
_COM_SMARTPTR_TYPEDEF(IAS_SurfacePhase, __uuidof(IAS_SurfacePhase));
_COM_SMARTPTR_TYPEDEF(IAS_SurfaceCurvature, __uuidof(IAS_SurfaceCurvature));
_COM_SMARTPTR_TYPEDEF(IAS_SurfaceSagCross, __uuidof(IAS_SurfaceSagCross));
_COM_SMARTPTR_TYPEDEF(IAS_SurfacePhaseCross, __uuidof(IAS_SurfacePhaseCross));
_COM_SMARTPTR_TYPEDEF(IAS_SurfaceCurvatureCross, __uuidof(IAS_SurfaceCurvatureCross));
_COM_SMARTPTR_TYPEDEF(IAS_Spot, __uuidof(IAS_Spot));
_COM_SMARTPTR_TYPEDEF(IAS_RMSField, __uuidof(IAS_RMSField));
_COM_SMARTPTR_TYPEDEF(IAS_RMSLambdaDiagram, __uuidof(IAS_RMSLambdaDiagram));
_COM_SMARTPTR_TYPEDEF(IAS_RMSFocus, __uuidof(IAS_RMSFocus));
_COM_SMARTPTR_TYPEDEF(IAS_RMSFieldMap, __uuidof(IAS_RMSFieldMap));
_COM_SMARTPTR_TYPEDEF(IAS_DetectorViewer, __uuidof(IAS_DetectorViewer));
_COM_SMARTPTR_TYPEDEF(IAS_FftPsfCrossSection, __uuidof(IAS_FftPsfCrossSection));
_COM_SMARTPTR_TYPEDEF(IAS_FftPsfLineEdgeSpread, __uuidof(IAS_FftPsfLineEdgeSpread));
_COM_SMARTPTR_TYPEDEF(IAS_HuygensPsfCrossSection, __uuidof(IAS_HuygensPsfCrossSection));
_COM_SMARTPTR_TYPEDEF(IAS_HuygensPsf, __uuidof(IAS_HuygensPsf));
_COM_SMARTPTR_TYPEDEF(IAS_FftPsf, __uuidof(IAS_FftPsf));
_COM_SMARTPTR_TYPEDEF(IAS_HuygensMtfvsField, __uuidof(IAS_HuygensMtfvsField));
_COM_SMARTPTR_TYPEDEF(IAS_GeometricMtfvsField, __uuidof(IAS_GeometricMtfvsField));
_COM_SMARTPTR_TYPEDEF(IAS_GeometricMtf, __uuidof(IAS_GeometricMtf));
_COM_SMARTPTR_TYPEDEF(IAS_GeometricThroughFocusMtf, __uuidof(IAS_GeometricThroughFocusMtf));
_COM_SMARTPTR_TYPEDEF(IAS_FftThroughFocusMtf, __uuidof(IAS_FftThroughFocusMtf));
_COM_SMARTPTR_TYPEDEF(IAS_FftMtf, __uuidof(IAS_FftMtf));
_COM_SMARTPTR_TYPEDEF(IAS_GeometricMtfMap, __uuidof(IAS_GeometricMtfMap));
_COM_SMARTPTR_TYPEDEF(IAS_FftMtfMap, __uuidof(IAS_FftMtfMap));
_COM_SMARTPTR_TYPEDEF(IAS_HuygensSurfaceMtf, __uuidof(IAS_HuygensSurfaceMtf));
_COM_SMARTPTR_TYPEDEF(IAS_FftSurfaceMtf, __uuidof(IAS_FftSurfaceMtf));
_COM_SMARTPTR_TYPEDEF(IAS_FftMtfvsField, __uuidof(IAS_FftMtfvsField));
_COM_SMARTPTR_TYPEDEF(IAS_HuygensThroughFocusMtf, __uuidof(IAS_HuygensThroughFocusMtf));
_COM_SMARTPTR_TYPEDEF(IAS_HuygensMtf, __uuidof(IAS_HuygensMtf));
_COM_SMARTPTR_TYPEDEF(IAS_Fan, __uuidof(IAS_Fan));
_COM_SMARTPTR_TYPEDEF(IAS_GeometricLineEdgeSpread, __uuidof(IAS_GeometricLineEdgeSpread));
_COM_SMARTPTR_TYPEDEF(IAS_DiffractionEncircledEnergy, __uuidof(IAS_DiffractionEncircledEnergy));
_COM_SMARTPTR_TYPEDEF(IAS_GeometricEncircledEnergy, __uuidof(IAS_GeometricEncircledEnergy));
_COM_SMARTPTR_TYPEDEF(IAS_ExtendedSourceEncircledEnergy, __uuidof(IAS_ExtendedSourceEncircledEnergy));
_COM_SMARTPTR_TYPEDEF(IAS_ZernikeFringeCoefficients, __uuidof(IAS_ZernikeFringeCoefficients));
_COM_SMARTPTR_TYPEDEF(IAS_ZernikeAnnularCoefficients, __uuidof(IAS_ZernikeAnnularCoefficients));
_COM_SMARTPTR_TYPEDEF(IAS_FocalShiftDiagram, __uuidof(IAS_FocalShiftDiagram));
_COM_SMARTPTR_TYPEDEF(IAS_GridDistortion, __uuidof(IAS_GridDistortion));
_COM_SMARTPTR_TYPEDEF(IAS_LateralColor, __uuidof(IAS_LateralColor));
_COM_SMARTPTR_TYPEDEF(IAS_LongitudinalAberration, __uuidof(IAS_LongitudinalAberration));
_COM_SMARTPTR_TYPEDEF(IAS_RayTrace, __uuidof(IAS_RayTrace));
_COM_SMARTPTR_TYPEDEF(IAS_SeidelDiagram, __uuidof(IAS_SeidelDiagram));
_COM_SMARTPTR_TYPEDEF(IAS_SeidelCoefficients, __uuidof(IAS_SeidelCoefficients));
_COM_SMARTPTR_TYPEDEF(IAS_FieldCurvatureAndDistortion, __uuidof(IAS_FieldCurvatureAndDistortion));
_COM_SMARTPTR_TYPEDEF(IAS_ZernikeCoefficientsVsField, __uuidof(IAS_ZernikeCoefficientsVsField));
_COM_SMARTPTR_TYPEDEF(IAS_ZernikeStandardCoefficients, __uuidof(IAS_ZernikeStandardCoefficients));
_COM_SMARTPTR_TYPEDEF(IZOSAPI_Connection, __uuidof(IZOSAPI_Connection));
_COM_SMARTPTR_TYPEDEF(IZOSAPI_Application, __uuidof(IZOSAPI_Application));
_COM_SMARTPTR_TYPEDEF(IOpticalSystem, __uuidof(IOpticalSystem));
_COM_SMARTPTR_TYPEDEF(IEditor, __uuidof(IEditor));
_COM_SMARTPTR_TYPEDEF(IEditorRow, __uuidof(IEditorRow));
_COM_SMARTPTR_TYPEDEF(IEditorCell, __uuidof(IEditorCell));
_COM_SMARTPTR_TYPEDEF(IObjectAnnularAsphericLens, __uuidof(IObjectAnnularAsphericLens));
_COM_SMARTPTR_TYPEDEF(IObjectAnnularAxialLens, __uuidof(IObjectAnnularAxialLens));
_COM_SMARTPTR_TYPEDEF(IObjectAnnularVolume, __uuidof(IObjectAnnularVolume));
_COM_SMARTPTR_TYPEDEF(IObjectAnnulus, __uuidof(IObjectAnnulus));
_COM_SMARTPTR_TYPEDEF(IObjectArray, __uuidof(IObjectArray));
_COM_SMARTPTR_TYPEDEF(IObjectArrayRing, __uuidof(IObjectArrayRing));
_COM_SMARTPTR_TYPEDEF(IObjectAsphericSurface, __uuidof(IObjectAsphericSurface));
_COM_SMARTPTR_TYPEDEF(IObjectAsphericSurface2, __uuidof(IObjectAsphericSurface2));
_COM_SMARTPTR_TYPEDEF(IObjectAxiconSurface, __uuidof(IObjectAxiconSurface));
_COM_SMARTPTR_TYPEDEF(IObjectBiconicLens, __uuidof(IObjectBiconicLens));
_COM_SMARTPTR_TYPEDEF(IObjectBiconicSurface, __uuidof(IObjectBiconicSurface));
_COM_SMARTPTR_TYPEDEF(IObjectBiconicZernike, __uuidof(IObjectBiconicZernike));
_COM_SMARTPTR_TYPEDEF(IObjectBiconicZernikeSurface, __uuidof(IObjectBiconicZernikeSurface));
_COM_SMARTPTR_TYPEDEF(IObjectXYPolynomial, __uuidof(IObjectXYPolynomial));
_COM_SMARTPTR_TYPEDEF(IObjectBinary1, __uuidof(IObjectBinary1));
_COM_SMARTPTR_TYPEDEF(IObjectBinary2, __uuidof(IObjectBinary2));
_COM_SMARTPTR_TYPEDEF(IObjectBinary2A, __uuidof(IObjectBinary2A));
_COM_SMARTPTR_TYPEDEF(IObjectBoolean, __uuidof(IObjectBoolean));
_COM_SMARTPTR_TYPEDEF(IObjectCADAssemblyAutodeskInventor, __uuidof(IObjectCADAssemblyAutodeskInventor));
_COM_SMARTPTR_TYPEDEF(IObjectCADAssemblyCreoParametric, __uuidof(IObjectCADAssemblyCreoParametric));
_COM_SMARTPTR_TYPEDEF(IObjectCADAssemblySolidWorks, __uuidof(IObjectCADAssemblySolidWorks));
_COM_SMARTPTR_TYPEDEF(IObjectCADPartSTEPIGESSAT, __uuidof(IObjectCADPartSTEPIGESSAT));
_COM_SMARTPTR_TYPEDEF(IObjectCADPartSTL, __uuidof(IObjectCADPartSTL));
_COM_SMARTPTR_TYPEDEF(IObjectCone, __uuidof(IObjectCone));
_COM_SMARTPTR_TYPEDEF(IObjectCPC, __uuidof(IObjectCPC));
_COM_SMARTPTR_TYPEDEF(IObjectCPCRectangular, __uuidof(IObjectCPCRectangular));
_COM_SMARTPTR_TYPEDEF(IObjectCylinderPipe, __uuidof(IObjectCylinderPipe));
_COM_SMARTPTR_TYPEDEF(IObjectCylinderVolume, __uuidof(IObjectCylinderVolume));
_COM_SMARTPTR_TYPEDEF(IObjectCylinder2Pipe, __uuidof(IObjectCylinder2Pipe));
_COM_SMARTPTR_TYPEDEF(IObjectCylinder2Volume, __uuidof(IObjectCylinder2Volume));
_COM_SMARTPTR_TYPEDEF(IObjectDetectorColor, __uuidof(IObjectDetectorColor));
_COM_SMARTPTR_TYPEDEF(IObjectDetectorPolar, __uuidof(IObjectDetectorPolar));
_COM_SMARTPTR_TYPEDEF(IObjectDetectorRectangle, __uuidof(IObjectDetectorRectangle));
_COM_SMARTPTR_TYPEDEF(IObjectDetectorSurface, __uuidof(IObjectDetectorSurface));
_COM_SMARTPTR_TYPEDEF(IObjectDetectorVolume, __uuidof(IObjectDetectorVolume));
_COM_SMARTPTR_TYPEDEF(IObjectDiffractionGrating, __uuidof(IObjectDiffractionGrating));
_COM_SMARTPTR_TYPEDEF(IObjectDualBEFSurface, __uuidof(IObjectDualBEFSurface));
_COM_SMARTPTR_TYPEDEF(IObjectEllipse, __uuidof(IObjectEllipse));
_COM_SMARTPTR_TYPEDEF(IObjectEllipticalVolume, __uuidof(IObjectEllipticalVolume));
_COM_SMARTPTR_TYPEDEF(IObjectEvenAsphereLens, __uuidof(IObjectEvenAsphereLens));
_COM_SMARTPTR_TYPEDEF(IObjectExtendedOddAsphereLens, __uuidof(IObjectExtendedOddAsphereLens));
_COM_SMARTPTR_TYPEDEF(IObjectExtendedPolynomialLens, __uuidof(IObjectExtendedPolynomialLens));
_COM_SMARTPTR_TYPEDEF(IObjectExtendedPolynomialSurface, __uuidof(IObjectExtendedPolynomialSurface));
_COM_SMARTPTR_TYPEDEF(IObjectExtruded, __uuidof(IObjectExtruded));
_COM_SMARTPTR_TYPEDEF(IObjectFacetedSurface, __uuidof(IObjectFacetedSurface));
_COM_SMARTPTR_TYPEDEF(IObjectFreeformZ, __uuidof(IObjectFreeformZ));
_COM_SMARTPTR_TYPEDEF(IObjectFresnel1, __uuidof(IObjectFresnel1));
_COM_SMARTPTR_TYPEDEF(IObjectFresnel2, __uuidof(IObjectFresnel2));
_COM_SMARTPTR_TYPEDEF(IObjectGridSagLens, __uuidof(IObjectGridSagLens));
_COM_SMARTPTR_TYPEDEF(IObjectGridSagFrontBack, __uuidof(IObjectGridSagFrontBack));
_COM_SMARTPTR_TYPEDEF(IObjectGridSagSurface, __uuidof(IObjectGridSagSurface));
_COM_SMARTPTR_TYPEDEF(IObjectHexagonalLensletArray, __uuidof(IObjectHexagonalLensletArray));
_COM_SMARTPTR_TYPEDEF(IObjectHologramLens, __uuidof(IObjectHologramLens));
_COM_SMARTPTR_TYPEDEF(IObjectHologramSurface, __uuidof(IObjectHologramSurface));
_COM_SMARTPTR_TYPEDEF(IObjectJonesMatrix, __uuidof(IObjectJonesMatrix));
_COM_SMARTPTR_TYPEDEF(IObjectLensletArray1, __uuidof(IObjectLensletArray1));
_COM_SMARTPTR_TYPEDEF(IObjectLensletArray2, __uuidof(IObjectLensletArray2));
_COM_SMARTPTR_TYPEDEF(IObjectMEMS, __uuidof(IObjectMEMS));
_COM_SMARTPTR_TYPEDEF(IObjectOddAsphereLens, __uuidof(IObjectOddAsphereLens));
_COM_SMARTPTR_TYPEDEF(IObjectParaxialLens, __uuidof(IObjectParaxialLens));
_COM_SMARTPTR_TYPEDEF(IObjectPolygon, __uuidof(IObjectPolygon));
_COM_SMARTPTR_TYPEDEF(IObjectRayRotator, __uuidof(IObjectRayRotator));
_COM_SMARTPTR_TYPEDEF(IObjectRectangularCorner, __uuidof(IObjectRectangularCorner));
_COM_SMARTPTR_TYPEDEF(IObjectRectangle, __uuidof(IObjectRectangle));
_COM_SMARTPTR_TYPEDEF(IObjectRectangularPipe, __uuidof(IObjectRectangularPipe));
_COM_SMARTPTR_TYPEDEF(IObjectRectangularPipeGrating, __uuidof(IObjectRectangularPipeGrating));
_COM_SMARTPTR_TYPEDEF(IObjectRectangularRoof, __uuidof(IObjectRectangularRoof));
_COM_SMARTPTR_TYPEDEF(IObjectRectangularTorusSurface, __uuidof(IObjectRectangularTorusSurface));
_COM_SMARTPTR_TYPEDEF(IObjectRectangularTorusVolume, __uuidof(IObjectRectangularTorusVolume));
_COM_SMARTPTR_TYPEDEF(IObjectRectangularVolume, __uuidof(IObjectRectangularVolume));
_COM_SMARTPTR_TYPEDEF(IObjectRectangularVolumeGrating, __uuidof(IObjectRectangularVolumeGrating));
_COM_SMARTPTR_TYPEDEF(IObjectReverseRadianceDetector, __uuidof(IObjectReverseRadianceDetector));
_COM_SMARTPTR_TYPEDEF(IObjectReverseRadianceTarget, __uuidof(IObjectReverseRadianceTarget));
_COM_SMARTPTR_TYPEDEF(IObjectSlide, __uuidof(IObjectSlide));
_COM_SMARTPTR_TYPEDEF(IObjectSources, __uuidof(IObjectSources));
_COM_SMARTPTR_TYPEDEF(IObjectSourceDiffractive, __uuidof(IObjectSourceDiffractive));
_COM_SMARTPTR_TYPEDEF(IObjectSourceDiode, __uuidof(IObjectSourceDiode));
_COM_SMARTPTR_TYPEDEF(IObjectSourceEllipse, __uuidof(IObjectSourceEllipse));
_COM_SMARTPTR_TYPEDEF(IObjectSourceEULUMDATFile, __uuidof(IObjectSourceEULUMDATFile));
_COM_SMARTPTR_TYPEDEF(IObjectSourceFilament, __uuidof(IObjectSourceFilament));
_COM_SMARTPTR_TYPEDEF(IObjectSourceFile, __uuidof(IObjectSourceFile));
_COM_SMARTPTR_TYPEDEF(IObjectSourceGaussian, __uuidof(IObjectSourceGaussian));
_COM_SMARTPTR_TYPEDEF(IObjectSourceIESNAFile, __uuidof(IObjectSourceIESNAFile));
_COM_SMARTPTR_TYPEDEF(IObjectSourceImported, __uuidof(IObjectSourceImported));
_COM_SMARTPTR_TYPEDEF(IObjectSourceObject, __uuidof(IObjectSourceObject));
_COM_SMARTPTR_TYPEDEF(IObjectSourcePoint, __uuidof(IObjectSourcePoint));
_COM_SMARTPTR_TYPEDEF(IObjectSourceRadial, __uuidof(IObjectSourceRadial));
_COM_SMARTPTR_TYPEDEF(IObjectSourceRay, __uuidof(IObjectSourceRay));
_COM_SMARTPTR_TYPEDEF(IObjectSourceRectangle, __uuidof(IObjectSourceRectangle));
_COM_SMARTPTR_TYPEDEF(IObjectSourceTube, __uuidof(IObjectSourceTube));
_COM_SMARTPTR_TYPEDEF(IObjectSourceTwoAngle, __uuidof(IObjectSourceTwoAngle));
_COM_SMARTPTR_TYPEDEF(IObjectSourceVolumeCylindrical, __uuidof(IObjectSourceVolumeCylindrical));
_COM_SMARTPTR_TYPEDEF(IObjectSourceVolumeElliptical, __uuidof(IObjectSourceVolumeElliptical));
_COM_SMARTPTR_TYPEDEF(IObjectSourceVolumeRectangular, __uuidof(IObjectSourceVolumeRectangular));
_COM_SMARTPTR_TYPEDEF(IObjectSphere, __uuidof(IObjectSphere));
_COM_SMARTPTR_TYPEDEF(IObjectStandardLens, __uuidof(IObjectStandardLens));
_COM_SMARTPTR_TYPEDEF(IObjectStandardSurface, __uuidof(IObjectStandardSurface));
_COM_SMARTPTR_TYPEDEF(IObjectSwept, __uuidof(IObjectSwept));
_COM_SMARTPTR_TYPEDEF(IObjectTabulatedFactedRadial, __uuidof(IObjectTabulatedFactedRadial));
_COM_SMARTPTR_TYPEDEF(IObjectTabulatedFactedToroid, __uuidof(IObjectTabulatedFactedToroid));
_COM_SMARTPTR_TYPEDEF(IObjectTabulatedFrenselRadial, __uuidof(IObjectTabulatedFrenselRadial));
_COM_SMARTPTR_TYPEDEF(IObjectToroidalHologram, __uuidof(IObjectToroidalHologram));
_COM_SMARTPTR_TYPEDEF(IObjectToroidalLens, __uuidof(IObjectToroidalLens));
_COM_SMARTPTR_TYPEDEF(IObjectToroidalSurface, __uuidof(IObjectToroidalSurface));
_COM_SMARTPTR_TYPEDEF(IObjectToroidalSurfaceOddASphere, __uuidof(IObjectToroidalSurfaceOddASphere));
_COM_SMARTPTR_TYPEDEF(IObjectTorusSurface, __uuidof(IObjectTorusSurface));
_COM_SMARTPTR_TYPEDEF(IObjectTorusVolume, __uuidof(IObjectTorusVolume));
_COM_SMARTPTR_TYPEDEF(IObjectTriangularCorner, __uuidof(IObjectTriangularCorner));
_COM_SMARTPTR_TYPEDEF(IObjectTriangle, __uuidof(IObjectTriangle));
_COM_SMARTPTR_TYPEDEF(IObjectWolterSurface, __uuidof(IObjectWolterSurface));
_COM_SMARTPTR_TYPEDEF(IObjectZernikeSurface, __uuidof(IObjectZernikeSurface));
_COM_SMARTPTR_TYPEDEF(ISurfaceXYPolynomial, __uuidof(ISurfaceXYPolynomial));
_COM_SMARTPTR_TYPEDEF(ISurfaceNthOrderTerms, __uuidof(ISurfaceNthOrderTerms));
_COM_SMARTPTR_TYPEDEF(ISurfaceNthEvenOrderTerms, __uuidof(ISurfaceNthEvenOrderTerms));
_COM_SMARTPTR_TYPEDEF(ISurfaceNthThickness, __uuidof(ISurfaceNthThickness));
_COM_SMARTPTR_TYPEDEF(ISurfaceCoeff_P_NthPower, __uuidof(ISurfaceCoeff_P_NthPower));
_COM_SMARTPTR_TYPEDEF(ISurfaceCoeff_R_NthPower, __uuidof(ISurfaceCoeff_R_NthPower));
_COM_SMARTPTR_TYPEDEF(ISurfaceCoeff_P_NthEvenPower, __uuidof(ISurfaceCoeff_P_NthEvenPower));
_COM_SMARTPTR_TYPEDEF(ISurfaceCoeff_R_NthEvenPower, __uuidof(ISurfaceCoeff_R_NthEvenPower));
_COM_SMARTPTR_TYPEDEF(ISurfaceCoeff_X_NthEvenPower_8, __uuidof(ISurfaceCoeff_X_NthEvenPower_8));
_COM_SMARTPTR_TYPEDEF(ISurfaceCoeff_X_NthEvenPower, __uuidof(ISurfaceCoeff_X_NthEvenPower));
_COM_SMARTPTR_TYPEDEF(ISurfaceCoeff_Y_NthEvenPower_8, __uuidof(ISurfaceCoeff_Y_NthEvenPower_8));
_COM_SMARTPTR_TYPEDEF(ISurfaceCoeff_Y_NthEvenPower, __uuidof(ISurfaceCoeff_Y_NthEvenPower));
_COM_SMARTPTR_TYPEDEF(ISurfaceCoeff_X1P1X2P2_NthEvenPower, __uuidof(ISurfaceCoeff_X1P1X2P2_NthEvenPower));
_COM_SMARTPTR_TYPEDEF(ISurfaceNthZernike, __uuidof(ISurfaceNthZernike));
_COM_SMARTPTR_TYPEDEF(ISurfaceAPBC, __uuidof(ISurfaceAPBC));
_COM_SMARTPTR_TYPEDEF(ISurfaceABCD, __uuidof(ISurfaceABCD));
_COM_SMARTPTR_TYPEDEF(ISurfaceAnnularZernikeSag, __uuidof(ISurfaceAnnularZernikeSag));
_COM_SMARTPTR_TYPEDEF(ISurfaceAtmospheric, __uuidof(ISurfaceAtmospheric));
_COM_SMARTPTR_TYPEDEF(ISurfaceBiconic, __uuidof(ISurfaceBiconic));
_COM_SMARTPTR_TYPEDEF(ISurfaceBiconicZernike, __uuidof(ISurfaceBiconicZernike));
_COM_SMARTPTR_TYPEDEF(ISurfaceBinary1, __uuidof(ISurfaceBinary1));
_COM_SMARTPTR_TYPEDEF(ISurfaceBinary2, __uuidof(ISurfaceBinary2));
_COM_SMARTPTR_TYPEDEF(ISurfaceBinary3, __uuidof(ISurfaceBinary3));
_COM_SMARTPTR_TYPEDEF(ISurfaceBinary4, __uuidof(ISurfaceBinary4));
_COM_SMARTPTR_TYPEDEF(ISurfaceBirefringentIn, __uuidof(ISurfaceBirefringentIn));
_COM_SMARTPTR_TYPEDEF(ISurfaceBirefringentOut, __uuidof(ISurfaceBirefringentOut));
_COM_SMARTPTR_TYPEDEF(ISurfaceChebyShv, __uuidof(ISurfaceChebyShv));
_COM_SMARTPTR_TYPEDEF(ISurfaceConjugate, __uuidof(ISurfaceConjugate));
_COM_SMARTPTR_TYPEDEF(ISurfaceCoordinateBreak, __uuidof(ISurfaceCoordinateBreak));
_COM_SMARTPTR_TYPEDEF(ISurfaceCubicSpline, __uuidof(ISurfaceCubicSpline));
_COM_SMARTPTR_TYPEDEF(ISurfaceCylinderFrensel, __uuidof(ISurfaceCylinderFrensel));
_COM_SMARTPTR_TYPEDEF(ISurfaceData, __uuidof(ISurfaceData));
_COM_SMARTPTR_TYPEDEF(ISurfaceDiffractionGrating, __uuidof(ISurfaceDiffractionGrating));
_COM_SMARTPTR_TYPEDEF(ISurfaceEllipticalGrating1, __uuidof(ISurfaceEllipticalGrating1));
_COM_SMARTPTR_TYPEDEF(ISurfaceEllipticalGrating2, __uuidof(ISurfaceEllipticalGrating2));
_COM_SMARTPTR_TYPEDEF(ISurfaceExtendedToroidalGrating, __uuidof(ISurfaceExtendedToroidalGrating));
_COM_SMARTPTR_TYPEDEF(ISurfaceExtendedAsphere, __uuidof(ISurfaceExtendedAsphere));
_COM_SMARTPTR_TYPEDEF(ISurfaceExtendedCubicSpline, __uuidof(ISurfaceExtendedCubicSpline));
_COM_SMARTPTR_TYPEDEF(ISurfaceExtendedFresnel, __uuidof(ISurfaceExtendedFresnel));
_COM_SMARTPTR_TYPEDEF(ISurfaceExtendedOddAsphere, __uuidof(ISurfaceExtendedOddAsphere));
_COM_SMARTPTR_TYPEDEF(ISurfaceExtendedPolynomial, __uuidof(ISurfaceExtendedPolynomial));
_COM_SMARTPTR_TYPEDEF(ISurfaceGeneralizedFresnel, __uuidof(ISurfaceGeneralizedFresnel));
_COM_SMARTPTR_TYPEDEF(ISurfaceGradient1, __uuidof(ISurfaceGradient1));
_COM_SMARTPTR_TYPEDEF(ISurfaceGradient2, __uuidof(ISurfaceGradient2));
_COM_SMARTPTR_TYPEDEF(ISurfaceGradient3, __uuidof(ISurfaceGradient3));
_COM_SMARTPTR_TYPEDEF(ISurfaceGradient4, __uuidof(ISurfaceGradient4));
_COM_SMARTPTR_TYPEDEF(ISurfaceGradient5, __uuidof(ISurfaceGradient5));
_COM_SMARTPTR_TYPEDEF(ISurfaceGradient6, __uuidof(ISurfaceGradient6));
_COM_SMARTPTR_TYPEDEF(ISurfaceGradient7, __uuidof(ISurfaceGradient7));
_COM_SMARTPTR_TYPEDEF(ISurfaceGradient9, __uuidof(ISurfaceGradient9));
_COM_SMARTPTR_TYPEDEF(ISurfaceGradient10, __uuidof(ISurfaceGradient10));
_COM_SMARTPTR_TYPEDEF(ISurfaceGradient12, __uuidof(ISurfaceGradient12));
_COM_SMARTPTR_TYPEDEF(ISurfaceGradium, __uuidof(ISurfaceGradium));
_COM_SMARTPTR_TYPEDEF(ISurfaceGridGradient, __uuidof(ISurfaceGridGradient));
_COM_SMARTPTR_TYPEDEF(ISurfaceGridPhase, __uuidof(ISurfaceGridPhase));
_COM_SMARTPTR_TYPEDEF(ISurfaceGridSag, __uuidof(ISurfaceGridSag));
_COM_SMARTPTR_TYPEDEF(ISurfaceHologram1, __uuidof(ISurfaceHologram1));
_COM_SMARTPTR_TYPEDEF(ISurfaceHologram2, __uuidof(ISurfaceHologram2));
_COM_SMARTPTR_TYPEDEF(ISurfaceIrregular, __uuidof(ISurfaceIrregular));
_COM_SMARTPTR_TYPEDEF(ISurfaceJonesMatrix, __uuidof(ISurfaceJonesMatrix));
_COM_SMARTPTR_TYPEDEF(ISurfaceNonSequential, __uuidof(ISurfaceNonSequential));
_COM_SMARTPTR_TYPEDEF(ISurfaceOddCosine, __uuidof(ISurfaceOddCosine));
_COM_SMARTPTR_TYPEDEF(ISurfaceOpticallyFabricatedHologram, __uuidof(ISurfaceOpticallyFabricatedHologram));
_COM_SMARTPTR_TYPEDEF(ISurfaceParaxial, __uuidof(ISurfaceParaxial));
_COM_SMARTPTR_TYPEDEF(ISurfaceParaxialXY, __uuidof(ISurfaceParaxialXY));
_COM_SMARTPTR_TYPEDEF(ISurfacePeriodic, __uuidof(ISurfacePeriodic));
_COM_SMARTPTR_TYPEDEF(ISurfaceQTypeAsphere, __uuidof(ISurfaceQTypeAsphere));
_COM_SMARTPTR_TYPEDEF(ISurfaceRadialGrating, __uuidof(ISurfaceRadialGrating));
_COM_SMARTPTR_TYPEDEF(ISurfaceRadialNurbs, __uuidof(ISurfaceRadialNurbs));
_COM_SMARTPTR_TYPEDEF(ISurfaceSlide, __uuidof(ISurfaceSlide));
_COM_SMARTPTR_TYPEDEF(ISurfaceSuperconic, __uuidof(ISurfaceSuperconic));
_COM_SMARTPTR_TYPEDEF(ISurfaceTilted, __uuidof(ISurfaceTilted));
_COM_SMARTPTR_TYPEDEF(ISurfaceToroidal, __uuidof(ISurfaceToroidal));
_COM_SMARTPTR_TYPEDEF(ISurfaceToroidalGrat, __uuidof(ISurfaceToroidalGrat));
_COM_SMARTPTR_TYPEDEF(ISurfaceToroidalHologram, __uuidof(ISurfaceToroidalHologram));
_COM_SMARTPTR_TYPEDEF(ISurfaceToroidalNurbs, __uuidof(ISurfaceToroidalNurbs));
_COM_SMARTPTR_TYPEDEF(ISurfaceVariableLineSpaceGrating, __uuidof(ISurfaceVariableLineSpaceGrating));
_COM_SMARTPTR_TYPEDEF(ISurfaceZernikeAnnularPhase, __uuidof(ISurfaceZernikeAnnularPhase));
_COM_SMARTPTR_TYPEDEF(ISurfaceZernikeFringePhase, __uuidof(ISurfaceZernikeFringePhase));
_COM_SMARTPTR_TYPEDEF(ISurfaceZernikeFringeSag, __uuidof(ISurfaceZernikeFringeSag));
_COM_SMARTPTR_TYPEDEF(ISurfaceZernikeStandardPhase, __uuidof(ISurfaceZernikeStandardPhase));
_COM_SMARTPTR_TYPEDEF(ISurfaceZernikeStandardSag, __uuidof(ISurfaceZernikeStandardSag));
_COM_SMARTPTR_TYPEDEF(ISurfaceZonePlate, __uuidof(ISurfaceZonePlate));
_COM_SMARTPTR_TYPEDEF(ITDERow, __uuidof(ITDERow));
_COM_SMARTPTR_TYPEDEF(IToleranceDataEditor, __uuidof(IToleranceDataEditor));
_COM_SMARTPTR_TYPEDEF(IMFERow, __uuidof(IMFERow));
_COM_SMARTPTR_TYPEDEF(IMeritFunctionEditor, __uuidof(IMeritFunctionEditor));
_COM_SMARTPTR_TYPEDEF(IMCERow, __uuidof(IMCERow));
_COM_SMARTPTR_TYPEDEF(IMultiConfigEditor, __uuidof(IMultiConfigEditor));
_COM_SMARTPTR_TYPEDEF(INonSeqEditor, __uuidof(INonSeqEditor));
_COM_SMARTPTR_TYPEDEF(INCERow, __uuidof(INCERow));
_COM_SMARTPTR_TYPEDEF(IObject, __uuidof(IObject));
_COM_SMARTPTR_TYPEDEF(ILensDataEditor, __uuidof(ILensDataEditor));
_COM_SMARTPTR_TYPEDEF(ILDERow, __uuidof(ILDERow));
_COM_SMARTPTR_TYPEDEF(ISurface, __uuidof(ISurface));

//
// Type library items
//

enum __declspec(uuid("3275b66b-b818-4993-8746-a698168b080e"))
SystemType
{
    SystemType_Sequential = 0,
    SystemType_NonSequential = 1
};

enum __declspec(uuid("c17ead04-a8dd-4985-8dd1-0ace742f899f"))
LicenseStatusType
{
    LicenseStatusType_Unknown = 0,
    LicenseStatusType_KeyNotWorking = 1,
    LicenseStatusType_NewLicenseNeeded = 2,
    LicenseStatusType_StandardEdition = 3,
    LicenseStatusType_ProfessionalEdition = 4,
    LicenseStatusType_PremiumEdition = 5,
    LicenseStatusType_TooManyInstances = 6,
    LicenseStatusType_NotAuthorized = 7,
    LicenseStatusType_KeyNotFound = 8,
    LicenseStatusType_KeyExpired = 9,
    LicenseStatusType_Timeout = 10
};

enum __declspec(uuid("5eb8a19b-9ca4-45da-8995-9b0d7ca7ac94"))
UpdateStatus
{
    UpdateStatus_CheckFailed = -2,
    UpdateStatus_NotSupported = -1,
    UpdateStatus_NotChecked = 0,
    UpdateStatus_UpToDate = 1,
    UpdateStatus_AvailableEligible = 2,
    UpdateStatus_AvailableIneligible = 3
};

enum __declspec(uuid("e2900092-46b6-4e87-bfcf-6af4d76f129b"))
ZOSAPI_Mode
{
    ZOSAPI_Mode_Server = 0,
    ZOSAPI_Mode_Operand = 1,
    ZOSAPI_Mode_Plugin = 2,
    ZOSAPI_Mode_UserAnalysis = 3,
    ZOSAPI_Mode_UserAnalysisSettings = 4
};

enum __declspec(uuid("f4274fd8-d42f-4b77-aa8b-09bb951c66aa"))
LensUpdateMode
{
    LensUpdateMode_None = 0,
    LensUpdateMode_EditorsOnly = 1,
    LensUpdateMode_AllWindows = 2
};

struct __declspec(uuid("dba8cefe-572f-4b3a-a3d8-90db538b3bdc"))
IConvertToNSCGroup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFirstSurface,put=PutFirstSurface))
    long FirstSurface;
    __declspec(property(get=GetLastSurface,put=PutLastSurface))
    long LastSurface;
    __declspec(property(get=GetIgnoreErrors,put=PutIgnoreErrors))
    VARIANT_BOOL IgnoreErrors;
    __declspec(property(get=GetConvertFileToNSC,put=PutConvertFileToNSC))
    VARIANT_BOOL ConvertFileToNSC;
    __declspec(property(get=GetCreateSourcesAndDetectors,put=PutCreateSourcesAndDetectors))
    VARIANT_BOOL CreateSourcesAndDetectors;
    __declspec(property(get=GetConvertToGlobalCoordinates,put=PutConvertToGlobalCoordinates))
    VARIANT_BOOL ConvertToGlobalCoordinates;
    __declspec(property(get=GetOverfillFactor,put=PutOverfillFactor))
    double OverfillFactor;

    //
    // Wrapper methods for error-handling
    //

    long GetFirstSurface ( );
    void PutFirstSurface (
        long pRetVal );
    long GetLastSurface ( );
    void PutLastSurface (
        long pRetVal );
    VARIANT_BOOL GetIgnoreErrors ( );
    void PutIgnoreErrors (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetConvertFileToNSC ( );
    void PutConvertFileToNSC (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetCreateSourcesAndDetectors ( );
    void PutCreateSourcesAndDetectors (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetConvertToGlobalCoordinates ( );
    void PutConvertToGlobalCoordinates (
        VARIANT_BOOL pRetVal );
    double GetOverfillFactor ( );
    void PutOverfillFactor (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FirstSurface (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FirstSurface (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_LastSurface (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_LastSurface (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_IgnoreErrors (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IgnoreErrors (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ConvertFileToNSC (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ConvertFileToNSC (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_CreateSourcesAndDetectors (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CreateSourcesAndDetectors (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ConvertToGlobalCoordinates (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ConvertToGlobalCoordinates (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_OverfillFactor (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OverfillFactor (
        /*[in]*/ double pRetVal ) = 0;
};

enum __declspec(uuid("71065df0-da95-4227-a772-66d8847c8190"))
RayPatternOption
{
    RayPatternOption_XyFan = 0,
    RayPatternOption_XFan = 1,
    RayPatternOption_YFan = 2,
    RayPatternOption_ChiefAndRing = 3,
    RayPatternOption_List = 4,
    RayPatternOption_Grid = 6,
    RayPatternOption_ChiefAndMarginals = 8
};

enum __declspec(uuid("0be5fbb2-54a6-45b6-ae88-417e230f74dd"))
CriticalRayType
{
    CriticalRayType_Chief = 0,
    CriticalRayType_Marginal = 1,
    CriticalRayType_Grid = 2,
    CriticalRayType_Ring = 3,
    CriticalRayType_Y_Fan = 4,
    CriticalRayType_X_Fan = 5,
    CriticalRayType_XY_Fan = 6,
    CriticalRayType_List = 7
};

struct __declspec(uuid("fb5d6d75-661b-498f-9474-d9690057ef16"))
ICriticalRaysetGenerator : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRayPattern,put=PutRayPattern))
    enum RayPatternOption RayPattern;
    __declspec(property(get=GetNumRays,put=PutNumRays))
    long NumRays;
    __declspec(property(get=GetMinimumEfectiveInputDistance))
    double MinimumEfectiveInputDistance;
    __declspec(property(get=GetEffectiveInputDistance,put=PutEffectiveInputDistance))
    double EffectiveInputDistance;
    __declspec(property(get=GetUseAllFields,put=PutUseAllFields))
    VARIANT_BOOL UseAllFields;
    __declspec(property(get=GetUseAllWavelengths,put=PutUseAllWavelengths))
    VARIANT_BOOL UseAllWavelengths;
    __declspec(property(put=PutReadRaysFromFilename))
    _bstr_t ReadRaysFromFilename;
    __declspec(property(put=PutSaveCriticalRaysFilename))
    _bstr_t SaveCriticalRaysFilename;

    //
    // Wrapper methods for error-handling
    //

    enum RayPatternOption GetRayPattern ( );
    void PutRayPattern (
        enum RayPatternOption pRetVal );
    long GetNumRays ( );
    void PutNumRays (
        long pRetVal );
    double GetMinimumEfectiveInputDistance ( );
    double GetEffectiveInputDistance ( );
    void PutEffectiveInputDistance (
        double pRetVal );
    VARIANT_BOOL GetUseAllFields ( );
    void PutUseAllFields (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetUseAllWavelengths ( );
    void PutUseAllWavelengths (
        VARIANT_BOOL pRetVal );
    void PutReadRaysFromFilename (
        _bstr_t _arg1 );
    void PutSaveCriticalRaysFilename (
        _bstr_t _arg1 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RayPattern (
        /*[out,retval]*/ enum RayPatternOption * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RayPattern (
        /*[in]*/ enum RayPatternOption pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumRays (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumRays (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinimumEfectiveInputDistance (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EffectiveInputDistance (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_EffectiveInputDistance (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseAllFields (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseAllFields (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseAllWavelengths (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseAllWavelengths (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall put_ReadRaysFromFilename (
        /*[in]*/ BSTR _arg1 ) = 0;
      virtual HRESULT __stdcall put_SaveCriticalRaysFilename (
        /*[in]*/ BSTR _arg1 ) = 0;
};

struct __declspec(uuid("579a6c87-f687-4013-bc63-ba3f5ab50563"))
IMFCalculator : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMeritFunctionCalculation))
    double MeritFunctionCalculation;

    //
    // Wrapper methods for error-handling
    //

    double GetMeritFunctionCalculation ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MeritFunctionCalculation (
        /*[out,retval]*/ double * pRetVal ) = 0;
};

struct __declspec(uuid("422ddc8a-d2f6-408c-ab1b-8126ca30a8c1"))
IDesignLockdown : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDecimalPrecision,put=PutDecimalPrecision))
    long DecimalPrecision;
    __declspec(property(get=GetExcludePickups,put=PutExcludePickups))
    VARIANT_BOOL ExcludePickups;
    __declspec(property(get=GetUsePrecisionRounding,put=PutUsePrecisionRounding))
    VARIANT_BOOL UsePrecisionRounding;

    //
    // Wrapper methods for error-handling
    //

    long GetDecimalPrecision ( );
    void PutDecimalPrecision (
        long pRetVal );
    VARIANT_BOOL GetExcludePickups ( );
    void PutExcludePickups (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetUsePrecisionRounding ( );
    void PutUsePrecisionRounding (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DecimalPrecision (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DecimalPrecision (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_ExcludePickups (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ExcludePickups (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UsePrecisionRounding (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UsePrecisionRounding (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

enum __declspec(uuid("b8856163-1f74-47ec-94e4-18063856ddd0"))
RunStatus
{
    RunStatus_Completed = 0,
    RunStatus_FailedToStart = 1,
    RunStatus_TimedOut = 2,
    RunStatus_InvalidTimeout = 3
};

struct __declspec(uuid("e804d25d-924b-4ef8-9fad-e3587119e9c8"))
ISystemTool : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetProgress))
    long Progress;
    __declspec(property(get=GetStatus))
    _bstr_t Status;
    __declspec(property(get=GetIsRunning))
    VARIANT_BOOL IsRunning;
    __declspec(property(get=GetCanCancel))
    VARIANT_BOOL CanCancel;
    __declspec(property(get=GetIsAsynchronous))
    VARIANT_BOOL IsAsynchronous;
    __declspec(property(get=GetIsFiniteDuration))
    VARIANT_BOOL IsFiniteDuration;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetSucceeded))
    VARIANT_BOOL Succeeded;
    __declspec(property(get=GetErrorMessage))
    _bstr_t ErrorMessage;

    //
    // Wrapper methods for error-handling
    //

    long GetProgress ( );
    _bstr_t GetStatus ( );
    VARIANT_BOOL GetIsRunning ( );
    VARIANT_BOOL GetCanCancel ( );
    VARIANT_BOOL GetIsAsynchronous ( );
    VARIANT_BOOL GetIsFiniteDuration ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL Run ( );
    VARIANT_BOOL RunAndWaitForCompletion ( );
    VARIANT_BOOL WaitForCompletion ( );
    VARIANT_BOOL Cancel ( );
    VARIANT_BOOL Close ( );
    enum RunStatus WaitWithTimeout (
        double timeOutSeconds );
    enum RunStatus RunAndWaitWithTimeout (
        double timeOutSeconds );
    VARIANT_BOOL GetSucceeded ( );
    _bstr_t GetErrorMessage ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Progress (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Status (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsRunning (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CanCancel (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsAsynchronous (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsFiniteDuration (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Run (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_RunAndWaitForCompletion (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_WaitForCompletion (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Cancel (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Close (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_WaitWithTimeout (
        /*[in]*/ double timeOutSeconds,
        /*[out,retval]*/ enum RunStatus * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_RunAndWaitWithTimeout (
        /*[in]*/ double timeOutSeconds,
        /*[out,retval]*/ enum RunStatus * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Succeeded (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ErrorMessage (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

enum __declspec(uuid("acb1a857-4fb8-4bf4-95e6-a0ee7fcb84c1"))
QuickAdjustType
{
    QuickAdjustType_Radius = 0,
    QuickAdjustType_Thickness = 1
};

enum __declspec(uuid("2a654f7c-6a67-4cc2-a2c5-194f562f251d"))
QuickAdjustCriterion
{
    QuickAdjustCriterion_SpotSizeRadial = 0,
    QuickAdjustCriterion_SpotSizeXOnly = 1,
    QuickAdjustCriterion_SpotSizeYOnly = 2,
    QuickAdjustCriterion_AngularRadial = 3,
    QuickAdjustCriterion_AngularXOnly = 4,
    QuickAdjustCriterion_AngularYOnly = 5
};

struct __declspec(uuid("6f19f415-7226-4e8d-bbb9-d5fedcd9911d"))
IQuickAdjust : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAdjustSurface,put=PutAdjustSurface))
    long AdjustSurface;
    __declspec(property(get=GetSurfaceParameter,put=PutSurfaceParameter))
    enum QuickAdjustType SurfaceParameter;
    __declspec(property(get=GetCriterion,put=PutCriterion))
    enum QuickAdjustCriterion Criterion;
    __declspec(property(get=GetEvaluateSurface,put=PutEvaluateSurface))
    long EvaluateSurface;

    //
    // Wrapper methods for error-handling
    //

    long GetAdjustSurface ( );
    void PutAdjustSurface (
        long pRetVal );
    enum QuickAdjustType GetSurfaceParameter ( );
    void PutSurfaceParameter (
        enum QuickAdjustType pRetVal );
    enum QuickAdjustCriterion GetCriterion ( );
    void PutCriterion (
        enum QuickAdjustCriterion pRetVal );
    long GetEvaluateSurface ( );
    void PutEvaluateSurface (
        long pRetVal );
    HRESULT SetEvaluateSurfaceImage ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AdjustSurface (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AdjustSurface (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_SurfaceParameter (
        /*[out,retval]*/ enum QuickAdjustType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SurfaceParameter (
        /*[in]*/ enum QuickAdjustType pRetVal ) = 0;
      virtual HRESULT __stdcall get_Criterion (
        /*[out,retval]*/ enum QuickAdjustCriterion * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Criterion (
        /*[in]*/ enum QuickAdjustCriterion pRetVal ) = 0;
      virtual HRESULT __stdcall get_EvaluateSurface (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_EvaluateSurface (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetEvaluateSurfaceImage ( ) = 0;
};

enum __declspec(uuid("c91d936d-41ff-419b-b624-5590a7579930"))
QuickFocusCriterion
{
    QuickFocusCriterion_SpotSizeRadial = 0,
    QuickFocusCriterion_SpotSizeXOnly = 1,
    QuickFocusCriterion_SpotSizeYOnly = 2,
    QuickFocusCriterion_RMSWavefront = 3
};

struct __declspec(uuid("9bf20a54-8406-4443-8e45-9987d28d42d3"))
IQuickFocus : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUseCentroid,put=PutUseCentroid))
    VARIANT_BOOL UseCentroid;
    __declspec(property(get=GetCriterion,put=PutCriterion))
    enum QuickFocusCriterion Criterion;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUseCentroid ( );
    void PutUseCentroid (
        VARIANT_BOOL pRetVal );
    enum QuickFocusCriterion GetCriterion ( );
    void PutCriterion (
        enum QuickFocusCriterion pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UseCentroid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseCentroid (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Criterion (
        /*[out,retval]*/ enum QuickFocusCriterion * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Criterion (
        /*[in]*/ enum QuickFocusCriterion pRetVal ) = 0;
};

enum __declspec(uuid("53f6d976-ed38-4bbd-9570-1720f0d974eb"))
ArchiveFileStatus
{
    ArchiveFileStatus_Okay = 0,
    ArchiveFileStatus_UnableToOpen = -1,
    ArchiveFileStatus_InvalidFile = -2,
    ArchiveFileStatus_InvalidVersion = -3
};

struct __declspec(uuid("921bea91-e126-4d0c-a3df-3ab181f88c74"))
IRestoreArchive : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetArchiveFile))
    _bstr_t ArchiveFile;
    __declspec(property(get=GetNumberOfFilesInArchive))
    long NumberOfFilesInArchive;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetArchiveFile ( );
    enum ArchiveFileStatus SetFileName (
        _bstr_t ArchiveFile );
    _bstr_t GetOutputFolder ( );
    VARIANT_BOOL SetOutputFolder (
        _bstr_t folder );
    long GetNumberOfFilesInArchive ( );
    _bstr_t GetFileNameInArchive (
        long fileNumber );
    HRESULT SetFileOverwrite (
        long fileNumber,
        VARIANT_BOOL allowOverwrite );
    HRESULT SetFilesAllOverwrite ( );
    HRESULT SetFilesNoOverwrite ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ArchiveFile (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetFileName (
        /*[in]*/ BSTR ArchiveFile,
        /*[out,retval]*/ enum ArchiveFileStatus * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetOutputFolder (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetOutputFolder (
        /*[in]*/ BSTR folder,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfFilesInArchive (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetFileNameInArchive (
        /*[in]*/ long fileNumber,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetFileOverwrite (
        /*[in]*/ long fileNumber,
        /*[in]*/ VARIANT_BOOL allowOverwrite ) = 0;
      virtual HRESULT __stdcall raw_SetFilesAllOverwrite ( ) = 0;
      virtual HRESULT __stdcall raw_SetFilesNoOverwrite ( ) = 0;
};

struct __declspec(uuid("22a352dd-3f84-489c-bbc0-3e44a146389e"))
ICreateArchive : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUseDataCompression,put=PutUseDataCompression))
    VARIANT_BOOL UseDataCompression;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetArchiveFileName ( );
    VARIANT_BOOL SetArchiveFileName (
        _bstr_t fullFileName );
    VARIANT_BOOL GetUseDataCompression ( );
    void PutUseDataCompression (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetArchiveFileName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetArchiveFileName (
        /*[in]*/ BSTR fullFileName,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseDataCompression (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseDataCompression (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

enum __declspec(uuid("95d029b0-da8e-40e8-bdcd-b1de168dfc40"))
RayPatternType
{
    RayPatternType_XYFan = 0,
    RayPatternType_XFan = 1,
    RayPatternType_YFan = 2,
    RayPatternType_Ring = 3,
    RayPatternType_List = 4,
    RayPatternType_Random = 5,
    RayPatternType_Grid = 6,
    RayPatternType_SolidRing = 7
};

enum __declspec(uuid("2674de40-3dce-4729-85af-2b762dc3302e"))
SplineSegmentsType
{
    SplineSegmentsType_N_016 = 0,
    SplineSegmentsType_N_032 = 1,
    SplineSegmentsType_N_064 = 2,
    SplineSegmentsType_N_128 = 3,
    SplineSegmentsType_N_256 = 4,
    SplineSegmentsType_N_512 = 5
};

enum __declspec(uuid("173ec09d-4a2c-46f5-ad19-f22fa82ee909"))
CADFileType
{
    CADFileType_IGES = 0,
    CADFileType_STEP = 1,
    CADFileType_SAT = 2,
    CADFileType_STL = 3
};

enum __declspec(uuid("7e7ba03d-9cad-43ab-9153-f063154aba4d"))
CADToleranceType
{
    CADToleranceType_N_TenEMinus4 = 0,
    CADToleranceType_N_TenEMinus5 = 1,
    CADToleranceType_N_TenEMinus6 = 2,
    CADToleranceType_N_TenEMinus7 = 3
};

enum __declspec(uuid("917b6f8e-5682-41c3-a7d5-43e3be366b81"))
CADAngularToleranceType
{
    CADAngularToleranceType_Low = 0,
    CADAngularToleranceType_Medium = 1,
    CADAngularToleranceType_High = 2,
    CADAngularToleranceType_Presentation = 3
};

struct __declspec(uuid("cece2eb0-93a7-45dc-9a68-e45c94bf9e30"))
IExportCAD : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFirstSurface,put=PutFirstSurface))
    long FirstSurface;
    __declspec(property(get=GetSurfacesAsSolids,put=PutSurfacesAsSolids))
    VARIANT_BOOL SurfacesAsSolids;
    __declspec(property(get=GetLastSurface,put=PutLastSurface))
    long LastSurface;
    __declspec(property(get=GetScatterNSCRays,put=PutScatterNSCRays))
    VARIANT_BOOL ScatterNSCRays;
    __declspec(property(get=GetCanChangeSurface))
    VARIANT_BOOL CanChangeSurface;
    __declspec(property(get=GetFirstObject,put=PutFirstObject))
    long FirstObject;
    __declspec(property(get=GetSplitNSCRays,put=PutSplitNSCRays))
    VARIANT_BOOL SplitNSCRays;
    __declspec(property(get=GetLastObject,put=PutLastObject))
    long LastObject;
    __declspec(property(get=GetUsePolarization,put=PutUsePolarization))
    VARIANT_BOOL UsePolarization;
    __declspec(property(get=GetSequentialSettingsEnabled))
    VARIANT_BOOL SequentialSettingsEnabled;
    __declspec(property(get=GetRayPattern,put=PutRayPattern))
    enum RayPatternType RayPattern;
    __declspec(property(get=GetOutputFileName,put=PutOutputFileName))
    _bstr_t OutputFileName;
    __declspec(property(get=GetNumberOfRays,put=PutNumberOfRays))
    long NumberOfRays;
    __declspec(property(get=GetAutoNameFaces,put=PutAutoNameFaces))
    VARIANT_BOOL AutoNameFaces;
    __declspec(property(get=GetWavelength,put=PutWavelength))
    long Wavelength;
    __declspec(property(get=GetField,put=PutField))
    long Field;
    __declspec(property(get=GetDeleteVignetted,put=PutDeleteVignetted))
    VARIANT_BOOL DeleteVignetted;
    __declspec(property(get=GetRayLayer,put=PutRayLayer))
    long RayLayer;
    __declspec(property(get=GetLensLayer,put=PutLensLayer))
    long LensLayer;
    __declspec(property(get=GetDummyThickness,put=PutDummyThickness))
    double DummyThickness;
    __declspec(property(get=GetSplineSegments,put=PutSplineSegments))
    enum SplineSegmentsType SplineSegments;
    __declspec(property(get=GetFileType,put=PutFileType))
    enum CADFileType FileType;
    __declspec(property(get=GetTolerance,put=PutTolerance))
    enum CADToleranceType Tolerance;
    __declspec(property(get=GetAngularTolerance,put=PutAngularTolerance))
    enum CADAngularToleranceType AngularTolerance;
    __declspec(property(get=GetConfiguration))
    long Configuration;
    __declspec(property(get=GetExportDummySurfaces,put=PutExportDummySurfaces))
    VARIANT_BOOL ExportDummySurfaces;

    //
    // Wrapper methods for error-handling
    //

    long GetFirstSurface ( );
    void PutFirstSurface (
        long pRetVal );
    long GetLastSurface ( );
    void PutLastSurface (
        long pRetVal );
    VARIANT_BOOL GetCanChangeSurface ( );
    long GetFirstObject ( );
    void PutFirstObject (
        long pRetVal );
    long GetLastObject ( );
    void PutLastObject (
        long pRetVal );
    VARIANT_BOOL GetSequentialSettingsEnabled ( );
    enum RayPatternType GetRayPattern ( );
    void PutRayPattern (
        enum RayPatternType pRetVal );
    long GetNumberOfRays ( );
    void PutNumberOfRays (
        long pRetVal );
    long GetWavelength ( );
    void PutWavelength (
        long pRetVal );
    HRESULT SetWavelengthAll ( );
    long GetField ( );
    void PutField (
        long pRetVal );
    HRESULT SetFieldAll ( );
    VARIANT_BOOL GetDeleteVignetted ( );
    void PutDeleteVignetted (
        VARIANT_BOOL pRetVal );
    long GetRayLayer ( );
    void PutRayLayer (
        long pRetVal );
    long GetLensLayer ( );
    void PutLensLayer (
        long pRetVal );
    double GetDummyThickness ( );
    void PutDummyThickness (
        double pRetVal );
    enum SplineSegmentsType GetSplineSegments ( );
    void PutSplineSegments (
        enum SplineSegmentsType pRetVal );
    enum CADFileType GetFileType ( );
    void PutFileType (
        enum CADFileType pRetVal );
    enum CADToleranceType GetTolerance ( );
    void PutTolerance (
        enum CADToleranceType pRetVal );
    enum CADAngularToleranceType GetAngularTolerance ( );
    void PutAngularTolerance (
        enum CADAngularToleranceType pRetVal );
    long GetConfiguration ( );
    HRESULT SetSingleConfiguration (
        long configurationNumber );
    HRESULT SetCurrentConfiguration ( );
    HRESULT SetConfigurationAllByLayer ( );
    HRESULT SetConfigurationAllByFile ( );
    HRESULT SetConfigurationAllAtOnce ( );
    VARIANT_BOOL GetExportDummySurfaces ( );
    void PutExportDummySurfaces (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetSurfacesAsSolids ( );
    void PutSurfacesAsSolids (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetScatterNSCRays ( );
    void PutScatterNSCRays (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetSplitNSCRays ( );
    void PutSplitNSCRays (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetUsePolarization ( );
    void PutUsePolarization (
        VARIANT_BOOL pRetVal );
    _bstr_t GetOutputFileName ( );
    void PutOutputFileName (
        _bstr_t pRetVal );
    VARIANT_BOOL GetAutoNameFaces ( );
    void PutAutoNameFaces (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FirstSurface (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FirstSurface (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_LastSurface (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_LastSurface (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_CanChangeSurface (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FirstObject (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FirstObject (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_LastObject (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_LastObject (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_SequentialSettingsEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RayPattern (
        /*[out,retval]*/ enum RayPatternType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RayPattern (
        /*[in]*/ enum RayPatternType pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfRays (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfRays (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Wavelength (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Wavelength (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetWavelengthAll ( ) = 0;
      virtual HRESULT __stdcall get_Field (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Field (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetFieldAll ( ) = 0;
      virtual HRESULT __stdcall get_DeleteVignetted (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DeleteVignetted (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_RayLayer (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RayLayer (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_LensLayer (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_LensLayer (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_DummyThickness (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DummyThickness (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_SplineSegments (
        /*[out,retval]*/ enum SplineSegmentsType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SplineSegments (
        /*[in]*/ enum SplineSegmentsType pRetVal ) = 0;
      virtual HRESULT __stdcall get_FileType (
        /*[out,retval]*/ enum CADFileType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FileType (
        /*[in]*/ enum CADFileType pRetVal ) = 0;
      virtual HRESULT __stdcall get_Tolerance (
        /*[out,retval]*/ enum CADToleranceType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Tolerance (
        /*[in]*/ enum CADToleranceType pRetVal ) = 0;
      virtual HRESULT __stdcall get_AngularTolerance (
        /*[out,retval]*/ enum CADAngularToleranceType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AngularTolerance (
        /*[in]*/ enum CADAngularToleranceType pRetVal ) = 0;
      virtual HRESULT __stdcall get_Configuration (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetSingleConfiguration (
        /*[in]*/ long configurationNumber ) = 0;
      virtual HRESULT __stdcall raw_SetCurrentConfiguration ( ) = 0;
      virtual HRESULT __stdcall raw_SetConfigurationAllByLayer ( ) = 0;
      virtual HRESULT __stdcall raw_SetConfigurationAllByFile ( ) = 0;
      virtual HRESULT __stdcall raw_SetConfigurationAllAtOnce ( ) = 0;
      virtual HRESULT __stdcall get_ExportDummySurfaces (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ExportDummySurfaces (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_SurfacesAsSolids (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SurfacesAsSolids (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ScatterNSCRays (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ScatterNSCRays (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_SplitNSCRays (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SplitNSCRays (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UsePolarization (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UsePolarization (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_OutputFileName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OutputFileName (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_AutoNameFaces (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AutoNameFaces (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

enum __declspec(uuid("9991f9c5-7ee6-49f0-96dd-7b8cfb65f7a7"))
ScaleToUnits
{
    ScaleToUnits_Millimeters = 0,
    ScaleToUnits_Centimeters = 1,
    ScaleToUnits_Inches = 2,
    ScaleToUnits_Meters = 3
};

struct __declspec(uuid("6517c7ca-303f-4d9b-bef1-96fceba55ac0"))
IScale : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetScaleFactor,put=PutScaleFactor))
    double ScaleFactor;
    __declspec(property(get=GetFirstComponent,put=PutFirstComponent))
    long FirstComponent;
    __declspec(property(get=GetLastComponent,put=PutLastComponent))
    long LastComponent;
    __declspec(property(get=GetScaleToUnit,put=PutScaleToUnit))
    enum ScaleToUnits ScaleToUnit;
    __declspec(property(get=GetScaleByFactor,put=PutScaleByFactor))
    VARIANT_BOOL ScaleByFactor;
    __declspec(property(get=GetScaleByUnits,put=PutScaleByUnits))
    VARIANT_BOOL ScaleByUnits;
    __declspec(property(get=GetNumberOfComponents))
    long NumberOfComponents;

    //
    // Wrapper methods for error-handling
    //

    double GetScaleFactor ( );
    void PutScaleFactor (
        double pRetVal );
    long GetFirstComponent ( );
    void PutFirstComponent (
        long pRetVal );
    long GetLastComponent ( );
    void PutLastComponent (
        long pRetVal );
    enum ScaleToUnits GetScaleToUnit ( );
    void PutScaleToUnit (
        enum ScaleToUnits pRetVal );
    VARIANT_BOOL GetScaleByFactor ( );
    void PutScaleByFactor (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetScaleByUnits ( );
    void PutScaleByUnits (
        VARIANT_BOOL pRetVal );
    long GetNumberOfComponents ( );
    _bstr_t GetComponentAt (
        long idx );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ScaleFactor (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ScaleFactor (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FirstComponent (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FirstComponent (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_LastComponent (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_LastComponent (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_ScaleToUnit (
        /*[out,retval]*/ enum ScaleToUnits * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ScaleToUnit (
        /*[in]*/ enum ScaleToUnits pRetVal ) = 0;
      virtual HRESULT __stdcall get_ScaleByFactor (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ScaleByFactor (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ScaleByUnits (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ScaleByUnits (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfComponents (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetComponentAt (
        /*[in]*/ long idx,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("2935ec13-970d-4c33-90d1-9870ad5630ca"))
IComputeRMSSpotSize : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUseGaussianQuadrature))
    VARIANT_BOOL UseGaussianQuadrature;
    __declspec(property(get=GetUseRectangularArray))
    VARIANT_BOOL UseRectangularArray;
    __declspec(property(get=GetNumberOfRings))
    long NumberOfRings;
    __declspec(property(get=GetNumberOfArms))
    long NumberOfArms;
    __declspec(property(get=GetObscuredFration))
    double ObscuredFration;
    __declspec(property(get=GetGridSampling))
    long GridSampling;
    __declspec(property(get=GetDeleteVignetted))
    VARIANT_BOOL DeleteVignetted;
    __declspec(property(get=GetAssumeAxialSymmetry,put=PutAssumeAxialSymmetry))
    VARIANT_BOOL AssumeAxialSymmetry;
    __declspec(property(get=GetIgnoreLateralColor,put=PutIgnoreLateralColor))
    VARIANT_BOOL IgnoreLateralColor;
    __declspec(property(get=GetNumberOfConfigurations))
    long NumberOfConfigurations;
    __declspec(property(get=GetNumberOfFields))
    long NumberOfFields;
    __declspec(property(get=GetRMSSpotRadii))
    SAFEARRAY * RMSSpotRadii;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUseGaussianQuadrature ( );
    VARIANT_BOOL GetUseRectangularArray ( );
    long GetNumberOfRings ( );
    long GetNumberOfArms ( );
    double GetObscuredFration ( );
    long GetGridSampling ( );
    VARIANT_BOOL GetDeleteVignetted ( );
    VARIANT_BOOL GetAssumeAxialSymmetry ( );
    void PutAssumeAxialSymmetry (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIgnoreLateralColor ( );
    void PutIgnoreLateralColor (
        VARIANT_BOOL pRetVal );
    HRESULT SetMethodGaussianQuadrature (
        long NumberOfRings,
        long NumberOfArms,
        double obscuredFraction );
    HRESULT SetMethodRectangularArray (
        long GridSampling,
        VARIANT_BOOL DeleteVignetted );
    long GetNumberOfConfigurations ( );
    long GetNumberOfFields ( );
    SAFEARRAY * GetRMSSpotRadii ( );
    double GetSpotRadius (
        long Configuration,
        long Field );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UseGaussianQuadrature (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseRectangularArray (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfRings (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfArms (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ObscuredFration (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_GridSampling (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DeleteVignetted (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AssumeAxialSymmetry (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AssumeAxialSymmetry (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IgnoreLateralColor (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IgnoreLateralColor (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetMethodGaussianQuadrature (
        /*[in]*/ long NumberOfRings,
        /*[in]*/ long NumberOfArms,
        /*[in]*/ double obscuredFraction ) = 0;
      virtual HRESULT __stdcall raw_SetMethodRectangularArray (
        /*[in]*/ long GridSampling,
        /*[in]*/ VARIANT_BOOL DeleteVignetted ) = 0;
      virtual HRESULT __stdcall get_NumberOfConfigurations (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfFields (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RMSSpotRadii (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetSpotRadius (
        /*[in]*/ long Configuration,
        /*[in]*/ long Field,
        /*[out,retval]*/ double * pRetVal ) = 0;
};

enum __declspec(uuid("244d8670-437c-45d2-8340-6aece071123c"))
SetupModes
{
    SetupModes_Sensitivity = 0,
    SetupModes_InverseLimit = 1,
    SetupModes_InverseIncrement = 2,
    SetupModes_SkipSensitivity = 3
};

enum __declspec(uuid("c2535569-fe55-447b-b402-8587f085549a"))
SetupPolynomials
{
    SetupPolynomials_None = 0,
    SetupPolynomials_ThreeMinusTerm = 1,
    SetupPolynomials_FiveMinusTerm = 2
};

enum __declspec(uuid("6b0aea38-164e-4c8e-8401-2f87b9fb1e45"))
SetupCaches
{
    SetupCaches_RecomputeAll = 0,
    SetupCaches_RecomputeChanged = 1,
    SetupCaches_UsePolynomial = 2
};

enum __declspec(uuid("91fdb480-4bf0-40cc-bfa2-df1d12a05cd7"))
SetupChanges
{
    SetupChanges_LinearDifference = 0,
    SetupChanges_RSSDifference = 1
};

enum __declspec(uuid("19fc0681-ed48-436f-8006-6fced54fdcac"))
Criterions
{
    Criterions_NONSEQMeritFunction = 0,
    Criterions_NONSEQUserScript = 1,
    Criterions_RMSSpotRadius = 0,
    Criterions_RMSSpotX = 1,
    Criterions_RMSSpotY = 2,
    Criterions_RMSWavefront = 3,
    Criterions_MeritFunction = 4,
    Criterions_GeometricMTFAverage = 5,
    Criterions_GeometricMTFTan = 6,
    Criterions_GeometricMTFSag = 7,
    Criterions_DiffMTFAverage = 8,
    Criterions_DiffMTFTan = 9,
    Criterions_DiffMTFSag = 10,
    Criterions_BoresightError = 11,
    Criterions_RMSAngularRadius = 12,
    Criterions_RMSAngularX = 13,
    Criterions_RMSAngularY = 14,
    Criterions_UserScript = 15
};

enum __declspec(uuid("832e2d39-de9d-477c-85e0-088d68c49d1b"))
CriterionComps
{
    CriterionComps_NONSEQOptimizeAll = 0,
    CriterionComps_NONSEQNone = 1,
    CriterionComps_NONSEQOptimizeAll_OD = 2,
    CriterionComps_OptimizeAll_DLS = 0,
    CriterionComps_ParaxialFocus = 1,
    CriterionComps_None = 2,
    CriterionComps_OptimizeAll_OD = 3
};

enum __declspec(uuid("7ab89197-b91b-4b77-b7ed-676304d0afa4"))
CriterionFields
{
    CriterionFields_NONSEQUserDefined = 0,
    CriterionFields_Y_Symmetric = 0,
    CriterionFields_XY_Symmetric = 1,
    CriterionFields_UserDefined = 2
};

enum __declspec(uuid("634786ea-70f9-42b9-a794-c04f032e0d61"))
MonteCarloStatistics
{
    MonteCarloStatistics_Normal = 0,
    MonteCarloStatistics_Uniform = 1,
    MonteCarloStatistics_Parabolic = 2
};

struct __declspec(uuid("8f8dc755-5010-48c3-89ec-6a3154f2bb43"))
ITolerancing : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDisplayShowWorstIndex,put=PutDisplayShowWorstIndex))
    long DisplayShowWorstIndex;
    __declspec(property(get=GetNumberOfDisplayShowWorsts))
    long NumberOfDisplayShowWorsts;
    __declspec(property(get=GetResultFilename))
    _bstr_t ResultFilename;
    __declspec(property(get=GetIsForceRayAimingUsed,put=PutIsForceRayAimingUsed))
    VARIANT_BOOL IsForceRayAimingUsed;
    __declspec(property(get=GetIsSeperateFieldConfigurationsUsed,put=PutIsSeperateFieldConfigurationsUsed))
    VARIANT_BOOL IsSeperateFieldConfigurationsUsed;
    __declspec(property(get=GetSetupMode,put=PutSetupMode))
    enum SetupModes SetupMode;
    __declspec(property(get=GetSetupModeIndex,put=PutSetupModeIndex))
    long SetupModeIndex;
    __declspec(property(get=GetNumberOfSetupModes))
    long NumberOfSetupModes;
    __declspec(property(get=GetSetupPolynomial,put=PutSetupPolynomial))
    enum SetupPolynomials SetupPolynomial;
    __declspec(property(get=GetSetupPolynomialsIndex,put=PutSetupPolynomialsIndex))
    long SetupPolynomialsIndex;
    __declspec(property(get=GetNumberOfSetupPolynomials))
    long NumberOfSetupPolynomials;
    __declspec(property(get=GetSetupCache,put=PutSetupCache))
    enum SetupCaches SetupCache;
    __declspec(property(get=GetSetupCacheIndex,put=PutSetupCacheIndex))
    long SetupCacheIndex;
    __declspec(property(get=GetNumberOfSetupCaches))
    long NumberOfSetupCaches;
    __declspec(property(get=GetSetupChange,put=PutSetupChange))
    enum SetupChanges SetupChange;
    __declspec(property(get=GetSetupChangeIndex,put=PutSetupChangeIndex))
    long SetupChangeIndex;
    __declspec(property(get=GetNumberOfSetupChanges))
    long NumberOfSetupChanges;
    __declspec(property(get=GetSetupCore,put=PutSetupCore))
    long SetupCore;
    __declspec(property(get=GetSetupCoreIndex,put=PutSetupCoreIndex))
    long SetupCoreIndex;
    __declspec(property(get=GetNumberOfSetupCores))
    long NumberOfSetupCores;
    __declspec(property(get=GetMaximumCriteria,put=PutMaximumCriteria))
    double MaximumCriteria;
    __declspec(property(get=GetMTFFrequency,put=PutMTFFrequency))
    double MTFFrequency;
    __declspec(property(get=GetCriterion,put=PutCriterion))
    enum Criterions Criterion;
    __declspec(property(get=GetCriterionIndex,put=PutCriterionIndex))
    long CriterionIndex;
    __declspec(property(get=GetNumberOfCriteria))
    long NumberOfCriteria;
    __declspec(property(get=GetCriterionSampling,put=PutCriterionSampling))
    long CriterionSampling;
    __declspec(property(get=GetCriterionSamplingIndex,put=PutCriterionSamplingIndex))
    long CriterionSamplingIndex;
    __declspec(property(get=GetNumberOfCriterionSamplings))
    long NumberOfCriterionSamplings;
    __declspec(property(get=GetCriterionComp,put=PutCriterionComp))
    enum CriterionComps CriterionComp;
    __declspec(property(get=GetCriterionCompIndex,put=PutCriterionCompIndex))
    long CriterionCompIndex;
    __declspec(property(get=GetNumberOfCriterionComps))
    long NumberOfCriterionComps;
    __declspec(property(get=GetCriterionConfiguration,put=PutCriterionConfiguration))
    long CriterionConfiguration;
    __declspec(property(get=GetCriterionConfigurationIndex,put=PutCriterionConfigurationIndex))
    long CriterionConfigurationIndex;
    __declspec(property(get=GetNumberOfCriterionConfigurations))
    long NumberOfCriterionConfigurations;
    __declspec(property(get=GetCriterionField,put=PutCriterionField))
    enum CriterionFields CriterionField;
    __declspec(property(get=GetCriterionFieldIndex,put=PutCriterionFieldIndex))
    long CriterionFieldIndex;
    __declspec(property(get=GetNumberOfCriterionFields))
    long NumberOfCriterionFields;
    __declspec(property(get=GetCriterionCycle,put=PutCriterionCycle))
    long CriterionCycle;
    __declspec(property(get=GetCriterionCycleIndex,put=PutCriterionCycleIndex))
    long CriterionCycleIndex;
    __declspec(property(get=GetNumberOfCriterionCycles))
    long NumberOfCriterionCycles;
    __declspec(property(get=GetCriterionScript,put=PutCriterionScript))
    long CriterionScript;
    __declspec(property(get=GetCriterionScriptIndex,put=PutCriterionScriptIndex))
    long CriterionScriptIndex;
    __declspec(property(get=GetNumberOfCriterionScripts))
    long NumberOfCriterionScripts;
    __declspec(property(get=GetNumberOfRuns,put=PutNumberOfRuns))
    long NumberOfRuns;
    __declspec(property(get=GetNumberToSave,put=PutNumberToSave))
    long NumberToSave;
    __declspec(property(get=GetIsSaveBestWorstUsed,put=PutIsSaveBestWorstUsed))
    VARIANT_BOOL IsSaveBestWorstUsed;
    __declspec(property(get=GetIsOverlayGraphicsUsed,put=PutIsOverlayGraphicsUsed))
    VARIANT_BOOL IsOverlayGraphicsUsed;
    __declspec(property(get=GetFilePrefix,put=PutFilePrefix))
    _bstr_t FilePrefix;
    __declspec(property(get=GetMonteCarloStatistic,put=PutMonteCarloStatistic))
    enum MonteCarloStatistics MonteCarloStatistic;
    __declspec(property(get=GetMonteCarloStatisticIndex,put=PutMonteCarloStatisticIndex))
    long MonteCarloStatisticIndex;
    __declspec(property(get=GetNumberOfMonteCarloStatistics))
    long NumberOfMonteCarloStatistics;
    __declspec(property(get=GetIsShowDescriptionsUsed,put=PutIsShowDescriptionsUsed))
    VARIANT_BOOL IsShowDescriptionsUsed;
    __declspec(property(get=GetIsShowCompensatorsUsed,put=PutIsShowCompensatorsUsed))
    VARIANT_BOOL IsShowCompensatorsUsed;
    __declspec(property(get=GetIsHideAllButWorstUsed,put=PutIsHideAllButWorstUsed))
    VARIANT_BOOL IsHideAllButWorstUsed;
    __declspec(property(get=GetOutputFile,put=PutOutputFile))
    _bstr_t OutputFile;
    __declspec(property(get=GetDisplayShowWorst,put=PutDisplayShowWorst))
    long DisplayShowWorst;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL Save (
        _bstr_t fileName );
    VARIANT_BOOL Load (
        _bstr_t fileName );
    VARIANT_BOOL Reset ( );
    _bstr_t GetResultFilename ( );
    VARIANT_BOOL GetIsForceRayAimingUsed ( );
    void PutIsForceRayAimingUsed (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIsSeperateFieldConfigurationsUsed ( );
    void PutIsSeperateFieldConfigurationsUsed (
        VARIANT_BOOL pRetVal );
    enum SetupModes GetSetupMode ( );
    void PutSetupMode (
        enum SetupModes pRetVal );
    long GetSetupModeIndex ( );
    void PutSetupModeIndex (
        long pRetVal );
    long GetNumberOfSetupModes ( );
    _bstr_t GetSetupModeAt (
        long idx );
    enum SetupPolynomials GetSetupPolynomial ( );
    void PutSetupPolynomial (
        enum SetupPolynomials pRetVal );
    long GetSetupPolynomialsIndex ( );
    void PutSetupPolynomialsIndex (
        long pRetVal );
    long GetNumberOfSetupPolynomials ( );
    _bstr_t GetSetupPolynomialAt (
        long idx );
    enum SetupCaches GetSetupCache ( );
    void PutSetupCache (
        enum SetupCaches pRetVal );
    long GetSetupCacheIndex ( );
    void PutSetupCacheIndex (
        long pRetVal );
    long GetNumberOfSetupCaches ( );
    _bstr_t GetSetupCacheAt (
        long idx );
    enum SetupChanges GetSetupChange ( );
    void PutSetupChange (
        enum SetupChanges pRetVal );
    long GetSetupChangeIndex ( );
    void PutSetupChangeIndex (
        long pRetVal );
    long GetNumberOfSetupChanges ( );
    _bstr_t GetSetupChangeAt (
        long idx );
    long GetSetupCore ( );
    void PutSetupCore (
        long pRetVal );
    long GetSetupCoreIndex ( );
    void PutSetupCoreIndex (
        long pRetVal );
    long GetNumberOfSetupCores ( );
    _bstr_t GetSetupCoreAt (
        long idx );
    double GetMaximumCriteria ( );
    void PutMaximumCriteria (
        double pRetVal );
    double GetMTFFrequency ( );
    void PutMTFFrequency (
        double pRetVal );
    enum Criterions GetCriterion ( );
    void PutCriterion (
        enum Criterions pRetVal );
    long GetCriterionIndex ( );
    void PutCriterionIndex (
        long pRetVal );
    long GetNumberOfCriteria ( );
    _bstr_t GetCriterionAt (
        long idx );
    long GetCriterionSampling ( );
    void PutCriterionSampling (
        long pRetVal );
    long GetCriterionSamplingIndex ( );
    void PutCriterionSamplingIndex (
        long pRetVal );
    long GetNumberOfCriterionSamplings ( );
    _bstr_t GetCriterionSampleAt (
        long idx );
    enum CriterionComps GetCriterionComp ( );
    void PutCriterionComp (
        enum CriterionComps pRetVal );
    long GetCriterionCompIndex ( );
    void PutCriterionCompIndex (
        long pRetVal );
    long GetNumberOfCriterionComps ( );
    _bstr_t GetCriterionCompAt (
        long idx );
    long GetCriterionConfiguration ( );
    void PutCriterionConfiguration (
        long pRetVal );
    long GetCriterionConfigurationIndex ( );
    void PutCriterionConfigurationIndex (
        long pRetVal );
    long GetNumberOfCriterionConfigurations ( );
    _bstr_t GetCriterionConfigurationAt (
        long idx );
    enum CriterionFields GetCriterionField ( );
    void PutCriterionField (
        enum CriterionFields pRetVal );
    long GetCriterionFieldIndex ( );
    void PutCriterionFieldIndex (
        long pRetVal );
    long GetNumberOfCriterionFields ( );
    _bstr_t GetCriterionFieldAt (
        long idx );
    long GetCriterionCycle ( );
    void PutCriterionCycle (
        long pRetVal );
    long GetCriterionCycleIndex ( );
    void PutCriterionCycleIndex (
        long pRetVal );
    long GetNumberOfCriterionCycles ( );
    _bstr_t GetCriterionCycleAt (
        long idx );
    long GetCriterionScript ( );
    void PutCriterionScript (
        long pRetVal );
    long GetCriterionScriptIndex ( );
    void PutCriterionScriptIndex (
        long pRetVal );
    long GetNumberOfCriterionScripts ( );
    _bstr_t GetCriterionScriptAt (
        long idx );
    long GetNumberOfRuns ( );
    void PutNumberOfRuns (
        long pRetVal );
    long GetNumberToSave ( );
    void PutNumberToSave (
        long pRetVal );
    VARIANT_BOOL GetIsSaveBestWorstUsed ( );
    void PutIsSaveBestWorstUsed (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIsOverlayGraphicsUsed ( );
    void PutIsOverlayGraphicsUsed (
        VARIANT_BOOL pRetVal );
    _bstr_t GetFilePrefix ( );
    void PutFilePrefix (
        _bstr_t pRetVal );
    enum MonteCarloStatistics GetMonteCarloStatistic ( );
    void PutMonteCarloStatistic (
        enum MonteCarloStatistics pRetVal );
    long GetMonteCarloStatisticIndex ( );
    void PutMonteCarloStatisticIndex (
        long pRetVal );
    long GetNumberOfMonteCarloStatistics ( );
    _bstr_t GetMonteCarloStatisticAt (
        long idx );
    VARIANT_BOOL GetIsShowDescriptionsUsed ( );
    void PutIsShowDescriptionsUsed (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIsShowCompensatorsUsed ( );
    void PutIsShowCompensatorsUsed (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIsHideAllButWorstUsed ( );
    void PutIsHideAllButWorstUsed (
        VARIANT_BOOL pRetVal );
    _bstr_t GetOutputFile ( );
    void PutOutputFile (
        _bstr_t pRetVal );
    long GetDisplayShowWorst ( );
    void PutDisplayShowWorst (
        long pRetVal );
    long GetDisplayShowWorstIndex ( );
    void PutDisplayShowWorstIndex (
        long pRetVal );
    long GetNumberOfDisplayShowWorsts ( );
    _bstr_t GetDisplayShowWorstAt (
        long idx );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Save (
        /*[in]*/ BSTR fileName,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Load (
        /*[in]*/ BSTR fileName,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Reset (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ResultFilename (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsForceRayAimingUsed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsForceRayAimingUsed (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsSeperateFieldConfigurationsUsed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsSeperateFieldConfigurationsUsed (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_SetupMode (
        /*[out,retval]*/ enum SetupModes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SetupMode (
        /*[in]*/ enum SetupModes pRetVal ) = 0;
      virtual HRESULT __stdcall get_SetupModeIndex (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SetupModeIndex (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfSetupModes (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetSetupModeAt (
        /*[in]*/ long idx,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SetupPolynomial (
        /*[out,retval]*/ enum SetupPolynomials * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SetupPolynomial (
        /*[in]*/ enum SetupPolynomials pRetVal ) = 0;
      virtual HRESULT __stdcall get_SetupPolynomialsIndex (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SetupPolynomialsIndex (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfSetupPolynomials (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetSetupPolynomialAt (
        /*[in]*/ long idx,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SetupCache (
        /*[out,retval]*/ enum SetupCaches * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SetupCache (
        /*[in]*/ enum SetupCaches pRetVal ) = 0;
      virtual HRESULT __stdcall get_SetupCacheIndex (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SetupCacheIndex (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfSetupCaches (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetSetupCacheAt (
        /*[in]*/ long idx,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SetupChange (
        /*[out,retval]*/ enum SetupChanges * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SetupChange (
        /*[in]*/ enum SetupChanges pRetVal ) = 0;
      virtual HRESULT __stdcall get_SetupChangeIndex (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SetupChangeIndex (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfSetupChanges (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetSetupChangeAt (
        /*[in]*/ long idx,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SetupCore (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SetupCore (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_SetupCoreIndex (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SetupCoreIndex (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfSetupCores (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetSetupCoreAt (
        /*[in]*/ long idx,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumCriteria (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaximumCriteria (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MTFFrequency (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MTFFrequency (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Criterion (
        /*[out,retval]*/ enum Criterions * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Criterion (
        /*[in]*/ enum Criterions pRetVal ) = 0;
      virtual HRESULT __stdcall get_CriterionIndex (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CriterionIndex (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfCriteria (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetCriterionAt (
        /*[in]*/ long idx,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CriterionSampling (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CriterionSampling (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_CriterionSamplingIndex (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CriterionSamplingIndex (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfCriterionSamplings (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetCriterionSampleAt (
        /*[in]*/ long idx,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CriterionComp (
        /*[out,retval]*/ enum CriterionComps * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CriterionComp (
        /*[in]*/ enum CriterionComps pRetVal ) = 0;
      virtual HRESULT __stdcall get_CriterionCompIndex (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CriterionCompIndex (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfCriterionComps (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetCriterionCompAt (
        /*[in]*/ long idx,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CriterionConfiguration (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CriterionConfiguration (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_CriterionConfigurationIndex (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CriterionConfigurationIndex (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfCriterionConfigurations (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetCriterionConfigurationAt (
        /*[in]*/ long idx,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CriterionField (
        /*[out,retval]*/ enum CriterionFields * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CriterionField (
        /*[in]*/ enum CriterionFields pRetVal ) = 0;
      virtual HRESULT __stdcall get_CriterionFieldIndex (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CriterionFieldIndex (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfCriterionFields (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetCriterionFieldAt (
        /*[in]*/ long idx,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CriterionCycle (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CriterionCycle (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_CriterionCycleIndex (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CriterionCycleIndex (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfCriterionCycles (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetCriterionCycleAt (
        /*[in]*/ long idx,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CriterionScript (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CriterionScript (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_CriterionScriptIndex (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CriterionScriptIndex (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfCriterionScripts (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetCriterionScriptAt (
        /*[in]*/ long idx,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfRuns (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfRuns (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberToSave (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberToSave (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsSaveBestWorstUsed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsSaveBestWorstUsed (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsOverlayGraphicsUsed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsOverlayGraphicsUsed (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_FilePrefix (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FilePrefix (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_MonteCarloStatistic (
        /*[out,retval]*/ enum MonteCarloStatistics * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MonteCarloStatistic (
        /*[in]*/ enum MonteCarloStatistics pRetVal ) = 0;
      virtual HRESULT __stdcall get_MonteCarloStatisticIndex (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MonteCarloStatisticIndex (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfMonteCarloStatistics (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetMonteCarloStatisticAt (
        /*[in]*/ long idx,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsShowDescriptionsUsed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsShowDescriptionsUsed (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsShowCompensatorsUsed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsShowCompensatorsUsed (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsHideAllButWorstUsed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsHideAllButWorstUsed (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_OutputFile (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OutputFile (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayShowWorst (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayShowWorst (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayShowWorstIndex (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayShowWorstIndex (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfDisplayShowWorsts (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetDisplayShowWorstAt (
        /*[in]*/ long idx,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

enum __declspec(uuid("bfc61296-3bd7-4ed4-b566-0e9e6b86a4d0"))
ZRDFormatType
{
    ZRDFormatType_UncompressedFullData = 0,
    ZRDFormatType_CompressedBasicData = 1,
    ZRDFormatType_CompressedFullData = 2
};

enum __declspec(uuid("c1a432db-f63d-484a-8b2f-d4e6161b4d4c"))
LTRaySampling
{
    LTRaySampling_S_1X_Low = 0,
    LTRaySampling_S_4X = 1,
    LTRaySampling_S_16X = 2,
    LTRaySampling_S_64X = 3,
    LTRaySampling_S_256X = 4,
    LTRaySampling_S_1024X = 5
};

enum __declspec(uuid("77b661d4-da2b-482f-99c7-992dfd2602eb"))
LTEdgeSasmpling
{
    LTEdgeSasmpling_S_1X_Low = 0,
    LTEdgeSasmpling_S_4X = 1,
    LTEdgeSasmpling_S_16X = 2,
    LTEdgeSasmpling_S_64X = 3,
    LTEdgeSasmpling_S_256X = 4
};

struct __declspec(uuid("7b974dca-5ed6-4756-94c9-23859d06c894"))
ILightningTrace : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRaySampling,put=PutRaySampling))
    enum LTRaySampling RaySampling;
    __declspec(property(get=GetEdgeSampling,put=PutEdgeSampling))
    enum LTEdgeSasmpling EdgeSampling;

    //
    // Wrapper methods for error-handling
    //

    enum LTRaySampling GetRaySampling ( );
    void PutRaySampling (
        enum LTRaySampling pRetVal );
    enum LTEdgeSasmpling GetEdgeSampling ( );
    void PutEdgeSampling (
        enum LTEdgeSasmpling pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RaySampling (
        /*[out,retval]*/ enum LTRaySampling * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RaySampling (
        /*[in]*/ enum LTRaySampling pRetVal ) = 0;
      virtual HRESULT __stdcall get_EdgeSampling (
        /*[out,retval]*/ enum LTEdgeSasmpling * pRetVal ) = 0;
      virtual HRESULT __stdcall put_EdgeSampling (
        /*[in]*/ enum LTEdgeSasmpling pRetVal ) = 0;
};

enum __declspec(uuid("5210d2f6-3c16-4e6d-9e1e-4cfcc1899553"))
RaysType
{
    RaysType_Real = 0,
    RaysType_Paraxial = 1
};

enum __declspec(uuid("005a556f-f5ce-4d97-b0a2-1c4916d9d508"))
OPDMode
{
    OPDMode_None = 0,
    OPDMode_Current = 1,
    OPDMode_CurrentAndChief = 2
};

struct __declspec(uuid("182ee3aa-9702-4792-8449-bb7a38980205"))
IRayTraceNormUnpolData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNumberOfRays))
    long NumberOfRays;
    __declspec(property(get=GetMaxRays))
    long MaxRays;
    __declspec(property(get=GetHasResultData))
    VARIANT_BOOL HasResultData;

    //
    // Wrapper methods for error-handling
    //

    long GetNumberOfRays ( );
    long GetMaxRays ( );
    HRESULT ClearData ( );
    VARIANT_BOOL AddRay (
        long waveNumber,
        double Hx,
        double Hy,
        double Px,
        double Py,
        enum OPDMode calcOPD );
    VARIANT_BOOL GetHasResultData ( );
    VARIANT_BOOL StartReadingResults ( );
    VARIANT_BOOL ReadNextResult (
        long * rayNumber,
        long * ErrorCode,
        long * vignetteCode,
        double * X,
        double * Y,
        double * Z,
        double * L,
        double * M,
        double * N,
        double * l2,
        double * m2,
        double * n2,
        double * opd,
        double * intensity );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NumberOfRays (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaxRays (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ClearData ( ) = 0;
      virtual HRESULT __stdcall raw_AddRay (
        /*[in]*/ long waveNumber,
        /*[in]*/ double Hx,
        /*[in]*/ double Hy,
        /*[in]*/ double Px,
        /*[in]*/ double Py,
        /*[in]*/ enum OPDMode calcOPD,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_HasResultData (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_StartReadingResults (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ReadNextResult (
        /*[out]*/ long * rayNumber,
        /*[out]*/ long * ErrorCode,
        /*[out]*/ long * vignetteCode,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out]*/ double * L,
        /*[out]*/ double * M,
        /*[out]*/ double * N,
        /*[out]*/ double * l2,
        /*[out]*/ double * m2,
        /*[out]*/ double * n2,
        /*[out]*/ double * opd,
        /*[out]*/ double * intensity,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("b732db4d-d3cd-4bbb-9a26-b4c46a66b609"))
IRayTraceDirectUnpolData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNumberOfRays))
    long NumberOfRays;
    __declspec(property(get=GetMaxRays))
    long MaxRays;
    __declspec(property(get=GetHasResultData))
    VARIANT_BOOL HasResultData;

    //
    // Wrapper methods for error-handling
    //

    long GetNumberOfRays ( );
    long GetMaxRays ( );
    HRESULT ClearData ( );
    VARIANT_BOOL AddRay (
        long waveNumber,
        double X,
        double Y,
        double Z,
        double L,
        double M,
        double N );
    VARIANT_BOOL GetHasResultData ( );
    VARIANT_BOOL StartReadingResults ( );
    VARIANT_BOOL ReadNextResult (
        long * rayNumber,
        long * ErrorCode,
        long * vignetteCode,
        double * X,
        double * Y,
        double * Z,
        double * L,
        double * M,
        double * N,
        double * l2,
        double * m2,
        double * n2,
        double * intensity );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NumberOfRays (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaxRays (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ClearData ( ) = 0;
      virtual HRESULT __stdcall raw_AddRay (
        /*[in]*/ long waveNumber,
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[in]*/ double L,
        /*[in]*/ double M,
        /*[in]*/ double N,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_HasResultData (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_StartReadingResults (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ReadNextResult (
        /*[out]*/ long * rayNumber,
        /*[out]*/ long * ErrorCode,
        /*[out]*/ long * vignetteCode,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out]*/ double * L,
        /*[out]*/ double * M,
        /*[out]*/ double * N,
        /*[out]*/ double * l2,
        /*[out]*/ double * m2,
        /*[out]*/ double * n2,
        /*[out]*/ double * intensity,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("30afffe4-c357-4d07-bf47-2cf989b93de3"))
IRayTraceNormPolData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNumberOfRays))
    long NumberOfRays;
    __declspec(property(get=GetMaxRays))
    long MaxRays;
    __declspec(property(get=GetHasResultData))
    VARIANT_BOOL HasResultData;

    //
    // Wrapper methods for error-handling
    //

    long GetNumberOfRays ( );
    long GetMaxRays ( );
    HRESULT ClearData ( );
    VARIANT_BOOL AddRay (
        long waveNumber,
        double Hx,
        double Hy,
        double Px,
        double Py,
        double exr,
        double exi,
        double eyr,
        double eyi,
        double ezr,
        double ezi );
    VARIANT_BOOL GetHasResultData ( );
    VARIANT_BOOL StartReadingResults ( );
    VARIANT_BOOL ReadNextResult (
        long * rayNumber,
        long * ErrorCode,
        double * exr,
        double * exi,
        double * eyr,
        double * eyi,
        double * ezr,
        double * ezi,
        double * intensity );
    VARIANT_BOOL ReadNextResultFull (
        long * rayNumber,
        long * ErrorCode,
        double * xo,
        double * yo,
        double * zo,
        double * lo,
        double * mo,
        double * no,
        double * exr,
        double * exi,
        double * eyr,
        double * eyi,
        double * ezr,
        double * ezi,
        double * intensity );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NumberOfRays (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaxRays (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ClearData ( ) = 0;
      virtual HRESULT __stdcall raw_AddRay (
        /*[in]*/ long waveNumber,
        /*[in]*/ double Hx,
        /*[in]*/ double Hy,
        /*[in]*/ double Px,
        /*[in]*/ double Py,
        /*[in]*/ double exr,
        /*[in]*/ double exi,
        /*[in]*/ double eyr,
        /*[in]*/ double eyi,
        /*[in]*/ double ezr,
        /*[in]*/ double ezi,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_HasResultData (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_StartReadingResults (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ReadNextResult (
        /*[out]*/ long * rayNumber,
        /*[out]*/ long * ErrorCode,
        /*[out]*/ double * exr,
        /*[out]*/ double * exi,
        /*[out]*/ double * eyr,
        /*[out]*/ double * eyi,
        /*[out]*/ double * ezr,
        /*[out]*/ double * ezi,
        /*[out]*/ double * intensity,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ReadNextResultFull (
        /*[out]*/ long * rayNumber,
        /*[out]*/ long * ErrorCode,
        /*[out]*/ double * xo,
        /*[out]*/ double * yo,
        /*[out]*/ double * zo,
        /*[out]*/ double * lo,
        /*[out]*/ double * mo,
        /*[out]*/ double * no,
        /*[out]*/ double * exr,
        /*[out]*/ double * exi,
        /*[out]*/ double * eyr,
        /*[out]*/ double * eyi,
        /*[out]*/ double * ezr,
        /*[out]*/ double * ezi,
        /*[out]*/ double * intensity,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("bc99e52b-73a9-4764-adc4-178257b8608a"))
IRayTraceDirectPolData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNumberOfRays))
    long NumberOfRays;
    __declspec(property(get=GetMaxRays))
    long MaxRays;
    __declspec(property(get=GetHasResultData))
    VARIANT_BOOL HasResultData;

    //
    // Wrapper methods for error-handling
    //

    long GetNumberOfRays ( );
    long GetMaxRays ( );
    HRESULT ClearData ( );
    VARIANT_BOOL AddRay (
        long waveNumber,
        double X,
        double Y,
        double Z,
        double L,
        double M,
        double N );
    VARIANT_BOOL GetHasResultData ( );
    VARIANT_BOOL StartReadingResults ( );
    VARIANT_BOOL ReadNextResult (
        long * rayNumber,
        long * ErrorCode,
        long * vignetteCode,
        double * exr,
        double * exi,
        double * eyr,
        double * eyi,
        double * ezr,
        double * ezi,
        double * intensity );
    VARIANT_BOOL ReadNextResultFull (
        long * rayNumber,
        long * ErrorCode,
        long * vignetteCode,
        double * xo,
        double * yo,
        double * zo,
        double * lo,
        double * mo,
        double * no,
        double * exr,
        double * exi,
        double * eyr,
        double * eyi,
        double * ezr,
        double * ezi,
        double * intensity );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NumberOfRays (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaxRays (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ClearData ( ) = 0;
      virtual HRESULT __stdcall raw_AddRay (
        /*[in]*/ long waveNumber,
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[in]*/ double L,
        /*[in]*/ double M,
        /*[in]*/ double N,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_HasResultData (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_StartReadingResults (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ReadNextResult (
        /*[out]*/ long * rayNumber,
        /*[out]*/ long * ErrorCode,
        /*[out]*/ long * vignetteCode,
        /*[out]*/ double * exr,
        /*[out]*/ double * exi,
        /*[out]*/ double * eyr,
        /*[out]*/ double * eyi,
        /*[out]*/ double * ezr,
        /*[out]*/ double * ezi,
        /*[out]*/ double * intensity,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ReadNextResultFull (
        /*[out]*/ long * rayNumber,
        /*[out]*/ long * ErrorCode,
        /*[out]*/ long * vignetteCode,
        /*[out]*/ double * xo,
        /*[out]*/ double * yo,
        /*[out]*/ double * zo,
        /*[out]*/ double * lo,
        /*[out]*/ double * mo,
        /*[out]*/ double * no,
        /*[out]*/ double * exr,
        /*[out]*/ double * exi,
        /*[out]*/ double * eyr,
        /*[out]*/ double * eyi,
        /*[out]*/ double * ezr,
        /*[out]*/ double * ezi,
        /*[out]*/ double * intensity,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

enum __declspec(uuid("91fb7aee-baff-4469-b2f9-13d4586ca66e"))
NSCTraceOptions
{
    NSCTraceOptions_None = 0,
    NSCTraceOptions_UsePolarization = 1,
    NSCTraceOptions_UseSplitting = 2,
    NSCTraceOptions_UseScattering = 4
};

struct __declspec(uuid("a78e9ca6-aec2-4c23-ad7e-43ee8dd65dfb"))
IRayTraceNSCData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNumberOfRays))
    long NumberOfRays;
    __declspec(property(get=GetMaxRays))
    long MaxRays;
    __declspec(property(get=GetHasResultData))
    VARIANT_BOOL HasResultData;

    //
    // Wrapper methods for error-handling
    //

    long GetNumberOfRays ( );
    long GetMaxRays ( );
    HRESULT ClearData ( );
    VARIANT_BOOL AddRay (
        long waveNumber,
        long surf,
        enum NSCTraceOptions Mode,
        double X,
        double Y,
        double Z,
        double L,
        double M,
        double N,
        long InsideOf,
        double exr,
        double exi,
        double eyr,
        double eyi,
        double ezr,
        double ezi );
    VARIANT_BOOL GetHasResultData ( );
    VARIANT_BOOL StartReadingResults ( );
    VARIANT_BOOL ReadNextResult (
        long * rayNumber,
        long * ErrorCode,
        long * wave,
        long * numSegments );
    VARIANT_BOOL ReadNextSegment (
        long * segmentLevel,
        long * segmentParent,
        long * hitObj,
        long * InsideOf,
        double * X,
        double * Y,
        double * Z,
        double * L,
        double * M,
        double * N,
        double * exr,
        double * exi,
        double * eyr,
        double * eyi,
        double * ezr,
        double * ezi,
        double * intensity,
        double * pathLength );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NumberOfRays (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaxRays (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ClearData ( ) = 0;
      virtual HRESULT __stdcall raw_AddRay (
        /*[in]*/ long waveNumber,
        /*[in]*/ long surf,
        /*[in]*/ enum NSCTraceOptions Mode,
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[in]*/ double L,
        /*[in]*/ double M,
        /*[in]*/ double N,
        /*[in]*/ long InsideOf,
        /*[in]*/ double exr,
        /*[in]*/ double exi,
        /*[in]*/ double eyr,
        /*[in]*/ double eyi,
        /*[in]*/ double ezr,
        /*[in]*/ double ezi,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_HasResultData (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_StartReadingResults (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ReadNextResult (
        /*[out]*/ long * rayNumber,
        /*[out]*/ long * ErrorCode,
        /*[out]*/ long * wave,
        /*[out]*/ long * numSegments,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ReadNextSegment (
        /*[out]*/ long * segmentLevel,
        /*[out]*/ long * segmentParent,
        /*[out]*/ long * hitObj,
        /*[out]*/ long * InsideOf,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out]*/ double * L,
        /*[out]*/ double * M,
        /*[out]*/ double * N,
        /*[out]*/ double * exr,
        /*[out]*/ double * exi,
        /*[out]*/ double * eyr,
        /*[out]*/ double * eyi,
        /*[out]*/ double * ezr,
        /*[out]*/ double * ezi,
        /*[out]*/ double * intensity,
        /*[out]*/ double * pathLength,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("eceba620-529b-490d-bbc3-9ee693eef4f6"))
IRayTraceNSCSourceData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUseSingleSource,put=PutUseSingleSource))
    VARIANT_BOOL UseSingleSource;
    __declspec(property(get=GetSurfaceNumber,put=PutSurfaceNumber))
    long SurfaceNumber;
    __declspec(property(get=GetObjectNumber,put=PutObjectNumber))
    long ObjectNumber;
    __declspec(property(get=GetMaxRays,put=PutMaxRays))
    long MaxRays;
    __declspec(property(get=GetTraceOptions,put=PutTraceOptions))
    enum NSCTraceOptions TraceOptions;
    __declspec(property(get=GetWavelength,put=PutWavelength))
    long Wavelength;
    __declspec(property(get=GetHasResultData))
    VARIANT_BOOL HasResultData;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUseSingleSource ( );
    void PutUseSingleSource (
        VARIANT_BOOL pRetVal );
    long GetSurfaceNumber ( );
    void PutSurfaceNumber (
        long pRetVal );
    long GetObjectNumber ( );
    void PutObjectNumber (
        long pRetVal );
    long GetMaxRays ( );
    void PutMaxRays (
        long pRetVal );
    enum NSCTraceOptions GetTraceOptions ( );
    void PutTraceOptions (
        enum NSCTraceOptions pRetVal );
    long GetWavelength ( );
    void PutWavelength (
        long pRetVal );
    HRESULT UsePrimaryWavelength ( );
    HRESULT UseAnyWavelength ( );
    VARIANT_BOOL GetHasResultData ( );
    VARIANT_BOOL StartReadingResults ( );
    VARIANT_BOOL ReadNextResult (
        long * rayNumber,
        long * ErrorCode,
        long * wave,
        long * numSegments );
    VARIANT_BOOL ReadNextSegment (
        long * segmentLevel,
        long * segmentParent,
        long * hitObj,
        long * InsideOf,
        double * X,
        double * Y,
        double * Z,
        double * L,
        double * M,
        double * N,
        double * exr,
        double * exi,
        double * eyr,
        double * eyi,
        double * ezr,
        double * ezi,
        double * intensity,
        double * pathLength );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UseSingleSource (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseSingleSource (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_SurfaceNumber (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SurfaceNumber (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectNumber (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ObjectNumber (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaxRays (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaxRays (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_TraceOptions (
        /*[out,retval]*/ enum NSCTraceOptions * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TraceOptions (
        /*[in]*/ enum NSCTraceOptions pRetVal ) = 0;
      virtual HRESULT __stdcall get_Wavelength (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Wavelength (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall raw_UsePrimaryWavelength ( ) = 0;
      virtual HRESULT __stdcall raw_UseAnyWavelength ( ) = 0;
      virtual HRESULT __stdcall get_HasResultData (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_StartReadingResults (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ReadNextResult (
        /*[out]*/ long * rayNumber,
        /*[out]*/ long * ErrorCode,
        /*[out]*/ long * wave,
        /*[out]*/ long * numSegments,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ReadNextSegment (
        /*[out]*/ long * segmentLevel,
        /*[out]*/ long * segmentParent,
        /*[out]*/ long * hitObj,
        /*[out]*/ long * InsideOf,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out]*/ double * L,
        /*[out]*/ double * M,
        /*[out]*/ double * N,
        /*[out]*/ double * exr,
        /*[out]*/ double * exi,
        /*[out]*/ double * eyr,
        /*[out]*/ double * eyi,
        /*[out]*/ double * ezr,
        /*[out]*/ double * ezi,
        /*[out]*/ double * intensity,
        /*[out]*/ double * pathLength,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("3c1dfe73-da99-42c9-b7d1-2bbd9642b211"))
IBatchRayTrace : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IRayTraceNormUnpolDataPtr CreateNormUnpol (
        long MaxRays,
        enum RaysType rayType,
        long toSurface );
    VARIANT_BOOL SingleRayNormUnpol (
        enum RaysType rayType,
        long toSurf,
        long waveNumber,
        double Hx,
        double Hy,
        double Px,
        double Py,
        VARIANT_BOOL calcOPD,
        long * ErrorCode,
        long * vignetteCode,
        double * xo,
        double * yo,
        double * zo,
        double * lo,
        double * mo,
        double * no,
        double * l2o,
        double * m2o,
        double * n2o,
        double * opd,
        double * intensity );
    IRayTraceDirectUnpolDataPtr CreateDirectUnpol (
        long MaxRays,
        enum RaysType rayType,
        long startSurface,
        long toSurface );
    VARIANT_BOOL SingleRayDirectUnpol (
        enum RaysType rayType,
        long startSurface,
        long toSurface,
        long waveNumber,
        double X,
        double Y,
        double Z,
        double L,
        double M,
        double N,
        long * ErrorCode,
        long * vignetteCode,
        double * xo,
        double * yo,
        double * zo,
        double * lo,
        double * mo,
        double * no,
        double * l2o,
        double * m2o,
        double * n2o,
        double * intensity );
    IRayTraceNormPolDataPtr CreateNormPol (
        long MaxRays,
        enum RaysType rayType,
        double Ex,
        double Ey,
        double phaX,
        double phaY,
        long toSurface );
    VARIANT_BOOL SingleRayNormPol (
        enum RaysType rayType,
        double Ex,
        double Ey,
        double phaX,
        double phaY,
        long toSurf,
        long waveNumber,
        double Hx,
        double Hy,
        double Px,
        double Py,
        double exr,
        double exi,
        double eyr,
        double eyi,
        double ezr,
        double ezi,
        long * ErrorCode,
        double * exro,
        double * exio,
        double * eyro,
        double * eyio,
        double * ezro,
        double * ezio,
        double * intensity );
    VARIANT_BOOL SingleRayNormPolFull (
        enum RaysType rayType,
        double Ex,
        double Ey,
        double phaX,
        double phaY,
        long toSurf,
        long waveNumber,
        double Hx,
        double Hy,
        double Px,
        double Py,
        double exr,
        double exi,
        double eyr,
        double eyi,
        double ezr,
        double ezi,
        long * ErrorCode,
        double * xo,
        double * yo,
        double * zo,
        double * lo,
        double * mo,
        double * no,
        double * exro,
        double * exio,
        double * eyro,
        double * eyio,
        double * ezro,
        double * ezio,
        double * intensity );
    IRayTraceDirectPolDataPtr CreateDirectPol (
        long MaxRays,
        enum RaysType rayType,
        double Ex,
        double Ey,
        double phaX,
        double phaY,
        long startSurface,
        long toSurface );
    VARIANT_BOOL SingleRayDirectPol (
        enum RaysType rayType,
        double Ex,
        double Ey,
        double phaX,
        double phaY,
        long startSurface,
        long toSurface,
        long waveNumber,
        double X,
        double Y,
        double Z,
        double L,
        double M,
        double N,
        long * ErrorCode,
        long * vignetteCode,
        double * exro,
        double * exio,
        double * eyro,
        double * eyio,
        double * ezro,
        double * ezio,
        double * intensity );
    VARIANT_BOOL SingleRayDirectPolFull (
        enum RaysType rayType,
        double Ex,
        double Ey,
        double phaX,
        double phaY,
        long startSurface,
        long toSurface,
        long waveNumber,
        double X,
        double Y,
        double Z,
        double L,
        double M,
        double N,
        long * ErrorCode,
        long * vignetteCode,
        double * xo,
        double * yo,
        double * zo,
        double * lo,
        double * mo,
        double * no,
        double * exro,
        double * exio,
        double * eyro,
        double * eyio,
        double * ezro,
        double * ezio,
        double * intensity );
    IRayTraceNSCDataPtr CreateNSC (
        long MaxRays,
        long maxSegments,
        double coherenceLength );
    IRayTraceNSCSourceDataPtr CreateNSCSourceData (
        long maxSegments,
        double coherenceLength );
    VARIANT_BOOL GetDirectFieldCoordinates (
        long waveNumber,
        enum RaysType rayType,
        double Hx,
        double Hy,
        double Px,
        double Py,
        double * X,
        double * Y,
        double * Z,
        double * L,
        double * M,
        double * N );
    HRESULT GetPhase (
        double L,
        double M,
        double N,
        double jx,
        double jy,
        double xPhaseDeg,
        double yPhaseDeg,
        double intensity,
        double * exr,
        double * exi,
        double * eyr,
        double * eyi,
        double * ezr,
        double * ezi );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_CreateNormUnpol (
        /*[in]*/ long MaxRays,
        /*[in]*/ enum RaysType rayType,
        /*[in]*/ long toSurface,
        /*[out,retval]*/ struct IRayTraceNormUnpolData * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SingleRayNormUnpol (
        /*[in]*/ enum RaysType rayType,
        /*[in]*/ long toSurf,
        /*[in]*/ long waveNumber,
        /*[in]*/ double Hx,
        /*[in]*/ double Hy,
        /*[in]*/ double Px,
        /*[in]*/ double Py,
        /*[in]*/ VARIANT_BOOL calcOPD,
        /*[out]*/ long * ErrorCode,
        /*[out]*/ long * vignetteCode,
        /*[out]*/ double * xo,
        /*[out]*/ double * yo,
        /*[out]*/ double * zo,
        /*[out]*/ double * lo,
        /*[out]*/ double * mo,
        /*[out]*/ double * no,
        /*[out]*/ double * l2o,
        /*[out]*/ double * m2o,
        /*[out]*/ double * n2o,
        /*[out]*/ double * opd,
        /*[out]*/ double * intensity,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateDirectUnpol (
        /*[in]*/ long MaxRays,
        /*[in]*/ enum RaysType rayType,
        /*[in]*/ long startSurface,
        /*[in]*/ long toSurface,
        /*[out,retval]*/ struct IRayTraceDirectUnpolData * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SingleRayDirectUnpol (
        /*[in]*/ enum RaysType rayType,
        /*[in]*/ long startSurface,
        /*[in]*/ long toSurface,
        /*[in]*/ long waveNumber,
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[in]*/ double L,
        /*[in]*/ double M,
        /*[in]*/ double N,
        /*[out]*/ long * ErrorCode,
        /*[out]*/ long * vignetteCode,
        /*[out]*/ double * xo,
        /*[out]*/ double * yo,
        /*[out]*/ double * zo,
        /*[out]*/ double * lo,
        /*[out]*/ double * mo,
        /*[out]*/ double * no,
        /*[out]*/ double * l2o,
        /*[out]*/ double * m2o,
        /*[out]*/ double * n2o,
        /*[out]*/ double * intensity,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateNormPol (
        /*[in]*/ long MaxRays,
        /*[in]*/ enum RaysType rayType,
        /*[in]*/ double Ex,
        /*[in]*/ double Ey,
        /*[in]*/ double phaX,
        /*[in]*/ double phaY,
        /*[in]*/ long toSurface,
        /*[out,retval]*/ struct IRayTraceNormPolData * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SingleRayNormPol (
        /*[in]*/ enum RaysType rayType,
        /*[in]*/ double Ex,
        /*[in]*/ double Ey,
        /*[in]*/ double phaX,
        /*[in]*/ double phaY,
        /*[in]*/ long toSurf,
        /*[in]*/ long waveNumber,
        /*[in]*/ double Hx,
        /*[in]*/ double Hy,
        /*[in]*/ double Px,
        /*[in]*/ double Py,
        /*[in]*/ double exr,
        /*[in]*/ double exi,
        /*[in]*/ double eyr,
        /*[in]*/ double eyi,
        /*[in]*/ double ezr,
        /*[in]*/ double ezi,
        /*[out]*/ long * ErrorCode,
        /*[out]*/ double * exro,
        /*[out]*/ double * exio,
        /*[out]*/ double * eyro,
        /*[out]*/ double * eyio,
        /*[out]*/ double * ezro,
        /*[out]*/ double * ezio,
        /*[out]*/ double * intensity,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SingleRayNormPolFull (
        /*[in]*/ enum RaysType rayType,
        /*[in]*/ double Ex,
        /*[in]*/ double Ey,
        /*[in]*/ double phaX,
        /*[in]*/ double phaY,
        /*[in]*/ long toSurf,
        /*[in]*/ long waveNumber,
        /*[in]*/ double Hx,
        /*[in]*/ double Hy,
        /*[in]*/ double Px,
        /*[in]*/ double Py,
        /*[in]*/ double exr,
        /*[in]*/ double exi,
        /*[in]*/ double eyr,
        /*[in]*/ double eyi,
        /*[in]*/ double ezr,
        /*[in]*/ double ezi,
        /*[out]*/ long * ErrorCode,
        /*[out]*/ double * xo,
        /*[out]*/ double * yo,
        /*[out]*/ double * zo,
        /*[out]*/ double * lo,
        /*[out]*/ double * mo,
        /*[out]*/ double * no,
        /*[out]*/ double * exro,
        /*[out]*/ double * exio,
        /*[out]*/ double * eyro,
        /*[out]*/ double * eyio,
        /*[out]*/ double * ezro,
        /*[out]*/ double * ezio,
        /*[out]*/ double * intensity,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateDirectPol (
        /*[in]*/ long MaxRays,
        /*[in]*/ enum RaysType rayType,
        /*[in]*/ double Ex,
        /*[in]*/ double Ey,
        /*[in]*/ double phaX,
        /*[in]*/ double phaY,
        /*[in]*/ long startSurface,
        /*[in]*/ long toSurface,
        /*[out,retval]*/ struct IRayTraceDirectPolData * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SingleRayDirectPol (
        /*[in]*/ enum RaysType rayType,
        /*[in]*/ double Ex,
        /*[in]*/ double Ey,
        /*[in]*/ double phaX,
        /*[in]*/ double phaY,
        /*[in]*/ long startSurface,
        /*[in]*/ long toSurface,
        /*[in]*/ long waveNumber,
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[in]*/ double L,
        /*[in]*/ double M,
        /*[in]*/ double N,
        /*[out]*/ long * ErrorCode,
        /*[out]*/ long * vignetteCode,
        /*[out]*/ double * exro,
        /*[out]*/ double * exio,
        /*[out]*/ double * eyro,
        /*[out]*/ double * eyio,
        /*[out]*/ double * ezro,
        /*[out]*/ double * ezio,
        /*[out]*/ double * intensity,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SingleRayDirectPolFull (
        /*[in]*/ enum RaysType rayType,
        /*[in]*/ double Ex,
        /*[in]*/ double Ey,
        /*[in]*/ double phaX,
        /*[in]*/ double phaY,
        /*[in]*/ long startSurface,
        /*[in]*/ long toSurface,
        /*[in]*/ long waveNumber,
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[in]*/ double L,
        /*[in]*/ double M,
        /*[in]*/ double N,
        /*[out]*/ long * ErrorCode,
        /*[out]*/ long * vignetteCode,
        /*[out]*/ double * xo,
        /*[out]*/ double * yo,
        /*[out]*/ double * zo,
        /*[out]*/ double * lo,
        /*[out]*/ double * mo,
        /*[out]*/ double * no,
        /*[out]*/ double * exro,
        /*[out]*/ double * exio,
        /*[out]*/ double * eyro,
        /*[out]*/ double * eyio,
        /*[out]*/ double * ezro,
        /*[out]*/ double * ezio,
        /*[out]*/ double * intensity,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateNSC (
        /*[in]*/ long MaxRays,
        /*[in]*/ long maxSegments,
        /*[in]*/ double coherenceLength,
        /*[out,retval]*/ struct IRayTraceNSCData * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateNSCSourceData (
        /*[in]*/ long maxSegments,
        /*[in]*/ double coherenceLength,
        /*[out,retval]*/ struct IRayTraceNSCSourceData * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetDirectFieldCoordinates (
        /*[in]*/ long waveNumber,
        /*[in]*/ enum RaysType rayType,
        /*[in]*/ double Hx,
        /*[in]*/ double Hy,
        /*[in]*/ double Px,
        /*[in]*/ double Py,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out]*/ double * L,
        /*[out]*/ double * M,
        /*[out]*/ double * N,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetPhase (
        /*[in]*/ double L,
        /*[in]*/ double M,
        /*[in]*/ double N,
        /*[in]*/ double jx,
        /*[in]*/ double jy,
        /*[in]*/ double xPhaseDeg,
        /*[in]*/ double yPhaseDeg,
        /*[in]*/ double intensity,
        /*[out]*/ double * exr,
        /*[out]*/ double * exi,
        /*[out]*/ double * eyr,
        /*[out]*/ double * eyi,
        /*[out]*/ double * ezr,
        /*[out]*/ double * ezi ) = 0;
};

#pragma pack(push, 8)

struct __declspec(uuid("5c292d52-74c7-3b16-8757-057956f117ce"))
BatchRayTraceDataEntry
{
    double X;
    double Y;
    double Z;
    double L;
    double M;
    double N;
    double opd;
    double intensity;
    double exr;
    double exi;
    double eyr;
    double eyi;
    double ezr;
    double ezi;
    long wave;
    long error;
    long vigcode;
    long wantopd;
};

#pragma pack(pop)

enum __declspec(uuid("312d7569-aab6-4cbe-93d7-7b99f0b2a90e"))
RayStatus
{
    RayStatus_Parent = 0,
    RayStatus_Terminated = 1,
    RayStatus_Reflected = 2,
    RayStatus_Transmitted = 4,
    RayStatus_Scattered = 8,
    RayStatus_Diffracted = 16,
    RayStatus_GhostedFrom = 32,
    RayStatus_DiffractedFrom = 64,
    RayStatus_ScatteredFrom = 128,
    RayStatus_RayError = 256,
    RayStatus_BulkScattered = 512,
    RayStatus_WaveShifted = 1024,
    RayStatus_OrdinaryRay = 65536,
    RayStatus_ExtraordinaryRay = 131072,
    RayStatus_WaveShiftPL = 262144
};

struct __declspec(uuid("c71ba61b-9bc1-4092-88b2-9b51a89d7ece"))
IZRDReaderResults : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL ReadNextResult (
        long * rayNumber,
        long * waveIndex,
        double * wlUM,
        long * numSegments );
    VARIANT_BOOL ReadNextSegment (
        long * segmentLevel,
        long * segmentParent,
        long * hitObj,
        long * hitFace,
        long * InsideOf,
        enum RayStatus * Status,
        double * X,
        double * Y,
        double * Z,
        double * L,
        double * M,
        double * N,
        double * exr,
        double * exi,
        double * eyr,
        double * eyi,
        double * ezr,
        double * ezi,
        double * intensity,
        double * pathLength );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ReadNextResult (
        /*[out]*/ long * rayNumber,
        /*[out]*/ long * waveIndex,
        /*[out]*/ double * wlUM,
        /*[out]*/ long * numSegments,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ReadNextSegment (
        /*[out]*/ long * segmentLevel,
        /*[out]*/ long * segmentParent,
        /*[out]*/ long * hitObj,
        /*[out]*/ long * hitFace,
        /*[out]*/ long * InsideOf,
        /*[out]*/ enum RayStatus * Status,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out]*/ double * L,
        /*[out]*/ double * M,
        /*[out]*/ double * N,
        /*[out]*/ double * exr,
        /*[out]*/ double * exi,
        /*[out]*/ double * eyr,
        /*[out]*/ double * eyi,
        /*[out]*/ double * ezr,
        /*[out]*/ double * ezi,
        /*[out]*/ double * intensity,
        /*[out]*/ double * pathLength,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("b48d3a45-0fe6-44b1-9bdf-e6a1d6b7546b"))
IZRDReader : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutZRDFile))
    _bstr_t ZRDFile;
    __declspec(property(get=GetFilter,put=PutFilter))
    _bstr_t Filter;

    //
    // Wrapper methods for error-handling
    //

    void PutZRDFile (
        _bstr_t _arg1 );
    _bstr_t GetFilter ( );
    void PutFilter (
        _bstr_t pRetVal );
    IZRDReaderResultsPtr GetResults ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_ZRDFile (
        /*[in]*/ BSTR _arg1 ) = 0;
      virtual HRESULT __stdcall get_Filter (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Filter (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetResults (
        /*[out,retval]*/ struct IZRDReaderResults * * pRetVal ) = 0;
};

#pragma pack(push, 8)

struct __declspec(uuid("272b2836-eac1-315a-aa80-b23765a11ff2"))
RayPathDataEntry
{
    unsigned long Status;
    long level;
    long hit_object;
    long hit_face;
    long hit_facet_group;
    long in_object;
    long parent;
    long old_seg;
    long xybin;
    long lmbin;
    double index;
    double starting_phase;
    double X;
    double Y;
    double Z;
    double L;
    double M;
    double N;
    double l2;
    double m2;
    double n2;
    double path_to;
    double intensity;
    double phase_of;
    double phase_at;
    double exr;
    double exi;
    double eyr;
    double eyi;
    double ezr;
    double ezi;
};

#pragma pack(pop)

enum __declspec(uuid("4eb4165b-78f9-4f4e-af23-d81ae524c064"))
OptimizationAlgorithm
{
    OptimizationAlgorithm_DampedLeastSquares = 0,
    OptimizationAlgorithm_OrthogonalDescent = 1
};

enum __declspec(uuid("5921b197-b7a0-4a75-ba2b-01dac52f78a1"))
OptimizationCycles
{
    OptimizationCycles_Automatic = 0,
    OptimizationCycles_Fixed_1_Cycle = 1,
    OptimizationCycles_Fixed_5_Cycles = 2,
    OptimizationCycles_Fixed_10_Cycles = 3,
    OptimizationCycles_Fixed_50_Cycles = 4,
    OptimizationCycles_Infinite = 5
};

struct __declspec(uuid("c6e99d19-b473-4a05-a314-8db45b01d130"))
ILocalOptimization : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAlgorithm,put=PutAlgorithm))
    enum OptimizationAlgorithm Algorithm;
    __declspec(property(get=GetNumberOfCores,put=PutNumberOfCores))
    long NumberOfCores;
    __declspec(property(get=GetMaxCores))
    long MaxCores;
    __declspec(property(get=GetCycles,put=PutCycles))
    enum OptimizationCycles Cycles;
    __declspec(property(get=GetTargets))
    long Targets;
    __declspec(property(get=GetVariables))
    long Variables;
    __declspec(property(get=GetInitialMeritFunction))
    double InitialMeritFunction;
    __declspec(property(get=GetCurrentMeritFunction))
    double CurrentMeritFunction;

    //
    // Wrapper methods for error-handling
    //

    enum OptimizationAlgorithm GetAlgorithm ( );
    void PutAlgorithm (
        enum OptimizationAlgorithm pRetVal );
    long GetNumberOfCores ( );
    void PutNumberOfCores (
        long pRetVal );
    long GetMaxCores ( );
    enum OptimizationCycles GetCycles ( );
    void PutCycles (
        enum OptimizationCycles pRetVal );
    long GetTargets ( );
    long GetVariables ( );
    double GetInitialMeritFunction ( );
    double GetCurrentMeritFunction ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Algorithm (
        /*[out,retval]*/ enum OptimizationAlgorithm * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Algorithm (
        /*[in]*/ enum OptimizationAlgorithm pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfCores (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfCores (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaxCores (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Cycles (
        /*[out,retval]*/ enum OptimizationCycles * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Cycles (
        /*[in]*/ enum OptimizationCycles pRetVal ) = 0;
      virtual HRESULT __stdcall get_Targets (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Variables (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_InitialMeritFunction (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CurrentMeritFunction (
        /*[out,retval]*/ double * pRetVal ) = 0;
};

enum __declspec(uuid("dec6c3f9-76c1-4ed7-8e4c-00593a303b8d"))
OptimizationSaveCount
{
    OptimizationSaveCount_Save_10 = 0,
    OptimizationSaveCount_Save_20 = 1,
    OptimizationSaveCount_Save_30 = 2,
    OptimizationSaveCount_Save_40 = 3,
    OptimizationSaveCount_Save_50 = 4,
    OptimizationSaveCount_Save_60 = 5,
    OptimizationSaveCount_Save_70 = 6,
    OptimizationSaveCount_Save_80 = 7,
    OptimizationSaveCount_Save_90 = 8,
    OptimizationSaveCount_Save_100 = 9
};

struct __declspec(uuid("a15eea94-e93e-4723-9b71-b0b3cd8b018c"))
IGlobalOptimization : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAlgorithm,put=PutAlgorithm))
    enum OptimizationAlgorithm Algorithm;
    __declspec(property(get=GetNumberOfCores,put=PutNumberOfCores))
    long NumberOfCores;
    __declspec(property(get=GetMaxCores))
    long MaxCores;
    __declspec(property(get=GetNumberToSave,put=PutNumberToSave))
    enum OptimizationSaveCount NumberToSave;
    __declspec(property(get=GetTargets))
    long Targets;
    __declspec(property(get=GetVariables))
    long Variables;
    __declspec(property(get=GetInitialMeritFunction))
    double InitialMeritFunction;
    __declspec(property(get=GetSystems))
    __int64 Systems;
    __declspec(property(get=GetCycles))
    long Cycles;
    __declspec(property(get=GetCurrentMeritFunction01))
    double CurrentMeritFunction01;
    __declspec(property(get=GetCurrentMeritFunction02))
    double CurrentMeritFunction02;
    __declspec(property(get=GetCurrentMeritFunction03))
    double CurrentMeritFunction03;
    __declspec(property(get=GetCurrentMeritFunction04))
    double CurrentMeritFunction04;
    __declspec(property(get=GetCurrentMeritFunction05))
    double CurrentMeritFunction05;
    __declspec(property(get=GetCurrentMeritFunction06))
    double CurrentMeritFunction06;
    __declspec(property(get=GetCurrentMeritFunction07))
    double CurrentMeritFunction07;
    __declspec(property(get=GetCurrentMeritFunction08))
    double CurrentMeritFunction08;
    __declspec(property(get=GetCurrentMeritFunction09))
    double CurrentMeritFunction09;
    __declspec(property(get=GetCurrentMeritFunction10))
    double CurrentMeritFunction10;

    //
    // Wrapper methods for error-handling
    //

    enum OptimizationAlgorithm GetAlgorithm ( );
    void PutAlgorithm (
        enum OptimizationAlgorithm pRetVal );
    long GetNumberOfCores ( );
    void PutNumberOfCores (
        long pRetVal );
    long GetMaxCores ( );
    enum OptimizationSaveCount GetNumberToSave ( );
    void PutNumberToSave (
        enum OptimizationSaveCount pRetVal );
    long GetTargets ( );
    long GetVariables ( );
    double GetInitialMeritFunction ( );
    __int64 GetSystems ( );
    long GetCycles ( );
    double CurrentMeritFunction (
        long N );
    double GetCurrentMeritFunction01 ( );
    double GetCurrentMeritFunction02 ( );
    double GetCurrentMeritFunction03 ( );
    double GetCurrentMeritFunction04 ( );
    double GetCurrentMeritFunction05 ( );
    double GetCurrentMeritFunction06 ( );
    double GetCurrentMeritFunction07 ( );
    double GetCurrentMeritFunction08 ( );
    double GetCurrentMeritFunction09 ( );
    double GetCurrentMeritFunction10 ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Algorithm (
        /*[out,retval]*/ enum OptimizationAlgorithm * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Algorithm (
        /*[in]*/ enum OptimizationAlgorithm pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfCores (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfCores (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaxCores (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberToSave (
        /*[out,retval]*/ enum OptimizationSaveCount * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberToSave (
        /*[in]*/ enum OptimizationSaveCount pRetVal ) = 0;
      virtual HRESULT __stdcall get_Targets (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Variables (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_InitialMeritFunction (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Systems (
        /*[out,retval]*/ __int64 * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Cycles (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CurrentMeritFunction (
        /*[in]*/ long N,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CurrentMeritFunction01 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CurrentMeritFunction02 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CurrentMeritFunction03 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CurrentMeritFunction04 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CurrentMeritFunction05 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CurrentMeritFunction06 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CurrentMeritFunction07 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CurrentMeritFunction08 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CurrentMeritFunction09 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CurrentMeritFunction10 (
        /*[out,retval]*/ double * pRetVal ) = 0;
};

struct __declspec(uuid("2f251021-fbf5-4e68-bcab-2ebf846d80d4"))
IHammerOptimization : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAlgorithm,put=PutAlgorithm))
    enum OptimizationAlgorithm Algorithm;
    __declspec(property(get=GetNumberOfCores,put=PutNumberOfCores))
    long NumberOfCores;
    __declspec(property(get=GetMaxCores))
    long MaxCores;
    __declspec(property(get=GetAutomaticOptimization,put=PutAutomaticOptimization))
    VARIANT_BOOL AutomaticOptimization;
    __declspec(property(get=GetTargets))
    long Targets;
    __declspec(property(get=GetVariables))
    long Variables;
    __declspec(property(get=GetInitialMeritFunction))
    double InitialMeritFunction;
    __declspec(property(get=GetCurrentMeritFunction))
    double CurrentMeritFunction;
    __declspec(property(get=GetSystems))
    __int64 Systems;

    //
    // Wrapper methods for error-handling
    //

    enum OptimizationAlgorithm GetAlgorithm ( );
    void PutAlgorithm (
        enum OptimizationAlgorithm pRetVal );
    long GetNumberOfCores ( );
    void PutNumberOfCores (
        long pRetVal );
    long GetMaxCores ( );
    VARIANT_BOOL GetAutomaticOptimization ( );
    void PutAutomaticOptimization (
        VARIANT_BOOL pRetVal );
    long GetTargets ( );
    long GetVariables ( );
    double GetInitialMeritFunction ( );
    double GetCurrentMeritFunction ( );
    __int64 GetSystems ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Algorithm (
        /*[out,retval]*/ enum OptimizationAlgorithm * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Algorithm (
        /*[in]*/ enum OptimizationAlgorithm pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfCores (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfCores (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaxCores (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AutomaticOptimization (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AutomaticOptimization (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Targets (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Variables (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_InitialMeritFunction (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CurrentMeritFunction (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Systems (
        /*[out,retval]*/ __int64 * pRetVal ) = 0;
};

enum __declspec(uuid("d0844fc2-e274-4616-a28b-dea3ab2e7789"))
WizardType
{
    WizardType_NSCOptimization = 0,
    WizardType_NSCBitmap = 1,
    WizardType_NSCRoadwayLighting = 2,
    WizardType_SEQOptimization = 3,
    WizardType_NSCTolerance = 4,
    WizardType_SEQTolerance = 5
};

enum __declspec(uuid("95343916-7778-434e-8cdf-efbee4f7bebe"))
DefaultAndDegrees
{
    DefaultAndDegrees_Default = 0,
    DefaultAndDegrees_Degrees = 1
};

enum __declspec(uuid("6f123b2e-0bab-47af-b564-628da4944a4b"))
DefaultAndFringes
{
    DefaultAndFringes_Default = 0,
    DefaultAndFringes_Fringes = 1
};

struct __declspec(uuid("8b723db3-b1c5-4420-852c-f03851282321"))
IWizard : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetWizard))
    enum WizardType Wizard;

    //
    // Wrapper methods for error-handling
    //

    enum WizardType GetWizard ( );
    HRESULT OK ( );
    HRESULT Apply ( );
    HRESULT SaveSettings ( );
    HRESULT LoadSettings ( );
    HRESULT ResetSettings ( );
    HRESULT Initialize ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Wizard (
        /*[out,retval]*/ enum WizardType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_OK ( ) = 0;
      virtual HRESULT __stdcall raw_Apply ( ) = 0;
      virtual HRESULT __stdcall raw_SaveSettings ( ) = 0;
      virtual HRESULT __stdcall raw_LoadSettings ( ) = 0;
      virtual HRESULT __stdcall raw_ResetSettings ( ) = 0;
      virtual HRESULT __stdcall raw_Initialize ( ) = 0;
};

struct __declspec(uuid("41525713-b184-4c4e-9320-c15f64ecb0ae"))
INSCWizard : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsNSCOptimizingWizard))
    VARIANT_BOOL IsNSCOptimizingWizard;
    __declspec(property(get=GetIsNSCBitmapWizard))
    VARIANT_BOOL IsNSCBitmapWizard;
    __declspec(property(get=GetIsClearDataSettingsUsed,put=PutIsClearDataSettingsUsed))
    VARIANT_BOOL IsClearDataSettingsUsed;
    __declspec(property(get=GetNumberOfCriterion))
    long NumberOfCriterion;
    __declspec(property(get=GetIsRaytraceSettingsUsed,put=PutIsRaytraceSettingsUsed))
    VARIANT_BOOL IsRaytraceSettingsUsed;
    __declspec(property(get=GetNumberOfConfigurations))
    long NumberOfConfigurations;
    __declspec(property(get=GetIsSplitRaysUsed,put=PutIsSplitRaysUsed))
    VARIANT_BOOL IsSplitRaysUsed;
    __declspec(property(get=GetNumberOfRaySamplings))
    long NumberOfRaySamplings;
    __declspec(property(get=GetIsUsePolarizationUsed,put=PutIsUsePolarizationUsed))
    VARIANT_BOOL IsUsePolarizationUsed;
    __declspec(property(get=GetNumberOfEdgeSamplings))
    long NumberOfEdgeSamplings;
    __declspec(property(get=GetIsScatterRaysUsed,put=PutIsScatterRaysUsed))
    VARIANT_BOOL IsScatterRaysUsed;
    __declspec(property(get=GetNumberOfBoundaries))
    long NumberOfBoundaries;
    __declspec(property(get=GetIsIgnoreErrorsUsed,put=PutIsIgnoreErrorsUsed))
    VARIANT_BOOL IsIgnoreErrorsUsed;
    __declspec(property(get=GetIsUseLightningTraceUsed,put=PutIsUseLightningTraceUsed))
    VARIANT_BOOL IsUseLightningTraceUsed;
    __declspec(property(get=GetIsCriterionSettingsUsed,put=PutIsCriterionSettingsUsed))
    VARIANT_BOOL IsCriterionSettingsUsed;
    __declspec(property(get=GetIsMinimumFluxUsed,put=PutIsMinimumFluxUsed))
    VARIANT_BOOL IsMinimumFluxUsed;
    __declspec(property(get=GetIsOverwriteUsed,put=PutIsOverwriteUsed))
    VARIANT_BOOL IsOverwriteUsed;
    __declspec(property(get=GetIsTargetSettingsUsed,put=PutIsTargetSettingsUsed))
    VARIANT_BOOL IsTargetSettingsUsed;
    __declspec(property(get=GetIsColorTargetsUsed,put=PutIsColorTargetsUsed))
    VARIANT_BOOL IsColorTargetsUsed;
    __declspec(property(get=GetIsResampleDetectorUsed,put=PutIsResampleDetectorUsed))
    VARIANT_BOOL IsResampleDetectorUsed;
    __declspec(property(get=GetClearDetector,put=PutClearDetector))
    long ClearDetector;
    __declspec(property(get=GetCriterion,put=PutCriterion))
    long Criterion;
    __declspec(property(get=GetUseSource,put=PutUseSource))
    long UseSource;
    __declspec(property(get=GetUseDetector,put=PutUseDetector))
    long UseDetector;
    __declspec(property(get=GetBoundary,put=PutBoundary))
    long Boundary;
    __declspec(property(get=GetStartAt,put=PutStartAt))
    long StartAt;
    __declspec(property(get=GetConfiguration,put=PutConfiguration))
    long Configuration;
    __declspec(property(get=GetBitmapFile,put=PutBitmapFile))
    long BitmapFile;
    __declspec(property(get=GetRaySampling,put=PutRaySampling))
    long RaySampling;
    __declspec(property(get=GetEdgeSampling,put=PutEdgeSampling))
    long EdgeSampling;
    __declspec(property(get=GetTarget,put=PutTarget))
    double Target;
    __declspec(property(get=GetMinimumFlux,put=PutMinimumFlux))
    double MinimumFlux;
    __declspec(property(get=GetOverallWeight,put=PutOverallWeight))
    double OverallWeight;
    __declspec(property(get=GetTotalFlux,put=PutTotalFlux))
    double TotalFlux;
    __declspec(property(get=GetNumberOfSources))
    long NumberOfSources;
    __declspec(property(get=GetNumberOfDetectors))
    long NumberOfDetectors;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsNSCOptimizingWizard ( );
    VARIANT_BOOL GetIsNSCBitmapWizard ( );
    VARIANT_BOOL GetIsClearDataSettingsUsed ( );
    void PutIsClearDataSettingsUsed (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIsRaytraceSettingsUsed ( );
    void PutIsRaytraceSettingsUsed (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIsSplitRaysUsed ( );
    void PutIsSplitRaysUsed (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIsUsePolarizationUsed ( );
    void PutIsUsePolarizationUsed (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIsScatterRaysUsed ( );
    void PutIsScatterRaysUsed (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIsIgnoreErrorsUsed ( );
    void PutIsIgnoreErrorsUsed (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIsUseLightningTraceUsed ( );
    void PutIsUseLightningTraceUsed (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIsCriterionSettingsUsed ( );
    void PutIsCriterionSettingsUsed (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIsMinimumFluxUsed ( );
    void PutIsMinimumFluxUsed (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIsOverwriteUsed ( );
    void PutIsOverwriteUsed (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIsTargetSettingsUsed ( );
    void PutIsTargetSettingsUsed (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIsColorTargetsUsed ( );
    void PutIsColorTargetsUsed (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIsResampleDetectorUsed ( );
    void PutIsResampleDetectorUsed (
        VARIANT_BOOL pRetVal );
    long GetClearDetector ( );
    void PutClearDetector (
        long pRetVal );
    long GetCriterion ( );
    void PutCriterion (
        long pRetVal );
    long GetUseSource ( );
    void PutUseSource (
        long pRetVal );
    long GetUseDetector ( );
    void PutUseDetector (
        long pRetVal );
    long GetBoundary ( );
    void PutBoundary (
        long pRetVal );
    long GetStartAt ( );
    void PutStartAt (
        long pRetVal );
    long GetConfiguration ( );
    void PutConfiguration (
        long pRetVal );
    long GetBitmapFile ( );
    void PutBitmapFile (
        long pRetVal );
    long GetRaySampling ( );
    void PutRaySampling (
        long pRetVal );
    long GetEdgeSampling ( );
    void PutEdgeSampling (
        long pRetVal );
    double GetTarget ( );
    void PutTarget (
        double pRetVal );
    double GetMinimumFlux ( );
    void PutMinimumFlux (
        double pRetVal );
    double GetOverallWeight ( );
    void PutOverallWeight (
        double pRetVal );
    double GetTotalFlux ( );
    void PutTotalFlux (
        double pRetVal );
    long GetNumberOfSources ( );
    _bstr_t GetSourceAt (
        long idx );
    long GetNumberOfDetectors ( );
    _bstr_t GetDetectorAt (
        long idx );
    long GetNumberOfCriterion ( );
    _bstr_t GetCriterionAt (
        long idx );
    long GetNumberOfConfigurations ( );
    _bstr_t GetConfigurationAt (
        long idx );
    long GetNumberOfRaySamplings ( );
    _bstr_t GetRaySamplingAt (
        long idx );
    long GetNumberOfEdgeSamplings ( );
    _bstr_t GetEdgeSamplingAt (
        long idx );
    long GetNumberOfBoundaries ( );
    _bstr_t GetBoundaryAt (
        long idx );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsNSCOptimizingWizard (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsNSCBitmapWizard (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsClearDataSettingsUsed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsClearDataSettingsUsed (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsRaytraceSettingsUsed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsRaytraceSettingsUsed (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsSplitRaysUsed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsSplitRaysUsed (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsUsePolarizationUsed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsUsePolarizationUsed (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsScatterRaysUsed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsScatterRaysUsed (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsIgnoreErrorsUsed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsIgnoreErrorsUsed (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsUseLightningTraceUsed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsUseLightningTraceUsed (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsCriterionSettingsUsed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsCriterionSettingsUsed (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsMinimumFluxUsed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsMinimumFluxUsed (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsOverwriteUsed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsOverwriteUsed (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsTargetSettingsUsed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsTargetSettingsUsed (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsColorTargetsUsed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsColorTargetsUsed (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsResampleDetectorUsed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsResampleDetectorUsed (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ClearDetector (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ClearDetector (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Criterion (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Criterion (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseSource (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseSource (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseDetector (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseDetector (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Boundary (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Boundary (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_StartAt (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_StartAt (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Configuration (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Configuration (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_BitmapFile (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BitmapFile (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_RaySampling (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RaySampling (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_EdgeSampling (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_EdgeSampling (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Target (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Target (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinimumFlux (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MinimumFlux (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_OverallWeight (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OverallWeight (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_TotalFlux (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TotalFlux (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfSources (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetSourceAt (
        /*[in]*/ long idx,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfDetectors (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetDetectorAt (
        /*[in]*/ long idx,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfCriterion (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetCriterionAt (
        /*[in]*/ long idx,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfConfigurations (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetConfigurationAt (
        /*[in]*/ long idx,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfRaySamplings (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetRaySamplingAt (
        /*[in]*/ long idx,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfEdgeSamplings (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetEdgeSamplingAt (
        /*[in]*/ long idx,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfBoundaries (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetBoundaryAt (
        /*[in]*/ long idx,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("2c08e2b5-2d12-44b4-9886-1d12f44a9160"))
INSCOptimizationWizard : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNSCSettings))
    INSCWizardPtr NSCSettings;
    __declspec(property(get=GetCommonSettings))
    IWizardPtr CommonSettings;

    //
    // Wrapper methods for error-handling
    //

    INSCWizardPtr GetNSCSettings ( );
    IWizardPtr GetCommonSettings ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NSCSettings (
        /*[out,retval]*/ struct INSCWizard * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CommonSettings (
        /*[out,retval]*/ struct IWizard * * pRetVal ) = 0;
};

struct __declspec(uuid("b3b71b8d-0103-4e30-a8d8-4623e4830c86"))
IImageData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetImageName))
    _bstr_t ImageName;
    __declspec(property(get=GetWidth))
    long Width;
    __declspec(property(get=GetHeight))
    long Height;
    __declspec(property(get=GetBitsPerPixel))
    long BitsPerPixel;
    __declspec(property(get=GetChannels))
    long Channels;
    __declspec(property(get=GetStride))
    long Stride;
    __declspec(property(get=GetIsRGB))
    VARIANT_BOOL IsRGB;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetImageName ( );
    long GetWidth ( );
    long GetHeight ( );
    long GetBitsPerPixel ( );
    long GetChannels ( );
    long GetStride ( );
    VARIANT_BOOL GetIsRGB ( );
    SAFEARRAY * GetRawData ( );
    HRESULT GetRawDataSafe (
        long totalSize,
        long Height,
        long Width,
        unsigned char * Data );
    SAFEARRAY * GetPixels ( );
    HRESULT GetPixelsSafe (
        long totalSize,
        long Height,
        long Width,
        unsigned char * Data );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ImageName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_BitsPerPixel (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Channels (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Stride (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsRGB (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetRawData (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetRawDataSafe (
        /*[in]*/ long totalSize,
        /*[in]*/ long Height,
        /*[in]*/ long Width,
        /*[in,out]*/ unsigned char * Data ) = 0;
      virtual HRESULT __stdcall raw_GetPixels (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetPixelsSafe (
        /*[in]*/ long totalSize,
        /*[in]*/ long Height,
        /*[in]*/ long Width,
        /*[in,out]*/ unsigned char * Data ) = 0;
};

struct __declspec(uuid("36702e27-6d71-475d-b3eb-ed06c9dee2a9"))
INSCBitmapWizard : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNSCSettings))
    INSCWizardPtr NSCSettings;
    __declspec(property(get=GetCommonSettings))
    IWizardPtr CommonSettings;
    __declspec(property(get=GetNumberOfBitmapFiles))
    long NumberOfBitmapFiles;

    //
    // Wrapper methods for error-handling
    //

    INSCWizardPtr GetNSCSettings ( );
    IWizardPtr GetCommonSettings ( );
    long GetNumberOfBitmapFiles ( );
    _bstr_t GetBitmapFileAt (
        long idx );
    IImageDataPtr GetPreviewImage ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NSCSettings (
        /*[out,retval]*/ struct INSCWizard * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CommonSettings (
        /*[out,retval]*/ struct IWizard * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfBitmapFiles (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetBitmapFileAt (
        /*[in]*/ long idx,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetPreviewImage (
        /*[out,retval]*/ struct IImageData * * pRetVal ) = 0;
};

struct __declspec(uuid("4d913223-a453-44f5-9df0-0c7d74b75555"))
INSCRoadwayLightingWizard : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCommonSettings))
    IWizardPtr CommonSettings;
    __declspec(property(get=GetIsNSCRoadwayLightingWizard))
    VARIANT_BOOL IsNSCRoadwayLightingWizard;
    __declspec(property(get=GetIsSplitRaysUsed,put=PutIsSplitRaysUsed))
    VARIANT_BOOL IsSplitRaysUsed;
    __declspec(property(get=GetIsScatterRaysUsed,put=PutIsScatterRaysUsed))
    VARIANT_BOOL IsScatterRaysUsed;
    __declspec(property(get=GetIsUsePolarizationUsed,put=PutIsUsePolarizationUsed))
    VARIANT_BOOL IsUsePolarizationUsed;
    __declspec(property(get=GetIsIgnoreErrorsUsed,put=PutIsIgnoreErrorsUsed))
    VARIANT_BOOL IsIgnoreErrorsUsed;
    __declspec(property(get=GetArrangement,put=PutArrangement))
    long Arrangement;
    __declspec(property(get=GetOrigin,put=PutOrigin))
    long Origin;
    __declspec(property(get=GetNumberOfLanes,put=PutNumberOfLanes))
    long NumberOfLanes;
    __declspec(property(get=GetSurfaceClassification,put=PutSurfaceClassification))
    long SurfaceClassification;
    __declspec(property(get=GetRoadClass,put=PutRoadClass))
    long RoadClass;
    __declspec(property(get=GetStartAt,put=PutStartAt))
    long StartAt;
    __declspec(property(get=GetConfiguration,put=PutConfiguration))
    long Configuration;
    __declspec(property(get=GetMountingHeight,put=PutMountingHeight))
    double MountingHeight;
    __declspec(property(get=GetLongitudinalSpacing,put=PutLongitudinalSpacing))
    double LongitudinalSpacing;
    __declspec(property(get=GetLateralOffset,put=PutLateralOffset))
    double LateralOffset;
    __declspec(property(get=GetLaneWidth,put=PutLaneWidth))
    double LaneWidth;
    __declspec(property(get=GetOverallWeight,put=PutOverallWeight))
    double OverallWeight;
    __declspec(property(get=GetNumberOfOrigins))
    long NumberOfOrigins;
    __declspec(property(get=GetNumberOfConfigurations))
    long NumberOfConfigurations;
    __declspec(property(get=GetNumberOfArrangements))
    long NumberOfArrangements;
    __declspec(property(get=GetNumberOfClassifications))
    long NumberOfClassifications;
    __declspec(property(get=GetNumberOfRoadClasses))
    long NumberOfRoadClasses;

    //
    // Wrapper methods for error-handling
    //

    IWizardPtr GetCommonSettings ( );
    VARIANT_BOOL GetIsNSCRoadwayLightingWizard ( );
    VARIANT_BOOL GetIsSplitRaysUsed ( );
    void PutIsSplitRaysUsed (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIsScatterRaysUsed ( );
    void PutIsScatterRaysUsed (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIsUsePolarizationUsed ( );
    void PutIsUsePolarizationUsed (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIsIgnoreErrorsUsed ( );
    void PutIsIgnoreErrorsUsed (
        VARIANT_BOOL pRetVal );
    long GetArrangement ( );
    void PutArrangement (
        long pRetVal );
    long GetOrigin ( );
    void PutOrigin (
        long pRetVal );
    long GetNumberOfLanes ( );
    void PutNumberOfLanes (
        long pRetVal );
    long GetSurfaceClassification ( );
    void PutSurfaceClassification (
        long pRetVal );
    long GetRoadClass ( );
    void PutRoadClass (
        long pRetVal );
    long GetStartAt ( );
    void PutStartAt (
        long pRetVal );
    long GetConfiguration ( );
    void PutConfiguration (
        long pRetVal );
    double GetMountingHeight ( );
    void PutMountingHeight (
        double pRetVal );
    double GetLongitudinalSpacing ( );
    void PutLongitudinalSpacing (
        double pRetVal );
    double GetLateralOffset ( );
    void PutLateralOffset (
        double pRetVal );
    double GetLaneWidth ( );
    void PutLaneWidth (
        double pRetVal );
    double GetOverallWeight ( );
    void PutOverallWeight (
        double pRetVal );
    long GetNumberOfOrigins ( );
    _bstr_t GetOriginAt (
        long idx );
    long GetNumberOfConfigurations ( );
    _bstr_t GetConfigurationAt (
        long idx );
    long GetNumberOfArrangements ( );
    _bstr_t GetArrangementAt (
        long idx );
    long GetNumberOfClassifications ( );
    _bstr_t GetClassificationAt (
        long idx );
    long GetNumberOfRoadClasses ( );
    _bstr_t GetRoadClassAt (
        long idx );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CommonSettings (
        /*[out,retval]*/ struct IWizard * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsNSCRoadwayLightingWizard (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsSplitRaysUsed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsSplitRaysUsed (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsScatterRaysUsed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsScatterRaysUsed (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsUsePolarizationUsed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsUsePolarizationUsed (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsIgnoreErrorsUsed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsIgnoreErrorsUsed (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Arrangement (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Arrangement (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Origin (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Origin (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfLanes (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfLanes (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_SurfaceClassification (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SurfaceClassification (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_RoadClass (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RoadClass (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_StartAt (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_StartAt (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Configuration (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Configuration (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_MountingHeight (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MountingHeight (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_LongitudinalSpacing (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_LongitudinalSpacing (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_LateralOffset (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_LateralOffset (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_LaneWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_LaneWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_OverallWeight (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OverallWeight (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfOrigins (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetOriginAt (
        /*[in]*/ long idx,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfConfigurations (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetConfigurationAt (
        /*[in]*/ long idx,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfArrangements (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetArrangementAt (
        /*[in]*/ long idx,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfClassifications (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetClassificationAt (
        /*[in]*/ long idx,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfRoadClasses (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetRoadClassAt (
        /*[in]*/ long idx,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("29fd5871-6bfa-4f46-b49c-7c39328a06a8"))
ISEQOptimizationWizard : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCommonSettings))
    IWizardPtr CommonSettings;
    __declspec(property(get=GetIsSEQOptimizationWizard))
    VARIANT_BOOL IsSEQOptimizationWizard;
    __declspec(property(get=GetIsDeleteVignetteUsed,put=PutIsDeleteVignetteUsed))
    VARIANT_BOOL IsDeleteVignetteUsed;
    __declspec(property(get=GetNumberOfRings))
    long NumberOfRings;
    __declspec(property(get=GetIsGlassUsed,put=PutIsGlassUsed))
    VARIANT_BOOL IsGlassUsed;
    __declspec(property(get=GetNumberOfArms))
    long NumberOfArms;
    __declspec(property(get=GetIsAirUsed,put=PutIsAirUsed))
    VARIANT_BOOL IsAirUsed;
    __declspec(property(get=GetNumberOfGrids))
    long NumberOfGrids;
    __declspec(property(get=GetIsAssumeAxialSymmetryUsed,put=PutIsAssumeAxialSymmetryUsed))
    VARIANT_BOOL IsAssumeAxialSymmetryUsed;
    __declspec(property(get=GetNumberOfConfigurations))
    long NumberOfConfigurations;
    __declspec(property(get=GetIsIgnoreLateralColorUsed,put=PutIsIgnoreLateralColorUsed))
    VARIANT_BOOL IsIgnoreLateralColorUsed;
    __declspec(property(get=GetIsAddFavoriteOperandsUsed,put=PutIsAddFavoriteOperandsUsed))
    VARIANT_BOOL IsAddFavoriteOperandsUsed;
    __declspec(property(get=GetIsRelativeXWeightUsed,put=PutIsRelativeXWeightUsed))
    VARIANT_BOOL IsRelativeXWeightUsed;
    __declspec(property(get=GetType,put=PutType))
    long Type;
    __declspec(property(get=GetData,put=PutData))
    long Data;
    __declspec(property(get=GetReference,put=PutReference))
    long Reference;
    __declspec(property(get=GetPupilIntegrationMethod,put=PutPupilIntegrationMethod))
    long PupilIntegrationMethod;
    __declspec(property(get=GetRing,put=PutRing))
    long Ring;
    __declspec(property(get=GetArm,put=PutArm))
    long Arm;
    __declspec(property(get=GetGrid,put=PutGrid))
    long Grid;
    __declspec(property(get=GetConfiguration,put=PutConfiguration))
    long Configuration;
    __declspec(property(get=GetStartAt,put=PutStartAt))
    long StartAt;
    __declspec(property(get=GetObscuration,put=PutObscuration))
    double Obscuration;
    __declspec(property(get=GetGlassMin,put=PutGlassMin))
    double GlassMin;
    __declspec(property(get=GetGlassMax,put=PutGlassMax))
    double GlassMax;
    __declspec(property(get=GetGlassEdge,put=PutGlassEdge))
    double GlassEdge;
    __declspec(property(get=GetAirMin,put=PutAirMin))
    double AirMin;
    __declspec(property(get=GetAirMax,put=PutAirMax))
    double AirMax;
    __declspec(property(get=GetAirEdge,put=PutAirEdge))
    double AirEdge;
    __declspec(property(get=GetRelativeXWeight,put=PutRelativeXWeight))
    double RelativeXWeight;
    __declspec(property(get=GetOverallWeight,put=PutOverallWeight))
    double OverallWeight;
    __declspec(property(get=GetNumberOfTypes))
    long NumberOfTypes;
    __declspec(property(get=GetNumberOfDataTypes))
    long NumberOfDataTypes;
    __declspec(property(get=GetNumberOfReferences))
    long NumberOfReferences;
    __declspec(property(get=GetNumberOfPupilIntegrationMethods))
    long NumberOfPupilIntegrationMethods;

    //
    // Wrapper methods for error-handling
    //

    IWizardPtr GetCommonSettings ( );
    VARIANT_BOOL GetIsSEQOptimizationWizard ( );
    VARIANT_BOOL GetIsDeleteVignetteUsed ( );
    void PutIsDeleteVignetteUsed (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIsGlassUsed ( );
    void PutIsGlassUsed (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIsAirUsed ( );
    void PutIsAirUsed (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIsAssumeAxialSymmetryUsed ( );
    void PutIsAssumeAxialSymmetryUsed (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIsIgnoreLateralColorUsed ( );
    void PutIsIgnoreLateralColorUsed (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIsAddFavoriteOperandsUsed ( );
    void PutIsAddFavoriteOperandsUsed (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIsRelativeXWeightUsed ( );
    void PutIsRelativeXWeightUsed (
        VARIANT_BOOL pRetVal );
    long GetType ( );
    void PutType (
        long pRetVal );
    long GetData ( );
    void PutData (
        long pRetVal );
    long GetReference ( );
    void PutReference (
        long pRetVal );
    long GetPupilIntegrationMethod ( );
    void PutPupilIntegrationMethod (
        long pRetVal );
    long GetRing ( );
    void PutRing (
        long pRetVal );
    long GetArm ( );
    void PutArm (
        long pRetVal );
    long GetGrid ( );
    void PutGrid (
        long pRetVal );
    long GetConfiguration ( );
    void PutConfiguration (
        long pRetVal );
    long GetStartAt ( );
    void PutStartAt (
        long pRetVal );
    double GetObscuration ( );
    void PutObscuration (
        double pRetVal );
    double GetGlassMin ( );
    void PutGlassMin (
        double pRetVal );
    double GetGlassMax ( );
    void PutGlassMax (
        double pRetVal );
    double GetGlassEdge ( );
    void PutGlassEdge (
        double pRetVal );
    double GetAirMin ( );
    void PutAirMin (
        double pRetVal );
    double GetAirMax ( );
    void PutAirMax (
        double pRetVal );
    double GetAirEdge ( );
    void PutAirEdge (
        double pRetVal );
    double GetRelativeXWeight ( );
    void PutRelativeXWeight (
        double pRetVal );
    double GetOverallWeight ( );
    void PutOverallWeight (
        double pRetVal );
    long GetNumberOfTypes ( );
    _bstr_t GetTypeAt (
        long idx );
    long GetNumberOfDataTypes ( );
    _bstr_t GetDataTypeAt (
        long idx );
    long GetNumberOfReferences ( );
    _bstr_t GetReferenceAt (
        long idx );
    long GetNumberOfPupilIntegrationMethods ( );
    _bstr_t GetPupilIntegrationMethodAt (
        long idx );
    long GetNumberOfRings ( );
    _bstr_t GetRingAt (
        long idx );
    long GetNumberOfArms ( );
    _bstr_t GetArmAt (
        long idx );
    long GetNumberOfGrids ( );
    _bstr_t GetGridAt (
        long idx );
    long GetNumberOfConfigurations ( );
    _bstr_t GetConfigurationAt (
        long idx );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CommonSettings (
        /*[out,retval]*/ struct IWizard * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsSEQOptimizationWizard (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDeleteVignetteUsed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsDeleteVignetteUsed (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsGlassUsed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsGlassUsed (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsAirUsed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsAirUsed (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsAssumeAxialSymmetryUsed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsAssumeAxialSymmetryUsed (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsIgnoreLateralColorUsed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsIgnoreLateralColorUsed (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsAddFavoriteOperandsUsed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsAddFavoriteOperandsUsed (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsRelativeXWeightUsed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsRelativeXWeightUsed (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Data (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Data (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Reference (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Reference (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_PupilIntegrationMethod (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PupilIntegrationMethod (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Ring (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Ring (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Arm (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Arm (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Grid (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Grid (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Configuration (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Configuration (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_StartAt (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_StartAt (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Obscuration (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Obscuration (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_GlassMin (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_GlassMin (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_GlassMax (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_GlassMax (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_GlassEdge (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_GlassEdge (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_AirMin (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AirMin (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_AirMax (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AirMax (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_AirEdge (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AirEdge (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RelativeXWeight (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RelativeXWeight (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_OverallWeight (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OverallWeight (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfTypes (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetTypeAt (
        /*[in]*/ long idx,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfDataTypes (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetDataTypeAt (
        /*[in]*/ long idx,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfReferences (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetReferenceAt (
        /*[in]*/ long idx,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfPupilIntegrationMethods (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetPupilIntegrationMethodAt (
        /*[in]*/ long idx,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfRings (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetRingAt (
        /*[in]*/ long idx,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfArms (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetArmAt (
        /*[in]*/ long idx,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfGrids (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetGridAt (
        /*[in]*/ long idx,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfConfigurations (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetConfigurationAt (
        /*[in]*/ long idx,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("97b4c0ec-6129-4d36-b252-d687a648b8f4"))
IToleranceWizard : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCommonSettings))
    IWizardPtr CommonSettings;
    __declspec(property(get=GetIsSEQToleranceWizard))
    VARIANT_BOOL IsSEQToleranceWizard;
    __declspec(property(get=GetIsSurfaceRadiusUsed,put=PutIsSurfaceRadiusUsed))
    VARIANT_BOOL IsSurfaceRadiusUsed;
    __declspec(property(get=GetIsSurfaceThicknessUsed,put=PutIsSurfaceThicknessUsed))
    VARIANT_BOOL IsSurfaceThicknessUsed;
    __declspec(property(get=GetIsSurfaceDecenterXUsed,put=PutIsSurfaceDecenterXUsed))
    VARIANT_BOOL IsSurfaceDecenterXUsed;
    __declspec(property(get=GetIsSurfaceDecenterYUsed,put=PutIsSurfaceDecenterYUsed))
    VARIANT_BOOL IsSurfaceDecenterYUsed;
    __declspec(property(get=GetIsSurfaceTiltXUsed,put=PutIsSurfaceTiltXUsed))
    VARIANT_BOOL IsSurfaceTiltXUsed;
    __declspec(property(get=GetIsSurfaceTiltYUsed,put=PutIsSurfaceTiltYUsed))
    VARIANT_BOOL IsSurfaceTiltYUsed;
    __declspec(property(get=GetIsSurfaceSandAIrregularityUsed,put=PutIsSurfaceSandAIrregularityUsed))
    VARIANT_BOOL IsSurfaceSandAIrregularityUsed;
    __declspec(property(get=GetIsSurfaceZernikeIrregularityUsed,put=PutIsSurfaceZernikeIrregularityUsed))
    VARIANT_BOOL IsSurfaceZernikeIrregularityUsed;
    __declspec(property(get=GetIsElementDecenterXUsed,put=PutIsElementDecenterXUsed))
    VARIANT_BOOL IsElementDecenterXUsed;
    __declspec(property(get=GetIsElementDecenterYUsed,put=PutIsElementDecenterYUsed))
    VARIANT_BOOL IsElementDecenterYUsed;
    __declspec(property(get=GetIsElementTiltXUsed,put=PutIsElementTiltXUsed))
    VARIANT_BOOL IsElementTiltXUsed;
    __declspec(property(get=GetIsElementTiltYUsed,put=PutIsElementTiltYUsed))
    VARIANT_BOOL IsElementTiltYUsed;
    __declspec(property(get=GetIsIndexUsed,put=PutIsIndexUsed))
    VARIANT_BOOL IsIndexUsed;
    __declspec(property(get=GetIsIndexAbbePercentageUsed,put=PutIsIndexAbbePercentageUsed))
    VARIANT_BOOL IsIndexAbbePercentageUsed;
    __declspec(property(get=GetIsFocusCompensationUsed,put=PutIsFocusCompensationUsed))
    VARIANT_BOOL IsFocusCompensationUsed;
    __declspec(property(get=GetSurfaceRadiusUnitType,put=PutSurfaceRadiusUnitType))
    enum DefaultAndFringes SurfaceRadiusUnitType;
    __declspec(property(get=GetSurfaceTiltXUnitType,put=PutSurfaceTiltXUnitType))
    enum DefaultAndDegrees SurfaceTiltXUnitType;
    __declspec(property(get=GetSurfaceTiltYUnitType,put=PutSurfaceTiltYUnitType))
    enum DefaultAndDegrees SurfaceTiltYUnitType;
    __declspec(property(get=GetStartAt,put=PutStartAt))
    long StartAt;
    __declspec(property(get=GetStartAtSurface,put=PutStartAtSurface))
    long StartAtSurface;
    __declspec(property(get=GetStopAtSurface,put=PutStopAtSurface))
    long StopAtSurface;
    __declspec(property(get=GetSurfaceRadius,put=PutSurfaceRadius))
    double SurfaceRadius;
    __declspec(property(get=GetSurfaceRadiusFringes,put=PutSurfaceRadiusFringes))
    double SurfaceRadiusFringes;
    __declspec(property(get=GetSurfaceThickness,put=PutSurfaceThickness))
    double SurfaceThickness;
    __declspec(property(get=GetSurfaceDecenterX,put=PutSurfaceDecenterX))
    double SurfaceDecenterX;
    __declspec(property(get=GetSurfaceDecenterY,put=PutSurfaceDecenterY))
    double SurfaceDecenterY;
    __declspec(property(get=GetSurfaceTiltX,put=PutSurfaceTiltX))
    double SurfaceTiltX;
    __declspec(property(get=GetSurfaceTiltXDegrees,put=PutSurfaceTiltXDegrees))
    double SurfaceTiltXDegrees;
    __declspec(property(get=GetSurfaceTiltY,put=PutSurfaceTiltY))
    double SurfaceTiltY;
    __declspec(property(get=GetSurfaceTiltYDegrees,put=PutSurfaceTiltYDegrees))
    double SurfaceTiltYDegrees;
    __declspec(property(get=GetSurfaceSandAIrregularityFringes,put=PutSurfaceSandAIrregularityFringes))
    double SurfaceSandAIrregularityFringes;
    __declspec(property(get=GetSurfaceZernikeIrregularityFringes,put=PutSurfaceZernikeIrregularityFringes))
    double SurfaceZernikeIrregularityFringes;
    __declspec(property(get=GetElementDecenterX,put=PutElementDecenterX))
    double ElementDecenterX;
    __declspec(property(get=GetElementDecenterY,put=PutElementDecenterY))
    double ElementDecenterY;
    __declspec(property(get=GetElementTiltXDegrees,put=PutElementTiltXDegrees))
    double ElementTiltXDegrees;
    __declspec(property(get=GetElementTiltYDegrees,put=PutElementTiltYDegrees))
    double ElementTiltYDegrees;
    __declspec(property(get=Getindex,put=Putindex))
    double index;
    __declspec(property(get=GetIndexAbbePercentage,put=PutIndexAbbePercentage))
    double IndexAbbePercentage;
    __declspec(property(get=GetTestWavelength,put=PutTestWavelength))
    double TestWavelength;

    //
    // Wrapper methods for error-handling
    //

    IWizardPtr GetCommonSettings ( );
    VARIANT_BOOL GetIsSEQToleranceWizard ( );
    VARIANT_BOOL GetIsSurfaceRadiusUsed ( );
    void PutIsSurfaceRadiusUsed (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIsSurfaceThicknessUsed ( );
    void PutIsSurfaceThicknessUsed (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIsSurfaceDecenterXUsed ( );
    void PutIsSurfaceDecenterXUsed (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIsSurfaceDecenterYUsed ( );
    void PutIsSurfaceDecenterYUsed (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIsSurfaceTiltXUsed ( );
    void PutIsSurfaceTiltXUsed (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIsSurfaceTiltYUsed ( );
    void PutIsSurfaceTiltYUsed (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIsSurfaceSandAIrregularityUsed ( );
    void PutIsSurfaceSandAIrregularityUsed (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIsSurfaceZernikeIrregularityUsed ( );
    void PutIsSurfaceZernikeIrregularityUsed (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIsElementDecenterXUsed ( );
    void PutIsElementDecenterXUsed (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIsElementDecenterYUsed ( );
    void PutIsElementDecenterYUsed (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIsElementTiltXUsed ( );
    void PutIsElementTiltXUsed (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIsElementTiltYUsed ( );
    void PutIsElementTiltYUsed (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIsIndexUsed ( );
    void PutIsIndexUsed (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIsIndexAbbePercentageUsed ( );
    void PutIsIndexAbbePercentageUsed (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIsFocusCompensationUsed ( );
    void PutIsFocusCompensationUsed (
        VARIANT_BOOL pRetVal );
    enum DefaultAndFringes GetSurfaceRadiusUnitType ( );
    void PutSurfaceRadiusUnitType (
        enum DefaultAndFringes pRetVal );
    enum DefaultAndDegrees GetSurfaceTiltXUnitType ( );
    void PutSurfaceTiltXUnitType (
        enum DefaultAndDegrees pRetVal );
    enum DefaultAndDegrees GetSurfaceTiltYUnitType ( );
    void PutSurfaceTiltYUnitType (
        enum DefaultAndDegrees pRetVal );
    long GetStartAt ( );
    void PutStartAt (
        long pRetVal );
    long GetStartAtSurface ( );
    void PutStartAtSurface (
        long pRetVal );
    long GetStopAtSurface ( );
    void PutStopAtSurface (
        long pRetVal );
    double GetSurfaceRadius ( );
    void PutSurfaceRadius (
        double pRetVal );
    double GetSurfaceRadiusFringes ( );
    void PutSurfaceRadiusFringes (
        double pRetVal );
    double GetSurfaceThickness ( );
    void PutSurfaceThickness (
        double pRetVal );
    double GetSurfaceDecenterX ( );
    void PutSurfaceDecenterX (
        double pRetVal );
    double GetSurfaceDecenterY ( );
    void PutSurfaceDecenterY (
        double pRetVal );
    double GetSurfaceTiltX ( );
    void PutSurfaceTiltX (
        double pRetVal );
    double GetSurfaceTiltXDegrees ( );
    void PutSurfaceTiltXDegrees (
        double pRetVal );
    double GetSurfaceTiltY ( );
    void PutSurfaceTiltY (
        double pRetVal );
    double GetSurfaceTiltYDegrees ( );
    void PutSurfaceTiltYDegrees (
        double pRetVal );
    double GetSurfaceSandAIrregularityFringes ( );
    void PutSurfaceSandAIrregularityFringes (
        double pRetVal );
    double GetSurfaceZernikeIrregularityFringes ( );
    void PutSurfaceZernikeIrregularityFringes (
        double pRetVal );
    double GetElementDecenterX ( );
    void PutElementDecenterX (
        double pRetVal );
    double GetElementDecenterY ( );
    void PutElementDecenterY (
        double pRetVal );
    double GetElementTiltXDegrees ( );
    void PutElementTiltXDegrees (
        double pRetVal );
    double GetElementTiltYDegrees ( );
    void PutElementTiltYDegrees (
        double pRetVal );
    double Getindex ( );
    void Putindex (
        double pRetVal );
    double GetIndexAbbePercentage ( );
    void PutIndexAbbePercentage (
        double pRetVal );
    double GetTestWavelength ( );
    void PutTestWavelength (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CommonSettings (
        /*[out,retval]*/ struct IWizard * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsSEQToleranceWizard (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsSurfaceRadiusUsed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsSurfaceRadiusUsed (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsSurfaceThicknessUsed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsSurfaceThicknessUsed (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsSurfaceDecenterXUsed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsSurfaceDecenterXUsed (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsSurfaceDecenterYUsed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsSurfaceDecenterYUsed (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsSurfaceTiltXUsed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsSurfaceTiltXUsed (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsSurfaceTiltYUsed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsSurfaceTiltYUsed (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsSurfaceSandAIrregularityUsed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsSurfaceSandAIrregularityUsed (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsSurfaceZernikeIrregularityUsed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsSurfaceZernikeIrregularityUsed (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsElementDecenterXUsed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsElementDecenterXUsed (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsElementDecenterYUsed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsElementDecenterYUsed (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsElementTiltXUsed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsElementTiltXUsed (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsElementTiltYUsed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsElementTiltYUsed (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsIndexUsed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsIndexUsed (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsIndexAbbePercentageUsed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsIndexAbbePercentageUsed (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsFocusCompensationUsed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsFocusCompensationUsed (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_SurfaceRadiusUnitType (
        /*[out,retval]*/ enum DefaultAndFringes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SurfaceRadiusUnitType (
        /*[in]*/ enum DefaultAndFringes pRetVal ) = 0;
      virtual HRESULT __stdcall get_SurfaceTiltXUnitType (
        /*[out,retval]*/ enum DefaultAndDegrees * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SurfaceTiltXUnitType (
        /*[in]*/ enum DefaultAndDegrees pRetVal ) = 0;
      virtual HRESULT __stdcall get_SurfaceTiltYUnitType (
        /*[out,retval]*/ enum DefaultAndDegrees * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SurfaceTiltYUnitType (
        /*[in]*/ enum DefaultAndDegrees pRetVal ) = 0;
      virtual HRESULT __stdcall get_StartAt (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_StartAt (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_StartAtSurface (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_StartAtSurface (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_StopAtSurface (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_StopAtSurface (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_SurfaceRadius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SurfaceRadius (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_SurfaceRadiusFringes (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SurfaceRadiusFringes (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_SurfaceThickness (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SurfaceThickness (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_SurfaceDecenterX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SurfaceDecenterX (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_SurfaceDecenterY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SurfaceDecenterY (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_SurfaceTiltX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SurfaceTiltX (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_SurfaceTiltXDegrees (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SurfaceTiltXDegrees (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_SurfaceTiltY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SurfaceTiltY (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_SurfaceTiltYDegrees (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SurfaceTiltYDegrees (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_SurfaceSandAIrregularityFringes (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SurfaceSandAIrregularityFringes (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_SurfaceZernikeIrregularityFringes (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SurfaceZernikeIrregularityFringes (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ElementDecenterX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ElementDecenterX (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ElementDecenterY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ElementDecenterY (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ElementTiltXDegrees (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ElementTiltXDegrees (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ElementTiltYDegrees (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ElementTiltYDegrees (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_index (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_index (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_IndexAbbePercentage (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IndexAbbePercentage (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_TestWavelength (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TestWavelength (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("7b460a95-0155-4df4-bb9f-d4020dc05d76"))
INSCToleranceWizard : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetToleranceSettings))
    IToleranceWizardPtr ToleranceSettings;

    //
    // Wrapper methods for error-handling
    //

    IToleranceWizardPtr GetToleranceSettings ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ToleranceSettings (
        /*[out,retval]*/ struct IToleranceWizard * * pRetVal ) = 0;
};

struct __declspec(uuid("9e002cfb-3dfc-47b2-9300-48e08f3e6594"))
ISEQToleranceWizard : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetToleranceSettings))
    IToleranceWizardPtr ToleranceSettings;

    //
    // Wrapper methods for error-handling
    //

    IToleranceWizardPtr GetToleranceSettings ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ToleranceSettings (
        /*[out,retval]*/ struct IToleranceWizard * * pRetVal ) = 0;
};

enum __declspec(uuid("da8732c1-4a73-4a8b-9561-ece9984fb5f9"))
ZemaxSystemUnits
{
    ZemaxSystemUnits_Millimeters = 0,
    ZemaxSystemUnits_Centimeters = 1,
    ZemaxSystemUnits_Inches = 2,
    ZemaxSystemUnits_Meters = 3
};

enum __declspec(uuid("b09f226b-903b-4717-a667-30a67ded63dd"))
ZemaxSourceUnits
{
    ZemaxSourceUnits_Watts = 0,
    ZemaxSourceUnits_Lumens = 1,
    ZemaxSourceUnits_Joules = 2
};

enum __declspec(uuid("571d57c6-62ea-411d-ad66-8ce2d140adcf"))
ZemaxAnalysisUnits
{
    ZemaxAnalysisUnits_WattsPerMMSq = 0,
    ZemaxAnalysisUnits_WattsPerCMSq = 1,
    ZemaxAnalysisUnits_WattsPerinSq = 2,
    ZemaxAnalysisUnits_WattsPerMSq = 3,
    ZemaxAnalysisUnits_WattsPerftSq = 4
};

enum __declspec(uuid("73923de5-f257-4c53-a522-ae13c42cc1ad"))
ZemaxUnitPrefix
{
    ZemaxUnitPrefix_Femto = 0,
    ZemaxUnitPrefix_Pico = 1,
    ZemaxUnitPrefix_Nano = 2,
    ZemaxUnitPrefix_Micro = 3,
    ZemaxUnitPrefix_Milli = 4,
    ZemaxUnitPrefix_None = 5,
    ZemaxUnitPrefix_Kilo = 6,
    ZemaxUnitPrefix_Mega = 7,
    ZemaxUnitPrefix_Giga = 8,
    ZemaxUnitPrefix_Tera = 9
};

enum __declspec(uuid("a8505fb6-404c-4c3f-85bd-9c8fc28db153"))
ZemaxAfocalModeUnits
{
    ZemaxAfocalModeUnits_Microradians = 0,
    ZemaxAfocalModeUnits_Milliradians = 1,
    ZemaxAfocalModeUnits_Radians = 2,
    ZemaxAfocalModeUnits_ArcSeconds = 3,
    ZemaxAfocalModeUnits_ArcMinutes = 4,
    ZemaxAfocalModeUnits_Degrees = 5
};

enum __declspec(uuid("2ff52760-7cf4-4cd3-929d-e6df5a900094"))
ZemaxMTFUnits
{
    ZemaxMTFUnits_CyclesPerMillimeter = 0,
    ZemaxMTFUnits_CyclesPerMilliradian = 1
};

enum __declspec(uuid("6b6a550b-6e46-4aba-8808-abc7f7b4b21f"))
ZemaxApertureType
{
    ZemaxApertureType_EntrancePupilDiameter = 0,
    ZemaxApertureType_ImageSpaceFNum = 1,
    ZemaxApertureType_ObjectSpaceNA = 2,
    ZemaxApertureType_FloatByStopSize = 3,
    ZemaxApertureType_ParaxialWorkingFNum = 4,
    ZemaxApertureType_ObjectConeAngle = 5
};

enum __declspec(uuid("4b708235-89a5-4454-a623-30407587be8f"))
ZemaxApodizationType
{
    ZemaxApodizationType_Uniform = 0,
    ZemaxApodizationType_Gaussian = 1,
    ZemaxApodizationType_CosineCubed = 2
};

enum __declspec(uuid("121f812d-cb57-4aae-a57a-9f080412bfc0"))
WavelengthPreset
{
    WavelengthPreset_FdC_Visible = 0,
    WavelengthPreset_Photopic_Bright = 1,
    WavelengthPreset_Scotopic_Dark = 2,
    WavelengthPreset_HeNe_0p6328 = 3,
    WavelengthPreset_HeNe_0p5438 = 4,
    WavelengthPreset_Argon_0p4880 = 5,
    WavelengthPreset_Argon_0p5145 = 6,
    WavelengthPreset_NDYAG_1p0641 = 7,
    WavelengthPreset_NDGlass_1p054 = 8,
    WavelengthPreset_CO2_10p60 = 9,
    WavelengthPreset_CrLiSAF_0p840 = 10,
    WavelengthPreset_TiAl203_0p760 = 11,
    WavelengthPreset_Ruby_0p6943 = 12,
    WavelengthPreset_HeCadmium_0p4416 = 13,
    WavelengthPreset_HeCadmium_0p3536 = 14,
    WavelengthPreset_HeCadmium_0p3250 = 15,
    WavelengthPreset_t_1p014 = 16,
    WavelengthPreset_r_0p707 = 17,
    WavelengthPreset_C_0p656 = 18,
    WavelengthPreset_d_0p587 = 19,
    WavelengthPreset_F_0p486 = 20,
    WavelengthPreset_g_0p436 = 21,
    WavelengthPreset_i_0p365 = 22,
    WavelengthPreset_Fp_0p365 = 23,
    WavelengthPreset_e_0p54607 = 24,
    WavelengthPreset_Cp_0p6438469 = 25,
    WavelengthPreset_FpeCp_Visible = 26,
    WavelengthPreset_THz_193p10 = 27
};

enum __declspec(uuid("288deacd-044a-400b-b254-7584e143a260"))
QuadratureSteps
{
    QuadratureSteps_S2 = 0,
    QuadratureSteps_S4 = 1,
    QuadratureSteps_S6 = 2,
    QuadratureSteps_S8 = 3,
    QuadratureSteps_S10 = 4,
    QuadratureSteps_S12 = 5
};

enum __declspec(uuid("776b1a26-fb34-4606-a763-ee0b84f2a344"))
FieldType
{
    FieldType_Angle = 0,
    FieldType_ObjectHeight = 1,
    FieldType_ParaxialImageHeight = 2,
    FieldType_RealImageHeight = 3
};

enum __declspec(uuid("788d255f-6050-45f0-9305-617af47d00cd"))
PolarizationMethod
{
    PolarizationMethod_XAxisMethod = 0,
    PolarizationMethod_YAxisMethod = 1,
    PolarizationMethod_ZAxisMethod = 2
};

enum __declspec(uuid("e993cde2-3df3-4d62-b58f-30a26d5d0119"))
ReferenceOPDSetting
{
    ReferenceOPDSetting_Absolute = 0,
    ReferenceOPDSetting_Infinity = 1,
    ReferenceOPDSetting_ExitPupil = 2,
    ReferenceOPDSetting_Absolute2 = 3
};

enum __declspec(uuid("7f8f44bf-08e5-4794-8396-d64c5429a741"))
ParaxialRaysSetting
{
    ParaxialRaysSetting_ConsiderCoordinateBreaks = 0,
    ParaxialRaysSetting_IgnoreCoordinateBreaks = 1
};

enum __declspec(uuid("953819c5-3d69-4f56-9ce4-317e085ed252"))
HuygensIntegralSettings
{
    HuygensIntegralSettings_Auto = 0,
    HuygensIntegralSettings_Planar = 1,
    HuygensIntegralSettings_Spherical = 2
};

enum __declspec(uuid("d5b5088c-c726-4a7c-8fcb-9b04198eedb2"))
FNumberComputationType
{
    FNumberComputationType_TracingRays = 0,
    FNumberComputationType_PupilSizePosition = 1
};

enum __declspec(uuid("224bd957-3c13-4538-a18d-1db94c61a6a2"))
RayAimingMethod
{
    RayAimingMethod_Off = 0,
    RayAimingMethod_Paraxial = 1,
    RayAimingMethod_Real = 2
};

struct __declspec(uuid("3e7ed240-5aa3-42c6-b6d9-3fb8b4bf822d"))
ISurfaceSelection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFirstAllowedSurface))
    long FirstAllowedSurface;
    __declspec(property(get=GetLastAllowedSurface))
    long LastAllowedSurface;
    __declspec(property(get=GetImageSurface))
    long ImageSurface;
    __declspec(property(get=GetStopSurface))
    long StopSurface;

    //
    // Wrapper methods for error-handling
    //

    long GetFirstAllowedSurface ( );
    long GetLastAllowedSurface ( );
    long GetImageSurface ( );
    long GetStopSurface ( );
    long GetSelectedSurface ( );
    VARIANT_BOOL SetSelectedSurface (
        long Surface );
    VARIANT_BOOL UseObjectSurface ( );
    VARIANT_BOOL UseStopSurface ( );
    VARIANT_BOOL UseImageSurface ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FirstAllowedSurface (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LastAllowedSurface (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ImageSurface (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_StopSurface (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetSelectedSurface (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetSelectedSurface (
        /*[in]*/ long Surface,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_UseObjectSurface (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_UseStopSurface (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_UseImageSurface (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("5ed309b8-e522-48ce-9481-521e00e71273"))
ISDApertureData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApertureType,put=PutApertureType))
    enum ZemaxApertureType ApertureType;
    __declspec(property(get=GetApertureValue,put=PutApertureValue))
    double ApertureValue;
    __declspec(property(get=GetApodizationType,put=PutApodizationType))
    enum ZemaxApodizationType ApodizationType;
    __declspec(property(get=GetApodizationFactor,put=PutApodizationFactor))
    double ApodizationFactor;
    __declspec(property(get=GetApodizationFactorIsUsed))
    VARIANT_BOOL ApodizationFactorIsUsed;
    __declspec(property(get=GetSemiDiameterMargin,put=PutSemiDiameterMargin))
    double SemiDiameterMargin;
    __declspec(property(get=GetSemiDiameterMarginPct,put=PutSemiDiameterMarginPct))
    double SemiDiameterMarginPct;
    __declspec(property(get=GetGCRS))
    ISurfaceSelectionPtr GCRS;
    __declspec(property(get=GetTelecentricObjectSpace,put=PutTelecentricObjectSpace))
    VARIANT_BOOL TelecentricObjectSpace;
    __declspec(property(get=GetAFocalImageSpace,put=PutAFocalImageSpace))
    VARIANT_BOOL AFocalImageSpace;
    __declspec(property(get=GetIterateSolvesWhenUpdating,put=PutIterateSolvesWhenUpdating))
    VARIANT_BOOL IterateSolvesWhenUpdating;
    __declspec(property(get=GetFastSemiDiameters,put=PutFastSemiDiameters))
    VARIANT_BOOL FastSemiDiameters;
    __declspec(property(get=GetCheckGRINApertures,put=PutCheckGRINApertures))
    VARIANT_BOOL CheckGRINApertures;

    //
    // Wrapper methods for error-handling
    //

    enum ZemaxApertureType GetApertureType ( );
    void PutApertureType (
        enum ZemaxApertureType pRetVal );
    double GetApertureValue ( );
    void PutApertureValue (
        double pRetVal );
    enum ZemaxApodizationType GetApodizationType ( );
    void PutApodizationType (
        enum ZemaxApodizationType pRetVal );
    double GetApodizationFactor ( );
    void PutApodizationFactor (
        double pRetVal );
    VARIANT_BOOL GetApodizationFactorIsUsed ( );
    double GetSemiDiameterMargin ( );
    void PutSemiDiameterMargin (
        double pRetVal );
    double GetSemiDiameterMarginPct ( );
    void PutSemiDiameterMarginPct (
        double pRetVal );
    ISurfaceSelectionPtr GetGCRS ( );
    VARIANT_BOOL GetTelecentricObjectSpace ( );
    void PutTelecentricObjectSpace (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetAFocalImageSpace ( );
    void PutAFocalImageSpace (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIterateSolvesWhenUpdating ( );
    void PutIterateSolvesWhenUpdating (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetFastSemiDiameters ( );
    void PutFastSemiDiameters (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetCheckGRINApertures ( );
    void PutCheckGRINApertures (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ApertureType (
        /*[out,retval]*/ enum ZemaxApertureType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ApertureType (
        /*[in]*/ enum ZemaxApertureType pRetVal ) = 0;
      virtual HRESULT __stdcall get_ApertureValue (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ApertureValue (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ApodizationType (
        /*[out,retval]*/ enum ZemaxApodizationType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ApodizationType (
        /*[in]*/ enum ZemaxApodizationType pRetVal ) = 0;
      virtual HRESULT __stdcall get_ApodizationFactor (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ApodizationFactor (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ApodizationFactorIsUsed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SemiDiameterMargin (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SemiDiameterMargin (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_SemiDiameterMarginPct (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SemiDiameterMarginPct (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_GCRS (
        /*[out,retval]*/ struct ISurfaceSelection * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TelecentricObjectSpace (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TelecentricObjectSpace (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_AFocalImageSpace (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AFocalImageSpace (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IterateSolvesWhenUpdating (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IterateSolvesWhenUpdating (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_FastSemiDiameters (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FastSemiDiameters (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_CheckGRINApertures (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CheckGRINApertures (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("faabd3a3-c146-4723-a7b6-a93ba1d158a5"))
ISDEnvironmentData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAdjustIndexToEnvironment,put=PutAdjustIndexToEnvironment))
    VARIANT_BOOL AdjustIndexToEnvironment;
    __declspec(property(get=GetTemperature,put=PutTemperature))
    double Temperature;
    __declspec(property(get=GetPressure,put=PutPressure))
    double Pressure;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetAdjustIndexToEnvironment ( );
    void PutAdjustIndexToEnvironment (
        VARIANT_BOOL pRetVal );
    double GetTemperature ( );
    void PutTemperature (
        double pRetVal );
    double GetPressure ( );
    void PutPressure (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AdjustIndexToEnvironment (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AdjustIndexToEnvironment (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Temperature (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Temperature (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Pressure (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Pressure (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("3d86558b-38c6-44e2-9d8a-a4a6aa52850e"))
ISDPolarizationData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetConvertThinFilmPhaseToRayEquivalent,put=PutConvertThinFilmPhaseToRayEquivalent))
    VARIANT_BOOL ConvertThinFilmPhaseToRayEquivalent;
    __declspec(property(get=GetUnpolarized,put=PutUnpolarized))
    VARIANT_BOOL Unpolarized;
    __declspec(property(get=Getjx,put=Putjx))
    double jx;
    __declspec(property(get=Getjy,put=Putjy))
    double jy;
    __declspec(property(get=GetXPhase,put=PutXPhase))
    double XPhase;
    __declspec(property(get=GetYPhase,put=PutYPhase))
    double YPhase;
    __declspec(property(get=GetMethod,put=PutMethod))
    enum PolarizationMethod Method;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetConvertThinFilmPhaseToRayEquivalent ( );
    void PutConvertThinFilmPhaseToRayEquivalent (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetUnpolarized ( );
    void PutUnpolarized (
        VARIANT_BOOL pRetVal );
    double Getjx ( );
    void Putjx (
        double pRetVal );
    double Getjy ( );
    void Putjy (
        double pRetVal );
    double GetXPhase ( );
    void PutXPhase (
        double pRetVal );
    double GetYPhase ( );
    void PutYPhase (
        double pRetVal );
    enum PolarizationMethod GetMethod ( );
    void PutMethod (
        enum PolarizationMethod pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ConvertThinFilmPhaseToRayEquivalent (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ConvertThinFilmPhaseToRayEquivalent (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Unpolarized (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Unpolarized (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_jx (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_jx (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_jy (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_jy (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_XPhase (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XPhase (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YPhase (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YPhase (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Method (
        /*[out,retval]*/ enum PolarizationMethod * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Method (
        /*[in]*/ enum PolarizationMethod pRetVal ) = 0;
};

struct __declspec(uuid("93927409-11d7-461e-a71d-a1fdaaa59e3d"))
ISDAdvancedData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceOPD,put=PutReferenceOPD))
    enum ReferenceOPDSetting ReferenceOPD;
    __declspec(property(get=GetParaxialRays,put=PutParaxialRays))
    enum ParaxialRaysSetting ParaxialRays;
    __declspec(property(get=GetFNumMethod,put=PutFNumMethod))
    enum FNumberComputationType FNumMethod;
    __declspec(property(get=GetDontPrintCoordinateBreakData,put=PutDontPrintCoordinateBreakData))
    VARIANT_BOOL DontPrintCoordinateBreakData;
    __declspec(property(get=GetTurnOffThreading,put=PutTurnOffThreading))
    VARIANT_BOOL TurnOffThreading;
    __declspec(property(get=GetOPDModulo2PI,put=PutOPDModulo2PI))
    VARIANT_BOOL OPDModulo2PI;
    __declspec(property(get=GetIncludeCalculatedDataInSessionFile,put=PutIncludeCalculatedDataInSessionFile))
    VARIANT_BOOL IncludeCalculatedDataInSessionFile;
    __declspec(property(get=GetHuygensIntegralMethod,put=PutHuygensIntegralMethod))
    enum HuygensIntegralSettings HuygensIntegralMethod;

    //
    // Wrapper methods for error-handling
    //

    enum ReferenceOPDSetting GetReferenceOPD ( );
    void PutReferenceOPD (
        enum ReferenceOPDSetting pRetVal );
    enum ParaxialRaysSetting GetParaxialRays ( );
    void PutParaxialRays (
        enum ParaxialRaysSetting pRetVal );
    enum FNumberComputationType GetFNumMethod ( );
    void PutFNumMethod (
        enum FNumberComputationType pRetVal );
    VARIANT_BOOL GetDontPrintCoordinateBreakData ( );
    void PutDontPrintCoordinateBreakData (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetTurnOffThreading ( );
    void PutTurnOffThreading (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetOPDModulo2PI ( );
    void PutOPDModulo2PI (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIncludeCalculatedDataInSessionFile ( );
    void PutIncludeCalculatedDataInSessionFile (
        VARIANT_BOOL pRetVal );
    enum HuygensIntegralSettings GetHuygensIntegralMethod ( );
    void PutHuygensIntegralMethod (
        enum HuygensIntegralSettings pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceOPD (
        /*[out,retval]*/ enum ReferenceOPDSetting * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceOPD (
        /*[in]*/ enum ReferenceOPDSetting pRetVal ) = 0;
      virtual HRESULT __stdcall get_ParaxialRays (
        /*[out,retval]*/ enum ParaxialRaysSetting * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ParaxialRays (
        /*[in]*/ enum ParaxialRaysSetting pRetVal ) = 0;
      virtual HRESULT __stdcall get_FNumMethod (
        /*[out,retval]*/ enum FNumberComputationType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FNumMethod (
        /*[in]*/ enum FNumberComputationType pRetVal ) = 0;
      virtual HRESULT __stdcall get_DontPrintCoordinateBreakData (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DontPrintCoordinateBreakData (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_TurnOffThreading (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TurnOffThreading (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_OPDModulo2PI (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OPDModulo2PI (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IncludeCalculatedDataInSessionFile (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IncludeCalculatedDataInSessionFile (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_HuygensIntegralMethod (
        /*[out,retval]*/ enum HuygensIntegralSettings * pRetVal ) = 0;
      virtual HRESULT __stdcall put_HuygensIntegralMethod (
        /*[in]*/ enum HuygensIntegralSettings pRetVal ) = 0;
};

struct __declspec(uuid("61d96bc4-158b-41d8-8cdc-95068a3e9e57"))
ISDRayAimingData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRayAiming,put=PutRayAiming))
    enum RayAimingMethod RayAiming;
    __declspec(property(get=GetUseRayAimingCache,put=PutUseRayAimingCache))
    VARIANT_BOOL UseRayAimingCache;
    __declspec(property(get=GetUseRobustRayAiming,put=PutUseRobustRayAiming))
    VARIANT_BOOL UseRobustRayAiming;
    __declspec(property(get=GetScalePupilShiftFactorsByField,put=PutScalePupilShiftFactorsByField))
    VARIANT_BOOL ScalePupilShiftFactorsByField;
    __declspec(property(get=GetAutomaticallyCalculatePupilShiftsIsChecked,put=PutAutomaticallyCalculatePupilShiftsIsChecked))
    VARIANT_BOOL AutomaticallyCalculatePupilShiftsIsChecked;
    __declspec(property(get=GetPupilShiftX,put=PutPupilShiftX))
    double PupilShiftX;
    __declspec(property(get=GetPupilShiftY,put=PutPupilShiftY))
    double PupilShiftY;
    __declspec(property(get=GetPupilShiftZ,put=PutPupilShiftZ))
    double PupilShiftZ;
    __declspec(property(get=GetPupilCompressX,put=PutPupilCompressX))
    double PupilCompressX;
    __declspec(property(get=GetPupilCompressY,put=PutPupilCompressY))
    double PupilCompressY;

    //
    // Wrapper methods for error-handling
    //

    enum RayAimingMethod GetRayAiming ( );
    void PutRayAiming (
        enum RayAimingMethod pRetVal );
    VARIANT_BOOL GetUseRayAimingCache ( );
    void PutUseRayAimingCache (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetUseRobustRayAiming ( );
    void PutUseRobustRayAiming (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetScalePupilShiftFactorsByField ( );
    void PutScalePupilShiftFactorsByField (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetAutomaticallyCalculatePupilShiftsIsChecked ( );
    void PutAutomaticallyCalculatePupilShiftsIsChecked (
        VARIANT_BOOL pRetVal );
    double GetPupilShiftX ( );
    void PutPupilShiftX (
        double pRetVal );
    double GetPupilShiftY ( );
    void PutPupilShiftY (
        double pRetVal );
    double GetPupilShiftZ ( );
    void PutPupilShiftZ (
        double pRetVal );
    double GetPupilCompressX ( );
    void PutPupilCompressX (
        double pRetVal );
    double GetPupilCompressY ( );
    void PutPupilCompressY (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RayAiming (
        /*[out,retval]*/ enum RayAimingMethod * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RayAiming (
        /*[in]*/ enum RayAimingMethod pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseRayAimingCache (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseRayAimingCache (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseRobustRayAiming (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseRobustRayAiming (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ScalePupilShiftFactorsByField (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ScalePupilShiftFactorsByField (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_AutomaticallyCalculatePupilShiftsIsChecked (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AutomaticallyCalculatePupilShiftsIsChecked (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_PupilShiftX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PupilShiftX (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_PupilShiftY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PupilShiftY (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_PupilShiftZ (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PupilShiftZ (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_PupilCompressX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PupilCompressX (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_PupilCompressY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PupilCompressY (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("3543d3f3-16ed-4b9a-b033-9cdd7fc95554"))
ISDMaterialCatalogData : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * GetCatalogsInUse ( );
    SAFEARRAY * GetAvailableCatalogs ( );
    SAFEARRAY * GetMaterialsInCatalog (
        _bstr_t catalog );
    VARIANT_BOOL IsCatalogInUse (
        _bstr_t catalog );
    VARIANT_BOOL RemoveCatalog (
        _bstr_t catalog );
    VARIANT_BOOL AddCatalog (
        _bstr_t catalog );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetCatalogsInUse (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailableCatalogs (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetMaterialsInCatalog (
        /*[in]*/ BSTR catalog,
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsCatalogInUse (
        /*[in]*/ BSTR catalog,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveCatalog (
        /*[in]*/ BSTR catalog,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddCatalog (
        /*[in]*/ BSTR catalog,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("731b798f-1126-45fb-890e-632abed92bc6"))
ISDTitleNotes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTitle,put=PutTitle))
    _bstr_t Title;
    __declspec(property(get=GetNotes,put=PutNotes))
    _bstr_t Notes;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetTitle ( );
    void PutTitle (
        _bstr_t pRetVal );
    _bstr_t GetNotes ( );
    void PutNotes (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Title (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Title (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Notes (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Notes (
        /*[in]*/ BSTR pRetVal ) = 0;
};

struct __declspec(uuid("ff41d6ca-de03-43ed-bf29-4fc2b3e4ef57"))
ISDFiles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCoatingFile,put=PutCoatingFile))
    _bstr_t CoatingFile;
    __declspec(property(get=GetScatterProfile,put=PutScatterProfile))
    _bstr_t ScatterProfile;
    __declspec(property(get=GetABgDataFile,put=PutABgDataFile))
    _bstr_t ABgDataFile;
    __declspec(property(get=GetGradiumProfile,put=PutGradiumProfile))
    _bstr_t GradiumProfile;

    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * GetCoatingFiles ( );
    _bstr_t GetCoatingFile ( );
    void PutCoatingFile (
        _bstr_t pRetVal );
    SAFEARRAY * GetScatterProfiles ( );
    _bstr_t GetScatterProfile ( );
    void PutScatterProfile (
        _bstr_t pRetVal );
    SAFEARRAY * GetABgDataFiles ( );
    _bstr_t GetABgDataFile ( );
    void PutABgDataFile (
        _bstr_t pRetVal );
    SAFEARRAY * GetGradiumProfiles ( );
    _bstr_t GetGradiumProfile ( );
    void PutGradiumProfile (
        _bstr_t pRetVal );
    HRESULT ReloadFiles ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetCoatingFiles (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoatingFile (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoatingFile (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetScatterProfiles (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ScatterProfile (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ScatterProfile (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetABgDataFiles (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ABgDataFile (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ABgDataFile (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetGradiumProfiles (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_GradiumProfile (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_GradiumProfile (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ReloadFiles ( ) = 0;
};

struct __declspec(uuid("8dec3467-c25e-4e82-8a95-6a6be7592dcc"))
ISDUnitsData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLensUnits,put=PutLensUnits))
    enum ZemaxSystemUnits LensUnits;
    __declspec(property(get=GetSourceUnitPrefix,put=PutSourceUnitPrefix))
    enum ZemaxUnitPrefix SourceUnitPrefix;
    __declspec(property(get=GetSourceUnits,put=PutSourceUnits))
    enum ZemaxSourceUnits SourceUnits;
    __declspec(property(get=GetAnalysisUnitPrefix,put=PutAnalysisUnitPrefix))
    enum ZemaxUnitPrefix AnalysisUnitPrefix;
    __declspec(property(get=GetAnalysisUnits,put=PutAnalysisUnits))
    enum ZemaxAnalysisUnits AnalysisUnits;
    __declspec(property(get=GetAfocalModeUnits,put=PutAfocalModeUnits))
    enum ZemaxAfocalModeUnits AfocalModeUnits;
    __declspec(property(get=GetMTFUnits,put=PutMTFUnits))
    enum ZemaxMTFUnits MTFUnits;

    //
    // Wrapper methods for error-handling
    //

    enum ZemaxSystemUnits GetLensUnits ( );
    void PutLensUnits (
        enum ZemaxSystemUnits pRetVal );
    enum ZemaxUnitPrefix GetSourceUnitPrefix ( );
    void PutSourceUnitPrefix (
        enum ZemaxUnitPrefix pRetVal );
    enum ZemaxSourceUnits GetSourceUnits ( );
    void PutSourceUnits (
        enum ZemaxSourceUnits pRetVal );
    enum ZemaxUnitPrefix GetAnalysisUnitPrefix ( );
    void PutAnalysisUnitPrefix (
        enum ZemaxUnitPrefix pRetVal );
    enum ZemaxAnalysisUnits GetAnalysisUnits ( );
    void PutAnalysisUnits (
        enum ZemaxAnalysisUnits pRetVal );
    enum ZemaxAfocalModeUnits GetAfocalModeUnits ( );
    void PutAfocalModeUnits (
        enum ZemaxAfocalModeUnits pRetVal );
    enum ZemaxMTFUnits GetMTFUnits ( );
    void PutMTFUnits (
        enum ZemaxMTFUnits pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LensUnits (
        /*[out,retval]*/ enum ZemaxSystemUnits * pRetVal ) = 0;
      virtual HRESULT __stdcall put_LensUnits (
        /*[in]*/ enum ZemaxSystemUnits pRetVal ) = 0;
      virtual HRESULT __stdcall get_SourceUnitPrefix (
        /*[out,retval]*/ enum ZemaxUnitPrefix * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SourceUnitPrefix (
        /*[in]*/ enum ZemaxUnitPrefix pRetVal ) = 0;
      virtual HRESULT __stdcall get_SourceUnits (
        /*[out,retval]*/ enum ZemaxSourceUnits * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SourceUnits (
        /*[in]*/ enum ZemaxSourceUnits pRetVal ) = 0;
      virtual HRESULT __stdcall get_AnalysisUnitPrefix (
        /*[out,retval]*/ enum ZemaxUnitPrefix * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AnalysisUnitPrefix (
        /*[in]*/ enum ZemaxUnitPrefix pRetVal ) = 0;
      virtual HRESULT __stdcall get_AnalysisUnits (
        /*[out,retval]*/ enum ZemaxAnalysisUnits * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AnalysisUnits (
        /*[in]*/ enum ZemaxAnalysisUnits pRetVal ) = 0;
      virtual HRESULT __stdcall get_AfocalModeUnits (
        /*[out,retval]*/ enum ZemaxAfocalModeUnits * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AfocalModeUnits (
        /*[in]*/ enum ZemaxAfocalModeUnits pRetVal ) = 0;
      virtual HRESULT __stdcall get_MTFUnits (
        /*[out,retval]*/ enum ZemaxMTFUnits * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MTFUnits (
        /*[in]*/ enum ZemaxMTFUnits pRetVal ) = 0;
};

struct __declspec(uuid("dc212171-dbf3-42ec-a727-b70d2677d611"))
IWavelength : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetWavelengthNumber))
    long WavelengthNumber;
    __declspec(property(get=GetIsActive))
    VARIANT_BOOL IsActive;
    __declspec(property(get=GetIsPrimary))
    VARIANT_BOOL IsPrimary;
    __declspec(property(get=GetWavelength,put=PutWavelength))
    double Wavelength;
    __declspec(property(get=GetWeight,put=PutWeight))
    double Weight;

    //
    // Wrapper methods for error-handling
    //

    long GetWavelengthNumber ( );
    VARIANT_BOOL GetIsActive ( );
    VARIANT_BOOL GetIsPrimary ( );
    double GetWavelength ( );
    void PutWavelength (
        double pRetVal );
    double GetWeight ( );
    void PutWeight (
        double pRetVal );
    HRESULT MakePrimary ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_WavelengthNumber (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsActive (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsPrimary (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Wavelength (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Wavelength (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Weight (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Weight (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall raw_MakePrimary ( ) = 0;
};

struct __declspec(uuid("8b8c12b1-f85d-4f3a-b309-80c60afd48aa"))
IWavelengths : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNumberOfWavelengths))
    long NumberOfWavelengths;

    //
    // Wrapper methods for error-handling
    //

    long GetNumberOfWavelengths ( );
    IWavelengthPtr GetWavelength (
        long position );
    IWavelengthPtr AddWavelength (
        double Wavelength,
        double Weight );
    VARIANT_BOOL RemoveWavelength (
        long position );
    VARIANT_BOOL SelectWavelengthPreset (
        enum WavelengthPreset preset );
    VARIANT_BOOL GaussianQuadrature (
        double minWave,
        double maxWave,
        enum QuadratureSteps numSteps );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NumberOfWavelengths (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetWavelength (
        /*[in]*/ long position,
        /*[out,retval]*/ struct IWavelength * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddWavelength (
        /*[in]*/ double Wavelength,
        /*[in]*/ double Weight,
        /*[out,retval]*/ struct IWavelength * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveWavelength (
        /*[in]*/ long position,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SelectWavelengthPreset (
        /*[in]*/ enum WavelengthPreset preset,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GaussianQuadrature (
        /*[in]*/ double minWave,
        /*[in]*/ double maxWave,
        /*[in]*/ enum QuadratureSteps numSteps,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

enum __declspec(uuid("a17fb7e8-87f5-43f0-aaa1-8fc85143f356"))
FieldNormalizationType
{
    FieldNormalizationType_Radial = 0,
    FieldNormalizationType_Rectangular = 1
};

struct __declspec(uuid("56aa7e6d-e7b6-4685-b720-576adc466932"))
IField : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsActive))
    VARIANT_BOOL IsActive;
    __declspec(property(get=GetFieldNumber))
    long FieldNumber;
    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetY,put=PutY))
    double Y;
    __declspec(property(get=GetWeight,put=PutWeight))
    double Weight;
    __declspec(property(get=GetVDX,put=PutVDX))
    double VDX;
    __declspec(property(get=GetVDY,put=PutVDY))
    double VDY;
    __declspec(property(get=GetVCX,put=PutVCX))
    double VCX;
    __declspec(property(get=GetVCY,put=PutVCY))
    double VCY;
    __declspec(property(get=GetVAN,put=PutVAN))
    double VAN;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsActive ( );
    long GetFieldNumber ( );
    double GetX ( );
    void PutX (
        double pRetVal );
    double GetY ( );
    void PutY (
        double pRetVal );
    double GetWeight ( );
    void PutWeight (
        double pRetVal );
    double GetVDX ( );
    void PutVDX (
        double pRetVal );
    double GetVDY ( );
    void PutVDY (
        double pRetVal );
    double GetVCX ( );
    void PutVCX (
        double pRetVal );
    double GetVCY ( );
    void PutVCY (
        double pRetVal );
    double GetVAN ( );
    void PutVAN (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsActive (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FieldNumber (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Weight (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Weight (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_VDX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_VDX (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_VDY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_VDY (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_VCX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_VCX (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_VCY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_VCY (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_VAN (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_VAN (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("ee58e697-9a2a-49e5-8af2-36269bdf170e"))
IFields : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNumberOfFields))
    long NumberOfFields;
    __declspec(property(get=GetNormalization,put=PutNormalization))
    enum FieldNormalizationType Normalization;

    //
    // Wrapper methods for error-handling
    //

    long GetNumberOfFields ( );
    IFieldPtr GetField (
        long position );
    IFieldPtr AddField (
        double X,
        double Y,
        double Weight );
    VARIANT_BOOL RemoveField (
        long position );
    HRESULT SetVignetting ( );
    HRESULT ClearVignetting ( );
    enum FieldType GetFieldType ( );
    HRESULT SetFieldType (
        enum FieldType Type );
    enum FieldNormalizationType GetNormalization ( );
    void PutNormalization (
        enum FieldNormalizationType pRetVal );
    VARIANT_BOOL MakeEqualAreaFields (
        long NumberOfFields,
        double maximumField );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NumberOfFields (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetField (
        /*[in]*/ long position,
        /*[out,retval]*/ struct IField * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddField (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Weight,
        /*[out,retval]*/ struct IField * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveField (
        /*[in]*/ long position,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetVignetting ( ) = 0;
      virtual HRESULT __stdcall raw_ClearVignetting ( ) = 0;
      virtual HRESULT __stdcall raw_GetFieldType (
        /*[out,retval]*/ enum FieldType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetFieldType (
        /*[in]*/ enum FieldType Type ) = 0;
      virtual HRESULT __stdcall get_Normalization (
        /*[out,retval]*/ enum FieldNormalizationType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Normalization (
        /*[in]*/ enum FieldNormalizationType pRetVal ) = 0;
      virtual HRESULT __stdcall raw_MakeEqualAreaFields (
        /*[in]*/ long NumberOfFields,
        /*[in]*/ double maximumField,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("9855725c-3492-4050-a229-48e3d5327b3f"))
ISDNonSeqData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMaximumIntersectionsPerRay,put=PutMaximumIntersectionsPerRay))
    long MaximumIntersectionsPerRay;
    __declspec(property(get=GetMaximumSegmentsPerRay,put=PutMaximumSegmentsPerRay))
    long MaximumSegmentsPerRay;
    __declspec(property(get=GetMaximumNestedTouchingObjects,put=PutMaximumNestedTouchingObjects))
    long MaximumNestedTouchingObjects;
    __declspec(property(get=GetMaximumSourceFileRaysInMemory,put=PutMaximumSourceFileRaysInMemory))
    long MaximumSourceFileRaysInMemory;
    __declspec(property(get=GetMinimumRelativeRayIntensity,put=PutMinimumRelativeRayIntensity))
    double MinimumRelativeRayIntensity;
    __declspec(property(get=GetMinimumAbsoluteRayIntensity,put=PutMinimumAbsoluteRayIntensity))
    double MinimumAbsoluteRayIntensity;
    __declspec(property(get=GetGlueDistanceInLensUnits,put=PutGlueDistanceInLensUnits))
    double GlueDistanceInLensUnits;
    __declspec(property(get=GetMissedRayDrawDistanceInLensUnits,put=PutMissedRayDrawDistanceInLensUnits))
    double MissedRayDrawDistanceInLensUnits;
    __declspec(property(get=GetSimpleRaySplitting,put=PutSimpleRaySplitting))
    VARIANT_BOOL SimpleRaySplitting;
    __declspec(property(get=GetRetraceSourceRaysUponFileOpen,put=PutRetraceSourceRaysUponFileOpen))
    VARIANT_BOOL RetraceSourceRaysUponFileOpen;

    //
    // Wrapper methods for error-handling
    //

    long GetMaximumIntersectionsPerRay ( );
    void PutMaximumIntersectionsPerRay (
        long pRetVal );
    long GetMaximumSegmentsPerRay ( );
    void PutMaximumSegmentsPerRay (
        long pRetVal );
    long GetMaximumNestedTouchingObjects ( );
    void PutMaximumNestedTouchingObjects (
        long pRetVal );
    long GetMaximumSourceFileRaysInMemory ( );
    void PutMaximumSourceFileRaysInMemory (
        long pRetVal );
    double GetMinimumRelativeRayIntensity ( );
    void PutMinimumRelativeRayIntensity (
        double pRetVal );
    double GetMinimumAbsoluteRayIntensity ( );
    void PutMinimumAbsoluteRayIntensity (
        double pRetVal );
    double GetGlueDistanceInLensUnits ( );
    void PutGlueDistanceInLensUnits (
        double pRetVal );
    double GetMissedRayDrawDistanceInLensUnits ( );
    void PutMissedRayDrawDistanceInLensUnits (
        double pRetVal );
    VARIANT_BOOL GetSimpleRaySplitting ( );
    void PutSimpleRaySplitting (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetRetraceSourceRaysUponFileOpen ( );
    void PutRetraceSourceRaysUponFileOpen (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MaximumIntersectionsPerRay (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaximumIntersectionsPerRay (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumSegmentsPerRay (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaximumSegmentsPerRay (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumNestedTouchingObjects (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaximumNestedTouchingObjects (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumSourceFileRaysInMemory (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaximumSourceFileRaysInMemory (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinimumRelativeRayIntensity (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MinimumRelativeRayIntensity (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinimumAbsoluteRayIntensity (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MinimumAbsoluteRayIntensity (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_GlueDistanceInLensUnits (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_GlueDistanceInLensUnits (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MissedRayDrawDistanceInLensUnits (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MissedRayDrawDistanceInLensUnits (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_SimpleRaySplitting (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SimpleRaySplitting (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_RetraceSourceRaysUponFileOpen (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RetraceSourceRaysUponFileOpen (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("7bb031c2-82a1-478f-ae4e-5cb0c332710f"))
ISDNamedFilters : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNamedFilters,put=PutNamedFilters))
    _bstr_t NamedFilters;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetNamedFilters ( );
    void PutNamedFilters (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NamedFilters (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NamedFilters (
        /*[in]*/ BSTR pRetVal ) = 0;
};

struct __declspec(uuid("038f1c7d-a0d5-407d-b0a8-4ef52b8e7992"))
ISystemData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAperture))
    ISDApertureDataPtr Aperture;
    __declspec(property(get=GetWavelengths))
    IWavelengthsPtr Wavelengths;
    __declspec(property(get=GetFields))
    IFieldsPtr Fields;
    __declspec(property(get=GetEnvironment))
    ISDEnvironmentDataPtr Environment;
    __declspec(property(get=GetPolarization))
    ISDPolarizationDataPtr Polarization;
    __declspec(property(get=GetAdvanced))
    ISDAdvancedDataPtr Advanced;
    __declspec(property(get=GetRayAiming))
    ISDRayAimingDataPtr RayAiming;
    __declspec(property(get=GetMaterialCatalogs))
    ISDMaterialCatalogDataPtr MaterialCatalogs;
    __declspec(property(get=GetTitleNotes))
    ISDTitleNotesPtr TitleNotes;
    __declspec(property(get=GetFiles))
    ISDFilesPtr Files;
    __declspec(property(get=GetUnits))
    ISDUnitsDataPtr Units;
    __declspec(property(get=GetNonSequentialData))
    ISDNonSeqDataPtr NonSequentialData;
    __declspec(property(get=GetNamedFiltersData))
    ISDNamedFiltersPtr NamedFiltersData;

    //
    // Wrapper methods for error-handling
    //

    ISDApertureDataPtr GetAperture ( );
    IWavelengthsPtr GetWavelengths ( );
    IFieldsPtr GetFields ( );
    ISDEnvironmentDataPtr GetEnvironment ( );
    ISDPolarizationDataPtr GetPolarization ( );
    ISDAdvancedDataPtr GetAdvanced ( );
    ISDRayAimingDataPtr GetRayAiming ( );
    ISDMaterialCatalogDataPtr GetMaterialCatalogs ( );
    ISDTitleNotesPtr GetTitleNotes ( );
    ISDFilesPtr GetFiles ( );
    ISDUnitsDataPtr GetUnits ( );
    ISDNonSeqDataPtr GetNonSequentialData ( );
    ISDNamedFiltersPtr GetNamedFiltersData ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Aperture (
        /*[out,retval]*/ struct ISDApertureData * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Wavelengths (
        /*[out,retval]*/ struct IWavelengths * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Fields (
        /*[out,retval]*/ struct IFields * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Environment (
        /*[out,retval]*/ struct ISDEnvironmentData * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Polarization (
        /*[out,retval]*/ struct ISDPolarizationData * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Advanced (
        /*[out,retval]*/ struct ISDAdvancedData * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RayAiming (
        /*[out,retval]*/ struct ISDRayAimingData * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaterialCatalogs (
        /*[out,retval]*/ struct ISDMaterialCatalogData * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TitleNotes (
        /*[out,retval]*/ struct ISDTitleNotes * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Files (
        /*[out,retval]*/ struct ISDFiles * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Units (
        /*[out,retval]*/ struct ISDUnitsData * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NonSequentialData (
        /*[out,retval]*/ struct ISDNonSeqData * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NamedFiltersData (
        /*[out,retval]*/ struct ISDNamedFilters * * pRetVal ) = 0;
};

enum __declspec(uuid("48d219f7-9386-46d4-8e8f-4f80ad153cd3"))
CellDataType
{
    CellDataType_Integer = 0,
    CellDataType_Double = 1,
    CellDataType_String = 2
};

enum __declspec(uuid("5e9c2af6-fae9-438c-979d-f39f031f6838"))
EditorType
{
    EditorType_LDE = 0,
    EditorType_NCE = 1,
    EditorType_MFE = 2,
    EditorType_TDE = 3,
    EditorType_MCE = 4
};

enum __declspec(uuid("8c947529-32f1-4d3c-bf25-3e3f76238fea"))
ReflectTransmitCode
{
    ReflectTransmitCode_Success = 0,
    ReflectTransmitCode_NoReflectDataInFile = 1,
    ReflectTransmitCode_NoTransmitDataInFile = 2
};

enum __declspec(uuid("3a5bd0fb-8008-438b-a320-7095394f521d"))
SampleSides
{
    SampleSides_Front = 0,
    SampleSides_Back = 1
};

enum __declspec(uuid("26a15f80-8b6f-440f-8c82-63f53950ee15"))
Samplings
{
    Samplings_FiveDegrees = 0,
    Samplings_TwoDegrees = 1,
    Samplings_OneDegree = 2
};

enum __declspec(uuid("f665c54c-e1ce-44b5-9158-d9ff82814403"))
SolveStatus
{
    SolveStatus_Success = 0,
    SolveStatus_InvalidSolveType = 1,
    SolveStatus_InvalidRow = 2,
    SolveStatus_InvalidColumn = 3,
    SolveStatus_PostSurfaceStopOnly = 4,
    SolveStatus_InvalidMacro = 5
};

enum __declspec(uuid("e73b65db-fb14-46d9-a069-ccdd2c31c7a3"))
SolveType
{
    SolveType_None = 0,
    SolveType_Fixed = 1,
    SolveType_Variable = 2,
    SolveType_SurfacePickup = 3,
    SolveType_ZPLMacro = 4,
    SolveType_MarginalRayAngle = 5,
    SolveType_MarginalRayHeight = 6,
    SolveType_ChiefRayAngle = 7,
    SolveType_MarginalRayNormal = 8,
    SolveType_ChiefRayNormal = 9,
    SolveType_Aplanatic = 10,
    SolveType_ElementPower = 11,
    SolveType_CocentricSurface = 12,
    SolveType_CocentricRadius = 13,
    SolveType_FNumber = 14,
    SolveType_ChiefRayHeight = 15,
    SolveType_EdgeThickness = 16,
    SolveType_OpticalPathDifference = 17,
    SolveType_Position = 18,
    SolveType_Compensator = 19,
    SolveType_CenterOfCurvature = 20,
    SolveType_PupilPosition = 21,
    SolveType_MaterialSubstitute = 22,
    SolveType_MaterialOffset = 23,
    SolveType_MaterialModel = 24,
    SolveType_Automatic = 25,
    SolveType_Maximum = 26,
    SolveType_PickupChiefRay = 27,
    SolveType_ObjectPickup = 28,
    SolveType_ConfigPickup = 29,
    SolveType_ThermalPickup = 30,
    SolveType_MarginPercent = 31,
    SolveType_CA_fill = 32,
    SolveType_DIA_fill = 33
};

struct __declspec(uuid("d57a0025-8be3-4542-8499-e514f4ebc232"))
ISolveNone : IDispatch
{};

struct __declspec(uuid("11ebe1fd-9515-4d12-8819-50d89b75e325"))
ISolveFixed : IDispatch
{};

struct __declspec(uuid("b5761db0-5104-4986-b79d-be84d66b8966"))
ISolveVariable : IDispatch
{};

struct __declspec(uuid("2e0466cd-b7b7-47f1-a42f-b86bee848581"))
ISolveZPLMacro : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMacro,put=PutMacro))
    _bstr_t Macro;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetMacro ( );
    void PutMacro (
        _bstr_t pRetVal );
    SAFEARRAY * GetAvailableMacros ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Macro (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Macro (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailableMacros (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
};

struct __declspec(uuid("fa0850cf-85ed-433b-a658-17b325e3cb94"))
ISolveMarginalRayAngle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;

    //
    // Wrapper methods for error-handling
    //

    double GetAngle ( );
    void PutAngle (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("4119e845-367d-49c3-a383-d62ddc02a3ef"))
ISolveMarginalRayHeight : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetPupilZone,put=PutPupilZone))
    double PupilZone;

    //
    // Wrapper methods for error-handling
    //

    double GetHeight ( );
    void PutHeight (
        double pRetVal );
    double GetPupilZone ( );
    void PutPupilZone (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_PupilZone (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PupilZone (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("579a0f14-83cf-4d65-8eb8-b611b1b1dd7b"))
ISolveChiefRayAngle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;

    //
    // Wrapper methods for error-handling
    //

    double GetAngle ( );
    void PutAngle (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("ebe9fd2e-1454-4ebb-b7f8-7a8ac6769022"))
ISolveMarginalRayNormal : IDispatch
{};

struct __declspec(uuid("8ef3f759-da44-4da0-9038-25b7c4153033"))
ISolveChiefRayNormal : IDispatch
{};

struct __declspec(uuid("6b54fec2-ce43-411f-9028-05f9887a0c84"))
ISolveAplanatic : IDispatch
{};

struct __declspec(uuid("88b8ca7d-cbd2-4a2b-ab48-ad865abcf07a"))
ISolveElementPower : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPower,put=PutPower))
    double Power;

    //
    // Wrapper methods for error-handling
    //

    double GetPower ( );
    void PutPower (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Power (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Power (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("cdedbf4e-0ac0-4e77-981c-587d2345c64c"))
ISolveCocentricSurface : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAboutSurface,put=PutAboutSurface))
    long AboutSurface;

    //
    // Wrapper methods for error-handling
    //

    long GetAboutSurface ( );
    void PutAboutSurface (
        long pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AboutSurface (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AboutSurface (
        /*[in]*/ long pRetVal ) = 0;
};

struct __declspec(uuid("7e0adf19-0637-4559-b438-ffb30bf7a033"))
ISolveCocentricRadius : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetWithSurface,put=PutWithSurface))
    long WithSurface;

    //
    // Wrapper methods for error-handling
    //

    long GetWithSurface ( );
    void PutWithSurface (
        long pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_WithSurface (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_WithSurface (
        /*[in]*/ long pRetVal ) = 0;
};

struct __declspec(uuid("9dd6374c-c06b-43c9-bec3-0c5ba85ff22e"))
ISolveFNumber : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFNumber,put=PutFNumber))
    double FNumber;

    //
    // Wrapper methods for error-handling
    //

    double GetFNumber ( );
    void PutFNumber (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FNumber (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FNumber (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("9535a223-d5eb-4a68-a129-e763b44e1d82"))
ISolveChiefRayHeight : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;

    //
    // Wrapper methods for error-handling
    //

    double GetHeight ( );
    void PutHeight (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("246f2842-fb6c-4904-a0b2-4c85b0f1f4c2"))
ISolveEdgeThickness : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness;
    __declspec(property(get=GetRadialHeight,put=PutRadialHeight))
    double RadialHeight;

    //
    // Wrapper methods for error-handling
    //

    double GetThickness ( );
    void PutThickness (
        double pRetVal );
    double GetRadialHeight ( );
    void PutRadialHeight (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Thickness (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Thickness (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadialHeight (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RadialHeight (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("029f70fb-61e4-4d75-8132-40c631923bde"))
ISolveOpticalPathDifference : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getopd,put=Putopd))
    double opd;
    __declspec(property(get=GetPupilZone,put=PutPupilZone))
    double PupilZone;

    //
    // Wrapper methods for error-handling
    //

    double Getopd ( );
    void Putopd (
        double pRetVal );
    double GetPupilZone ( );
    void PutPupilZone (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_opd (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_opd (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_PupilZone (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PupilZone (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("63f1d034-a863-4f32-9030-3677292eecf7"))
ISolvePosition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFromSurface,put=PutFromSurface))
    long FromSurface;
    __declspec(property(get=GetLength,put=PutLength))
    double Length;

    //
    // Wrapper methods for error-handling
    //

    long GetFromSurface ( );
    void PutFromSurface (
        long pRetVal );
    double GetLength ( );
    void PutLength (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FromSurface (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FromSurface (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Length (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("2a464c7b-9e51-466f-a822-977e323f6632"))
ISolveCompensator : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRefSurface,put=PutRefSurface))
    long RefSurface;
    __declspec(property(get=GetSum,put=PutSum))
    double Sum;

    //
    // Wrapper methods for error-handling
    //

    long GetRefSurface ( );
    void PutRefSurface (
        long pRetVal );
    double GetSum ( );
    void PutSum (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RefSurface (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RefSurface (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Sum (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Sum (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("33c734f5-97a2-46e3-8a02-4eb1b8e7e91e"))
ISolveCenterOfCurvature : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRefSurface,put=PutRefSurface))
    long RefSurface;

    //
    // Wrapper methods for error-handling
    //

    long GetRefSurface ( );
    void PutRefSurface (
        long pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RefSurface (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RefSurface (
        /*[in]*/ long pRetVal ) = 0;
};

struct __declspec(uuid("2451ef44-7855-4f5f-8a5d-063fe73f8762"))
ISolvePupilPosition : IDispatch
{};

struct __declspec(uuid("d6bc3be0-100f-45ad-8c49-7befc911ca23"))
ISolveMaterialModel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndexNd,put=PutIndexNd))
    double IndexNd;
    __declspec(property(get=GetVaryIndex,put=PutVaryIndex))
    VARIANT_BOOL VaryIndex;
    __declspec(property(get=GetAbbeVd,put=PutAbbeVd))
    double AbbeVd;
    __declspec(property(get=GetVaryAbbe,put=PutVaryAbbe))
    VARIANT_BOOL VaryAbbe;
    __declspec(property(get=GetdPgF,put=PutdPgF))
    double dPgF;
    __declspec(property(get=GetVarydPgF,put=PutVarydPgF))
    VARIANT_BOOL VarydPgF;

    //
    // Wrapper methods for error-handling
    //

    double GetIndexNd ( );
    void PutIndexNd (
        double pRetVal );
    VARIANT_BOOL GetVaryIndex ( );
    void PutVaryIndex (
        VARIANT_BOOL pRetVal );
    double GetAbbeVd ( );
    void PutAbbeVd (
        double pRetVal );
    VARIANT_BOOL GetVaryAbbe ( );
    void PutVaryAbbe (
        VARIANT_BOOL pRetVal );
    double GetdPgF ( );
    void PutdPgF (
        double pRetVal );
    VARIANT_BOOL GetVarydPgF ( );
    void PutVarydPgF (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IndexNd (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IndexNd (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_VaryIndex (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_VaryIndex (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_AbbeVd (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AbbeVd (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_VaryAbbe (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_VaryAbbe (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_dPgF (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_dPgF (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_VarydPgF (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_VarydPgF (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("80ef2a3d-1989-4c38-84dc-64db1e3f9ab5"))
ISolveMaterialSubstitute : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getcatalog,put=Putcatalog))
    _bstr_t catalog;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t Getcatalog ( );
    void Putcatalog (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_catalog (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_catalog (
        /*[in]*/ BSTR pRetVal ) = 0;
};

struct __declspec(uuid("5048d542-c6ff-43c6-86ab-977ae0c4bf6e"))
ISolveMaterialOffset : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNdOffset,put=PutNdOffset))
    double NdOffset;
    __declspec(property(get=GetVdOffset,put=PutVdOffset))
    double VdOffset;

    //
    // Wrapper methods for error-handling
    //

    double GetNdOffset ( );
    void PutNdOffset (
        double pRetVal );
    double GetVdOffset ( );
    void PutVdOffset (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NdOffset (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NdOffset (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_VdOffset (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_VdOffset (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("e24497c1-9e0b-4407-b0b7-3c9591d00699"))
ISolveAutomatic : IDispatch
{};

struct __declspec(uuid("f2dde082-878f-488e-a2da-253a12681f8b"))
ISolveMaximum : IDispatch
{};

struct __declspec(uuid("acef0ef2-a4dc-4c42-b3b0-65963752ee55"))
ISolvePickupChiefRay : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetField,put=PutField))
    long Field;
    __declspec(property(get=GetWavelength,put=PutWavelength))
    long Wavelength;

    //
    // Wrapper methods for error-handling
    //

    long GetField ( );
    void PutField (
        long pRetVal );
    long GetWavelength ( );
    void PutWavelength (
        long pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Field (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Field (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Wavelength (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Wavelength (
        /*[in]*/ long pRetVal ) = 0;
};

struct __declspec(uuid("ba000e7b-2b55-497c-bdc1-980f96b2a39b"))
ISolveConfigPickup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetOperand,put=PutOperand))
    long Operand;
    __declspec(property(get=GetScaleFactor,put=PutScaleFactor))
    double ScaleFactor;
    __declspec(property(get=GetSupportsScale))
    VARIANT_BOOL SupportsScale;
    __declspec(property(get=GetOffset,put=PutOffset))
    double Offset;
    __declspec(property(get=GetConfiguration,put=PutConfiguration))
    long Configuration;
    __declspec(property(get=GetSupportsOffset))
    VARIANT_BOOL SupportsOffset;

    //
    // Wrapper methods for error-handling
    //

    long GetOperand ( );
    void PutOperand (
        long pRetVal );
    double GetScaleFactor ( );
    void PutScaleFactor (
        double pRetVal );
    VARIANT_BOOL GetSupportsScale ( );
    double GetOffset ( );
    void PutOffset (
        double pRetVal );
    long GetConfiguration ( );
    void PutConfiguration (
        long pRetVal );
    VARIANT_BOOL GetSupportsOffset ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Operand (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Operand (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_ScaleFactor (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ScaleFactor (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_SupportsScale (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Offset (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Offset (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Configuration (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Configuration (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_SupportsOffset (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("e4f538c7-de3b-4729-b4ba-d950126704ec"))
ISolveThermalPickup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetConfiguration,put=PutConfiguration))
    long Configuration;

    //
    // Wrapper methods for error-handling
    //

    long GetConfiguration ( );
    void PutConfiguration (
        long pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Configuration (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Configuration (
        /*[in]*/ long pRetVal ) = 0;
};

enum __declspec(uuid("70612e29-c17b-47b4-8603-4c582343fdb7"))
ObjectType
{
    ObjectType_AnnularAsphericLens = 0,
    ObjectType_AnnularAxialLens = 1,
    ObjectType_AnnularVolume = 2,
    ObjectType_Annulus = 3,
    ObjectType_Array = 4,
    ObjectType_ArrayRing = 5,
    ObjectType_AsphericSurface = 6,
    ObjectType_AsphericSurface2 = 7,
    ObjectType_AxiconSurface = 8,
    ObjectType_BiconicLens = 9,
    ObjectType_BiconicSurface = 10,
    ObjectType_BiconicZernike = 11,
    ObjectType_BiconicZernikeSurface = 12,
    ObjectType_Binary1 = 13,
    ObjectType_Binary2 = 14,
    ObjectType_Binary2A = 15,
    ObjectType_Boolean = 16,
    ObjectType_CADAssemblyAutodeskInventor = 17,
    ObjectType_CADAssemblyCreoParametric = 18,
    ObjectType_CADAssemblySolidWorks = 19,
    ObjectType_CADPartAutodeskInventor = 20,
    ObjectType_CADPartCreoParametric = 21,
    ObjectType_CADPartSolidWorks = 22,
    ObjectType_CADPartSTEPIGESSAT = 23,
    ObjectType_CADPartSTL = 24,
    ObjectType_CADPartZPD = 25,
    ObjectType_Cone = 26,
    ObjectType_CPC = 27,
    ObjectType_CPCRectangular = 28,
    ObjectType_CylinderPipe = 29,
    ObjectType_CylinderVolume = 30,
    ObjectType_Cylinder2Pipe = 31,
    ObjectType_Cylinder2Volume = 32,
    ObjectType_DetectorColor = 33,
    ObjectType_DetectorPolar = 34,
    ObjectType_DetectorRectangle = 35,
    ObjectType_DetectorSurface = 36,
    ObjectType_DetectorVolume = 37,
    ObjectType_DiffractionGrating = 38,
    ObjectType_DualBEFSurface = 39,
    ObjectType_Ellipse = 40,
    ObjectType_EllipticalVolume = 41,
    ObjectType_EvenAsphereLens = 42,
    ObjectType_ExtendedOddAsphereLens = 43,
    ObjectType_ExtendedPolynomialLens = 44,
    ObjectType_ExtendedPolynomialSurface = 45,
    ObjectType_Extruded = 46,
    ObjectType_FacetedSurface = 47,
    ObjectType_FreeformZ = 48,
    ObjectType_Fresnel1 = 49,
    ObjectType_Fresnel2 = 50,
    ObjectType_GridSagLens = 51,
    ObjectType_GridSagSurface = 52,
    ObjectType_GridSagFrontBack = 53,
    ObjectType_HexagonalLensletArray = 54,
    ObjectType_HologramLens = 55,
    ObjectType_HologramSurface = 56,
    ObjectType_JonesMatrix = 57,
    ObjectType_LensletArray1 = 58,
    ObjectType_LensletArray2 = 59,
    ObjectType_MEMS = 60,
    ObjectType_NullObject = 61,
    ObjectType_OddAsphereLens = 62,
    ObjectType_ParaxialLens = 63,
    ObjectType_PolygonObject = 64,
    ObjectType_RayRotator = 65,
    ObjectType_RectangularCorner = 66,
    ObjectType_Rectangle = 67,
    ObjectType_RectangularPipe = 68,
    ObjectType_RectangularPipeGrating = 69,
    ObjectType_RectangularRoof = 70,
    ObjectType_RectangularTorusSurface = 71,
    ObjectType_RectangularTorusVolume = 72,
    ObjectType_RectangularVolume = 73,
    ObjectType_RectangularVolumeGrating = 74,
    ObjectType_ReverseRadianceDetector = 75,
    ObjectType_ReverseRadianceTarget = 76,
    ObjectType_Slide = 77,
    ObjectType_SourceDiffractive = 78,
    ObjectType_SourceDiode = 79,
    ObjectType_SourceDLL = 80,
    ObjectType_SourceEllipse = 81,
    ObjectType_SourceEULUMDATFile = 82,
    ObjectType_SourceFilament = 83,
    ObjectType_SourceFile = 84,
    ObjectType_SourceGaussian = 85,
    ObjectType_SourceIESNAFile = 86,
    ObjectType_SourceImported = 87,
    ObjectType_SourceObject = 88,
    ObjectType_SourcePoint = 89,
    ObjectType_SourceRadial = 90,
    ObjectType_SourceRay = 91,
    ObjectType_SourceRectangle = 92,
    ObjectType_SourceTube = 93,
    ObjectType_SourceTwoAngle = 94,
    ObjectType_SourceVolumeCylindrical = 95,
    ObjectType_SourceVolumeElliptical = 96,
    ObjectType_SourceVolumeRectangular = 97,
    ObjectType_Sphere = 98,
    ObjectType_StandardLens = 99,
    ObjectType_StandardSurface = 100,
    ObjectType_Swept = 101,
    ObjectType_TabulatedFactedRadial = 102,
    ObjectType_TabulatedFactedToroid = 103,
    ObjectType_TabulatedFrenselRadial = 104,
    ObjectType_ToroidalHologram = 105,
    ObjectType_ToroidalLens = 106,
    ObjectType_ToroidalSurface = 107,
    ObjectType_ToroidalSurfaceOddASphere = 108,
    ObjectType_TorusSurface = 109,
    ObjectType_TorusVolume = 110,
    ObjectType_TriangularCorner = 111,
    ObjectType_Triangle = 112,
    ObjectType_UserDefinedObject = 113,
    ObjectType_WolterSurface = 114,
    ObjectType_ZernikeSurface = 115
};

enum __declspec(uuid("b7cd6baa-0d86-4e53-a419-7342e1e110c9"))
ObjectColumn
{
    ObjectColumn_Comment = 1,
    ObjectColumn_RefObject = 2,
    ObjectColumn_InsideOf = 3,
    ObjectColumn_XPosition = 4,
    ObjectColumn_YPosition = 5,
    ObjectColumn_ZPosition = 6,
    ObjectColumn_TiltX = 7,
    ObjectColumn_TiltY = 8,
    ObjectColumn_TiltZ = 9,
    ObjectColumn_Material = 10,
    ObjectColumn_Par1 = 11,
    ObjectColumn_Par2 = 12,
    ObjectColumn_Par3 = 13,
    ObjectColumn_Par4 = 14,
    ObjectColumn_Par5 = 15,
    ObjectColumn_Par6 = 16,
    ObjectColumn_Par7 = 17,
    ObjectColumn_Par8 = 18,
    ObjectColumn_Par9 = 19,
    ObjectColumn_Par10 = 20,
    ObjectColumn_Par11 = 21,
    ObjectColumn_Par12 = 22,
    ObjectColumn_Par13 = 23,
    ObjectColumn_Par14 = 24,
    ObjectColumn_Par15 = 25,
    ObjectColumn_Par16 = 26,
    ObjectColumn_Par17 = 27,
    ObjectColumn_Par18 = 28,
    ObjectColumn_Par19 = 29,
    ObjectColumn_Par20 = 30,
    ObjectColumn_Par21 = 31,
    ObjectColumn_Par22 = 32,
    ObjectColumn_Par23 = 33,
    ObjectColumn_Par24 = 34,
    ObjectColumn_Par25 = 35,
    ObjectColumn_Par26 = 36,
    ObjectColumn_Par27 = 37,
    ObjectColumn_Par28 = 38,
    ObjectColumn_Par29 = 39,
    ObjectColumn_Par30 = 40,
    ObjectColumn_Par31 = 41,
    ObjectColumn_Par32 = 42,
    ObjectColumn_Par33 = 43,
    ObjectColumn_Par34 = 44,
    ObjectColumn_Par35 = 45,
    ObjectColumn_Par36 = 46,
    ObjectColumn_Par37 = 47,
    ObjectColumn_Par38 = 48,
    ObjectColumn_Par39 = 49,
    ObjectColumn_Par40 = 50,
    ObjectColumn_Par41 = 51,
    ObjectColumn_Par42 = 52,
    ObjectColumn_Par43 = 53,
    ObjectColumn_Par44 = 54,
    ObjectColumn_Par45 = 55,
    ObjectColumn_Par46 = 56,
    ObjectColumn_Par47 = 57,
    ObjectColumn_Par48 = 58,
    ObjectColumn_Par49 = 59,
    ObjectColumn_Par50 = 60,
    ObjectColumn_Par51 = 61,
    ObjectColumn_Par52 = 62,
    ObjectColumn_Par53 = 63,
    ObjectColumn_Par54 = 64,
    ObjectColumn_Par55 = 65,
    ObjectColumn_Par56 = 66,
    ObjectColumn_Par57 = 67,
    ObjectColumn_Par58 = 68,
    ObjectColumn_Par59 = 69,
    ObjectColumn_Par60 = 70,
    ObjectColumn_Par61 = 71,
    ObjectColumn_Par62 = 72,
    ObjectColumn_Par63 = 73,
    ObjectColumn_Par64 = 74,
    ObjectColumn_Par65 = 75,
    ObjectColumn_Par66 = 76,
    ObjectColumn_Par67 = 77,
    ObjectColumn_Par68 = 78,
    ObjectColumn_Par69 = 79,
    ObjectColumn_Par70 = 80,
    ObjectColumn_Par71 = 81,
    ObjectColumn_Par72 = 82,
    ObjectColumn_Par73 = 83,
    ObjectColumn_Par74 = 84,
    ObjectColumn_Par75 = 85,
    ObjectColumn_Par76 = 86,
    ObjectColumn_Par77 = 87,
    ObjectColumn_Par78 = 88,
    ObjectColumn_Par79 = 89,
    ObjectColumn_Par80 = 90,
    ObjectColumn_Par81 = 91,
    ObjectColumn_Par82 = 92,
    ObjectColumn_Par83 = 93,
    ObjectColumn_Par84 = 94,
    ObjectColumn_Par85 = 95,
    ObjectColumn_Par86 = 96,
    ObjectColumn_Par87 = 97,
    ObjectColumn_Par88 = 98,
    ObjectColumn_Par89 = 99,
    ObjectColumn_Par90 = 100,
    ObjectColumn_Par91 = 101,
    ObjectColumn_Par92 = 102,
    ObjectColumn_Par93 = 103,
    ObjectColumn_Par94 = 104,
    ObjectColumn_Par95 = 105,
    ObjectColumn_Par96 = 106,
    ObjectColumn_Par97 = 107,
    ObjectColumn_Par98 = 108,
    ObjectColumn_Par99 = 109,
    ObjectColumn_Par100 = 110,
    ObjectColumn_Par101 = 111,
    ObjectColumn_Par102 = 112,
    ObjectColumn_Par103 = 113,
    ObjectColumn_Par104 = 114,
    ObjectColumn_Par105 = 115,
    ObjectColumn_Par106 = 116,
    ObjectColumn_Par107 = 117,
    ObjectColumn_Par108 = 118,
    ObjectColumn_Par109 = 119,
    ObjectColumn_Par110 = 120,
    ObjectColumn_Par111 = 121,
    ObjectColumn_Par112 = 122,
    ObjectColumn_Par113 = 123,
    ObjectColumn_Par114 = 124,
    ObjectColumn_Par115 = 125,
    ObjectColumn_Par116 = 126,
    ObjectColumn_Par117 = 127,
    ObjectColumn_Par118 = 128,
    ObjectColumn_Par119 = 129,
    ObjectColumn_Par120 = 130,
    ObjectColumn_Par121 = 131,
    ObjectColumn_Par122 = 132,
    ObjectColumn_Par123 = 133,
    ObjectColumn_Par124 = 134,
    ObjectColumn_Par125 = 135,
    ObjectColumn_Par126 = 136,
    ObjectColumn_Par127 = 137,
    ObjectColumn_Par128 = 138,
    ObjectColumn_Par129 = 139,
    ObjectColumn_Par130 = 140,
    ObjectColumn_Par131 = 141,
    ObjectColumn_Par132 = 142,
    ObjectColumn_Par133 = 143,
    ObjectColumn_Par134 = 144,
    ObjectColumn_Par135 = 145,
    ObjectColumn_Par136 = 146,
    ObjectColumn_Par137 = 147,
    ObjectColumn_Par138 = 148,
    ObjectColumn_Par139 = 149,
    ObjectColumn_Par140 = 150,
    ObjectColumn_Par141 = 151,
    ObjectColumn_Par142 = 152,
    ObjectColumn_Par143 = 153,
    ObjectColumn_Par144 = 154,
    ObjectColumn_Par145 = 155,
    ObjectColumn_Par146 = 156,
    ObjectColumn_Par147 = 157,
    ObjectColumn_Par148 = 158,
    ObjectColumn_Par149 = 159,
    ObjectColumn_Par150 = 160,
    ObjectColumn_Par151 = 161,
    ObjectColumn_Par152 = 162,
    ObjectColumn_Par153 = 163,
    ObjectColumn_Par154 = 164,
    ObjectColumn_Par155 = 165,
    ObjectColumn_Par156 = 166,
    ObjectColumn_Par157 = 167,
    ObjectColumn_Par158 = 168,
    ObjectColumn_Par159 = 169,
    ObjectColumn_Par160 = 170,
    ObjectColumn_Par161 = 171,
    ObjectColumn_Par162 = 172,
    ObjectColumn_Par163 = 173,
    ObjectColumn_Par164 = 174,
    ObjectColumn_Par165 = 175,
    ObjectColumn_Par166 = 176,
    ObjectColumn_Par167 = 177,
    ObjectColumn_Par168 = 178,
    ObjectColumn_Par169 = 179,
    ObjectColumn_Par170 = 180,
    ObjectColumn_Par171 = 181,
    ObjectColumn_Par172 = 182,
    ObjectColumn_Par173 = 183,
    ObjectColumn_Par174 = 184,
    ObjectColumn_Par175 = 185,
    ObjectColumn_Par176 = 186,
    ObjectColumn_Par177 = 187,
    ObjectColumn_Par178 = 188,
    ObjectColumn_Par179 = 189,
    ObjectColumn_Par180 = 190,
    ObjectColumn_Par181 = 191,
    ObjectColumn_Par182 = 192,
    ObjectColumn_Par183 = 193,
    ObjectColumn_Par184 = 194,
    ObjectColumn_Par185 = 195,
    ObjectColumn_Par186 = 196,
    ObjectColumn_Par187 = 197,
    ObjectColumn_Par188 = 198,
    ObjectColumn_Par189 = 199,
    ObjectColumn_Par190 = 200,
    ObjectColumn_Par191 = 201,
    ObjectColumn_Par192 = 202,
    ObjectColumn_Par193 = 203,
    ObjectColumn_Par194 = 204,
    ObjectColumn_Par195 = 205,
    ObjectColumn_Par196 = 206,
    ObjectColumn_Par197 = 207,
    ObjectColumn_Par198 = 208,
    ObjectColumn_Par199 = 209,
    ObjectColumn_Par200 = 210,
    ObjectColumn_Par201 = 211,
    ObjectColumn_Par202 = 212,
    ObjectColumn_Par203 = 213,
    ObjectColumn_Par204 = 214,
    ObjectColumn_Par205 = 215,
    ObjectColumn_Par206 = 216,
    ObjectColumn_Par207 = 217,
    ObjectColumn_Par208 = 218,
    ObjectColumn_Par209 = 219,
    ObjectColumn_Par210 = 220,
    ObjectColumn_Par211 = 221,
    ObjectColumn_Par212 = 222,
    ObjectColumn_Par213 = 223,
    ObjectColumn_Par214 = 224,
    ObjectColumn_Par215 = 225,
    ObjectColumn_Par216 = 226,
    ObjectColumn_Par217 = 227,
    ObjectColumn_Par218 = 228,
    ObjectColumn_Par219 = 229,
    ObjectColumn_Par220 = 230,
    ObjectColumn_Par221 = 231,
    ObjectColumn_Par222 = 232,
    ObjectColumn_Par223 = 233,
    ObjectColumn_Par224 = 234,
    ObjectColumn_Par225 = 235,
    ObjectColumn_Par226 = 236,
    ObjectColumn_Par227 = 237,
    ObjectColumn_Par228 = 238,
    ObjectColumn_Par229 = 239,
    ObjectColumn_Par230 = 240,
    ObjectColumn_Par231 = 241,
    ObjectColumn_Par232 = 242,
    ObjectColumn_Par233 = 243,
    ObjectColumn_Par234 = 244,
    ObjectColumn_Par235 = 245,
    ObjectColumn_Par236 = 246,
    ObjectColumn_Par237 = 247,
    ObjectColumn_Par238 = 248,
    ObjectColumn_Par239 = 249,
    ObjectColumn_Par240 = 250,
    ObjectColumn_Par241 = 251,
    ObjectColumn_Par242 = 252,
    ObjectColumn_Par243 = 253,
    ObjectColumn_Par244 = 254,
    ObjectColumn_Par245 = 255,
    ObjectColumn_Par246 = 256,
    ObjectColumn_Par247 = 257,
    ObjectColumn_Par248 = 258,
    ObjectColumn_Par249 = 259,
    ObjectColumn_Par250 = 260
};

struct __declspec(uuid("8bbfb4fc-e857-4653-bee7-ee77b5ffafd0"))
ISolveObjectPickup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetObject,put=PutObject))
    long Object;
    __declspec(property(get=GetScaleFactor,put=PutScaleFactor))
    double ScaleFactor;
    __declspec(property(get=GetSupportsScale))
    VARIANT_BOOL SupportsScale;
    __declspec(property(get=GetOffset,put=PutOffset))
    double Offset;
    __declspec(property(get=GetSupportsOffset))
    VARIANT_BOOL SupportsOffset;
    __declspec(property(get=GetColumn,put=PutColumn))
    enum ObjectColumn Column;

    //
    // Wrapper methods for error-handling
    //

    long GetObject ( );
    void PutObject (
        long pRetVal );
    double GetScaleFactor ( );
    void PutScaleFactor (
        double pRetVal );
    VARIANT_BOOL GetSupportsScale ( );
    double GetOffset ( );
    void PutOffset (
        double pRetVal );
    VARIANT_BOOL GetSupportsOffset ( );
    enum ObjectColumn GetColumn ( );
    void PutColumn (
        enum ObjectColumn pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Object (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Object (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_ScaleFactor (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ScaleFactor (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_SupportsScale (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Offset (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Offset (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_SupportsOffset (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Column (
        /*[out,retval]*/ enum ObjectColumn * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Column (
        /*[in]*/ enum ObjectColumn pRetVal ) = 0;
};

enum __declspec(uuid("744cd950-613d-4a15-97de-e32ba00521b6"))
DetectorDataType
{
    DetectorDataType_Real = 0,
    DetectorDataType_Imaginary = 1,
    DetectorDataType_Amplitude = 2,
    DetectorDataType_Power = 3
};

enum __declspec(uuid("266ac581-31fb-4d4d-a392-73771e317f42"))
PolarDetectorDataType
{
    PolarDetectorDataType_Power = 1,
    PolarDetectorDataType_PowerSolidAngle = 2,
    PolarDetectorDataType_Lumens = 3,
    PolarDetectorDataType_LumensSolidAngle = 4,
    PolarDetectorDataType_Cx = 5,
    PolarDetectorDataType_Cy = 6,
    PolarDetectorDataType_u_T = 7,
    PolarDetectorDataType_u_V = 8,
    PolarDetectorDataType_TriX = 9,
    PolarDetectorDataType_TriY = 10,
    PolarDetectorDataType_TriZ = 11
};

enum __declspec(uuid("8a578d53-94df-47db-be96-90a3a6958508"))
InterpolateChoices
{
    InterpolateChoices_Bicubic = 0,
    InterpolateChoices_Linear = 1
};

enum __declspec(uuid("abdc5c86-1fe3-46b4-ab0b-c6a24ea44f39"))
OrderChoices
{
    OrderChoices_Before = 0,
    OrderChoices_After = 1
};

enum __declspec(uuid("e95ee6f3-3e9b-43d8-95bb-1b4142b11ec2"))
HologramTypes
{
    HologramTypes_Type_1 = 1,
    HologramTypes_Type_2 = 2
};

enum __declspec(uuid("3eec8b6b-2381-4933-b42c-2fc8cc85be49"))
DiffractiveFaceChoices
{
    DiffractiveFaceChoices_FrontFace = 1,
    DiffractiveFaceChoices_BackFace = 2
};

enum __declspec(uuid("d1b1a1a7-1af0-4d16-bb58-aea97cc3c57e"))
PixelAddressing
{
    PixelAddressing_ByRow = 0,
    PixelAddressing_ByColumn = 1,
    PixelAddressing_Individually = 2
};

enum __declspec(uuid("759beaf1-1bec-414b-a298-c8c0020e252e"))
ShapeChoices
{
    ShapeChoices_Rectangular = 0,
    ShapeChoices_Elliptical = 1
};

enum __declspec(uuid("aeffe184-16de-465d-a39b-9741995a329f"))
UniformAngleChoices
{
    UniformAngleChoices_UniformIrradiance = 0,
    UniformAngleChoices_UniformInAngleSpace = 1
};

enum __declspec(uuid("c3754674-59a2-4282-96c0-45dbed78984a"))
EndCapOptions
{
    EndCapOptions_None = 0,
    EndCapOptions_First = 1,
    EndCapOptions_Second = 2,
    EndCapOptions_Both = 3
};

enum __declspec(uuid("eecf1c3d-2f85-4136-8517-976a2cff1ed4"))
ApertureShapes
{
    ApertureShapes_Annular = 0,
    ApertureShapes_Elliptical = 1,
    ApertureShapes_Rectangular = 2,
    ApertureShapes_CyliderWithRectangular = 3
};

struct __declspec(uuid("71269f29-b306-4f04-aec0-e1e2fb88c6e0"))
IObjectTypeSettings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum ObjectType Type;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetRequiresFile1))
    VARIANT_BOOL RequiresFile1;
    __declspec(property(get=GetFileName1,put=PutFileName1))
    _bstr_t FileName1;
    __declspec(property(get=GetRequiresFile2))
    VARIANT_BOOL RequiresFile2;
    __declspec(property(get=GetFileName2,put=PutFileName2))
    _bstr_t FileName2;

    //
    // Wrapper methods for error-handling
    //

    enum ObjectType GetType ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetRequiresFile1 ( );
    _bstr_t GetFileName1 ( );
    void PutFileName1 (
        _bstr_t pRetVal );
    SAFEARRAY * GetFileNames1 ( );
    VARIANT_BOOL GetRequiresFile2 ( );
    _bstr_t GetFileName2 ( );
    void PutFileName2 (
        _bstr_t pRetVal );
    SAFEARRAY * GetFileNames2 ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum ObjectType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RequiresFile1 (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FileName1 (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FileName1 (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetFileNames1 (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RequiresFile2 (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FileName2 (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FileName2 (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetFileNames2 (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
};

struct __declspec(uuid("86dd3cad-4777-4e5b-b391-f906bd2d3e29"))
IFaceData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNumberOfFaces))
    long NumberOfFaces;
    __declspec(property(get=GetCurrentFace,put=PutCurrentFace))
    long CurrentFace;
    __declspec(property(get=GetConvertToGlobal,put=PutConvertToGlobal))
    VARIANT_BOOL ConvertToGlobal;
    __declspec(property(get=GetNumberOfVertices))
    long NumberOfVertices;
    __declspec(property(get=GetFlux))
    double Flux;
    __declspec(property(get=GetIrradiance))
    double Irradiance;

    //
    // Wrapper methods for error-handling
    //

    long GetNumberOfFaces ( );
    long GetCurrentFace ( );
    void PutCurrentFace (
        long pRetVal );
    VARIANT_BOOL GetConvertToGlobal ( );
    void PutConvertToGlobal (
        VARIANT_BOOL pRetVal );
    long GetNumberOfVertices ( );
    double GetFlux ( );
    double GetIrradiance ( );
    VARIANT_BOOL GetVertex (
        long vertexNumber,
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL GetVertexNormal (
        long vertexNumber,
        double * X,
        double * Y,
        double * Z );
    VARIANT_BOOL FillData (
        long size,
        double * X,
        double * Y,
        double * Z,
        double * XNorm,
        double * YNorm,
        double * ZNorm );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NumberOfFaces (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CurrentFace (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CurrentFace (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_ConvertToGlobal (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ConvertToGlobal (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfVertices (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Flux (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Irradiance (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetVertex (
        /*[in]*/ long vertexNumber,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetVertexNormal (
        /*[in]*/ long vertexNumber,
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FillData (
        /*[in]*/ long size,
        /*[in]*/ double * X,
        /*[in]*/ double * Y,
        /*[in]*/ double * Z,
        /*[in]*/ double * XNorm,
        /*[in]*/ double * YNorm,
        /*[in]*/ double * ZNorm,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("bdfc66ca-b515-452e-ae24-e62b1bc72590"))
IObjectDetector : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    long GetRowCount ( );
    long GetColCount ( );
    VARIANT_BOOL GetDetectorDimensions (
        unsigned long * Rows,
        unsigned long * Cols );
    long GetDetectorSize ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetRowCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetColCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetDetectorDimensions (
        /*[out]*/ unsigned long * Rows,
        /*[out]*/ unsigned long * Cols,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetDetectorSize (
        /*[out,retval]*/ long * pRetVal ) = 0;
};

struct __declspec(uuid("30fc8ac7-1b84-4579-a7d6-fac2027a7bb2"))
IObjectCADPartAutodeskInventor : IDispatch
{};

struct __declspec(uuid("7bb906d8-6325-4386-8d36-8b64159bd7a1"))
IObjectCADPartCreoParametric : IDispatch
{};

struct __declspec(uuid("2e9994a5-e601-4cc6-83dd-0249d09e628e"))
IObjectCADPartSolidWorks : IDispatch
{};

struct __declspec(uuid("a11784d7-d4a2-44b2-b08e-fc4b058dc430"))
IObjectCADPartZPD : IDispatch
{};

struct __declspec(uuid("4601d5c8-3836-43d9-b1e8-847084474c3e"))
IObjectNullObject : IDispatch
{};

struct __declspec(uuid("f315e80d-a292-4c1a-b437-109068257921"))
IObjectSourceDLL : IDispatch
{};

struct __declspec(uuid("a57f18a3-49e5-4712-85e0-9cff999de110"))
IObjectUserDefinedObject : IDispatch
{};

enum __declspec(uuid("0b0f9cc6-807a-4e8f-88a3-a92afad3c15c"))
RaysIgnoreObjectType
{
    RaysIgnoreObjectType_Never = 0,
    RaysIgnoreObjectType_Always = 1,
    RaysIgnoreObjectType_OnLaunch = 2
};

enum __declspec(uuid("88670de2-b3a4-4cc3-8e34-7403e3d80507"))
DetectorShowAsType
{
    DetectorShowAsType_GreyScaleFlux = 0,
    DetectorShowAsType_InverseGreyScaleFlux = 1,
    DetectorShowAsType_FalseColorFlux = 2,
    DetectorShowAsType_InverseFalseColorFlux = 3,
    DetectorShowAsType_GreyScaleIrradiance = 4,
    DetectorShowAsType_InverseGreyScaleIrradiance = 5,
    DetectorShowAsType_FalseColorIrradiance = 6,
    DetectorShowAsType_InverseFalseColorIrradiance = 7
};

enum __declspec(uuid("3af3b70e-70c1-429d-be46-df5f82aeb9df"))
DrawingResolutionType
{
    DrawingResolutionType_Standard = 0,
    DrawingResolutionType_Medium = 1,
    DrawingResolutionType_High = 2,
    DrawingResolutionType_Presentation = 3,
    DrawingResolutionType_Custom = 4
};

enum __declspec(uuid("0a68e077-b502-4a97-8f02-caba940f4f29"))
SourceBulkScatterMode
{
    SourceBulkScatterMode_Many = 0,
    SourceBulkScatterMode_Once = 1,
    SourceBulkScatterMode_Never = 2
};

enum __declspec(uuid("db9a3dd0-dd0e-48da-b170-0cddf153d27a"))
SourceSamplingMethod
{
    SourceSamplingMethod_Random = 0,
    SourceSamplingMethod_Sobol = 1
};

enum __declspec(uuid("3b85a8e9-206d-4e4a-81bb-c0b02f9a82a5"))
ArrayMode
{
    ArrayMode_None = 0,
    ArrayMode_Rectangular = 1,
    ArrayMode_Circular = 2,
    ArrayMode_Hexapolar = 3,
    ArrayMode_Hexagonal = 4
};

enum __declspec(uuid("8e5cc5f2-f458-49a7-bbea-13f746e041df"))
SourceColorMode
{
    SourceColorMode_SystemWavelengths = 0,
    SourceColorMode_CIE1931Tristimulus = 1,
    SourceColorMode_CIE1931Chromaticity = 2,
    SourceColorMode_CIE1931RGB = 3,
    SourceColorMode_UniformPowerSpectrum = 4,
    SourceColorMode_D65White = 5,
    SourceColorMode_ColorTemperature = 6,
    SourceColorMode_BlackBodySpectrum = 7,
    SourceColorMode_SpectrumFile = 8,
    SourceColorMode_CIE1976 = 9
};

struct __declspec(uuid("6467a99c-5740-45b6-8037-1b4744bf51f5"))
ISCS_SystemWavelengths : IDispatch
{};

struct __declspec(uuid("b9e1420d-0517-4761-aa96-204651d15d40"))
ISCS_CIE1931Tristimulus : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetY,put=PutY))
    double Y;
    __declspec(property(get=GetZ,put=PutZ))
    double Z;
    __declspec(property(get=GetSpectrumCount,put=PutSpectrumCount))
    long SpectrumCount;
    __declspec(property(get=GetWavelengthFrom,put=PutWavelengthFrom))
    double WavelengthFrom;
    __declspec(property(get=GetWavelengthTo,put=PutWavelengthTo))
    double WavelengthTo;
    __declspec(property(get=GetFit))
    _bstr_t Fit;

    //
    // Wrapper methods for error-handling
    //

    double GetX ( );
    void PutX (
        double pRetVal );
    double GetY ( );
    void PutY (
        double pRetVal );
    double GetZ ( );
    void PutZ (
        double pRetVal );
    long GetSpectrumCount ( );
    void PutSpectrumCount (
        long pRetVal );
    double GetWavelengthFrom ( );
    void PutWavelengthFrom (
        double pRetVal );
    double GetWavelengthTo ( );
    void PutWavelengthTo (
        double pRetVal );
    _bstr_t GetFit ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Z (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_SpectrumCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SpectrumCount (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_WavelengthFrom (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_WavelengthFrom (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_WavelengthTo (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_WavelengthTo (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Fit (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("e8c13ed6-6d6f-4e79-bac3-624de5e0b279"))
ISCS_CIE1931Chromaticity : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getcx,put=Putcx))
    double cx;
    __declspec(property(get=GetCy,put=PutCy))
    double Cy;
    __declspec(property(get=GetSpectrumCount,put=PutSpectrumCount))
    long SpectrumCount;
    __declspec(property(get=GetWavelengthFrom,put=PutWavelengthFrom))
    double WavelengthFrom;
    __declspec(property(get=GetWavelengthTo,put=PutWavelengthTo))
    double WavelengthTo;
    __declspec(property(get=GetFit))
    _bstr_t Fit;

    //
    // Wrapper methods for error-handling
    //

    double Getcx ( );
    void Putcx (
        double pRetVal );
    double GetCy ( );
    void PutCy (
        double pRetVal );
    long GetSpectrumCount ( );
    void PutSpectrumCount (
        long pRetVal );
    double GetWavelengthFrom ( );
    void PutWavelengthFrom (
        double pRetVal );
    double GetWavelengthTo ( );
    void PutWavelengthTo (
        double pRetVal );
    _bstr_t GetFit ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_cx (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_cx (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Cy (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Cy (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_SpectrumCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SpectrumCount (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_WavelengthFrom (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_WavelengthFrom (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_WavelengthTo (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_WavelengthTo (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Fit (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("0b95a86a-e968-4749-aa2a-d78fa4abbb28"))
ISCS_CIE1931RGB : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetR,put=PutR))
    double R;
    __declspec(property(get=GetG,put=PutG))
    double G;
    __declspec(property(get=GetB,put=PutB))
    double B;
    __declspec(property(get=GetSpectrumCount,put=PutSpectrumCount))
    long SpectrumCount;
    __declspec(property(get=GetWavelengthFrom,put=PutWavelengthFrom))
    double WavelengthFrom;
    __declspec(property(get=GetWavelengthTo,put=PutWavelengthTo))
    double WavelengthTo;
    __declspec(property(get=GetFit))
    _bstr_t Fit;

    //
    // Wrapper methods for error-handling
    //

    double GetR ( );
    void PutR (
        double pRetVal );
    double GetG ( );
    void PutG (
        double pRetVal );
    double GetB ( );
    void PutB (
        double pRetVal );
    long GetSpectrumCount ( );
    void PutSpectrumCount (
        long pRetVal );
    double GetWavelengthFrom ( );
    void PutWavelengthFrom (
        double pRetVal );
    double GetWavelengthTo ( );
    void PutWavelengthTo (
        double pRetVal );
    _bstr_t GetFit ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_R (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_R (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_G (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_G (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_B (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_B (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_SpectrumCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SpectrumCount (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_WavelengthFrom (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_WavelengthFrom (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_WavelengthTo (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_WavelengthTo (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Fit (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("4488f86a-f688-47bd-94c4-791fbbd6903f"))
ISCS_UniformPowerSpectrum : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSpectrumCount,put=PutSpectrumCount))
    long SpectrumCount;
    __declspec(property(get=GetWavelengthFrom,put=PutWavelengthFrom))
    double WavelengthFrom;
    __declspec(property(get=GetWavelengthTo,put=PutWavelengthTo))
    double WavelengthTo;
    __declspec(property(get=GetFit))
    _bstr_t Fit;

    //
    // Wrapper methods for error-handling
    //

    long GetSpectrumCount ( );
    void PutSpectrumCount (
        long pRetVal );
    double GetWavelengthFrom ( );
    void PutWavelengthFrom (
        double pRetVal );
    double GetWavelengthTo ( );
    void PutWavelengthTo (
        double pRetVal );
    _bstr_t GetFit ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SpectrumCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SpectrumCount (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_WavelengthFrom (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_WavelengthFrom (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_WavelengthTo (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_WavelengthTo (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Fit (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("8fd7e197-30a0-4feb-93fe-86a59cae5438"))
ISCS_D65White : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSpectrumCount,put=PutSpectrumCount))
    long SpectrumCount;
    __declspec(property(get=GetWavelengthFrom,put=PutWavelengthFrom))
    double WavelengthFrom;
    __declspec(property(get=GetWavelengthTo,put=PutWavelengthTo))
    double WavelengthTo;
    __declspec(property(get=GetFit))
    _bstr_t Fit;

    //
    // Wrapper methods for error-handling
    //

    long GetSpectrumCount ( );
    void PutSpectrumCount (
        long pRetVal );
    double GetWavelengthFrom ( );
    void PutWavelengthFrom (
        double pRetVal );
    double GetWavelengthTo ( );
    void PutWavelengthTo (
        double pRetVal );
    _bstr_t GetFit ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SpectrumCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SpectrumCount (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_WavelengthFrom (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_WavelengthFrom (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_WavelengthTo (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_WavelengthTo (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Fit (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("41a4a8c5-4a12-4c5e-8e31-3af2e1d66da0"))
ISCS_ColorTemperature : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTemperatureK,put=PutTemperatureK))
    double TemperatureK;
    __declspec(property(get=GetSpectrumCount,put=PutSpectrumCount))
    long SpectrumCount;
    __declspec(property(get=GetWavelengthFrom,put=PutWavelengthFrom))
    double WavelengthFrom;
    __declspec(property(get=GetWavelengthTo,put=PutWavelengthTo))
    double WavelengthTo;
    __declspec(property(get=GetFit))
    _bstr_t Fit;

    //
    // Wrapper methods for error-handling
    //

    double GetTemperatureK ( );
    void PutTemperatureK (
        double pRetVal );
    long GetSpectrumCount ( );
    void PutSpectrumCount (
        long pRetVal );
    double GetWavelengthFrom ( );
    void PutWavelengthFrom (
        double pRetVal );
    double GetWavelengthTo ( );
    void PutWavelengthTo (
        double pRetVal );
    _bstr_t GetFit ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TemperatureK (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TemperatureK (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_SpectrumCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SpectrumCount (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_WavelengthFrom (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_WavelengthFrom (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_WavelengthTo (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_WavelengthTo (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Fit (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("2dd91263-5dba-4a99-ae5b-79ff80f8c751"))
ISCS_BlackBodySpectrum : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTemperatureK,put=PutTemperatureK))
    double TemperatureK;
    __declspec(property(get=GetSpectrumCount,put=PutSpectrumCount))
    long SpectrumCount;
    __declspec(property(get=GetWavelengthFrom,put=PutWavelengthFrom))
    double WavelengthFrom;
    __declspec(property(get=GetWavelengthTo,put=PutWavelengthTo))
    double WavelengthTo;
    __declspec(property(get=GetFit))
    _bstr_t Fit;

    //
    // Wrapper methods for error-handling
    //

    double GetTemperatureK ( );
    void PutTemperatureK (
        double pRetVal );
    long GetSpectrumCount ( );
    void PutSpectrumCount (
        long pRetVal );
    double GetWavelengthFrom ( );
    void PutWavelengthFrom (
        double pRetVal );
    double GetWavelengthTo ( );
    void PutWavelengthTo (
        double pRetVal );
    _bstr_t GetFit ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TemperatureK (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TemperatureK (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_SpectrumCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SpectrumCount (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_WavelengthFrom (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_WavelengthFrom (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_WavelengthTo (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_WavelengthTo (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Fit (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("11e0d2eb-7d3c-4c39-b405-9ff6db4459af"))
ISCS_SpectrumFile : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSpectrumFile,put=PutSpectrumFile))
    _bstr_t SpectrumFile;
    __declspec(property(get=GetSpectrumCount))
    long SpectrumCount;
    __declspec(property(get=GetWavelengthFrom))
    double WavelengthFrom;
    __declspec(property(get=GetWavelengthTo))
    double WavelengthTo;
    __declspec(property(get=GetFit))
    _bstr_t Fit;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetSpectrumFile ( );
    void PutSpectrumFile (
        _bstr_t pRetVal );
    SAFEARRAY * GetAvailableSpectrumFiles ( );
    long GetSpectrumCount ( );
    double GetWavelengthFrom ( );
    double GetWavelengthTo ( );
    _bstr_t GetFit ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SpectrumFile (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SpectrumFile (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailableSpectrumFiles (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SpectrumCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_WavelengthFrom (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_WavelengthTo (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Fit (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("806dabbc-1bc0-40b5-8e1d-d7101814c483"))
ISCS_CIE1976 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getu,put=Putu))
    double u;
    __declspec(property(get=Getv,put=Putv))
    double v;
    __declspec(property(get=GetSpectrumCount,put=PutSpectrumCount))
    long SpectrumCount;
    __declspec(property(get=GetWavelengthFrom,put=PutWavelengthFrom))
    double WavelengthFrom;
    __declspec(property(get=GetWavelengthTo,put=PutWavelengthTo))
    double WavelengthTo;
    __declspec(property(get=GetFit))
    _bstr_t Fit;

    //
    // Wrapper methods for error-handling
    //

    double Getu ( );
    void Putu (
        double pRetVal );
    double Getv ( );
    void Putv (
        double pRetVal );
    long GetSpectrumCount ( );
    void PutSpectrumCount (
        long pRetVal );
    double GetWavelengthFrom ( );
    void PutWavelengthFrom (
        double pRetVal );
    double GetWavelengthTo ( );
    void PutWavelengthTo (
        double pRetVal );
    _bstr_t GetFit ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_u (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_u (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_v (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_v (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_SpectrumCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SpectrumCount (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_WavelengthFrom (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_WavelengthFrom (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_WavelengthTo (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_WavelengthTo (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Fit (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("81e1b931-e1b9-4a82-b9fa-1fe8fa26fab9"))
ISourceColorSettings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMode))
    enum SourceColorMode Mode;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=Get_S_SystemWavelengths))
    ISCS_SystemWavelengthsPtr _S_SystemWavelengths;
    __declspec(property(get=Get_S_CIE1931Tristimulus))
    ISCS_CIE1931TristimulusPtr _S_CIE1931Tristimulus;
    __declspec(property(get=Get_S_CIE1931Chromaticity))
    ISCS_CIE1931ChromaticityPtr _S_CIE1931Chromaticity;
    __declspec(property(get=Get_S_CIE1931RGB))
    ISCS_CIE1931RGBPtr _S_CIE1931RGB;
    __declspec(property(get=Get_S_UniformPowerSpectrum))
    ISCS_UniformPowerSpectrumPtr _S_UniformPowerSpectrum;
    __declspec(property(get=Get_S_D65White))
    ISCS_D65WhitePtr _S_D65White;
    __declspec(property(get=Get_S_ColorTemperature))
    ISCS_ColorTemperaturePtr _S_ColorTemperature;
    __declspec(property(get=Get_S_BlackBodySpectrum))
    ISCS_BlackBodySpectrumPtr _S_BlackBodySpectrum;
    __declspec(property(get=Get_S_SpectrumFile))
    ISCS_SpectrumFilePtr _S_SpectrumFile;
    __declspec(property(get=Get_S_CIE1976))
    ISCS_CIE1976Ptr _S_CIE1976;

    //
    // Wrapper methods for error-handling
    //

    enum SourceColorMode GetMode ( );
    VARIANT_BOOL GetIsValid ( );
    ISCS_SystemWavelengthsPtr Get_S_SystemWavelengths ( );
    ISCS_CIE1931TristimulusPtr Get_S_CIE1931Tristimulus ( );
    ISCS_CIE1931ChromaticityPtr Get_S_CIE1931Chromaticity ( );
    ISCS_CIE1931RGBPtr Get_S_CIE1931RGB ( );
    ISCS_UniformPowerSpectrumPtr Get_S_UniformPowerSpectrum ( );
    ISCS_D65WhitePtr Get_S_D65White ( );
    ISCS_ColorTemperaturePtr Get_S_ColorTemperature ( );
    ISCS_BlackBodySpectrumPtr Get_S_BlackBodySpectrum ( );
    ISCS_SpectrumFilePtr Get_S_SpectrumFile ( );
    ISCS_CIE1976Ptr Get_S_CIE1976 ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Mode (
        /*[out,retval]*/ enum SourceColorMode * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_SystemWavelengths (
        /*[out,retval]*/ struct ISCS_SystemWavelengths * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_CIE1931Tristimulus (
        /*[out,retval]*/ struct ISCS_CIE1931Tristimulus * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_CIE1931Chromaticity (
        /*[out,retval]*/ struct ISCS_CIE1931Chromaticity * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_CIE1931RGB (
        /*[out,retval]*/ struct ISCS_CIE1931RGB * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_UniformPowerSpectrum (
        /*[out,retval]*/ struct ISCS_UniformPowerSpectrum * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_D65White (
        /*[out,retval]*/ struct ISCS_D65White * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_ColorTemperature (
        /*[out,retval]*/ struct ISCS_ColorTemperature * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_BlackBodySpectrum (
        /*[out,retval]*/ struct ISCS_BlackBodySpectrum * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_SpectrumFile (
        /*[out,retval]*/ struct ISCS_SpectrumFile * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_CIE1976 (
        /*[out,retval]*/ struct ISCS_CIE1976 * * pRetVal ) = 0;
};

struct __declspec(uuid("436876b8-0ac5-47d3-acfb-13d389e85bf4"))
INCESourcesData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsSourcesAvailable))
    VARIANT_BOOL IsSourcesAvailable;
    __declspec(property(get=GetRandomPolarization,put=PutRandomPolarization))
    VARIANT_BOOL RandomPolarization;
    __declspec(property(get=GetInitialPhaseDeg,put=PutInitialPhaseDeg))
    double InitialPhaseDeg;
    __declspec(property(get=GetcoherenceLength,put=PutcoherenceLength))
    double coherenceLength;
    __declspec(property(get=Getjx,put=Putjx))
    double jx;
    __declspec(property(get=Getjy,put=Putjy))
    double jy;
    __declspec(property(get=GetXPhase,put=PutXPhase))
    double XPhase;
    __declspec(property(get=GetYPhase,put=PutYPhase))
    double YPhase;
    __declspec(property(get=GetReverseRays,put=PutReverseRays))
    VARIANT_BOOL ReverseRays;
    __declspec(property(get=GetPrePropagation,put=PutPrePropagation))
    double PrePropagation;
    __declspec(property(get=GetBulkScatter,put=PutBulkScatter))
    enum SourceBulkScatterMode BulkScatter;
    __declspec(property(get=GetSamplingMethod,put=PutSamplingMethod))
    enum SourceSamplingMethod SamplingMethod;
    __declspec(property(get=GetArrayType,put=PutArrayType))
    enum ArrayMode ArrayType;
    __declspec(property(get=GetArrayNumberX,put=PutArrayNumberX))
    long ArrayNumberX;
    __declspec(property(get=GetArrayNumberY,put=PutArrayNumberY))
    long ArrayNumberY;
    __declspec(property(get=GetArraySpacingX,put=PutArraySpacingX))
    double ArraySpacingX;
    __declspec(property(get=GetArraySpacingY,put=PutArraySpacingY))
    double ArraySpacingY;
    __declspec(property(get=GetArrayNumber,put=PutArrayNumber))
    long ArrayNumber;
    __declspec(property(get=GetArrayRadius,put=PutArrayRadius))
    double ArrayRadius;
    __declspec(property(get=GetArrayRings,put=PutArrayRings))
    long ArrayRings;
    __declspec(property(get=GetArraySpacing,put=PutArraySpacing))
    double ArraySpacing;
    __declspec(property(get=GetSourceColor,put=PutSourceColor))
    enum SourceColorMode SourceColor;
    __declspec(property(get=GetSourceColorSettings))
    ISourceColorSettingsPtr SourceColorSettings;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsSourcesAvailable ( );
    VARIANT_BOOL GetRandomPolarization ( );
    void PutRandomPolarization (
        VARIANT_BOOL pRetVal );
    double GetInitialPhaseDeg ( );
    void PutInitialPhaseDeg (
        double pRetVal );
    double GetcoherenceLength ( );
    void PutcoherenceLength (
        double pRetVal );
    double Getjx ( );
    void Putjx (
        double pRetVal );
    double Getjy ( );
    void Putjy (
        double pRetVal );
    double GetXPhase ( );
    void PutXPhase (
        double pRetVal );
    double GetYPhase ( );
    void PutYPhase (
        double pRetVal );
    VARIANT_BOOL GetReverseRays ( );
    void PutReverseRays (
        VARIANT_BOOL pRetVal );
    double GetPrePropagation ( );
    void PutPrePropagation (
        double pRetVal );
    enum SourceBulkScatterMode GetBulkScatter ( );
    void PutBulkScatter (
        enum SourceBulkScatterMode pRetVal );
    enum SourceSamplingMethod GetSamplingMethod ( );
    void PutSamplingMethod (
        enum SourceSamplingMethod pRetVal );
    enum ArrayMode GetArrayType ( );
    void PutArrayType (
        enum ArrayMode pRetVal );
    long GetArrayNumberX ( );
    void PutArrayNumberX (
        long pRetVal );
    long GetArrayNumberY ( );
    void PutArrayNumberY (
        long pRetVal );
    double GetArraySpacingX ( );
    void PutArraySpacingX (
        double pRetVal );
    double GetArraySpacingY ( );
    void PutArraySpacingY (
        double pRetVal );
    long GetArrayNumber ( );
    void PutArrayNumber (
        long pRetVal );
    double GetArrayRadius ( );
    void PutArrayRadius (
        double pRetVal );
    long GetArrayRings ( );
    void PutArrayRings (
        long pRetVal );
    double GetArraySpacing ( );
    void PutArraySpacing (
        double pRetVal );
    enum SourceColorMode GetSourceColor ( );
    void PutSourceColor (
        enum SourceColorMode pRetVal );
    ISourceColorSettingsPtr GetSourceColorSettings ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsSourcesAvailable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RandomPolarization (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RandomPolarization (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_InitialPhaseDeg (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_InitialPhaseDeg (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_coherenceLength (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_coherenceLength (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_jx (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_jx (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_jy (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_jy (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_XPhase (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XPhase (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YPhase (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YPhase (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ReverseRays (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ReverseRays (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_PrePropagation (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PrePropagation (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_BulkScatter (
        /*[out,retval]*/ enum SourceBulkScatterMode * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BulkScatter (
        /*[in]*/ enum SourceBulkScatterMode pRetVal ) = 0;
      virtual HRESULT __stdcall get_SamplingMethod (
        /*[out,retval]*/ enum SourceSamplingMethod * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SamplingMethod (
        /*[in]*/ enum SourceSamplingMethod pRetVal ) = 0;
      virtual HRESULT __stdcall get_ArrayType (
        /*[out,retval]*/ enum ArrayMode * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ArrayType (
        /*[in]*/ enum ArrayMode pRetVal ) = 0;
      virtual HRESULT __stdcall get_ArrayNumberX (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ArrayNumberX (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_ArrayNumberY (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ArrayNumberY (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_ArraySpacingX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ArraySpacingX (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ArraySpacingY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ArraySpacingY (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ArrayNumber (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ArrayNumber (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_ArrayRadius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ArrayRadius (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ArrayRings (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ArrayRings (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_ArraySpacing (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ArraySpacing (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_SourceColor (
        /*[out,retval]*/ enum SourceColorMode * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SourceColor (
        /*[in]*/ enum SourceColorMode pRetVal ) = 0;
      virtual HRESULT __stdcall get_SourceColorSettings (
        /*[out,retval]*/ struct ISourceColorSettings * * pRetVal ) = 0;
};

enum __declspec(uuid("48f6db2e-71c3-4b80-b0d0-6fe7e8ec0d02"))
FaceIsType
{
    FaceIsType_ObjectDefault = 0,
    FaceIsType_Reflective = 1,
    FaceIsType_Absorbing = 2
};

enum __declspec(uuid("46f38890-20df-48cd-8749-627262bb3415"))
ObjectScatteringTypes
{
    ObjectScatteringTypes_None = 0,
    ObjectScatteringTypes_Lambertian = 1,
    ObjectScatteringTypes_Gaussian = 2,
    ObjectScatteringTypes_ABg = 3,
    ObjectScatteringTypes_ABgFile = 4,
    ObjectScatteringTypes_BSDF = 5,
    ObjectScatteringTypes_ISScatterCatalog = 6,
    ObjectScatteringTypes_User = 7
};

struct __declspec(uuid("bffd46b0-e5f2-4e1b-861a-6bdc0deccb64"))
IOSS_None : IDispatch
{};

struct __declspec(uuid("14a5bc0c-5d5c-4bd3-ac61-08edd8ef643f"))
IOSS_Lambertian : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetScatterFraction,put=PutScatterFraction))
    double ScatterFraction;

    //
    // Wrapper methods for error-handling
    //

    double GetScatterFraction ( );
    void PutScatterFraction (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ScatterFraction (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ScatterFraction (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("cd1ff047-249e-4d1a-a023-96f5d95a0e0c"))
IOSS_Gaussian : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetScatterFraction,put=PutScatterFraction))
    double ScatterFraction;
    __declspec(property(get=GetSigma,put=PutSigma))
    double Sigma;

    //
    // Wrapper methods for error-handling
    //

    double GetScatterFraction ( );
    void PutScatterFraction (
        double pRetVal );
    double GetSigma ( );
    void PutSigma (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ScatterFraction (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ScatterFraction (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Sigma (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Sigma (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("6084a314-1611-46a0-b4f2-d790bdd74890"))
IOSS_ABg : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetReflectName,put=PutReflectName))
    _bstr_t ReflectName;
    __declspec(property(get=GetTransmitName,put=PutTransmitName))
    _bstr_t TransmitName;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetReflectName ( );
    void PutReflectName (
        _bstr_t pRetVal );
    _bstr_t GetTransmitName ( );
    void PutTransmitName (
        _bstr_t pRetVal );
    SAFEARRAY * GetAvailableABgNames ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReflectName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ReflectName (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_TransmitName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TransmitName (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailableABgNames (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
};

struct __declspec(uuid("b29a17c3-99e6-4da4-8ab2-e0e20f0110b7"))
IOSS_ABgFile : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetReflectFile,put=PutReflectFile))
    _bstr_t ReflectFile;
    __declspec(property(get=GetTransmitFile,put=PutTransmitFile))
    _bstr_t TransmitFile;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetReflectFile ( );
    void PutReflectFile (
        _bstr_t pRetVal );
    _bstr_t GetTransmitFile ( );
    void PutTransmitFile (
        _bstr_t pRetVal );
    SAFEARRAY * GetAvailableFiles ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReflectFile (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ReflectFile (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_TransmitFile (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TransmitFile (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailableFiles (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
};

struct __declspec(uuid("bc86d647-1e05-40fa-8032-2f8baee38586"))
IOSS_BSDF : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetReflectFile,put=PutReflectFile))
    _bstr_t ReflectFile;
    __declspec(property(get=GetTransmitFile,put=PutTransmitFile))
    _bstr_t TransmitFile;
    __declspec(property(get=GetScatterFraction,put=PutScatterFraction))
    double ScatterFraction;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetReflectFile ( );
    void PutReflectFile (
        _bstr_t pRetVal );
    _bstr_t GetTransmitFile ( );
    void PutTransmitFile (
        _bstr_t pRetVal );
    SAFEARRAY * GetAvailableFileNames ( );
    double GetScatterFraction ( );
    void PutScatterFraction (
        double pRetVal );
    double GetAngle ( );
    void PutAngle (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReflectFile (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ReflectFile (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_TransmitFile (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TransmitFile (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailableFileNames (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ScatterFraction (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ScatterFraction (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("e311eeae-528a-40ba-b3d5-d1dd88205471"))
IOSS_User : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDLLName,put=PutDLLName))
    _bstr_t DLLName;
    __declspec(property(get=GetfileName,put=PutfileName))
    _bstr_t fileName;
    __declspec(property(get=GetFileNameRequired))
    VARIANT_BOOL FileNameRequired;
    __declspec(property(get=GetNumberOfParameters))
    long NumberOfParameters;
    __declspec(property(get=GetScatterFraction,put=PutScatterFraction))
    double ScatterFraction;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetDLLName ( );
    void PutDLLName (
        _bstr_t pRetVal );
    SAFEARRAY * GetAvailableDLLNames ( );
    _bstr_t GetfileName ( );
    void PutfileName (
        _bstr_t pRetVal );
    SAFEARRAY * GetAvailableFileNames ( );
    VARIANT_BOOL GetFileNameRequired ( );
    long GetNumberOfParameters ( );
    _bstr_t GetParameterName (
        long paramIdx );
    double GetParameterValue (
        long paramIdx );
    VARIANT_BOOL SetParameterValue (
        long paramIdx,
        double Value );
    double GetScatterFraction ( );
    void PutScatterFraction (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DLLName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DLLName (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailableDLLNames (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_fileName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_fileName (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailableFileNames (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FileNameRequired (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfParameters (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetParameterName (
        /*[in]*/ long paramIdx,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetParameterValue (
        /*[in]*/ long paramIdx,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetParameterValue (
        /*[in]*/ long paramIdx,
        /*[in]*/ double Value,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ScatterFraction (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ScatterFraction (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("3cb86c69-fa04-4de3-b398-0f8c8fe9439c"))
IOSS_ISScatterCatalog : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSampleSideR,put=PutSampleSideR))
    enum SampleSides SampleSideR;
    __declspec(property(get=GetSamplingR,put=PutSamplingR))
    enum Samplings SamplingR;
    __declspec(property(get=GetSampleSideT,put=PutSampleSideT))
    enum SampleSides SampleSideT;
    __declspec(property(get=GetSamplingT,put=PutSamplingT))
    enum Samplings SamplingT;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;

    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * GetAvailableISFiles ( );
    _bstr_t GetReflectFile ( );
    enum ReflectTransmitCode SetReflectFile (
        _bstr_t File );
    _bstr_t GetTransmitFile ( );
    enum ReflectTransmitCode SetTransmitFile (
        _bstr_t File );
    enum SampleSides GetSampleSideR ( );
    void PutSampleSideR (
        enum SampleSides pRetVal );
    SAFEARRAY * GetSampleSidesR ( );
    enum Samplings GetSamplingR ( );
    void PutSamplingR (
        enum Samplings pRetVal );
    enum SampleSides GetSampleSideT ( );
    void PutSampleSideT (
        enum SampleSides pRetVal );
    SAFEARRAY * GetSampleSidesT ( );
    enum Samplings GetSamplingT ( );
    void PutSamplingT (
        enum Samplings pRetVal );
    double GetAngle ( );
    void PutAngle (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetAvailableISFiles (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetReflectFile (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetReflectFile (
        /*[in]*/ BSTR File,
        /*[out,retval]*/ enum ReflectTransmitCode * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetTransmitFile (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetTransmitFile (
        /*[in]*/ BSTR File,
        /*[out,retval]*/ enum ReflectTransmitCode * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SampleSideR (
        /*[out,retval]*/ enum SampleSides * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SampleSideR (
        /*[in]*/ enum SampleSides pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetSampleSidesR (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SamplingR (
        /*[out,retval]*/ enum Samplings * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SamplingR (
        /*[in]*/ enum Samplings pRetVal ) = 0;
      virtual HRESULT __stdcall get_SampleSideT (
        /*[out,retval]*/ enum SampleSides * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SampleSideT (
        /*[in]*/ enum SampleSides pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetSampleSidesT (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SamplingT (
        /*[out,retval]*/ enum Samplings * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SamplingT (
        /*[in]*/ enum Samplings pRetVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("b100f3a3-9e0f-44f3-8283-fb28b558234c"))
IObjectScatteringSettings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum ObjectScatteringTypes Type;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=Get_S_None))
    IOSS_NonePtr _S_None;
    __declspec(property(get=Get_S_Lambertian))
    IOSS_LambertianPtr _S_Lambertian;
    __declspec(property(get=Get_S_Gaussian))
    IOSS_GaussianPtr _S_Gaussian;
    __declspec(property(get=Get_S_ABg))
    IOSS_ABgPtr _S_ABg;
    __declspec(property(get=Get_S_ABgFile))
    IOSS_ABgFilePtr _S_ABgFile;
    __declspec(property(get=Get_S_BSDF))
    IOSS_BSDFPtr _S_BSDF;
    __declspec(property(get=Get_S_User))
    IOSS_UserPtr _S_User;
    __declspec(property(get=Get_S_ISScatterCatalog))
    IOSS_ISScatterCatalogPtr _S_ISScatterCatalog;

    //
    // Wrapper methods for error-handling
    //

    enum ObjectScatteringTypes GetType ( );
    VARIANT_BOOL GetIsValid ( );
    IOSS_NonePtr Get_S_None ( );
    IOSS_LambertianPtr Get_S_Lambertian ( );
    IOSS_GaussianPtr Get_S_Gaussian ( );
    IOSS_ABgPtr Get_S_ABg ( );
    IOSS_ABgFilePtr Get_S_ABgFile ( );
    IOSS_BSDFPtr Get_S_BSDF ( );
    IOSS_UserPtr Get_S_User ( );
    IOSS_ISScatterCatalogPtr Get_S_ISScatterCatalog ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum ObjectScatteringTypes * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_None (
        /*[out,retval]*/ struct IOSS_None * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_Lambertian (
        /*[out,retval]*/ struct IOSS_Lambertian * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_Gaussian (
        /*[out,retval]*/ struct IOSS_Gaussian * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_ABg (
        /*[out,retval]*/ struct IOSS_ABg * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_ABgFile (
        /*[out,retval]*/ struct IOSS_ABgFile * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_BSDF (
        /*[out,retval]*/ struct IOSS_BSDF * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_User (
        /*[out,retval]*/ struct IOSS_User * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_ISScatterCatalog (
        /*[out,retval]*/ struct IOSS_ISScatterCatalog * * pRetVal ) = 0;
};

struct __declspec(uuid("dd3cc5f0-b9d8-4db1-af39-3fcf39634d58"))
INCECoatScatterFaceData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetfaceNumber))
    long faceNumber;
    __declspec(property(get=GetFaceName))
    _bstr_t FaceName;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetIsCustom))
    VARIANT_BOOL IsCustom;
    __declspec(property(get=GetIsProfile))
    VARIANT_BOOL IsProfile;
    __declspec(property(get=GetProfileName))
    _bstr_t ProfileName;
    __declspec(property(get=GetFaceIs,put=PutFaceIs))
    enum FaceIsType FaceIs;
    __declspec(property(get=GetCoating,put=PutCoating))
    _bstr_t Coating;
    __declspec(property(get=GetCurrentScatterModel))
    enum ObjectScatteringTypes CurrentScatterModel;
    __declspec(property(get=GetCurrentScatterModelSettings))
    IObjectScatteringSettingsPtr CurrentScatterModelSettings;
    __declspec(property(get=GetThinWindowScattering,put=PutThinWindowScattering))
    VARIANT_BOOL ThinWindowScattering;
    __declspec(property(get=GetNumberOfRays,put=PutNumberOfRays))
    long NumberOfRays;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    long GetfaceNumber ( );
    _bstr_t GetFaceName ( );
    VARIANT_BOOL GetIsReadOnly ( );
    VARIANT_BOOL GetIsCustom ( );
    VARIANT_BOOL UseCustomSettings ( );
    VARIANT_BOOL GetIsProfile ( );
    VARIANT_BOOL UseProfile (
        _bstr_t profile );
    SAFEARRAY * GetAvailableProfiles ( );
    _bstr_t GetProfileName ( );
    VARIANT_BOOL DeleteProfile ( );
    VARIANT_BOOL SaveProfile (
        _bstr_t ProfileName );
    enum FaceIsType GetFaceIs ( );
    void PutFaceIs (
        enum FaceIsType pRetVal );
    _bstr_t GetCoating ( );
    void PutCoating (
        _bstr_t pRetVal );
    SAFEARRAY * GetAvailableCoatings ( );
    enum ObjectScatteringTypes GetCurrentScatterModel ( );
    IObjectScatteringSettingsPtr GetCurrentScatterModelSettings ( );
    IObjectScatteringSettingsPtr CreateScatterModelSettings (
        enum ObjectScatteringTypes Type );
    VARIANT_BOOL ChangeScatterModelSettings (
        struct IObjectScatteringSettings * newSettings );
    VARIANT_BOOL GetThinWindowScattering ( );
    void PutThinWindowScattering (
        VARIANT_BOOL pRetVal );
    long GetNumberOfRays ( );
    void PutNumberOfRays (
        long pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_faceNumber (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FaceName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsCustom (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_UseCustomSettings (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsProfile (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_UseProfile (
        /*[in]*/ BSTR profile,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailableProfiles (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ProfileName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_DeleteProfile (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SaveProfile (
        /*[in]*/ BSTR ProfileName,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FaceIs (
        /*[out,retval]*/ enum FaceIsType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FaceIs (
        /*[in]*/ enum FaceIsType pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coating (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coating (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailableCoatings (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CurrentScatterModel (
        /*[out,retval]*/ enum ObjectScatteringTypes * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CurrentScatterModelSettings (
        /*[out,retval]*/ struct IObjectScatteringSettings * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateScatterModelSettings (
        /*[in]*/ enum ObjectScatteringTypes Type,
        /*[out,retval]*/ struct IObjectScatteringSettings * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ChangeScatterModelSettings (
        /*[in]*/ struct IObjectScatteringSettings * newSettings,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ThinWindowScattering (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ThinWindowScattering (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfRays (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfRays (
        /*[in]*/ long pRetVal ) = 0;
};

struct __declspec(uuid("3169f0f3-a49d-4f95-8da6-d2c36f239125"))
INCECoatScatterData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsCoatScatterAvailable))
    VARIANT_BOOL IsCoatScatterAvailable;
    __declspec(property(get=GetNumberOfFaces))
    long NumberOfFaces;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsCoatScatterAvailable ( );
    long GetNumberOfFaces ( );
    INCECoatScatterFaceDataPtr GetFaceData (
        long faceNumber );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsCoatScatterAvailable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfFaces (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetFaceData (
        /*[in]*/ long faceNumber,
        /*[out,retval]*/ struct INCECoatScatterFaceData * * pRetVal ) = 0;
};

enum __declspec(uuid("699427ae-e769-4235-8ae0-a0ec65885bc8"))
ScatterToType
{
    ScatterToType_ScatterToList = 0,
    ScatterToType_ImportanceSampling = 1
};

struct __declspec(uuid("b695bbd2-c9e3-4082-93c9-0cb8c1653734"))
IImportanceSamplingSettings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTowards,put=PutTowards))
    long Towards;
    __declspec(property(get=Getsize,put=Putsize))
    double size;
    __declspec(property(get=GetLimit,put=PutLimit))
    double Limit;

    //
    // Wrapper methods for error-handling
    //

    long GetTowards ( );
    void PutTowards (
        long pRetVal );
    double Getsize ( );
    void Putsize (
        double pRetVal );
    double GetLimit ( );
    void PutLimit (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Towards (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Towards (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_size (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_size (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Limit (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Limit (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("ea39fbfa-23b6-45b5-bf83-fc2d6996eb72"))
INCEScatterToData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsScatterToAvailable))
    VARIANT_BOOL IsScatterToAvailable;
    __declspec(property(get=GetScatterToMethod,put=PutScatterToMethod))
    enum ScatterToType ScatterToMethod;
    __declspec(property(get=GetScatterToList,put=PutScatterToList))
    _bstr_t ScatterToList;
    __declspec(property(get=GetNumberOfRayData))
    long NumberOfRayData;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsScatterToAvailable ( );
    enum ScatterToType GetScatterToMethod ( );
    void PutScatterToMethod (
        enum ScatterToType pRetVal );
    _bstr_t GetScatterToList ( );
    void PutScatterToList (
        _bstr_t pRetVal );
    long GetNumberOfRayData ( );
    IImportanceSamplingSettingsPtr GetRayData (
        long rayIndex );
    VARIANT_BOOL SetRayData (
        long rayIndex,
        struct IImportanceSamplingSettings * Data );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsScatterToAvailable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ScatterToMethod (
        /*[out,retval]*/ enum ScatterToType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ScatterToMethod (
        /*[in]*/ enum ScatterToType pRetVal ) = 0;
      virtual HRESULT __stdcall get_ScatterToList (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ScatterToList (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfRayData (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetRayData (
        /*[in]*/ long rayIndex,
        /*[out,retval]*/ struct IImportanceSamplingSettings * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetRayData (
        /*[in]*/ long rayIndex,
        /*[in]*/ struct IImportanceSamplingSettings * Data,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

enum __declspec(uuid("540cd517-4736-42a0-ba60-6b6271916f1e"))
VolumePhysicsModelType
{
    VolumePhysicsModelType_None = 0,
    VolumePhysicsModelType_AngleScattering = 1,
    VolumePhysicsModelType_DLLDefinedScattering = 2,
    VolumePhysicsModelType_PhotoluminescenceModel = 3
};

struct __declspec(uuid("fb758ebf-9794-4f94-9646-3f65406993d3"))
IVPMS_None : IDispatch
{};

struct __declspec(uuid("d81cd05a-39a4-434a-8b00-9d5eaf5af30e"))
IVMPS_AngleScattering : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMeanPath,put=PutMeanPath))
    double MeanPath;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;

    //
    // Wrapper methods for error-handling
    //

    double GetMeanPath ( );
    void PutMeanPath (
        double pRetVal );
    double GetAngle ( );
    void PutAngle (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MeanPath (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MeanPath (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("63b4ac7d-5988-4ceb-9b85-949efbd07d63"))
IVMPS_DLLDefinedScattering : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDLL,put=PutDLL))
    _bstr_t DLL;
    __declspec(property(get=GetMeanPath,put=PutMeanPath))
    double MeanPath;
    __declspec(property(get=GetMeanPathRequired))
    VARIANT_BOOL MeanPathRequired;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;
    __declspec(property(get=GetAngleRequired))
    VARIANT_BOOL AngleRequired;
    __declspec(property(get=GetNumberOfParameters))
    long NumberOfParameters;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetDLL ( );
    void PutDLL (
        _bstr_t pRetVal );
    SAFEARRAY * GetAvailableDLLs ( );
    double GetMeanPath ( );
    void PutMeanPath (
        double pRetVal );
    VARIANT_BOOL GetMeanPathRequired ( );
    double GetAngle ( );
    void PutAngle (
        double pRetVal );
    VARIANT_BOOL GetAngleRequired ( );
    long GetNumberOfParameters ( );
    _bstr_t GetParameterName (
        long paramIdx );
    double GetParameterValue (
        long paramIdx );
    VARIANT_BOOL SetParameterValue (
        long paramIdx,
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DLL (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DLL (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailableDLLs (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MeanPath (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MeanPath (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MeanPathRequired (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_AngleRequired (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfParameters (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetParameterName (
        /*[in]*/ long paramIdx,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetParameterValue (
        /*[in]*/ long paramIdx,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetParameterValue (
        /*[in]*/ long paramIdx,
        /*[in]*/ double Value,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

enum __declspec(uuid("60cd1bec-625b-49a3-95d8-49c57100e213"))
EfficiencySpectrumType
{
    EfficiencySpectrumType_QuantumYield = 0,
    EfficiencySpectrumType_Excitation = 1
};

struct __declspec(uuid("4690a6e3-2b9d-40c5-95d8-5dea4f909da6"))
IVMPS_PhotoluminscenceModel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAreSettingsValid))
    VARIANT_BOOL AreSettingsValid;
    __declspec(property(get=GetAbsorptionFile,put=PutAbsorptionFile))
    _bstr_t AbsorptionFile;
    __declspec(property(get=GetEmissionFile,put=PutEmissionFile))
    _bstr_t EmissionFile;
    __declspec(property(get=GetExcitationFile,put=PutExcitationFile))
    _bstr_t ExcitationFile;
    __declspec(property(get=GetQuantumYield,put=PutQuantumYield))
    _bstr_t QuantumYield;
    __declspec(property(get=GetParticleIndex,put=PutParticleIndex))
    double ParticleIndex;
    __declspec(property(get=GetParticleDensity,put=PutParticleDensity))
    double ParticleDensity;
    __declspec(property(get=GetParticleRadius,put=PutParticleRadius))
    double ParticleRadius;
    __declspec(property(get=GetThreshold,put=PutThreshold))
    double Threshold;
    __declspec(property(get=GetBasicAlgorithm,put=PutBasicAlgorithm))
    VARIANT_BOOL BasicAlgorithm;
    __declspec(property(get=GetPLMeanPath,put=PutPLMeanPath))
    double PLMeanPath;
    __declspec(property(get=GetUseMieDensity,put=PutUseMieDensity))
    VARIANT_BOOL UseMieDensity;
    __declspec(property(get=GetMieMeanPath,put=PutMieMeanPath))
    double MieMeanPath;
    __declspec(property(get=GetEfficiencySpectrum,put=PutEfficiencySpectrum))
    enum EfficiencySpectrumType EfficiencySpectrum;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetAreSettingsValid ( );
    _bstr_t GetAbsorptionFile ( );
    void PutAbsorptionFile (
        _bstr_t pRetVal );
    SAFEARRAY * GetAvailableAbsorptionFiles ( );
    _bstr_t GetEmissionFile ( );
    void PutEmissionFile (
        _bstr_t pRetVal );
    SAFEARRAY * GetAvailableEmissionFiles ( );
    _bstr_t GetExcitationFile ( );
    void PutExcitationFile (
        _bstr_t pRetVal );
    SAFEARRAY * GetAvailableExcitationFiles ( );
    _bstr_t GetQuantumYield ( );
    void PutQuantumYield (
        _bstr_t pRetVal );
    SAFEARRAY * GetAvailableQuantumYieldFiles ( );
    double GetParticleIndex ( );
    void PutParticleIndex (
        double pRetVal );
    double GetParticleDensity ( );
    void PutParticleDensity (
        double pRetVal );
    double GetParticleRadius ( );
    void PutParticleRadius (
        double pRetVal );
    double GetThreshold ( );
    void PutThreshold (
        double pRetVal );
    VARIANT_BOOL GetBasicAlgorithm ( );
    void PutBasicAlgorithm (
        VARIANT_BOOL pRetVal );
    double GetPLMeanPath ( );
    void PutPLMeanPath (
        double pRetVal );
    VARIANT_BOOL GetUseMieDensity ( );
    void PutUseMieDensity (
        VARIANT_BOOL pRetVal );
    double GetMieMeanPath ( );
    void PutMieMeanPath (
        double pRetVal );
    enum EfficiencySpectrumType GetEfficiencySpectrum ( );
    void PutEfficiencySpectrum (
        enum EfficiencySpectrumType pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AreSettingsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AbsorptionFile (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AbsorptionFile (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailableAbsorptionFiles (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmissionFile (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_EmissionFile (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailableEmissionFiles (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ExcitationFile (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ExcitationFile (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailableExcitationFiles (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_QuantumYield (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_QuantumYield (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailableQuantumYieldFiles (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ParticleIndex (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ParticleIndex (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ParticleDensity (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ParticleDensity (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ParticleRadius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ParticleRadius (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Threshold (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Threshold (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_BasicAlgorithm (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BasicAlgorithm (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_PLMeanPath (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PLMeanPath (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseMieDensity (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseMieDensity (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_MieMeanPath (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MieMeanPath (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_EfficiencySpectrum (
        /*[out,retval]*/ enum EfficiencySpectrumType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_EfficiencySpectrum (
        /*[in]*/ enum EfficiencySpectrumType pRetVal ) = 0;
};

struct __declspec(uuid("cc8284c5-3cda-4785-b248-ca5bbef127a9"))
IVolumePhysicsModelSettings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum VolumePhysicsModelType Type;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=Get_S_None))
    IVPMS_NonePtr _S_None;
    __declspec(property(get=Get_S_AngleScattering))
    IVMPS_AngleScatteringPtr _S_AngleScattering;
    __declspec(property(get=Get_S_DLLDefinedScattering))
    IVMPS_DLLDefinedScatteringPtr _S_DLLDefinedScattering;
    __declspec(property(get=Get_S_PhotoluminescenceModel))
    IVMPS_PhotoluminscenceModelPtr _S_PhotoluminescenceModel;

    //
    // Wrapper methods for error-handling
    //

    enum VolumePhysicsModelType GetType ( );
    VARIANT_BOOL GetIsValid ( );
    IVPMS_NonePtr Get_S_None ( );
    IVMPS_AngleScatteringPtr Get_S_AngleScattering ( );
    IVMPS_DLLDefinedScatteringPtr Get_S_DLLDefinedScattering ( );
    IVMPS_PhotoluminscenceModelPtr Get_S_PhotoluminescenceModel ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum VolumePhysicsModelType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_None (
        /*[out,retval]*/ struct IVPMS_None * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_AngleScattering (
        /*[out,retval]*/ struct IVMPS_AngleScattering * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_DLLDefinedScattering (
        /*[out,retval]*/ struct IVMPS_DLLDefinedScattering * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_PhotoluminescenceModel (
        /*[out,retval]*/ struct IVMPS_PhotoluminscenceModel * * pRetVal ) = 0;
};

struct __declspec(uuid("35100590-d2f0-4f87-b8f4-84988847b8b0"))
INCEVolumePhysicsData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVolumePhysicsAvailable))
    VARIANT_BOOL IsVolumePhysicsAvailable;
    __declspec(property(get=GetModel,put=PutModel))
    enum VolumePhysicsModelType Model;
    __declspec(property(get=GetModelSettings))
    IVolumePhysicsModelSettingsPtr ModelSettings;
    __declspec(property(get=GetWavelengthShift,put=PutWavelengthShift))
    _bstr_t WavelengthShift;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVolumePhysicsAvailable ( );
    enum VolumePhysicsModelType GetModel ( );
    void PutModel (
        enum VolumePhysicsModelType pRetVal );
    IVolumePhysicsModelSettingsPtr GetModelSettings ( );
    _bstr_t GetWavelengthShift ( );
    void PutWavelengthShift (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVolumePhysicsAvailable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Model (
        /*[out,retval]*/ enum VolumePhysicsModelType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Model (
        /*[in]*/ enum VolumePhysicsModelType pRetVal ) = 0;
      virtual HRESULT __stdcall get_ModelSettings (
        /*[out,retval]*/ struct IVolumePhysicsModelSettings * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_WavelengthShift (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_WavelengthShift (
        /*[in]*/ BSTR pRetVal ) = 0;
};

enum __declspec(uuid("33df37af-c416-4e22-9f44-d146658168f7"))
NCEIndexType
{
    NCEIndexType_Isotropic = 0,
    NCEIndexType_Birefringent = 1,
    NCEIndexType_GRIN = 2
};

struct __declspec(uuid("13f8db2c-efcd-43de-968f-a0756be21d37"))
IIMS_Isotropic : IDispatch
{};

enum __declspec(uuid("ab261b75-9e9d-43f6-b809-31f6bfb8935f"))
BirefringentMode
{
    BirefringentMode_TraceOrdinayAndExtraordinary = 0,
    BirefringentMode_TraceOrdinaryOnly = 1,
    BirefringentMode_TraceExtraordinaryOnly = 2,
    BirefringentMode_Waveplate = 3
};

enum __declspec(uuid("b8b3e61a-ef39-4d5b-998e-a85e19c18061"))
BirefringentReflections
{
    BirefringentReflections_TraceReflectedAndRefracted = 0,
    BirefringentReflections_TraceRefractedOnly = 1,
    BirefringentReflections_TraceReflectedOnly = 2
};

struct __declspec(uuid("dcc6b678-7f58-47ea-9e31-30edb1778f94"))
IIMS_Birefringent : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMode,put=PutMode))
    enum BirefringentMode Mode;
    __declspec(property(get=GetReflections,put=PutReflections))
    enum BirefringentReflections Reflections;
    __declspec(property(get=GetAx,put=PutAx))
    double Ax;
    __declspec(property(get=GetAy,put=PutAy))
    double Ay;
    __declspec(property(get=GetAz,put=PutAz))
    double Az;
    __declspec(property(get=GetAxisLength,put=PutAxisLength))
    double AxisLength;

    //
    // Wrapper methods for error-handling
    //

    enum BirefringentMode GetMode ( );
    void PutMode (
        enum BirefringentMode pRetVal );
    enum BirefringentReflections GetReflections ( );
    void PutReflections (
        enum BirefringentReflections pRetVal );
    double GetAx ( );
    void PutAx (
        double pRetVal );
    double GetAy ( );
    void PutAy (
        double pRetVal );
    double GetAz ( );
    void PutAz (
        double pRetVal );
    double GetAxisLength ( );
    void PutAxisLength (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Mode (
        /*[out,retval]*/ enum BirefringentMode * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Mode (
        /*[in]*/ enum BirefringentMode pRetVal ) = 0;
      virtual HRESULT __stdcall get_Reflections (
        /*[out,retval]*/ enum BirefringentReflections * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Reflections (
        /*[in]*/ enum BirefringentReflections pRetVal ) = 0;
      virtual HRESULT __stdcall get_Ax (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Ax (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Ay (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Ay (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Az (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Az (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_AxisLength (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AxisLength (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("2ae36042-76a4-4365-9703-0328bf5e7f16"))
IIMS_GRIN : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDLL,put=PutDLL))
    _bstr_t DLL;
    __declspec(property(get=GetFile,put=PutFile))
    _bstr_t File;
    __declspec(property(get=GetUsesFile))
    VARIANT_BOOL UsesFile;
    __declspec(property(get=GetMaximumStepSize,put=PutMaximumStepSize))
    double MaximumStepSize;
    __declspec(property(get=GetNumberOfParameters))
    long NumberOfParameters;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetDLL ( );
    void PutDLL (
        _bstr_t pRetVal );
    SAFEARRAY * GetAvailableDLLs ( );
    _bstr_t GetFile ( );
    void PutFile (
        _bstr_t pRetVal );
    SAFEARRAY * GetAvailableFiles ( );
    VARIANT_BOOL GetUsesFile ( );
    double GetMaximumStepSize ( );
    void PutMaximumStepSize (
        double pRetVal );
    long GetNumberOfParameters ( );
    _bstr_t GetParameterName (
        long paramIdx );
    double GetParameterValue (
        long paramIdx );
    VARIANT_BOOL SetParameterValue (
        long paramIdx,
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DLL (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DLL (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailableDLLs (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_File (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_File (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailableFiles (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_UsesFile (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumStepSize (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaximumStepSize (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfParameters (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetParameterName (
        /*[in]*/ long paramIdx,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetParameterValue (
        /*[in]*/ long paramIdx,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetParameterValue (
        /*[in]*/ long paramIdx,
        /*[in]*/ double Value,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("4a45cb97-5f3a-48aa-9bde-3702abc4e9a6"))
IIndexModelSettings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum NCEIndexType Type;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=Get_S_Isotropic))
    IIMS_IsotropicPtr _S_Isotropic;
    __declspec(property(get=Get_S_Birefringent))
    IIMS_BirefringentPtr _S_Birefringent;
    __declspec(property(get=Get_S_GRIN))
    IIMS_GRINPtr _S_GRIN;

    //
    // Wrapper methods for error-handling
    //

    enum NCEIndexType GetType ( );
    VARIANT_BOOL GetIsValid ( );
    IIMS_IsotropicPtr Get_S_Isotropic ( );
    IIMS_BirefringentPtr Get_S_Birefringent ( );
    IIMS_GRINPtr Get_S_GRIN ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum NCEIndexType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_Isotropic (
        /*[out,retval]*/ struct IIMS_Isotropic * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_Birefringent (
        /*[out,retval]*/ struct IIMS_Birefringent * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_GRIN (
        /*[out,retval]*/ struct IIMS_GRIN * * pRetVal ) = 0;
};

struct __declspec(uuid("1a128ab2-2e65-4cad-aa6b-a591c5d38798"))
INCEIndexData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsIndexAvailable))
    VARIANT_BOOL IsIndexAvailable;
    __declspec(property(get=GetIndexType,put=PutIndexType))
    enum NCEIndexType IndexType;
    __declspec(property(get=GetModelSettings))
    IIndexModelSettingsPtr ModelSettings;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsIndexAvailable ( );
    enum NCEIndexType GetIndexType ( );
    void PutIndexType (
        enum NCEIndexType pRetVal );
    IIndexModelSettingsPtr GetModelSettings ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsIndexAvailable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IndexType (
        /*[out,retval]*/ enum NCEIndexType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IndexType (
        /*[in]*/ enum NCEIndexType pRetVal ) = 0;
      virtual HRESULT __stdcall get_ModelSettings (
        /*[out,retval]*/ struct IIndexModelSettings * * pRetVal ) = 0;
};

enum __declspec(uuid("4130ffe3-0c38-4fb7-a356-c851354fab7a"))
DiffractionSplitType
{
    DiffractionSplitType_DontSplitByOrder = 0,
    DiffractionSplitType_SplitByTable = 1,
    DiffractionSplitType_SplitByDLL = 2
};

struct __declspec(uuid("ab95ab66-d90d-4489-b06b-d9b15154aa92"))
INCEDiffractionData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsDiffractionAvailable))
    VARIANT_BOOL IsDiffractionAvailable;
    __declspec(property(get=GetSplit,put=PutSplit))
    enum DiffractionSplitType Split;
    __declspec(property(get=GetDLL,put=PutDLL))
    _bstr_t DLL;
    __declspec(property(get=GetIsDLLRequired))
    VARIANT_BOOL IsDLLRequired;
    __declspec(property(get=GetStartOrder,put=PutStartOrder))
    long StartOrder;
    __declspec(property(get=GetStopOrder,put=PutStopOrder))
    long StopOrder;
    __declspec(property(get=GetNumberOfParameters))
    long NumberOfParameters;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsDiffractionAvailable ( );
    enum DiffractionSplitType GetSplit ( );
    void PutSplit (
        enum DiffractionSplitType pRetVal );
    _bstr_t GetDLL ( );
    void PutDLL (
        _bstr_t pRetVal );
    VARIANT_BOOL GetIsDLLRequired ( );
    SAFEARRAY * GetAvailableDLLs ( );
    long GetStartOrder ( );
    void PutStartOrder (
        long pRetVal );
    long GetStopOrder ( );
    void PutStopOrder (
        long pRetVal );
    long GetNumberOfParameters ( );
    _bstr_t GetReflectParameterName (
        long paramIdx );
    double GetReflectParameterValue (
        long paramIdx );
    VARIANT_BOOL SetReflectParameterValue (
        long paramIdx,
        double Value );
    _bstr_t GetTransmitParamaterName (
        long paramIdx );
    double GetTransmitParameterValue (
        long paramIdx );
    VARIANT_BOOL SetTransmitParameterValue (
        long paramIdx,
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsDiffractionAvailable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Split (
        /*[out,retval]*/ enum DiffractionSplitType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Split (
        /*[in]*/ enum DiffractionSplitType pRetVal ) = 0;
      virtual HRESULT __stdcall get_DLL (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DLL (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDLLRequired (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailableDLLs (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_StartOrder (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_StartOrder (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_StopOrder (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_StopOrder (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfParameters (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetReflectParameterName (
        /*[in]*/ long paramIdx,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetReflectParameterValue (
        /*[in]*/ long paramIdx,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetReflectParameterValue (
        /*[in]*/ long paramIdx,
        /*[in]*/ double Value,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetTransmitParamaterName (
        /*[in]*/ long paramIdx,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetTransmitParameterValue (
        /*[in]*/ long paramIdx,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetTransmitParameterValue (
        /*[in]*/ long paramIdx,
        /*[in]*/ double Value,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("2bc92086-becc-409d-8d49-c059ea849246"))
INCECADData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsCADAvailable))
    VARIANT_BOOL IsCADAvailable;
    __declspec(property(get=GetHasChordTolerance))
    VARIANT_BOOL HasChordTolerance;
    __declspec(property(get=GetChordTolerance,put=PutChordTolerance))
    double ChordTolerance;
    __declspec(property(get=GetHasSurfaceTolerance))
    VARIANT_BOOL HasSurfaceTolerance;
    __declspec(property(get=GetSurfaceTolerance,put=PutSurfaceTolerance))
    long SurfaceTolerance;
    __declspec(property(get=GetHasFaceParameters))
    VARIANT_BOOL HasFaceParameters;
    __declspec(property(get=GetFaceAngle,put=PutFaceAngle))
    double FaceAngle;
    __declspec(property(get=GetFaceMode,put=PutFaceMode))
    long FaceMode;
    __declspec(property(get=GetHasMergeSurfaces))
    VARIANT_BOOL HasMergeSurfaces;
    __declspec(property(get=GetMergeSurfaces,put=PutMergeSurfaces))
    VARIANT_BOOL MergeSurfaces;
    __declspec(property(get=GetHasFaceData))
    VARIANT_BOOL HasFaceData;
    __declspec(property(get=GetNumberOfSurfaces))
    long NumberOfSurfaces;
    __declspec(property(get=GetHasPartData))
    VARIANT_BOOL HasPartData;
    __declspec(property(get=GetNumberOfConfigurations))
    long NumberOfConfigurations;
    __declspec(property(get=GetCurrentConfiguration,put=PutCurrentConfiguration))
    long CurrentConfiguration;
    __declspec(property(get=GetNumberOfParts))
    long NumberOfParts;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsCADAvailable ( );
    VARIANT_BOOL GetHasChordTolerance ( );
    double GetChordTolerance ( );
    void PutChordTolerance (
        double pRetVal );
    VARIANT_BOOL GetHasSurfaceTolerance ( );
    long GetSurfaceTolerance ( );
    void PutSurfaceTolerance (
        long pRetVal );
    VARIANT_BOOL GetHasFaceParameters ( );
    double GetFaceAngle ( );
    void PutFaceAngle (
        double pRetVal );
    long GetFaceMode ( );
    void PutFaceMode (
        long pRetVal );
    VARIANT_BOOL GetHasMergeSurfaces ( );
    VARIANT_BOOL GetMergeSurfaces ( );
    void PutMergeSurfaces (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetHasFaceData ( );
    long GetNumberOfSurfaces ( );
    long GetSurfaceFace (
        long surfaceIdx );
    VARIANT_BOOL SetSurfaceFace (
        long surfaceIdx,
        long face );
    _bstr_t GetSurfaceName (
        long surfaceIdx );
    VARIANT_BOOL SetSurfaceName (
        long surfaceIdx,
        _bstr_t name );
    VARIANT_BOOL GetHasPartData ( );
    long GetNumberOfConfigurations ( );
    long GetCurrentConfiguration ( );
    void PutCurrentConfiguration (
        long pRetVal );
    _bstr_t GetConfigurationName (
        long configIdx );
    long GetNumberOfParts ( );
    _bstr_t GetPartName (
        long partIdx );
    VARIANT_BOOL GetPartExposed (
        long partIdx );
    VARIANT_BOOL SetPartExposed (
        long partIdx,
        VARIANT_BOOL exposed );
    VARIANT_BOOL SetAllPartsExposed (
        VARIANT_BOOL exposed );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsCADAvailable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_HasChordTolerance (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ChordTolerance (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ChordTolerance (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_HasSurfaceTolerance (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SurfaceTolerance (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SurfaceTolerance (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_HasFaceParameters (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FaceAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FaceAngle (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FaceMode (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FaceMode (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_HasMergeSurfaces (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MergeSurfaces (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MergeSurfaces (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_HasFaceData (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfSurfaces (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetSurfaceFace (
        /*[in]*/ long surfaceIdx,
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetSurfaceFace (
        /*[in]*/ long surfaceIdx,
        /*[in]*/ long face,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetSurfaceName (
        /*[in]*/ long surfaceIdx,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetSurfaceName (
        /*[in]*/ long surfaceIdx,
        /*[in]*/ BSTR name,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_HasPartData (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfConfigurations (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CurrentConfiguration (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CurrentConfiguration (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetConfigurationName (
        /*[in]*/ long configIdx,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfParts (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetPartName (
        /*[in]*/ long partIdx,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetPartExposed (
        /*[in]*/ long partIdx,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetPartExposed (
        /*[in]*/ long partIdx,
        /*[in]*/ VARIANT_BOOL exposed,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetAllPartsExposed (
        /*[in]*/ VARIANT_BOOL exposed,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

enum __declspec(uuid("cea86773-3392-4a5a-9e30-3d81c31e079a"))
SurfaceType
{
    SurfaceType_ABCD = 0,
    SurfaceType_AlternateEven = 1,
    SurfaceType_AlternateOdd = 2,
    SurfaceType_AnnularZernikeSag = 3,
    SurfaceType_Atmospheric = 4,
    SurfaceType_Biconic = 5,
    SurfaceType_BiconicZernike = 6,
    SurfaceType_Binary1 = 7,
    SurfaceType_Binary2 = 8,
    SurfaceType_Binary3 = 9,
    SurfaceType_Binary4 = 10,
    SurfaceType_BirefringentIn = 11,
    SurfaceType_BirefringentOut = 12,
    SurfaceType_BlackBoxLens = 13,
    SurfaceType_ChebyShv = 14,
    SurfaceType_Conjugate = 15,
    SurfaceType_CoordinateBreak = 16,
    SurfaceType_CubicSpline = 17,
    SurfaceType_CylinderFrensel = 18,
    SurfaceType_Data = 19,
    SurfaceType_DiffractionGrating = 20,
    SurfaceType_EllipticalGrating1 = 21,
    SurfaceType_EllipticalGrating2 = 22,
    SurfaceType_EvenAspheric = 23,
    SurfaceType_ExtendedToroidalGrating = 24,
    SurfaceType_ExtendedAsphere = 25,
    SurfaceType_ExtendedCubicSpline = 26,
    SurfaceType_ExtendedFresnel = 27,
    SurfaceType_ExtendedOddAsphere = 28,
    SurfaceType_ExtendedPolynomial = 29,
    SurfaceType_Fresnel = 30,
    SurfaceType_GeneralizedFresnel = 31,
    SurfaceType_Gradient1 = 32,
    SurfaceType_Gradient2 = 33,
    SurfaceType_Gradient3 = 34,
    SurfaceType_Gradient4 = 35,
    SurfaceType_Gradient5 = 36,
    SurfaceType_Gradient6 = 37,
    SurfaceType_Gradient7 = 38,
    SurfaceType_Gradient9 = 39,
    SurfaceType_Gradient10 = 40,
    SurfaceType_Gradient12 = 41,
    SurfaceType_Gradium = 42,
    SurfaceType_GridGradient = 43,
    SurfaceType_GridPhase = 44,
    SurfaceType_GridSag = 45,
    SurfaceType_Hologram1 = 46,
    SurfaceType_Hologram2 = 47,
    SurfaceType_Irregular = 48,
    SurfaceType_JonesMatrix = 49,
    SurfaceType_NonSequential = 50,
    SurfaceType_OddAsphere = 51,
    SurfaceType_OddCosine = 52,
    SurfaceType_OpticallyFabricatedHologram = 53,
    SurfaceType_Paraxial = 54,
    SurfaceType_ParaxialXY = 55,
    SurfaceType_Periodic = 56,
    SurfaceType_Polynomial = 57,
    SurfaceType_QTypeAsphere = 58,
    SurfaceType_RadialGrating = 59,
    SurfaceType_RadialNurbs = 60,
    SurfaceType_RetroReflect = 61,
    SurfaceType_SlideSurface = 62,
    SurfaceType_Standard = 63,
    SurfaceType_Superconic = 64,
    SurfaceType_Tilted = 65,
    SurfaceType_Toroidal = 66,
    SurfaceType_ToroidalGrat = 67,
    SurfaceType_ToroidalHologram = 68,
    SurfaceType_ToroidalNurbs = 69,
    SurfaceType_UserDefined = 70,
    SurfaceType_VariableLineSpaceGrating = 71,
    SurfaceType_ZernikeAnnularPhase = 72,
    SurfaceType_ZernikeFringePhase = 73,
    SurfaceType_ZernikeFringeSag = 74,
    SurfaceType_ZernikeStandardPhase = 75,
    SurfaceType_ZernikeStandardSag = 76,
    SurfaceType_ZonePlate = 77
};

enum __declspec(uuid("b85d7667-1422-4122-9c35-7c3ec76c11ff"))
SurfaceColumn
{
    SurfaceColumn_Comment = 1,
    SurfaceColumn_Radius = 2,
    SurfaceColumn_Thickness = 3,
    SurfaceColumn_Material = 4,
    SurfaceColumn_Coating = 5,
    SurfaceColumn_SemiDiameter = 6,
    SurfaceColumn_ChipZone = 7,
    SurfaceColumn_MechanicalSemiDiameter = 8,
    SurfaceColumn_Conic = 9,
    SurfaceColumn_TCE = 10,
    SurfaceColumn_Par0 = 11,
    SurfaceColumn_Par1 = 12,
    SurfaceColumn_Par2 = 13,
    SurfaceColumn_Par3 = 14,
    SurfaceColumn_Par4 = 15,
    SurfaceColumn_Par5 = 16,
    SurfaceColumn_Par6 = 17,
    SurfaceColumn_Par7 = 18,
    SurfaceColumn_Par8 = 19,
    SurfaceColumn_Par9 = 20,
    SurfaceColumn_Par10 = 21,
    SurfaceColumn_Par11 = 22,
    SurfaceColumn_Par12 = 23,
    SurfaceColumn_Par13 = 24,
    SurfaceColumn_Par14 = 25,
    SurfaceColumn_Par15 = 26,
    SurfaceColumn_Par16 = 27,
    SurfaceColumn_Par17 = 28,
    SurfaceColumn_Par18 = 29,
    SurfaceColumn_Par19 = 30,
    SurfaceColumn_Par20 = 31,
    SurfaceColumn_Par21 = 32,
    SurfaceColumn_Par22 = 33,
    SurfaceColumn_Par23 = 34,
    SurfaceColumn_Par24 = 35,
    SurfaceColumn_Par25 = 36,
    SurfaceColumn_Par26 = 37,
    SurfaceColumn_Par27 = 38,
    SurfaceColumn_Par28 = 39,
    SurfaceColumn_Par29 = 40,
    SurfaceColumn_Par30 = 41,
    SurfaceColumn_Par31 = 42,
    SurfaceColumn_Par32 = 43,
    SurfaceColumn_Par33 = 44,
    SurfaceColumn_Par34 = 45,
    SurfaceColumn_Par35 = 46,
    SurfaceColumn_Par36 = 47,
    SurfaceColumn_Par37 = 48,
    SurfaceColumn_Par38 = 49,
    SurfaceColumn_Par39 = 50,
    SurfaceColumn_Par40 = 51,
    SurfaceColumn_Par41 = 52,
    SurfaceColumn_Par42 = 53,
    SurfaceColumn_Par43 = 54,
    SurfaceColumn_Par44 = 55,
    SurfaceColumn_Par45 = 56,
    SurfaceColumn_Par46 = 57,
    SurfaceColumn_Par47 = 58,
    SurfaceColumn_Par48 = 59,
    SurfaceColumn_Par49 = 60,
    SurfaceColumn_Par50 = 61,
    SurfaceColumn_Par51 = 62,
    SurfaceColumn_Par52 = 63,
    SurfaceColumn_Par53 = 64,
    SurfaceColumn_Par54 = 65,
    SurfaceColumn_Par55 = 66,
    SurfaceColumn_Par56 = 67,
    SurfaceColumn_Par57 = 68,
    SurfaceColumn_Par58 = 69,
    SurfaceColumn_Par59 = 70,
    SurfaceColumn_Par60 = 71,
    SurfaceColumn_Par61 = 72,
    SurfaceColumn_Par62 = 73,
    SurfaceColumn_Par63 = 74,
    SurfaceColumn_Par64 = 75,
    SurfaceColumn_Par65 = 76,
    SurfaceColumn_Par66 = 77,
    SurfaceColumn_Par67 = 78,
    SurfaceColumn_Par68 = 79,
    SurfaceColumn_Par69 = 80,
    SurfaceColumn_Par70 = 81,
    SurfaceColumn_Par71 = 82,
    SurfaceColumn_Par72 = 83,
    SurfaceColumn_Par73 = 84,
    SurfaceColumn_Par74 = 85,
    SurfaceColumn_Par75 = 86,
    SurfaceColumn_Par76 = 87,
    SurfaceColumn_Par77 = 88,
    SurfaceColumn_Par78 = 89,
    SurfaceColumn_Par79 = 90,
    SurfaceColumn_Par80 = 91,
    SurfaceColumn_Par81 = 92,
    SurfaceColumn_Par82 = 93,
    SurfaceColumn_Par83 = 94,
    SurfaceColumn_Par84 = 95,
    SurfaceColumn_Par85 = 96,
    SurfaceColumn_Par86 = 97,
    SurfaceColumn_Par87 = 98,
    SurfaceColumn_Par88 = 99,
    SurfaceColumn_Par89 = 100,
    SurfaceColumn_Par90 = 101,
    SurfaceColumn_Par91 = 102,
    SurfaceColumn_Par92 = 103,
    SurfaceColumn_Par93 = 104,
    SurfaceColumn_Par94 = 105,
    SurfaceColumn_Par95 = 106,
    SurfaceColumn_Par96 = 107,
    SurfaceColumn_Par97 = 108,
    SurfaceColumn_Par98 = 109,
    SurfaceColumn_Par99 = 110,
    SurfaceColumn_Par100 = 111,
    SurfaceColumn_Par101 = 112,
    SurfaceColumn_Par102 = 113,
    SurfaceColumn_Par103 = 114,
    SurfaceColumn_Par104 = 115,
    SurfaceColumn_Par105 = 116,
    SurfaceColumn_Par106 = 117,
    SurfaceColumn_Par107 = 118,
    SurfaceColumn_Par108 = 119,
    SurfaceColumn_Par109 = 120,
    SurfaceColumn_Par110 = 121,
    SurfaceColumn_Par111 = 122,
    SurfaceColumn_Par112 = 123,
    SurfaceColumn_Par113 = 124,
    SurfaceColumn_Par114 = 125,
    SurfaceColumn_Par115 = 126,
    SurfaceColumn_Par116 = 127,
    SurfaceColumn_Par117 = 128,
    SurfaceColumn_Par118 = 129,
    SurfaceColumn_Par119 = 130,
    SurfaceColumn_Par120 = 131,
    SurfaceColumn_Par121 = 132,
    SurfaceColumn_Par122 = 133,
    SurfaceColumn_Par123 = 134,
    SurfaceColumn_Par124 = 135,
    SurfaceColumn_Par125 = 136,
    SurfaceColumn_Par126 = 137,
    SurfaceColumn_Par127 = 138,
    SurfaceColumn_Par128 = 139,
    SurfaceColumn_Par129 = 140,
    SurfaceColumn_Par130 = 141,
    SurfaceColumn_Par131 = 142,
    SurfaceColumn_Par132 = 143,
    SurfaceColumn_Par133 = 144,
    SurfaceColumn_Par134 = 145,
    SurfaceColumn_Par135 = 146,
    SurfaceColumn_Par136 = 147,
    SurfaceColumn_Par137 = 148,
    SurfaceColumn_Par138 = 149,
    SurfaceColumn_Par139 = 150,
    SurfaceColumn_Par140 = 151,
    SurfaceColumn_Par141 = 152,
    SurfaceColumn_Par142 = 153,
    SurfaceColumn_Par143 = 154,
    SurfaceColumn_Par144 = 155,
    SurfaceColumn_Par145 = 156,
    SurfaceColumn_Par146 = 157,
    SurfaceColumn_Par147 = 158,
    SurfaceColumn_Par148 = 159,
    SurfaceColumn_Par149 = 160,
    SurfaceColumn_Par150 = 161,
    SurfaceColumn_Par151 = 162,
    SurfaceColumn_Par152 = 163,
    SurfaceColumn_Par153 = 164,
    SurfaceColumn_Par154 = 165,
    SurfaceColumn_Par155 = 166,
    SurfaceColumn_Par156 = 167,
    SurfaceColumn_Par157 = 168,
    SurfaceColumn_Par158 = 169,
    SurfaceColumn_Par159 = 170,
    SurfaceColumn_Par160 = 171,
    SurfaceColumn_Par161 = 172,
    SurfaceColumn_Par162 = 173,
    SurfaceColumn_Par163 = 174,
    SurfaceColumn_Par164 = 175,
    SurfaceColumn_Par165 = 176,
    SurfaceColumn_Par166 = 177,
    SurfaceColumn_Par167 = 178,
    SurfaceColumn_Par168 = 179,
    SurfaceColumn_Par169 = 180,
    SurfaceColumn_Par170 = 181,
    SurfaceColumn_Par171 = 182,
    SurfaceColumn_Par172 = 183,
    SurfaceColumn_Par173 = 184,
    SurfaceColumn_Par174 = 185,
    SurfaceColumn_Par175 = 186,
    SurfaceColumn_Par176 = 187,
    SurfaceColumn_Par177 = 188,
    SurfaceColumn_Par178 = 189,
    SurfaceColumn_Par179 = 190,
    SurfaceColumn_Par180 = 191,
    SurfaceColumn_Par181 = 192,
    SurfaceColumn_Par182 = 193,
    SurfaceColumn_Par183 = 194,
    SurfaceColumn_Par184 = 195,
    SurfaceColumn_Par185 = 196,
    SurfaceColumn_Par186 = 197,
    SurfaceColumn_Par187 = 198,
    SurfaceColumn_Par188 = 199,
    SurfaceColumn_Par189 = 200,
    SurfaceColumn_Par190 = 201,
    SurfaceColumn_Par191 = 202,
    SurfaceColumn_Par192 = 203,
    SurfaceColumn_Par193 = 204,
    SurfaceColumn_Par194 = 205,
    SurfaceColumn_Par195 = 206,
    SurfaceColumn_Par196 = 207,
    SurfaceColumn_Par197 = 208,
    SurfaceColumn_Par198 = 209,
    SurfaceColumn_Par199 = 210,
    SurfaceColumn_Par200 = 211,
    SurfaceColumn_Par201 = 212,
    SurfaceColumn_Par202 = 213,
    SurfaceColumn_Par203 = 214,
    SurfaceColumn_Par204 = 215,
    SurfaceColumn_Par205 = 216,
    SurfaceColumn_Par206 = 217,
    SurfaceColumn_Par207 = 218,
    SurfaceColumn_Par208 = 219,
    SurfaceColumn_Par209 = 220,
    SurfaceColumn_Par210 = 221,
    SurfaceColumn_Par211 = 222,
    SurfaceColumn_Par212 = 223,
    SurfaceColumn_Par213 = 224,
    SurfaceColumn_Par214 = 225,
    SurfaceColumn_Par215 = 226,
    SurfaceColumn_Par216 = 227,
    SurfaceColumn_Par217 = 228,
    SurfaceColumn_Par218 = 229,
    SurfaceColumn_Par219 = 230,
    SurfaceColumn_Par220 = 231,
    SurfaceColumn_Par221 = 232,
    SurfaceColumn_Par222 = 233,
    SurfaceColumn_Par223 = 234,
    SurfaceColumn_Par224 = 235,
    SurfaceColumn_Par225 = 236,
    SurfaceColumn_Par226 = 237,
    SurfaceColumn_Par227 = 238,
    SurfaceColumn_Par228 = 239,
    SurfaceColumn_Par229 = 240,
    SurfaceColumn_Par230 = 241,
    SurfaceColumn_Par231 = 242,
    SurfaceColumn_Par232 = 243,
    SurfaceColumn_Par233 = 244,
    SurfaceColumn_Par234 = 245,
    SurfaceColumn_Par235 = 246,
    SurfaceColumn_Par236 = 247,
    SurfaceColumn_Par237 = 248,
    SurfaceColumn_Par238 = 249,
    SurfaceColumn_Par239 = 250,
    SurfaceColumn_Par240 = 251,
    SurfaceColumn_Par241 = 252,
    SurfaceColumn_Par242 = 253,
    SurfaceColumn_Par243 = 254,
    SurfaceColumn_Par244 = 255,
    SurfaceColumn_Par245 = 256,
    SurfaceColumn_Par246 = 257,
    SurfaceColumn_Par247 = 258,
    SurfaceColumn_Par248 = 259,
    SurfaceColumn_Par249 = 260,
    SurfaceColumn_Par250 = 261,
    SurfaceColumn_Par251 = 262,
    SurfaceColumn_Par252 = 263,
    SurfaceColumn_Par253 = 264,
    SurfaceColumn_Par254 = 265
};

struct __declspec(uuid("273c96e7-63c2-4d9f-85c7-100cb439c5bb"))
ISolveSurfacePickup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSurface,put=PutSurface))
    long Surface;
    __declspec(property(get=GetScaleFactor,put=PutScaleFactor))
    double ScaleFactor;
    __declspec(property(get=GetSupportsScale))
    VARIANT_BOOL SupportsScale;
    __declspec(property(get=GetOffset,put=PutOffset))
    double Offset;
    __declspec(property(get=GetSupportsOffset))
    VARIANT_BOOL SupportsOffset;
    __declspec(property(get=GetColumn,put=PutColumn))
    enum SurfaceColumn Column;

    //
    // Wrapper methods for error-handling
    //

    long GetSurface ( );
    void PutSurface (
        long pRetVal );
    double GetScaleFactor ( );
    void PutScaleFactor (
        double pRetVal );
    VARIANT_BOOL GetSupportsScale ( );
    double GetOffset ( );
    void PutOffset (
        double pRetVal );
    VARIANT_BOOL GetSupportsOffset ( );
    enum SurfaceColumn GetColumn ( );
    void PutColumn (
        enum SurfaceColumn pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Surface (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Surface (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_ScaleFactor (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ScaleFactor (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_SupportsScale (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Offset (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Offset (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_SupportsOffset (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Column (
        /*[out,retval]*/ enum SurfaceColumn * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Column (
        /*[in]*/ enum SurfaceColumn pRetVal ) = 0;
};

struct __declspec(uuid("455604cf-7550-42af-8724-7fbb8b8492f7"))
ISolveData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetType))
    enum SolveType Type;
    __declspec(property(get=Get_S_None))
    ISolveNonePtr _S_None;
    __declspec(property(get=Get_S_Fixed))
    ISolveFixedPtr _S_Fixed;
    __declspec(property(get=Get_S_Variable))
    ISolveVariablePtr _S_Variable;
    __declspec(property(get=Get_S_SurfacePickup))
    ISolveSurfacePickupPtr _S_SurfacePickup;
    __declspec(property(get=Get_S_ZPLMacro))
    ISolveZPLMacroPtr _S_ZPLMacro;
    __declspec(property(get=Get_S_MarginalRayAngle))
    ISolveMarginalRayAnglePtr _S_MarginalRayAngle;
    __declspec(property(get=Get_S_MarginalRayHeight))
    ISolveMarginalRayHeightPtr _S_MarginalRayHeight;
    __declspec(property(get=Get_S_ChiefRayAngle))
    ISolveChiefRayAnglePtr _S_ChiefRayAngle;
    __declspec(property(get=Get_S_MarginalRayNormal))
    ISolveMarginalRayNormalPtr _S_MarginalRayNormal;
    __declspec(property(get=Get_S_ChiefRayNormal))
    ISolveChiefRayNormalPtr _S_ChiefRayNormal;
    __declspec(property(get=Get_S_Aplanatic))
    ISolveAplanaticPtr _S_Aplanatic;
    __declspec(property(get=Get_S_ElementPower))
    ISolveElementPowerPtr _S_ElementPower;
    __declspec(property(get=Get_S_CocentricSurface))
    ISolveCocentricSurfacePtr _S_CocentricSurface;
    __declspec(property(get=Get_S_CocentricRadius))
    ISolveCocentricRadiusPtr _S_CocentricRadius;
    __declspec(property(get=Get_S_FNumber))
    ISolveFNumberPtr _S_FNumber;
    __declspec(property(get=Get_S_ChiefRayHeight))
    ISolveChiefRayHeightPtr _S_ChiefRayHeight;
    __declspec(property(get=Get_S_EdgeThickness))
    ISolveEdgeThicknessPtr _S_EdgeThickness;
    __declspec(property(get=Get_S_OpticalPathDifference))
    ISolveOpticalPathDifferencePtr _S_OpticalPathDifference;
    __declspec(property(get=Get_S_Position))
    ISolvePositionPtr _S_Position;
    __declspec(property(get=Get_S_Compensator))
    ISolveCompensatorPtr _S_Compensator;
    __declspec(property(get=Get_S_CenterOfCurvature))
    ISolveCenterOfCurvaturePtr _S_CenterOfCurvature;
    __declspec(property(get=Get_S_PupilPosition))
    ISolvePupilPositionPtr _S_PupilPosition;
    __declspec(property(get=Get_S_MaterialModel))
    ISolveMaterialModelPtr _S_MaterialModel;
    __declspec(property(get=Get_S_MaterialSubstitute))
    ISolveMaterialSubstitutePtr _S_MaterialSubstitute;
    __declspec(property(get=Get_S_MaterialOffset))
    ISolveMaterialOffsetPtr _S_MaterialOffset;
    __declspec(property(get=Get_S_Automatic))
    ISolveAutomaticPtr _S_Automatic;
    __declspec(property(get=Get_S_Maximum))
    ISolveMaximumPtr _S_Maximum;
    __declspec(property(get=Get_S_PickupChiefRay))
    ISolvePickupChiefRayPtr _S_PickupChiefRay;
    __declspec(property(get=Get_S_ObjectPickup))
    ISolveObjectPickupPtr _S_ObjectPickup;
    __declspec(property(get=Get_S_ConfigPickup))
    ISolveConfigPickupPtr _S_ConfigPickup;
    __declspec(property(get=Get_S_ThermalPickup))
    ISolveThermalPickupPtr _S_ThermalPickup;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    enum SolveType GetType ( );
    ISolveNonePtr Get_S_None ( );
    ISolveFixedPtr Get_S_Fixed ( );
    ISolveVariablePtr Get_S_Variable ( );
    ISolveSurfacePickupPtr Get_S_SurfacePickup ( );
    ISolveZPLMacroPtr Get_S_ZPLMacro ( );
    ISolveMarginalRayAnglePtr Get_S_MarginalRayAngle ( );
    ISolveMarginalRayHeightPtr Get_S_MarginalRayHeight ( );
    ISolveChiefRayAnglePtr Get_S_ChiefRayAngle ( );
    ISolveMarginalRayNormalPtr Get_S_MarginalRayNormal ( );
    ISolveChiefRayNormalPtr Get_S_ChiefRayNormal ( );
    ISolveAplanaticPtr Get_S_Aplanatic ( );
    ISolveElementPowerPtr Get_S_ElementPower ( );
    ISolveCocentricSurfacePtr Get_S_CocentricSurface ( );
    ISolveCocentricRadiusPtr Get_S_CocentricRadius ( );
    ISolveFNumberPtr Get_S_FNumber ( );
    ISolveChiefRayHeightPtr Get_S_ChiefRayHeight ( );
    ISolveEdgeThicknessPtr Get_S_EdgeThickness ( );
    ISolveOpticalPathDifferencePtr Get_S_OpticalPathDifference ( );
    ISolvePositionPtr Get_S_Position ( );
    ISolveCompensatorPtr Get_S_Compensator ( );
    ISolveCenterOfCurvaturePtr Get_S_CenterOfCurvature ( );
    ISolvePupilPositionPtr Get_S_PupilPosition ( );
    ISolveMaterialModelPtr Get_S_MaterialModel ( );
    ISolveMaterialSubstitutePtr Get_S_MaterialSubstitute ( );
    ISolveMaterialOffsetPtr Get_S_MaterialOffset ( );
    ISolveAutomaticPtr Get_S_Automatic ( );
    ISolveMaximumPtr Get_S_Maximum ( );
    ISolvePickupChiefRayPtr Get_S_PickupChiefRay ( );
    ISolveObjectPickupPtr Get_S_ObjectPickup ( );
    ISolveConfigPickupPtr Get_S_ConfigPickup ( );
    ISolveThermalPickupPtr Get_S_ThermalPickup ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum SolveType * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_None (
        /*[out,retval]*/ struct ISolveNone * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_Fixed (
        /*[out,retval]*/ struct ISolveFixed * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_Variable (
        /*[out,retval]*/ struct ISolveVariable * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_SurfacePickup (
        /*[out,retval]*/ struct ISolveSurfacePickup * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_ZPLMacro (
        /*[out,retval]*/ struct ISolveZPLMacro * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_MarginalRayAngle (
        /*[out,retval]*/ struct ISolveMarginalRayAngle * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_MarginalRayHeight (
        /*[out,retval]*/ struct ISolveMarginalRayHeight * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_ChiefRayAngle (
        /*[out,retval]*/ struct ISolveChiefRayAngle * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_MarginalRayNormal (
        /*[out,retval]*/ struct ISolveMarginalRayNormal * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_ChiefRayNormal (
        /*[out,retval]*/ struct ISolveChiefRayNormal * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_Aplanatic (
        /*[out,retval]*/ struct ISolveAplanatic * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_ElementPower (
        /*[out,retval]*/ struct ISolveElementPower * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_CocentricSurface (
        /*[out,retval]*/ struct ISolveCocentricSurface * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_CocentricRadius (
        /*[out,retval]*/ struct ISolveCocentricRadius * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_FNumber (
        /*[out,retval]*/ struct ISolveFNumber * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_ChiefRayHeight (
        /*[out,retval]*/ struct ISolveChiefRayHeight * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_EdgeThickness (
        /*[out,retval]*/ struct ISolveEdgeThickness * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_OpticalPathDifference (
        /*[out,retval]*/ struct ISolveOpticalPathDifference * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_Position (
        /*[out,retval]*/ struct ISolvePosition * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_Compensator (
        /*[out,retval]*/ struct ISolveCompensator * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_CenterOfCurvature (
        /*[out,retval]*/ struct ISolveCenterOfCurvature * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_PupilPosition (
        /*[out,retval]*/ struct ISolvePupilPosition * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_MaterialModel (
        /*[out,retval]*/ struct ISolveMaterialModel * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_MaterialSubstitute (
        /*[out,retval]*/ struct ISolveMaterialSubstitute * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_MaterialOffset (
        /*[out,retval]*/ struct ISolveMaterialOffset * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_Automatic (
        /*[out,retval]*/ struct ISolveAutomatic * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_Maximum (
        /*[out,retval]*/ struct ISolveMaximum * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_PickupChiefRay (
        /*[out,retval]*/ struct ISolvePickupChiefRay * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_ObjectPickup (
        /*[out,retval]*/ struct ISolveObjectPickup * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_ConfigPickup (
        /*[out,retval]*/ struct ISolveConfigPickup * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_ThermalPickup (
        /*[out,retval]*/ struct ISolveThermalPickup * * pRetVal ) = 0;
};

enum __declspec(uuid("75a23d3d-cc56-430f-b3fa-84073d4e3822"))
ConversionOrder
{
    ConversionOrder_Forward = 0,
    ConversionOrder_Reverse = 1
};

enum __declspec(uuid("2651d8d5-cd53-4eee-b03c-a2051a20b778"))
InterpolationMethod
{
    InterpolationMethod_BicubicSpline = 0,
    InterpolationMethod_Linear = 1
};

enum __declspec(uuid("faa54fde-f41f-4c4b-99ca-2ff43d778cce"))
QTypes
{
    QTypes_Qbfs = 0,
    QTypes_Qcon = 1
};

enum __declspec(uuid("e1d4fa0d-9d36-4c02-bb95-a72e8a6d5b58"))
CoordinateConversionResult
{
    CoordinateConversionResult_Success = 0,
    CoordinateConversionResult_Error_InvalidRange = -1,
    CoordinateConversionResult_Error_CoordianteBreak = -2,
    CoordinateConversionResult_Error_IgnoredSurface = -3,
    CoordinateConversionResult_Error_TiltDecenter = -4,
    CoordinateConversionResult_Error_MultiConfig = -5
};

enum __declspec(uuid("7c31b4a2-6dde-426b-acd1-6ca9d9403cd4"))
PupilApodizationType
{
    PupilApodizationType_None = 0,
    PupilApodizationType_Gaussian = 1,
    PupilApodizationType_Tangential = 2
};

struct __declspec(uuid("fd772d17-ca89-417d-a292-51f448bde81f"))
ISurfaceTypeSettings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetType))
    enum SurfaceType Type;
    __declspec(property(get=GetRequiresFile))
    VARIANT_BOOL RequiresFile;
    __declspec(property(get=GetfileName,put=PutfileName))
    _bstr_t fileName;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    enum SurfaceType GetType ( );
    VARIANT_BOOL GetRequiresFile ( );
    _bstr_t GetfileName ( );
    void PutfileName (
        _bstr_t pRetVal );
    SAFEARRAY * GetFileNames ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum SurfaceType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RequiresFile (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_fileName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_fileName (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetFileNames (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
};

struct __declspec(uuid("ca5f5e13-ed59-4e80-9375-d93de6bd1981"))
ISurfaceStandard : IDispatch
{};

struct __declspec(uuid("a6195fdb-56fe-4e67-b64b-e5fc6526fe59"))
ISurfaceAlternateEven : IDispatch
{};

struct __declspec(uuid("7014f570-7e9b-4360-b326-5cbae6c63923"))
ISurfaceAlternateOdd : IDispatch
{};

struct __declspec(uuid("be3a6768-2025-41c5-9619-dcc35e290b2f"))
ISurfaceBlackBoxLens : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNumberOfAvailableBlackBoxLensFilenames))
    long NumberOfAvailableBlackBoxLensFilenames;
    __declspec(property(get=GetBlackBoxLensFilename,put=PutBlackBoxLensFilename))
    _bstr_t BlackBoxLensFilename;

    //
    // Wrapper methods for error-handling
    //

    long GetNumberOfAvailableBlackBoxLensFilenames ( );
    _bstr_t GetBlackBoxLensFilenameAt (
        long idx );
    _bstr_t GetBlackBoxLensFilename ( );
    void PutBlackBoxLensFilename (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NumberOfAvailableBlackBoxLensFilenames (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetBlackBoxLensFilenameAt (
        /*[in]*/ long idx,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_BlackBoxLensFilename (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BlackBoxLensFilename (
        /*[in]*/ BSTR pRetVal ) = 0;
};

struct __declspec(uuid("5127f082-f2be-45ad-8c01-38b62b276047"))
ISurfaceEvenAspheric : IDispatch
{};

struct __declspec(uuid("f9b4bed3-b199-48de-8424-e92253c75aef"))
ISurfaceFresnel : IDispatch
{};

struct __declspec(uuid("55f85aed-64ef-4ff8-a434-32ec54adf6be"))
ISurfaceOddAsphere : IDispatch
{};

struct __declspec(uuid("5b23531c-ec42-4632-a63e-ef8b7beaf336"))
ISurfacePolynomial : IDispatch
{};

struct __declspec(uuid("f353b11d-a685-4e86-8855-0305b1cc8680"))
ISurfaceRetroReflect : IDispatch
{};

enum __declspec(uuid("a7476488-250b-489b-bfb1-30cad1fd5450"))
SurfaceEdgeDraw
{
    SurfaceEdgeDraw_Squared = 0,
    SurfaceEdgeDraw_Tapered = 1,
    SurfaceEdgeDraw_Flat = 2
};

enum __declspec(uuid("bab8fe65-7a3f-47fe-89ca-19ad18efc076"))
SubstrateType
{
    SubstrateType_None = 0,
    SubstrateType_Flat = 1,
    SubstrateType_Curved = 2
};

struct __declspec(uuid("d7a6a815-bb18-4a8a-83f7-2d99611b9bfb"))
ILDEDrawData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHideRaysToThisSurface,put=PutHideRaysToThisSurface))
    VARIANT_BOOL HideRaysToThisSurface;
    __declspec(property(get=GetSkipRaysToThisSurface,put=PutSkipRaysToThisSurface))
    VARIANT_BOOL SkipRaysToThisSurface;
    __declspec(property(get=GetDoNotDrawThisSurface,put=PutDoNotDrawThisSurface))
    VARIANT_BOOL DoNotDrawThisSurface;
    __declspec(property(get=GetDoNotDrawEdgesFromThisSurface,put=PutDoNotDrawEdgesFromThisSurface))
    VARIANT_BOOL DoNotDrawEdgesFromThisSurface;
    __declspec(property(get=GetDrawLocalAxis,put=PutDrawLocalAxis))
    VARIANT_BOOL DrawLocalAxis;
    __declspec(property(get=GetDrawEdgesAs,put=PutDrawEdgesAs))
    enum SurfaceEdgeDraw DrawEdgesAs;
    __declspec(property(get=GetHasMirrorSettings))
    VARIANT_BOOL HasMirrorSettings;
    __declspec(property(get=GetMirrorSubstrate,put=PutMirrorSubstrate))
    enum SubstrateType MirrorSubstrate;
    __declspec(property(get=GetMirrorThickness,put=PutMirrorThickness))
    double MirrorThickness;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetHideRaysToThisSurface ( );
    void PutHideRaysToThisSurface (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetSkipRaysToThisSurface ( );
    void PutSkipRaysToThisSurface (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetDoNotDrawThisSurface ( );
    void PutDoNotDrawThisSurface (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetDoNotDrawEdgesFromThisSurface ( );
    void PutDoNotDrawEdgesFromThisSurface (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetDrawLocalAxis ( );
    void PutDrawLocalAxis (
        VARIANT_BOOL pRetVal );
    enum SurfaceEdgeDraw GetDrawEdgesAs ( );
    void PutDrawEdgesAs (
        enum SurfaceEdgeDraw pRetVal );
    VARIANT_BOOL GetHasMirrorSettings ( );
    enum SubstrateType GetMirrorSubstrate ( );
    void PutMirrorSubstrate (
        enum SubstrateType pRetVal );
    double GetMirrorThickness ( );
    void PutMirrorThickness (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_HideRaysToThisSurface (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_HideRaysToThisSurface (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_SkipRaysToThisSurface (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SkipRaysToThisSurface (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_DoNotDrawThisSurface (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DoNotDrawThisSurface (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_DoNotDrawEdgesFromThisSurface (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DoNotDrawEdgesFromThisSurface (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_DrawLocalAxis (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DrawLocalAxis (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_DrawEdgesAs (
        /*[out,retval]*/ enum SurfaceEdgeDraw * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DrawEdgesAs (
        /*[in]*/ enum SurfaceEdgeDraw pRetVal ) = 0;
      virtual HRESULT __stdcall get_HasMirrorSettings (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MirrorSubstrate (
        /*[out,retval]*/ enum SubstrateType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MirrorSubstrate (
        /*[in]*/ enum SubstrateType pRetVal ) = 0;
      virtual HRESULT __stdcall get_MirrorThickness (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MirrorThickness (
        /*[in]*/ double pRetVal ) = 0;
};

enum __declspec(uuid("a2a10775-e99a-4c42-8299-4cff201292bd"))
SurfaceApertureTypes
{
    SurfaceApertureTypes_None = 0,
    SurfaceApertureTypes_CircularAperture = 1,
    SurfaceApertureTypes_CircularObscuration = 2,
    SurfaceApertureTypes_Spider = 3,
    SurfaceApertureTypes_RectangularAperture = 4,
    SurfaceApertureTypes_RectangularObscuration = 5,
    SurfaceApertureTypes_EllipticalAperture = 6,
    SurfaceApertureTypes_EllipticalObscuration = 7,
    SurfaceApertureTypes_UserAperture = 8,
    SurfaceApertureTypes_UserObscuration = 9,
    SurfaceApertureTypes_FloatingAperture = 10
};

struct __declspec(uuid("121ce465-077c-4e65-807b-c0bdb12b7d57"))
ISurfaceApertureNone : IDispatch
{};

struct __declspec(uuid("ccaae35d-ae2a-4964-ad2b-50627010f8c8"))
ISurfaceApertureCircular : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMinimumRadius,put=PutMinimumRadius))
    double MinimumRadius;
    __declspec(property(get=GetMaximumRadius,put=PutMaximumRadius))
    double MaximumRadius;
    __declspec(property(get=GetApertureXDecenter,put=PutApertureXDecenter))
    double ApertureXDecenter;
    __declspec(property(get=GetApertureYDecenter,put=PutApertureYDecenter))
    double ApertureYDecenter;

    //
    // Wrapper methods for error-handling
    //

    double GetMinimumRadius ( );
    void PutMinimumRadius (
        double pRetVal );
    double GetMaximumRadius ( );
    void PutMaximumRadius (
        double pRetVal );
    double GetApertureXDecenter ( );
    void PutApertureXDecenter (
        double pRetVal );
    double GetApertureYDecenter ( );
    void PutApertureYDecenter (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MinimumRadius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MinimumRadius (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumRadius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaximumRadius (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ApertureXDecenter (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ApertureXDecenter (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ApertureYDecenter (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ApertureYDecenter (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("a6e2842e-5ace-4e68-b475-c00bca74f1e9"))
ISurfaceApertureUser : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUDAScale,put=PutUDAScale))
    double UDAScale;
    __declspec(property(get=GetApertureXDecenter,put=PutApertureXDecenter))
    double ApertureXDecenter;
    __declspec(property(get=GetApertureYDecenter,put=PutApertureYDecenter))
    double ApertureYDecenter;
    __declspec(property(get=GetApertureFile,put=PutApertureFile))
    _bstr_t ApertureFile;

    //
    // Wrapper methods for error-handling
    //

    double GetUDAScale ( );
    void PutUDAScale (
        double pRetVal );
    double GetApertureXDecenter ( );
    void PutApertureXDecenter (
        double pRetVal );
    double GetApertureYDecenter ( );
    void PutApertureYDecenter (
        double pRetVal );
    _bstr_t GetApertureFile ( );
    void PutApertureFile (
        _bstr_t pRetVal );
    SAFEARRAY * GetAvailableFiles ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UDAScale (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UDAScale (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ApertureXDecenter (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ApertureXDecenter (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ApertureYDecenter (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ApertureYDecenter (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ApertureFile (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ApertureFile (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailableFiles (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
};

struct __declspec(uuid("8be6c8aa-543b-4b54-b33f-7b27b49668e0"))
ISurfaceApertureSpider : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetWidthOfArms,put=PutWidthOfArms))
    double WidthOfArms;
    __declspec(property(get=GetNumberOfArms,put=PutNumberOfArms))
    long NumberOfArms;
    __declspec(property(get=GetApertureXDecenter,put=PutApertureXDecenter))
    double ApertureXDecenter;
    __declspec(property(get=GetApertureYDecenter,put=PutApertureYDecenter))
    double ApertureYDecenter;

    //
    // Wrapper methods for error-handling
    //

    double GetWidthOfArms ( );
    void PutWidthOfArms (
        double pRetVal );
    long GetNumberOfArms ( );
    void PutNumberOfArms (
        long pRetVal );
    double GetApertureXDecenter ( );
    void PutApertureXDecenter (
        double pRetVal );
    double GetApertureYDecenter ( );
    void PutApertureYDecenter (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_WidthOfArms (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_WidthOfArms (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfArms (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfArms (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_ApertureXDecenter (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ApertureXDecenter (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ApertureYDecenter (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ApertureYDecenter (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("e4ece7a6-63cb-474b-854d-51c168845ea2"))
ISurfaceApertureRectangular : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetXHalfWidth,put=PutXHalfWidth))
    double XHalfWidth;
    __declspec(property(get=GetYHalfWidth,put=PutYHalfWidth))
    double YHalfWidth;
    __declspec(property(get=GetApertureXDecenter,put=PutApertureXDecenter))
    double ApertureXDecenter;
    __declspec(property(get=GetApertureYDecenter,put=PutApertureYDecenter))
    double ApertureYDecenter;

    //
    // Wrapper methods for error-handling
    //

    double GetXHalfWidth ( );
    void PutXHalfWidth (
        double pRetVal );
    double GetYHalfWidth ( );
    void PutYHalfWidth (
        double pRetVal );
    double GetApertureXDecenter ( );
    void PutApertureXDecenter (
        double pRetVal );
    double GetApertureYDecenter ( );
    void PutApertureYDecenter (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_XHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ApertureXDecenter (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ApertureXDecenter (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ApertureYDecenter (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ApertureYDecenter (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("af23adf0-e641-43af-b054-a27dd333f357"))
ISurfaceApertureElliptical : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetXHalfWidth,put=PutXHalfWidth))
    double XHalfWidth;
    __declspec(property(get=GetYHalfWidth,put=PutYHalfWidth))
    double YHalfWidth;
    __declspec(property(get=GetApertureXDecenter,put=PutApertureXDecenter))
    double ApertureXDecenter;
    __declspec(property(get=GetApertureYDecenter,put=PutApertureYDecenter))
    double ApertureYDecenter;

    //
    // Wrapper methods for error-handling
    //

    double GetXHalfWidth ( );
    void PutXHalfWidth (
        double pRetVal );
    double GetYHalfWidth ( );
    void PutYHalfWidth (
        double pRetVal );
    double GetApertureXDecenter ( );
    void PutApertureXDecenter (
        double pRetVal );
    double GetApertureYDecenter ( );
    void PutApertureYDecenter (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_XHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ApertureXDecenter (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ApertureXDecenter (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ApertureYDecenter (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ApertureYDecenter (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("041c78b9-c959-4788-81e4-295647d14c9b"))
ISurfaceApertureFloating : IDispatch
{};

struct __declspec(uuid("22c145ff-5289-4675-859e-7e182a342965"))
ISurfaceApertureType : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum SurfaceApertureTypes Type;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=Get_S_None))
    ISurfaceApertureNonePtr _S_None;
    __declspec(property(get=Get_S_CircularAperture))
    ISurfaceApertureCircularPtr _S_CircularAperture;
    __declspec(property(get=Get_S_CircularObscuration))
    ISurfaceApertureCircularPtr _S_CircularObscuration;
    __declspec(property(get=Get_S_Spider))
    ISurfaceApertureSpiderPtr _S_Spider;
    __declspec(property(get=Get_S_RectangularAperture))
    ISurfaceApertureRectangularPtr _S_RectangularAperture;
    __declspec(property(get=Get_S_RectangularObscuration))
    ISurfaceApertureRectangularPtr _S_RectangularObscuration;
    __declspec(property(get=Get_S_EllipticalAperture))
    ISurfaceApertureEllipticalPtr _S_EllipticalAperture;
    __declspec(property(get=Get_S_EllipticalObscuration))
    ISurfaceApertureEllipticalPtr _S_EllipticalObscuration;
    __declspec(property(get=Get_S_UserAperture))
    ISurfaceApertureUserPtr _S_UserAperture;
    __declspec(property(get=Get_S_UserObscuration))
    ISurfaceApertureUserPtr _S_UserObscuration;
    __declspec(property(get=Get_S_FloatingAperture))
    ISurfaceApertureFloatingPtr _S_FloatingAperture;

    //
    // Wrapper methods for error-handling
    //

    enum SurfaceApertureTypes GetType ( );
    VARIANT_BOOL GetIsReadOnly ( );
    ISurfaceApertureNonePtr Get_S_None ( );
    ISurfaceApertureCircularPtr Get_S_CircularAperture ( );
    ISurfaceApertureCircularPtr Get_S_CircularObscuration ( );
    ISurfaceApertureSpiderPtr Get_S_Spider ( );
    ISurfaceApertureRectangularPtr Get_S_RectangularAperture ( );
    ISurfaceApertureRectangularPtr Get_S_RectangularObscuration ( );
    ISurfaceApertureEllipticalPtr Get_S_EllipticalAperture ( );
    ISurfaceApertureEllipticalPtr Get_S_EllipticalObscuration ( );
    ISurfaceApertureUserPtr Get_S_UserAperture ( );
    ISurfaceApertureUserPtr Get_S_UserObscuration ( );
    ISurfaceApertureFloatingPtr Get_S_FloatingAperture ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum SurfaceApertureTypes * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_None (
        /*[out,retval]*/ struct ISurfaceApertureNone * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_CircularAperture (
        /*[out,retval]*/ struct ISurfaceApertureCircular * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_CircularObscuration (
        /*[out,retval]*/ struct ISurfaceApertureCircular * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_Spider (
        /*[out,retval]*/ struct ISurfaceApertureSpider * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_RectangularAperture (
        /*[out,retval]*/ struct ISurfaceApertureRectangular * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_RectangularObscuration (
        /*[out,retval]*/ struct ISurfaceApertureRectangular * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_EllipticalAperture (
        /*[out,retval]*/ struct ISurfaceApertureElliptical * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_EllipticalObscuration (
        /*[out,retval]*/ struct ISurfaceApertureElliptical * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_UserAperture (
        /*[out,retval]*/ struct ISurfaceApertureUser * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_UserObscuration (
        /*[out,retval]*/ struct ISurfaceApertureUser * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_FloatingAperture (
        /*[out,retval]*/ struct ISurfaceApertureFloating * * pRetVal ) = 0;
};

struct __declspec(uuid("727c3391-398e-4ef3-9045-a58d5ff1028e"))
ILDEApertureData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPickupFrom,put=PutPickupFrom))
    long PickupFrom;
    __declspec(property(get=GetIsPickedUp))
    VARIANT_BOOL IsPickedUp;
    __declspec(property(get=GetCurrentType))
    enum SurfaceApertureTypes CurrentType;
    __declspec(property(get=GetCurrentTypeSettings))
    ISurfaceApertureTypePtr CurrentTypeSettings;
    __declspec(property(get=GetDisableClearSemiDiameterMarginsForThisSurface,put=PutDisableClearSemiDiameterMarginsForThisSurface))
    VARIANT_BOOL DisableClearSemiDiameterMarginsForThisSurface;

    //
    // Wrapper methods for error-handling
    //

    long GetPickupFrom ( );
    void PutPickupFrom (
        long pRetVal );
    HRESULT SetPickupNone ( );
    VARIANT_BOOL GetIsPickedUp ( );
    enum SurfaceApertureTypes GetCurrentType ( );
    ISurfaceApertureTypePtr GetCurrentTypeSettings ( );
    ISurfaceApertureTypePtr CreateApertureTypeSettings (
        enum SurfaceApertureTypes Type );
    VARIANT_BOOL ChangeApertureTypeSettings (
        struct ISurfaceApertureType * settings );
    VARIANT_BOOL GetDisableClearSemiDiameterMarginsForThisSurface ( );
    void PutDisableClearSemiDiameterMarginsForThisSurface (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PickupFrom (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PickupFrom (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetPickupNone ( ) = 0;
      virtual HRESULT __stdcall get_IsPickedUp (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CurrentType (
        /*[out,retval]*/ enum SurfaceApertureTypes * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CurrentTypeSettings (
        /*[out,retval]*/ struct ISurfaceApertureType * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateApertureTypeSettings (
        /*[in]*/ enum SurfaceApertureTypes Type,
        /*[out,retval]*/ struct ISurfaceApertureType * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ChangeApertureTypeSettings (
        /*[in]*/ struct ISurfaceApertureType * settings,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisableClearSemiDiameterMarginsForThisSurface (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DisableClearSemiDiameterMarginsForThisSurface (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

enum __declspec(uuid("f71db2c8-b43c-48d4-80a7-8fdf688ea112"))
SurfaceScatteringTypes
{
    SurfaceScatteringTypes_None = 0,
    SurfaceScatteringTypes_Lambertian = 1,
    SurfaceScatteringTypes_Gaussian = 2,
    SurfaceScatteringTypes_ABg = 3,
    SurfaceScatteringTypes_ABgFile = 4,
    SurfaceScatteringTypes_BSDF = 5,
    SurfaceScatteringTypes_User = 6,
    SurfaceScatteringTypes_ISScatterCatalog = 7
};

struct __declspec(uuid("e783e16f-0674-4638-81c9-d6f9bcf19b64"))
ISurfaceScatteringNone : IDispatch
{};

struct __declspec(uuid("0595d2ee-f1d1-41a4-bd67-28543cf7c1a3"))
ISurfaceScatteringLambertian : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetScatterFraction,put=PutScatterFraction))
    double ScatterFraction;

    //
    // Wrapper methods for error-handling
    //

    double GetScatterFraction ( );
    void PutScatterFraction (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ScatterFraction (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ScatterFraction (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("4bdd3e74-b63c-415e-936b-2cc27bbda53c"))
ISurfaceScatteringGaussian : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetScatterFraction,put=PutScatterFraction))
    double ScatterFraction;
    __declspec(property(get=GetSigma,put=PutSigma))
    double Sigma;

    //
    // Wrapper methods for error-handling
    //

    double GetScatterFraction ( );
    void PutScatterFraction (
        double pRetVal );
    double GetSigma ( );
    void PutSigma (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ScatterFraction (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ScatterFraction (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Sigma (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Sigma (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("84385ea1-84d8-4fa0-aeae-11f5bacc0ada"))
ISurfaceScatteringABg : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetABgName,put=PutABgName))
    _bstr_t ABgName;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetABgName ( );
    void PutABgName (
        _bstr_t pRetVal );
    SAFEARRAY * GetAvailableABgNames ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ABgName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ABgName (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailableABgNames (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
};

struct __declspec(uuid("fc24ce3a-8b8d-4570-88ac-dda6887c7aca"))
ISurfaceScatteringABgFile : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetfileName,put=PutfileName))
    _bstr_t fileName;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetfileName ( );
    void PutfileName (
        _bstr_t pRetVal );
    SAFEARRAY * GetAvailableFileNames ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_fileName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_fileName (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailableFileNames (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
};

struct __declspec(uuid("3873506b-48da-4ac5-8544-d63a88659fb5"))
ISurfaceScatteringBSDF : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetfileName,put=PutfileName))
    _bstr_t fileName;
    __declspec(property(get=GetScatterFraction,put=PutScatterFraction))
    double ScatterFraction;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetfileName ( );
    void PutfileName (
        _bstr_t pRetVal );
    SAFEARRAY * GetAvailableFileNames ( );
    double GetScatterFraction ( );
    void PutScatterFraction (
        double pRetVal );
    double GetAngle ( );
    void PutAngle (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_fileName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_fileName (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailableFileNames (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ScatterFraction (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ScatterFraction (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("e4942d08-f3fe-4f93-94e1-c28f4d3aafce"))
ISurfaceScatteringUser : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDLLName,put=PutDLLName))
    _bstr_t DLLName;
    __declspec(property(get=GetNumberOfParameters))
    long NumberOfParameters;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetDLLName ( );
    void PutDLLName (
        _bstr_t pRetVal );
    SAFEARRAY * GetAvailableDLLNames ( );
    long GetNumberOfParameters ( );
    _bstr_t GetParameterName (
        long paramIdx );
    double GetParameterValue (
        long paramIdx );
    VARIANT_BOOL SetParameterValue (
        long paramIdx,
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DLLName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DLLName (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailableDLLNames (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfParameters (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetParameterName (
        /*[in]*/ long paramIdx,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetParameterValue (
        /*[in]*/ long paramIdx,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetParameterValue (
        /*[in]*/ long paramIdx,
        /*[in]*/ double Value,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("feb4d289-6e0e-4031-9435-848b3d2402bc"))
ISurfaceScatteringCatalog : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;
    __declspec(property(get=GetSampleSide,put=PutSampleSide))
    enum SampleSides SampleSide;
    __declspec(property(get=GetSampling,put=PutSampling))
    enum Samplings Sampling;

    //
    // Wrapper methods for error-handling
    //

    double GetAngle ( );
    void PutAngle (
        double pRetVal );
    _bstr_t GetFile ( );
    enum ReflectTransmitCode SetFile (
        _bstr_t File );
    SAFEARRAY * GetAvailableFiles ( );
    enum SampleSides GetSampleSide ( );
    void PutSampleSide (
        enum SampleSides pRetVal );
    SAFEARRAY * GetSampleSides ( );
    enum Samplings GetSampling ( );
    void PutSampling (
        enum Samplings pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetFile (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetFile (
        /*[in]*/ BSTR File,
        /*[out,retval]*/ enum ReflectTransmitCode * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailableFiles (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SampleSide (
        /*[out,retval]*/ enum SampleSides * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SampleSide (
        /*[in]*/ enum SampleSides pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetSampleSides (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Sampling (
        /*[out,retval]*/ enum Samplings * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Sampling (
        /*[in]*/ enum Samplings pRetVal ) = 0;
};

struct __declspec(uuid("40ff1060-03ac-41e4-95f6-667c6c40295b"))
ISurfaceScatteringType : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum SurfaceScatteringTypes Type;
    __declspec(property(get=Get_S_None))
    ISurfaceScatteringNonePtr _S_None;
    __declspec(property(get=Get_S_Lambertian))
    ISurfaceScatteringLambertianPtr _S_Lambertian;
    __declspec(property(get=Get_S_Gaussian))
    ISurfaceScatteringGaussianPtr _S_Gaussian;
    __declspec(property(get=Get_S_ABg))
    ISurfaceScatteringABgPtr _S_ABg;
    __declspec(property(get=Get_S_ABgFile))
    ISurfaceScatteringABgFilePtr _S_ABgFile;
    __declspec(property(get=Get_S_BSDF))
    ISurfaceScatteringBSDFPtr _S_BSDF;
    __declspec(property(get=Get_S_User))
    ISurfaceScatteringUserPtr _S_User;
    __declspec(property(get=Get_S_Catalog))
    ISurfaceScatteringCatalogPtr _S_Catalog;

    //
    // Wrapper methods for error-handling
    //

    enum SurfaceScatteringTypes GetType ( );
    ISurfaceScatteringNonePtr Get_S_None ( );
    ISurfaceScatteringLambertianPtr Get_S_Lambertian ( );
    ISurfaceScatteringGaussianPtr Get_S_Gaussian ( );
    ISurfaceScatteringABgPtr Get_S_ABg ( );
    ISurfaceScatteringABgFilePtr Get_S_ABgFile ( );
    ISurfaceScatteringBSDFPtr Get_S_BSDF ( );
    ISurfaceScatteringUserPtr Get_S_User ( );
    ISurfaceScatteringCatalogPtr Get_S_Catalog ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum SurfaceScatteringTypes * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_None (
        /*[out,retval]*/ struct ISurfaceScatteringNone * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_Lambertian (
        /*[out,retval]*/ struct ISurfaceScatteringLambertian * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_Gaussian (
        /*[out,retval]*/ struct ISurfaceScatteringGaussian * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_ABg (
        /*[out,retval]*/ struct ISurfaceScatteringABg * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_ABgFile (
        /*[out,retval]*/ struct ISurfaceScatteringABgFile * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_BSDF (
        /*[out,retval]*/ struct ISurfaceScatteringBSDF * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_User (
        /*[out,retval]*/ struct ISurfaceScatteringUser * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__S_Catalog (
        /*[out,retval]*/ struct ISurfaceScatteringCatalog * * pRetVal ) = 0;
};

struct __declspec(uuid("1a1527af-00a2-4f51-a8b6-1cfeda81acca"))
ILDEScatteringData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCurrentType))
    enum SurfaceScatteringTypes CurrentType;
    __declspec(property(get=GetCurrentTypeSettings))
    ISurfaceScatteringTypePtr CurrentTypeSettings;

    //
    // Wrapper methods for error-handling
    //

    enum SurfaceScatteringTypes GetCurrentType ( );
    ISurfaceScatteringTypePtr GetCurrentTypeSettings ( );
    ISurfaceScatteringTypePtr CreateScatteringTypeSettings (
        enum SurfaceScatteringTypes Type );
    VARIANT_BOOL ChangeScatteringTypeSettings (
        struct ISurfaceScatteringType * settings );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CurrentType (
        /*[out,retval]*/ enum SurfaceScatteringTypes * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CurrentTypeSettings (
        /*[out,retval]*/ struct ISurfaceScatteringType * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateScatteringTypeSettings (
        /*[in]*/ enum SurfaceScatteringTypes Type,
        /*[out,retval]*/ struct ISurfaceScatteringType * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ChangeScatteringTypeSettings (
        /*[in]*/ struct ISurfaceScatteringType * settings,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

enum __declspec(uuid("b185070f-7601-4fd7-855d-653f24fbc1da"))
TiltDecenterOrderType
{
    TiltDecenterOrderType_Decenter_Tilt = 0,
    TiltDecenterOrderType_Tilt_Decenter = 1
};

enum __declspec(uuid("4265887f-9811-4673-8107-eb3c3408cd7f"))
TiltDecenterPickupType
{
    TiltDecenterPickupType_Explicit = 0,
    TiltDecenterPickupType_PickupSurface = 1,
    TiltDecenterPickupType_ReverseSurface = 2
};

enum __declspec(uuid("aea9805b-7bb2-4c54-9101-21fb460b8e9d"))
CoordinateReturnType
{
    CoordinateReturnType_None = 0,
    CoordinateReturnType_OrientationOnly = 1,
    CoordinateReturnType_OrientationXY = 2,
    CoordinateReturnType_OrientationXYZ = 3
};

struct __declspec(uuid("8b72b0c2-8224-4112-8d46-da416ff6d23d"))
ILDETiltDecenterData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBeforeSurfaceOrder,put=PutBeforeSurfaceOrder))
    enum TiltDecenterOrderType BeforeSurfaceOrder;
    __declspec(property(get=GetBeforeAfterSurfaceEnabled))
    VARIANT_BOOL BeforeAfterSurfaceEnabled;
    __declspec(property(get=GetBeforeSurfaceDecenterX,put=PutBeforeSurfaceDecenterX))
    double BeforeSurfaceDecenterX;
    __declspec(property(get=GetCoordinateReturnEnabled))
    VARIANT_BOOL CoordinateReturnEnabled;
    __declspec(property(get=GetBeforeSurfaceDecenterY,put=PutBeforeSurfaceDecenterY))
    double BeforeSurfaceDecenterY;
    __declspec(property(get=GetCoordinateReturn,put=PutCoordinateReturn))
    enum CoordinateReturnType CoordinateReturn;
    __declspec(property(get=GetBeforeSurfaceTiltX,put=PutBeforeSurfaceTiltX))
    double BeforeSurfaceTiltX;
    __declspec(property(get=GetCoordinateReturnToSurface,put=PutCoordinateReturnToSurface))
    long CoordinateReturnToSurface;
    __declspec(property(get=GetBeforeSurfaceTiltY,put=PutBeforeSurfaceTiltY))
    double BeforeSurfaceTiltY;
    __declspec(property(get=GetBeforeSurfaceTiltZ,put=PutBeforeSurfaceTiltZ))
    double BeforeSurfaceTiltZ;
    __declspec(property(get=GetAfterSurfaceMode))
    enum TiltDecenterPickupType AfterSurfaceMode;
    __declspec(property(get=GetAfterSurfaceModeSurface))
    long AfterSurfaceModeSurface;
    __declspec(property(get=GetAfterSurfaceModeSurfaceIsThis))
    VARIANT_BOOL AfterSurfaceModeSurfaceIsThis;
    __declspec(property(get=GetAfterSurfaceOrder,put=PutAfterSurfaceOrder))
    enum TiltDecenterOrderType AfterSurfaceOrder;
    __declspec(property(get=GetAfterSurfaceDecenterX,put=PutAfterSurfaceDecenterX))
    double AfterSurfaceDecenterX;
    __declspec(property(get=GetAfterSurfaceDecenterY,put=PutAfterSurfaceDecenterY))
    double AfterSurfaceDecenterY;
    __declspec(property(get=GetAfterSurfaceTiltX,put=PutAfterSurfaceTiltX))
    double AfterSurfaceTiltX;
    __declspec(property(get=GetAfterSurfaceTiltY,put=PutAfterSurfaceTiltY))
    double AfterSurfaceTiltY;
    __declspec(property(get=GetAfterSurfaceTiltZ,put=PutAfterSurfaceTiltZ))
    double AfterSurfaceTiltZ;

    //
    // Wrapper methods for error-handling
    //

    enum TiltDecenterOrderType GetBeforeSurfaceOrder ( );
    void PutBeforeSurfaceOrder (
        enum TiltDecenterOrderType pRetVal );
    double GetBeforeSurfaceDecenterX ( );
    void PutBeforeSurfaceDecenterX (
        double pRetVal );
    double GetBeforeSurfaceDecenterY ( );
    void PutBeforeSurfaceDecenterY (
        double pRetVal );
    double GetBeforeSurfaceTiltX ( );
    void PutBeforeSurfaceTiltX (
        double pRetVal );
    double GetBeforeSurfaceTiltY ( );
    void PutBeforeSurfaceTiltY (
        double pRetVal );
    double GetBeforeSurfaceTiltZ ( );
    void PutBeforeSurfaceTiltZ (
        double pRetVal );
    enum TiltDecenterPickupType GetAfterSurfaceMode ( );
    long GetAfterSurfaceModeSurface ( );
    VARIANT_BOOL GetAfterSurfaceModeSurfaceIsThis ( );
    HRESULT SetAfterSurfaceModeExplicit ( );
    VARIANT_BOOL SetAfterSurfaceModePickup (
        long FromSurface );
    VARIANT_BOOL SetAfterSurfaceModeReverse (
        long FromSurface );
    VARIANT_BOOL SetAfterSurfaceModePickupThis ( );
    VARIANT_BOOL SetAfterSurfaceModeReverseThis ( );
    enum TiltDecenterOrderType GetAfterSurfaceOrder ( );
    void PutAfterSurfaceOrder (
        enum TiltDecenterOrderType pRetVal );
    double GetAfterSurfaceDecenterX ( );
    void PutAfterSurfaceDecenterX (
        double pRetVal );
    double GetAfterSurfaceDecenterY ( );
    void PutAfterSurfaceDecenterY (
        double pRetVal );
    double GetAfterSurfaceTiltX ( );
    void PutAfterSurfaceTiltX (
        double pRetVal );
    double GetAfterSurfaceTiltY ( );
    void PutAfterSurfaceTiltY (
        double pRetVal );
    double GetAfterSurfaceTiltZ ( );
    void PutAfterSurfaceTiltZ (
        double pRetVal );
    VARIANT_BOOL GetBeforeAfterSurfaceEnabled ( );
    VARIANT_BOOL GetCoordinateReturnEnabled ( );
    enum CoordinateReturnType GetCoordinateReturn ( );
    void PutCoordinateReturn (
        enum CoordinateReturnType pRetVal );
    long GetCoordinateReturnToSurface ( );
    void PutCoordinateReturnToSurface (
        long pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BeforeSurfaceOrder (
        /*[out,retval]*/ enum TiltDecenterOrderType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BeforeSurfaceOrder (
        /*[in]*/ enum TiltDecenterOrderType pRetVal ) = 0;
      virtual HRESULT __stdcall get_BeforeSurfaceDecenterX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BeforeSurfaceDecenterX (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_BeforeSurfaceDecenterY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BeforeSurfaceDecenterY (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_BeforeSurfaceTiltX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BeforeSurfaceTiltX (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_BeforeSurfaceTiltY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BeforeSurfaceTiltY (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_BeforeSurfaceTiltZ (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BeforeSurfaceTiltZ (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_AfterSurfaceMode (
        /*[out,retval]*/ enum TiltDecenterPickupType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AfterSurfaceModeSurface (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AfterSurfaceModeSurfaceIsThis (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetAfterSurfaceModeExplicit ( ) = 0;
      virtual HRESULT __stdcall raw_SetAfterSurfaceModePickup (
        /*[in]*/ long FromSurface,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetAfterSurfaceModeReverse (
        /*[in]*/ long FromSurface,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetAfterSurfaceModePickupThis (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetAfterSurfaceModeReverseThis (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AfterSurfaceOrder (
        /*[out,retval]*/ enum TiltDecenterOrderType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AfterSurfaceOrder (
        /*[in]*/ enum TiltDecenterOrderType pRetVal ) = 0;
      virtual HRESULT __stdcall get_AfterSurfaceDecenterX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AfterSurfaceDecenterX (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_AfterSurfaceDecenterY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AfterSurfaceDecenterY (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_AfterSurfaceTiltX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AfterSurfaceTiltX (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_AfterSurfaceTiltY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AfterSurfaceTiltY (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_AfterSurfaceTiltZ (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AfterSurfaceTiltZ (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_BeforeAfterSurfaceEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoordinateReturnEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoordinateReturn (
        /*[out,retval]*/ enum CoordinateReturnType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoordinateReturn (
        /*[in]*/ enum CoordinateReturnType pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoordinateReturnToSurface (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoordinateReturnToSurface (
        /*[in]*/ long pRetVal ) = 0;
};

enum __declspec(uuid("978862b7-c592-4b0b-a921-65d1029269b8"))
PilotRadiusMode
{
    PilotRadiusMode_BestFit = 0,
    PilotRadiusMode_Shorter = 1,
    PilotRadiusMode_Longer = 2,
    PilotRadiusMode_X = 3,
    PilotRadiusMode_Y = 4,
    PilotRadiusMode_Plane = 5,
    PilotRadiusMode_User = 6
};

enum __declspec(uuid("e9fc1903-02c2-40cd-becb-f059c40c65f5"))
XYSampling
{
    XYSampling_S32 = 0,
    XYSampling_S64 = 1,
    XYSampling_S128 = 2,
    XYSampling_S256 = 3,
    XYSampling_S512 = 4,
    XYSampling_S1024 = 5,
    XYSampling_S2048 = 6,
    XYSampling_S4096 = 7,
    XYSampling_S8192 = 8,
    XYSampling_S16384 = 9
};

struct __declspec(uuid("8c61c999-6da6-423b-a09e-76b5100af9ba"))
ILDEPhysicalOpticsData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUseRaysToPropagateToNextSurface,put=PutUseRaysToPropagateToNextSurface))
    VARIANT_BOOL UseRaysToPropagateToNextSurface;
    __declspec(property(get=GetDoNotRescaleBeamSizeUsingRayData,put=PutDoNotRescaleBeamSizeUsingRayData))
    VARIANT_BOOL DoNotRescaleBeamSizeUsingRayData;
    __declspec(property(get=GetUseAngularSpectrumPropagator,put=PutUseAngularSpectrumPropagator))
    VARIANT_BOOL UseAngularSpectrumPropagator;
    __declspec(property(get=GetDrawThisLensOnShadedModel,put=PutDrawThisLensOnShadedModel))
    VARIANT_BOOL DrawThisLensOnShadedModel;
    __declspec(property(get=GetReComputePilotBeamParameters,put=PutReComputePilotBeamParameters))
    VARIANT_BOOL ReComputePilotBeamParameters;
    __declspec(property(get=GetUseXaxisReference,put=PutUseXaxisReference))
    VARIANT_BOOL UseXaxisReference;
    __declspec(property(get=GetResampleAfterRefraction,put=PutResampleAfterRefraction))
    VARIANT_BOOL ResampleAfterRefraction;
    __declspec(property(get=GetAutoResample,put=PutAutoResample))
    VARIANT_BOOL AutoResample;
    __declspec(property(get=GetXSampling,put=PutXSampling))
    enum XYSampling XSampling;
    __declspec(property(get=GetYSampling,put=PutYSampling))
    enum XYSampling YSampling;
    __declspec(property(get=GetXWidth,put=PutXWidth))
    double XWidth;
    __declspec(property(get=GetYWidth,put=PutYWidth))
    double YWidth;
    __declspec(property(get=GetOutputPilotRadius,put=PutOutputPilotRadius))
    enum PilotRadiusMode OutputPilotRadius;
    __declspec(property(get=GetXRadius,put=PutXRadius))
    double XRadius;
    __declspec(property(get=GetYRadius,put=PutYRadius))
    double YRadius;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUseRaysToPropagateToNextSurface ( );
    void PutUseRaysToPropagateToNextSurface (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetDoNotRescaleBeamSizeUsingRayData ( );
    void PutDoNotRescaleBeamSizeUsingRayData (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetUseAngularSpectrumPropagator ( );
    void PutUseAngularSpectrumPropagator (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetDrawThisLensOnShadedModel ( );
    void PutDrawThisLensOnShadedModel (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetReComputePilotBeamParameters ( );
    void PutReComputePilotBeamParameters (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetUseXaxisReference ( );
    void PutUseXaxisReference (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetResampleAfterRefraction ( );
    void PutResampleAfterRefraction (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetAutoResample ( );
    void PutAutoResample (
        VARIANT_BOOL pRetVal );
    enum XYSampling GetXSampling ( );
    void PutXSampling (
        enum XYSampling pRetVal );
    enum XYSampling GetYSampling ( );
    void PutYSampling (
        enum XYSampling pRetVal );
    double GetXWidth ( );
    void PutXWidth (
        double pRetVal );
    double GetYWidth ( );
    void PutYWidth (
        double pRetVal );
    enum PilotRadiusMode GetOutputPilotRadius ( );
    void PutOutputPilotRadius (
        enum PilotRadiusMode pRetVal );
    double GetXRadius ( );
    void PutXRadius (
        double pRetVal );
    double GetYRadius ( );
    void PutYRadius (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UseRaysToPropagateToNextSurface (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseRaysToPropagateToNextSurface (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_DoNotRescaleBeamSizeUsingRayData (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DoNotRescaleBeamSizeUsingRayData (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseAngularSpectrumPropagator (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseAngularSpectrumPropagator (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_DrawThisLensOnShadedModel (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DrawThisLensOnShadedModel (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ReComputePilotBeamParameters (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ReComputePilotBeamParameters (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseXaxisReference (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseXaxisReference (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ResampleAfterRefraction (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ResampleAfterRefraction (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_AutoResample (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AutoResample (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_XSampling (
        /*[out,retval]*/ enum XYSampling * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XSampling (
        /*[in]*/ enum XYSampling pRetVal ) = 0;
      virtual HRESULT __stdcall get_YSampling (
        /*[out,retval]*/ enum XYSampling * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YSampling (
        /*[in]*/ enum XYSampling pRetVal ) = 0;
      virtual HRESULT __stdcall get_XWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_OutputPilotRadius (
        /*[out,retval]*/ enum PilotRadiusMode * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OutputPilotRadius (
        /*[in]*/ enum PilotRadiusMode pRetVal ) = 0;
      virtual HRESULT __stdcall get_XRadius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XRadius (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YRadius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YRadius (
        /*[in]*/ double pRetVal ) = 0;
};

enum __declspec(uuid("c63cb969-8c50-46a9-9cdd-a752ffb7efca"))
CoatingStatusType
{
    CoatingStatusType_Fixed = 0,
    CoatingStatusType_Variable = 1,
    CoatingStatusType_Pickup = 2
};

struct __declspec(uuid("a5cdb874-fc2a-49d0-8d98-1c28f5cd39ad"))
ILDECoatingSettings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLayer))
    long Layer;
    __declspec(property(get=GetThicknessMultiplier,put=PutThicknessMultiplier))
    double ThicknessMultiplier;
    __declspec(property(get=GetThicknessStatus))
    enum CoatingStatusType ThicknessStatus;
    __declspec(property(get=GetThicknessPickupFrom))
    long ThicknessPickupFrom;
    __declspec(property(get=GetIndexOffset,put=PutIndexOffset))
    double IndexOffset;
    __declspec(property(get=GetIndexStatus))
    enum CoatingStatusType IndexStatus;
    __declspec(property(get=GetIndexPickupFrom))
    long IndexPickupFrom;
    __declspec(property(get=GetExtinctionOffset,put=PutExtinctionOffset))
    double ExtinctionOffset;
    __declspec(property(get=GetExtinctionStatus))
    enum CoatingStatusType ExtinctionStatus;
    __declspec(property(get=GetExtinctionPickupFrom))
    long ExtinctionPickupFrom;

    //
    // Wrapper methods for error-handling
    //

    long GetLayer ( );
    double GetThicknessMultiplier ( );
    void PutThicknessMultiplier (
        double pRetVal );
    enum CoatingStatusType GetThicknessStatus ( );
    long GetThicknessPickupFrom ( );
    HRESULT SetThicknessStatusFixed ( );
    HRESULT SetThicknessStatusVariable ( );
    VARIANT_BOOL SetThicknessStatusPickup (
        long fromLayer );
    double GetIndexOffset ( );
    void PutIndexOffset (
        double pRetVal );
    enum CoatingStatusType GetIndexStatus ( );
    long GetIndexPickupFrom ( );
    HRESULT SetIndexStatusFixed ( );
    HRESULT SetIndexStatusVariable ( );
    VARIANT_BOOL SetIndexStatusPickup (
        long fromLayer );
    double GetExtinctionOffset ( );
    void PutExtinctionOffset (
        double pRetVal );
    enum CoatingStatusType GetExtinctionStatus ( );
    long GetExtinctionPickupFrom ( );
    HRESULT SetExtinctionStatusFixed ( );
    HRESULT SetExtinctionStatusVariable ( );
    VARIANT_BOOL SetExtinctionStatusPickup (
        long fromLayer );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Layer (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ThicknessMultiplier (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ThicknessMultiplier (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ThicknessStatus (
        /*[out,retval]*/ enum CoatingStatusType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ThicknessPickupFrom (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetThicknessStatusFixed ( ) = 0;
      virtual HRESULT __stdcall raw_SetThicknessStatusVariable ( ) = 0;
      virtual HRESULT __stdcall raw_SetThicknessStatusPickup (
        /*[in]*/ long fromLayer,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IndexOffset (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IndexOffset (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_IndexStatus (
        /*[out,retval]*/ enum CoatingStatusType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IndexPickupFrom (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetIndexStatusFixed ( ) = 0;
      virtual HRESULT __stdcall raw_SetIndexStatusVariable ( ) = 0;
      virtual HRESULT __stdcall raw_SetIndexStatusPickup (
        /*[in]*/ long fromLayer,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ExtinctionOffset (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ExtinctionOffset (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ExtinctionStatus (
        /*[out,retval]*/ enum CoatingStatusType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ExtinctionPickupFrom (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetExtinctionStatusFixed ( ) = 0;
      virtual HRESULT __stdcall raw_SetExtinctionStatusVariable ( ) = 0;
      virtual HRESULT __stdcall raw_SetExtinctionStatusPickup (
        /*[in]*/ long fromLayer,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("5c60fb77-89f2-4de6-bb1a-3b146036ccd7"))
ILDECoatingData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCoating,put=PutCoating))
    _bstr_t Coating;
    __declspec(property(get=GetUseLayerMultiplierAndOffsets,put=PutUseLayerMultiplierAndOffsets))
    VARIANT_BOOL UseLayerMultiplierAndOffsets;
    __declspec(property(get=GetNumberOfLayers))
    long NumberOfLayers;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetCoating ( );
    void PutCoating (
        _bstr_t pRetVal );
    SAFEARRAY * GetAvailableCoatings ( );
    VARIANT_BOOL GetUseLayerMultiplierAndOffsets ( );
    void PutUseLayerMultiplierAndOffsets (
        VARIANT_BOOL pRetVal );
    long GetNumberOfLayers ( );
    ILDECoatingSettingsPtr GetLayerSettings (
        long Layer );
    VARIANT_BOOL SetLayerSettings (
        long Layer,
        struct ILDECoatingSettings * settings );
    HRESULT SetAllThicknessVariable ( );
    HRESULT SetAllThicknessFixed ( );
    HRESULT SetAllThicknessOne ( );
    HRESULT SetAllIndexVariable ( );
    HRESULT SetAllIndexFixed ( );
    HRESULT SetAllIndexZero ( );
    HRESULT SetAllExtinctionVariable ( );
    HRESULT SetAllExtinctionFixed ( );
    HRESULT SetAllExtinctionZero ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Coating (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coating (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailableCoatings (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseLayerMultiplierAndOffsets (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseLayerMultiplierAndOffsets (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfLayers (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetLayerSettings (
        /*[in]*/ long Layer,
        /*[out,retval]*/ struct ILDECoatingSettings * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetLayerSettings (
        /*[in]*/ long Layer,
        /*[in]*/ struct ILDECoatingSettings * settings,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetAllThicknessVariable ( ) = 0;
      virtual HRESULT __stdcall raw_SetAllThicknessFixed ( ) = 0;
      virtual HRESULT __stdcall raw_SetAllThicknessOne ( ) = 0;
      virtual HRESULT __stdcall raw_SetAllIndexVariable ( ) = 0;
      virtual HRESULT __stdcall raw_SetAllIndexFixed ( ) = 0;
      virtual HRESULT __stdcall raw_SetAllIndexZero ( ) = 0;
      virtual HRESULT __stdcall raw_SetAllExtinctionVariable ( ) = 0;
      virtual HRESULT __stdcall raw_SetAllExtinctionFixed ( ) = 0;
      virtual HRESULT __stdcall raw_SetAllExtinctionZero ( ) = 0;
};

struct __declspec(uuid("6350e10b-0f15-4b0b-bf9c-ead106d9406f"))
ILDEImportData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDefaultImportDirectory))
    _bstr_t DefaultImportDirectory;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL ImportDataFile (
        _bstr_t dataFile );
    _bstr_t GetDefaultImportDirectory ( );
    SAFEARRAY * GetImportFiles (
        _bstr_t directory );
    VARIANT_BOOL CopyImportDataFrom (
        struct ILDEImportData * source );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ImportDataFile (
        /*[in]*/ BSTR dataFile,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DefaultImportDirectory (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetImportFiles (
        /*[in]*/ BSTR directory,
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CopyImportDataFrom (
        /*[in]*/ struct ILDEImportData * source,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

enum __declspec(uuid("f9b22e66-859d-4f04-8573-497b1452a3b2"))
ToleranceOperandType
{
    ToleranceOperandType_TOFF = 0,
    ToleranceOperandType_TRAD = 1,
    ToleranceOperandType_TCUR = 2,
    ToleranceOperandType_TFRN = 3,
    ToleranceOperandType_TTHI = 4,
    ToleranceOperandType_TCON = 5,
    ToleranceOperandType_TSDI = 6,
    ToleranceOperandType_TSDX = 7,
    ToleranceOperandType_TSDY = 8,
    ToleranceOperandType_TSTX = 9,
    ToleranceOperandType_TSTY = 10,
    ToleranceOperandType_TIRX = 11,
    ToleranceOperandType_TIRY = 12,
    ToleranceOperandType_TIRR = 13,
    ToleranceOperandType_TPAR = 14,
    ToleranceOperandType_TEDV = 15,
    ToleranceOperandType_TEDX = 16,
    ToleranceOperandType_TEDY = 17,
    ToleranceOperandType_TETX = 18,
    ToleranceOperandType_TETY = 19,
    ToleranceOperandType_TETZ = 20,
    ToleranceOperandType_TUDX = 21,
    ToleranceOperandType_TUDY = 22,
    ToleranceOperandType_TUTX = 23,
    ToleranceOperandType_TUTY = 24,
    ToleranceOperandType_TUTZ = 25,
    ToleranceOperandType_TIND = 26,
    ToleranceOperandType_TABB = 27,
    ToleranceOperandType_TEXI = 28,
    ToleranceOperandType_SAVE = 29,
    ToleranceOperandType_COMP = 30,
    ToleranceOperandType_CPAR = 31,
    ToleranceOperandType_CEDV = 32,
    ToleranceOperandType_CMCO = 33,
    ToleranceOperandType_STAT = 34,
    ToleranceOperandType_TWAV = 35,
    ToleranceOperandType_TNPS = 36,
    ToleranceOperandType_TNPA = 37,
    ToleranceOperandType_TMCO = 38,
    ToleranceOperandType_TEZI = 39,
    ToleranceOperandType_TCMU = 40,
    ToleranceOperandType_SEED = 41,
    ToleranceOperandType_COMM = 42,
    ToleranceOperandType_TPAI = 43,
    ToleranceOperandType_TCIO = 44,
    ToleranceOperandType_TCEO = 45,
    ToleranceOperandType_TNMA = 46,
    ToleranceOperandType_CNPA = 47,
    ToleranceOperandType_CNPS = 48
};

enum __declspec(uuid("db0fc232-635e-4158-bffb-8e1c197dbf55"))
ToleranceColumn
{
    ToleranceColumn_Param1 = 2,
    ToleranceColumn_Param2 = 3,
    ToleranceColumn_Param3 = 4,
    ToleranceColumn_Nominal = 5,
    ToleranceColumn_Min = 6,
    ToleranceColumn_Max = 7,
    ToleranceColumn_Comment = 8
};

enum __declspec(uuid("c41df280-af85-4e53-8c17-48da58f8bccc"))
MeritOperandType
{
    MeritOperandType_ACOS = 0,
    MeritOperandType_ABSO = 1,
    MeritOperandType_CVVA = 2,
    MeritOperandType_DENC = 3,
    MeritOperandType_DENF = 4,
    MeritOperandType_DIFF = 5,
    MeritOperandType_AMAG = 6,
    MeritOperandType_ANAC = 7,
    MeritOperandType_ANAR = 8,
    MeritOperandType_ANAX = 9,
    MeritOperandType_ANAY = 10,
    MeritOperandType_ANCX = 11,
    MeritOperandType_ANCY = 12,
    MeritOperandType_ASIN = 13,
    MeritOperandType_ASTI = 14,
    MeritOperandType_ATAN = 15,
    MeritOperandType_AXCL = 16,
    MeritOperandType_BIOC = 17,
    MeritOperandType_CTVA = 18,
    MeritOperandType_CVGT = 19,
    MeritOperandType_CVLT = 20,
    MeritOperandType_CVOL = 21,
    MeritOperandType_DIMX = 22,
    MeritOperandType_DISC = 23,
    MeritOperandType_DISG = 24,
    MeritOperandType_DIST = 25,
    MeritOperandType_DIVI = 26,
    MeritOperandType_DLTN = 27,
    MeritOperandType_DMFS = 28,
    MeritOperandType_DMGT = 29,
    MeritOperandType_DMLT = 30,
    MeritOperandType_DMVA = 31,
    MeritOperandType_DXDX = 32,
    MeritOperandType_DXDY = 33,
    MeritOperandType_DYDX = 34,
    MeritOperandType_DYDY = 35,
    MeritOperandType_EFFL = 36,
    MeritOperandType_EFLX = 37,
    MeritOperandType_EFLY = 38,
    MeritOperandType_ENDX = 39,
    MeritOperandType_ENPP = 40,
    MeritOperandType_EPDI = 41,
    MeritOperandType_EQUA = 42,
    MeritOperandType_ETGT = 43,
    MeritOperandType_ETLT = 44,
    MeritOperandType_ETVA = 45,
    MeritOperandType_EXPP = 46,
    MeritOperandType_FCGS = 47,
    MeritOperandType_FCGT = 48,
    MeritOperandType_FCUR = 49,
    MeritOperandType_FICL = 50,
    MeritOperandType_FICP = 51,
    MeritOperandType_FOUC = 52,
    MeritOperandType_GBPD = 53,
    MeritOperandType_GBPR = 54,
    MeritOperandType_GBPS = 55,
    MeritOperandType_GBPW = 56,
    MeritOperandType_GBPP = 57,
    MeritOperandType_GBSD = 58,
    MeritOperandType_P1GT = 59,
    MeritOperandType_P1LT = 60,
    MeritOperandType_P1VA = 61,
    MeritOperandType_P2GT = 62,
    MeritOperandType_P2LT = 63,
    MeritOperandType_P2VA = 64,
    MeritOperandType_P3GT = 65,
    MeritOperandType_P3LT = 66,
    MeritOperandType_P3VA = 67,
    MeritOperandType_P4GT = 68,
    MeritOperandType_P4LT = 69,
    MeritOperandType_P4VA = 70,
    MeritOperandType_P5GT = 71,
    MeritOperandType_P5LT = 72,
    MeritOperandType_P5VA = 73,
    MeritOperandType_P6GT = 74,
    MeritOperandType_P6LT = 75,
    MeritOperandType_P6VA = 76,
    MeritOperandType_P7GT = 77,
    MeritOperandType_P7LT = 78,
    MeritOperandType_P7VA = 79,
    MeritOperandType_P8GT = 80,
    MeritOperandType_P8LT = 81,
    MeritOperandType_P8VA = 82,
    MeritOperandType_PANA = 83,
    MeritOperandType_PANB = 84,
    MeritOperandType_PANC = 85,
    MeritOperandType_PARA = 86,
    MeritOperandType_PARB = 87,
    MeritOperandType_PARC = 88,
    MeritOperandType_PARR = 89,
    MeritOperandType_PARX = 90,
    MeritOperandType_PARY = 91,
    MeritOperandType_PARZ = 92,
    MeritOperandType_PATX = 93,
    MeritOperandType_PATY = 94,
    MeritOperandType_PETC = 95,
    MeritOperandType_PETZ = 96,
    MeritOperandType_PIMH = 97,
    MeritOperandType_PLEN = 98,
    MeritOperandType_PMAG = 99,
    MeritOperandType_POWR = 100,
    MeritOperandType_PRIM = 101,
    MeritOperandType_PROD = 102,
    MeritOperandType_PMGT = 103,
    MeritOperandType_PMLT = 104,
    MeritOperandType_PMVA = 105,
    MeritOperandType_POPD = 106,
    MeritOperandType_QOAC = 107,
    MeritOperandType_QSUM = 108,
    MeritOperandType_RAGA = 109,
    MeritOperandType_RAGB = 110,
    MeritOperandType_RAGC = 111,
    MeritOperandType_RAGX = 112,
    MeritOperandType_RAGY = 113,
    MeritOperandType_RAGZ = 114,
    MeritOperandType_RAED = 115,
    MeritOperandType_RAEN = 116,
    MeritOperandType_RAID = 117,
    MeritOperandType_RAIN = 118,
    MeritOperandType_RANG = 119,
    MeritOperandType_REAA = 120,
    MeritOperandType_REAB = 121,
    MeritOperandType_REAC = 122,
    MeritOperandType_REAR = 123,
    MeritOperandType_REAX = 124,
    MeritOperandType_REAY = 125,
    MeritOperandType_REAZ = 126,
    MeritOperandType_RELI = 127,
    MeritOperandType_GBSR = 128,
    MeritOperandType_GBSS = 129,
    MeritOperandType_TGTH = 130,
    MeritOperandType_TMAS = 131,
    MeritOperandType_TOTR = 132,
    MeritOperandType_TRAC = 133,
    MeritOperandType_TRAD = 134,
    MeritOperandType_TRAE = 135,
    MeritOperandType_TRAI = 136,
    MeritOperandType_TRAN = 137,
    MeritOperandType_TRAR = 138,
    MeritOperandType_TRAX = 139,
    MeritOperandType_TRAY = 140,
    MeritOperandType_TRCX = 141,
    MeritOperandType_TRCY = 142,
    MeritOperandType_TTGT = 143,
    MeritOperandType_TTHI = 144,
    MeritOperandType_TTLT = 145,
    MeritOperandType_GBSW = 146,
    MeritOperandType_GBSP = 147,
    MeritOperandType_GCOS = 148,
    MeritOperandType_GENC = 149,
    MeritOperandType_GENF = 150,
    MeritOperandType_GLCA = 151,
    MeritOperandType_GLCB = 152,
    MeritOperandType_GLCC = 153,
    MeritOperandType_GLCX = 154,
    MeritOperandType_GLCY = 155,
    MeritOperandType_GLCZ = 156,
    MeritOperandType_GMTA = 157,
    MeritOperandType_GMTS = 158,
    MeritOperandType_GMTT = 159,
    MeritOperandType_GOTO = 160,
    MeritOperandType_GPIM = 161,
    MeritOperandType_GRMN = 162,
    MeritOperandType_GRMX = 163,
    MeritOperandType_GTCE = 164,
    MeritOperandType_HACG = 165,
    MeritOperandType_HHCN = 166,
    MeritOperandType_I1GT = 167,
    MeritOperandType_BIOD = 168,
    MeritOperandType_BIPF = 169,
    MeritOperandType_BLNK = 170,
    MeritOperandType_BSER = 171,
    MeritOperandType_CENX = 172,
    MeritOperandType_CENY = 173,
    MeritOperandType_CMFV = 174,
    MeritOperandType_CMGT = 175,
    MeritOperandType_CMLT = 176,
    MeritOperandType_CMVA = 177,
    MeritOperandType_CODA = 178,
    MeritOperandType_COGT = 179,
    MeritOperandType_COLT = 180,
    MeritOperandType_COMA = 181,
    MeritOperandType_CONF = 182,
    MeritOperandType_CONS = 183,
    MeritOperandType_COSI = 184,
    MeritOperandType_COVA = 185,
    MeritOperandType_CTGT = 186,
    MeritOperandType_CTLT = 187,
    MeritOperandType_I2GT = 188,
    MeritOperandType_I3GT = 189,
    MeritOperandType_I4GT = 190,
    MeritOperandType_I5GT = 191,
    MeritOperandType_I6GT = 192,
    MeritOperandType_I1LT = 193,
    MeritOperandType_I2LT = 194,
    MeritOperandType_I3LT = 195,
    MeritOperandType_I4LT = 196,
    MeritOperandType_I5LT = 197,
    MeritOperandType_I6LT = 198,
    MeritOperandType_I1VA = 199,
    MeritOperandType_I2VA = 200,
    MeritOperandType_I3VA = 201,
    MeritOperandType_I4VA = 202,
    MeritOperandType_I5VA = 203,
    MeritOperandType_I6VA = 204,
    MeritOperandType_IMAE = 205,
    MeritOperandType_IMSF = 206,
    MeritOperandType_INDX = 207,
    MeritOperandType_ISFN = 208,
    MeritOperandType_ISNA = 209,
    MeritOperandType_LACL = 210,
    MeritOperandType_LINV = 211,
    MeritOperandType_LOGE = 212,
    MeritOperandType_LOGT = 213,
    MeritOperandType_LONA = 214,
    MeritOperandType_LPTD = 215,
    MeritOperandType_MAXX = 216,
    MeritOperandType_MCOG = 217,
    MeritOperandType_MCOL = 218,
    MeritOperandType_MCOV = 219,
    MeritOperandType_MINN = 220,
    MeritOperandType_MNAB = 221,
    MeritOperandType_MNCA = 222,
    MeritOperandType_MNCG = 223,
    MeritOperandType_MNCT = 224,
    MeritOperandType_MNCV = 225,
    MeritOperandType_MNDT = 226,
    MeritOperandType_MNEA = 227,
    MeritOperandType_MNEG = 228,
    MeritOperandType_MNET = 229,
    MeritOperandType_MNIN = 230,
    MeritOperandType_MNPD = 231,
    MeritOperandType_MNSD = 232,
    MeritOperandType_MSWA = 233,
    MeritOperandType_MSWS = 234,
    MeritOperandType_MSWT = 235,
    MeritOperandType_MTFA = 236,
    MeritOperandType_MTFS = 237,
    MeritOperandType_MTFT = 238,
    MeritOperandType_MXAB = 239,
    MeritOperandType_MXCA = 240,
    MeritOperandType_MXCG = 241,
    MeritOperandType_MXCT = 242,
    MeritOperandType_MXCV = 243,
    MeritOperandType_MXDT = 244,
    MeritOperandType_MXEA = 245,
    MeritOperandType_MXEG = 246,
    MeritOperandType_MXET = 247,
    MeritOperandType_MXIN = 248,
    MeritOperandType_MXPD = 249,
    MeritOperandType_MXSD = 250,
    MeritOperandType_NPGT = 251,
    MeritOperandType_NPLT = 252,
    MeritOperandType_NPVA = 253,
    MeritOperandType_NPXG = 254,
    MeritOperandType_NPXL = 255,
    MeritOperandType_NPXV = 256,
    MeritOperandType_NPYG = 257,
    MeritOperandType_NPYL = 258,
    MeritOperandType_NPYV = 259,
    MeritOperandType_NPZG = 260,
    MeritOperandType_NPZL = 261,
    MeritOperandType_NPZV = 262,
    MeritOperandType_NSDC = 263,
    MeritOperandType_NSDD = 264,
    MeritOperandType_NSRA = 265,
    MeritOperandType_NSTR = 266,
    MeritOperandType_NTXG = 267,
    MeritOperandType_NTXL = 268,
    MeritOperandType_NTXV = 269,
    MeritOperandType_NTYG = 270,
    MeritOperandType_NTYL = 271,
    MeritOperandType_NTYV = 272,
    MeritOperandType_NTZG = 273,
    MeritOperandType_NTZL = 274,
    MeritOperandType_NTZV = 275,
    MeritOperandType_OSCD = 276,
    MeritOperandType_OBSN = 277,
    MeritOperandType_OOFF = 278,
    MeritOperandType_OPDC = 279,
    MeritOperandType_OPDM = 280,
    MeritOperandType_OPDX = 281,
    MeritOperandType_OPGT = 282,
    MeritOperandType_OPLT = 283,
    MeritOperandType_OPVA = 284,
    MeritOperandType_OPTH = 285,
    MeritOperandType_OSUM = 286,
    MeritOperandType_RENA = 287,
    MeritOperandType_RENB = 288,
    MeritOperandType_RENC = 289,
    MeritOperandType_RETX = 290,
    MeritOperandType_RETY = 291,
    MeritOperandType_RGLA = 292,
    MeritOperandType_RSCH = 293,
    MeritOperandType_RSCE = 294,
    MeritOperandType_RSRE = 295,
    MeritOperandType_RSRH = 296,
    MeritOperandType_RWCH = 297,
    MeritOperandType_RWCE = 298,
    MeritOperandType_RWRE = 299,
    MeritOperandType_RWRH = 300,
    MeritOperandType_SAGX = 301,
    MeritOperandType_SAGY = 302,
    MeritOperandType_SFNO = 303,
    MeritOperandType_SINE = 304,
    MeritOperandType_SKIS = 305,
    MeritOperandType_SKIN = 306,
    MeritOperandType_SPCH = 307,
    MeritOperandType_SPHA = 308,
    MeritOperandType_SQRT = 309,
    MeritOperandType_SSAG = 310,
    MeritOperandType_SUMM = 311,
    MeritOperandType_SVIG = 312,
    MeritOperandType_TANG = 313,
    MeritOperandType_TFNO = 314,
    MeritOperandType_WFNO = 315,
    MeritOperandType_TTVA = 316,
    MeritOperandType_UDOP = 317,
    MeritOperandType_UDOC = 318,
    MeritOperandType_USYM = 319,
    MeritOperandType_VOLU = 320,
    MeritOperandType_WLEN = 321,
    MeritOperandType_XDVA = 322,
    MeritOperandType_XDGT = 323,
    MeritOperandType_XDLT = 324,
    MeritOperandType_XENC = 325,
    MeritOperandType_XENF = 326,
    MeritOperandType_XNEA = 327,
    MeritOperandType_XNEG = 328,
    MeritOperandType_XNET = 329,
    MeritOperandType_XXEA = 330,
    MeritOperandType_XXEG = 331,
    MeritOperandType_XXET = 332,
    MeritOperandType_YNIP = 333,
    MeritOperandType_ZERN = 334,
    MeritOperandType_ZPLM = 335,
    MeritOperandType_ZTHI = 336,
    MeritOperandType_TOLR = 337,
    MeritOperandType_FTGT = 338,
    MeritOperandType_FTLT = 339,
    MeritOperandType_GLCR = 340,
    MeritOperandType_EFNO = 341,
    MeritOperandType_DIVB = 342,
    MeritOperandType_PROB = 343,
    MeritOperandType_TCGT = 344,
    MeritOperandType_TCLT = 345,
    MeritOperandType_TCVA = 346,
    MeritOperandType_NORX = 347,
    MeritOperandType_NORY = 348,
    MeritOperandType_NORZ = 349,
    MeritOperandType_NORD = 350,
    MeritOperandType_COSA = 351,
    MeritOperandType_MTHA = 352,
    MeritOperandType_MTHS = 353,
    MeritOperandType_MTHT = 354,
    MeritOperandType_BFSD = 355,
    MeritOperandType_EXPD = 356,
    MeritOperandType_CVIG = 357,
    MeritOperandType_GPSX = 358,
    MeritOperandType_GPSY = 359,
    MeritOperandType_GPRX = 360,
    MeritOperandType_GPRY = 361,
    MeritOperandType_GPRT = 362,
    MeritOperandType_POWF = 363,
    MeritOperandType_STHI = 364,
    MeritOperandType_CNPX = 365,
    MeritOperandType_CNPY = 366,
    MeritOperandType_CNAX = 367,
    MeritOperandType_CNAY = 368,
    MeritOperandType_STRH = 369,
    MeritOperandType_CIGT = 370,
    MeritOperandType_CILT = 371,
    MeritOperandType_CIVA = 372,
    MeritOperandType_CEGT = 373,
    MeritOperandType_CELT = 374,
    MeritOperandType_CEVA = 375,
    MeritOperandType_NSST = 376,
    MeritOperandType_ABCD = 377,
    MeritOperandType_DISA = 378,
    MeritOperandType_POWP = 379,
    MeritOperandType_RECI = 380,
    MeritOperandType_NSRM = 381,
    MeritOperandType_FDMO = 382,
    MeritOperandType_FDRE = 383,
    MeritOperandType_FREZ = 384,
    MeritOperandType_NSDE = 385,
    MeritOperandType_ERFP = 386,
    MeritOperandType_NSDP = 387,
    MeritOperandType_POPI = 388,
    MeritOperandType_ABGT = 389,
    MeritOperandType_ABLT = 390,
    MeritOperandType_SMIA = 391,
    MeritOperandType_SCUR = 392,
    MeritOperandType_SDRV = 393,
    MeritOperandType_REVR = 394,
    MeritOperandType_NSLT = 395,
    MeritOperandType_NSTW = 396,
    MeritOperandType_NSRW = 397,
    MeritOperandType_MNRE = 398,
    MeritOperandType_MXRE = 399,
    MeritOperandType_MNRI = 400,
    MeritOperandType_MXRI = 401,
    MeritOperandType_CEHX = 402,
    MeritOperandType_CEHY = 403,
    MeritOperandType_BLTH = 404,
    MeritOperandType_GBPZ = 405
};

enum __declspec(uuid("64f8dae7-ac62-4855-8774-dd6bbc1ac76f"))
MeritColumn
{
    MeritColumn_Comment = 1,
    MeritColumn_Param1 = 2,
    MeritColumn_Param2 = 3,
    MeritColumn_Param3 = 4,
    MeritColumn_Param4 = 5,
    MeritColumn_Param5 = 6,
    MeritColumn_Param6 = 7,
    MeritColumn_Param7 = 8,
    MeritColumn_Param8 = 9,
    MeritColumn_Target = 10,
    MeritColumn_Weight = 11,
    MeritColumn_Value = 12,
    MeritColumn_Contrib = 13
};

enum __declspec(uuid("b4d60370-2e82-4a0f-9619-45a1cba67189"))
MultiConfigOperandType
{
    MultiConfigOperandType_MOFF = 0,
    MultiConfigOperandType_AICN = 1,
    MultiConfigOperandType_AFOC = 2,
    MultiConfigOperandType_APDF = 3,
    MultiConfigOperandType_APDT = 4,
    MultiConfigOperandType_APDX = 5,
    MultiConfigOperandType_APDY = 6,
    MultiConfigOperandType_APER = 7,
    MultiConfigOperandType_APMN = 8,
    MultiConfigOperandType_APMX = 9,
    MultiConfigOperandType_APTP = 10,
    MultiConfigOperandType_CADX = 11,
    MultiConfigOperandType_CADY = 12,
    MultiConfigOperandType_CAOR = 13,
    MultiConfigOperandType_CATX = 14,
    MultiConfigOperandType_CATY = 15,
    MultiConfigOperandType_CATZ = 16,
    MultiConfigOperandType_CBDX = 17,
    MultiConfigOperandType_CBDY = 18,
    MultiConfigOperandType_CBOR = 19,
    MultiConfigOperandType_CBTX = 20,
    MultiConfigOperandType_CBTY = 21,
    MultiConfigOperandType_CBTZ = 22,
    MultiConfigOperandType_CONN = 23,
    MultiConfigOperandType_COTN = 24,
    MultiConfigOperandType_CPCN = 25,
    MultiConfigOperandType_CROR = 26,
    MultiConfigOperandType_CRSR = 27,
    MultiConfigOperandType_CRVT = 28,
    MultiConfigOperandType_CSP1 = 29,
    MultiConfigOperandType_CSP2 = 30,
    MultiConfigOperandType_CWGT = 31,
    MultiConfigOperandType_EDVA = 32,
    MultiConfigOperandType_FLTP = 33,
    MultiConfigOperandType_FLWT = 34,
    MultiConfigOperandType_FVAN = 35,
    MultiConfigOperandType_FVCX = 36,
    MultiConfigOperandType_FVCY = 37,
    MultiConfigOperandType_FVDX = 38,
    MultiConfigOperandType_FVDY = 39,
    MultiConfigOperandType_GCRS = 40,
    MultiConfigOperandType_GLSS = 41,
    MultiConfigOperandType_GPEX = 42,
    MultiConfigOperandType_GPEY = 43,
    MultiConfigOperandType_GPIU = 44,
    MultiConfigOperandType_GPJX = 45,
    MultiConfigOperandType_GPJY = 46,
    MultiConfigOperandType_GPPX = 47,
    MultiConfigOperandType_GPPY = 48,
    MultiConfigOperandType_GQPO = 49,
    MultiConfigOperandType_HOLD = 50,
    MultiConfigOperandType_IGNM = 51,
    MultiConfigOperandType_IGNR = 52,
    MultiConfigOperandType_LTTL = 53,
    MultiConfigOperandType_MABB = 54,
    MultiConfigOperandType_MCOM = 55,
    MultiConfigOperandType_MDPG = 56,
    MultiConfigOperandType_MIND = 57,
    MultiConfigOperandType_MTFU = 58,
    MultiConfigOperandType_NCOM = 59,
    MultiConfigOperandType_NCOT = 60,
    MultiConfigOperandType_NGLS = 61,
    MultiConfigOperandType_NPAR = 62,
    MultiConfigOperandType_NPOS = 63,
    MultiConfigOperandType_NPRO = 64,
    MultiConfigOperandType_PAR1 = 65,
    MultiConfigOperandType_PAR2 = 66,
    MultiConfigOperandType_PAR3 = 67,
    MultiConfigOperandType_PAR4 = 68,
    MultiConfigOperandType_PAR5 = 69,
    MultiConfigOperandType_PAR6 = 70,
    MultiConfigOperandType_PAR7 = 71,
    MultiConfigOperandType_PAR8 = 72,
    MultiConfigOperandType_PRAM = 73,
    MultiConfigOperandType_PRES = 74,
    MultiConfigOperandType_PRWV = 75,
    MultiConfigOperandType_PSCX = 76,
    MultiConfigOperandType_PSCY = 77,
    MultiConfigOperandType_PSHX = 78,
    MultiConfigOperandType_PSHY = 79,
    MultiConfigOperandType_PSHZ = 80,
    MultiConfigOperandType_PSP1 = 81,
    MultiConfigOperandType_PSP2 = 82,
    MultiConfigOperandType_PSP3 = 83,
    MultiConfigOperandType_PUCN = 84,
    MultiConfigOperandType_PXAR = 85,
    MultiConfigOperandType_RAAM = 86,
    MultiConfigOperandType_SATP = 87,
    MultiConfigOperandType_SDIA = 88,
    MultiConfigOperandType_SDRW = 89,
    MultiConfigOperandType_STPS = 90,
    MultiConfigOperandType_SWCN = 91,
    MultiConfigOperandType_TCEX = 92,
    MultiConfigOperandType_TELE = 93,
    MultiConfigOperandType_TEMP = 94,
    MultiConfigOperandType_THIC = 95,
    MultiConfigOperandType_TSP1 = 96,
    MultiConfigOperandType_TSP2 = 97,
    MultiConfigOperandType_TSP3 = 98,
    MultiConfigOperandType_UDAF = 99,
    MultiConfigOperandType_WAVE = 100,
    MultiConfigOperandType_WLWT = 101,
    MultiConfigOperandType_XFIE = 102,
    MultiConfigOperandType_YFIE = 103,
    MultiConfigOperandType_OPDR = 104,
    MultiConfigOperandType_SRTS = 105,
    MultiConfigOperandType_MCHI = 106
};

enum __declspec(uuid("4acc227d-03b7-4948-9957-c1d44f4089aa"))
ZemaxColor
{
    ZemaxColor_Default = 0,
    ZemaxColor_Color1 = 1,
    ZemaxColor_Color2 = 2,
    ZemaxColor_Color3 = 3,
    ZemaxColor_Color4 = 4,
    ZemaxColor_Color5 = 5,
    ZemaxColor_Color6 = 6,
    ZemaxColor_Color7 = 7,
    ZemaxColor_Color8 = 8,
    ZemaxColor_Color9 = 9,
    ZemaxColor_Color10 = 10,
    ZemaxColor_Color11 = 11,
    ZemaxColor_Color12 = 12,
    ZemaxColor_Color13 = 13,
    ZemaxColor_Color14 = 14,
    ZemaxColor_Color15 = 15,
    ZemaxColor_Color16 = 16,
    ZemaxColor_Color17 = 17,
    ZemaxColor_Color18 = 18,
    ZemaxColor_Color19 = 19,
    ZemaxColor_Color20 = 20,
    ZemaxColor_Color21 = 21,
    ZemaxColor_Color22 = 22,
    ZemaxColor_Color23 = 23,
    ZemaxColor_Color24 = 24
};

struct __declspec(uuid("827091cf-1eff-4fa6-8200-f3777b9a2d7a"))
INCETypeData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAreUDASettingsAvailable))
    VARIANT_BOOL AreUDASettingsAvailable;
    __declspec(property(get=GetUserDefinedAperture,put=PutUserDefinedAperture))
    VARIANT_BOOL UserDefinedAperture;
    __declspec(property(get=GetNormalizeCoherentPower,put=PutNormalizeCoherentPower))
    VARIANT_BOOL NormalizeCoherentPower;
    __declspec(property(get=GetUDAScale,put=PutUDAScale))
    double UDAScale;
    __declspec(property(get=GetRecordSpectralData,put=PutRecordSpectralData))
    VARIANT_BOOL RecordSpectralData;
    __declspec(property(get=GetUDAFile,put=PutUDAFile))
    _bstr_t UDAFile;
    __declspec(property(get=GetNumberOfSpectralData,put=PutNumberOfSpectralData))
    long NumberOfSpectralData;
    __declspec(property(get=GetSpectralDataMinWave,put=PutSpectralDataMinWave))
    double SpectralDataMinWave;
    __declspec(property(get=GetRowColor,put=PutRowColor))
    enum ZemaxColor RowColor;
    __declspec(property(get=GetSpectralDataMaxWave,put=PutSpectralDataMaxWave))
    double SpectralDataMaxWave;
    __declspec(property(get=GetUseGlobalXYZRotationOrder,put=PutUseGlobalXYZRotationOrder))
    VARIANT_BOOL UseGlobalXYZRotationOrder;
    __declspec(property(get=GetConvertImportedFilesToZOF,put=PutConvertImportedFilesToZOF))
    VARIANT_BOOL ConvertImportedFilesToZOF;
    __declspec(property(get=GetConsiderObjects,put=PutConsiderObjects))
    _bstr_t ConsiderObjects;
    __declspec(property(get=GetIgnoreObjects,put=PutIgnoreObjects))
    _bstr_t IgnoreObjects;
    __declspec(property(get=GetRaysIgnoreObject,put=PutRaysIgnoreObject))
    enum RaysIgnoreObjectType RaysIgnoreObject;
    __declspec(property(get=GetUseConsiderIgnoreWhenSplitting,put=PutUseConsiderIgnoreWhenSplitting))
    VARIANT_BOOL UseConsiderIgnoreWhenSplitting;
    __declspec(property(get=GetFastRayTrace,put=PutFastRayTrace))
    VARIANT_BOOL FastRayTrace;
    __declspec(property(get=GetUseFastApproximateRayTrace,put=PutUseFastApproximateRayTrace))
    VARIANT_BOOL UseFastApproximateRayTrace;
    __declspec(property(get=GetObjectIsADetector,put=PutObjectIsADetector))
    VARIANT_BOOL ObjectIsADetector;
    __declspec(property(get=GetDetectorShowAs,put=PutDetectorShowAs))
    enum DetectorShowAsType DetectorShowAs;
    __declspec(property(get=GetUsePixelInterpolation,put=PutUsePixelInterpolation))
    VARIANT_BOOL UsePixelInterpolation;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetAreUDASettingsAvailable ( );
    VARIANT_BOOL GetUserDefinedAperture ( );
    void PutUserDefinedAperture (
        VARIANT_BOOL pRetVal );
    double GetUDAScale ( );
    void PutUDAScale (
        double pRetVal );
    _bstr_t GetUDAFile ( );
    void PutUDAFile (
        _bstr_t pRetVal );
    SAFEARRAY * GetAvailableUDAFiles ( );
    _bstr_t GetUDAFileFullPath ( );
    enum ZemaxColor GetRowColor ( );
    void PutRowColor (
        enum ZemaxColor pRetVal );
    VARIANT_BOOL GetUseGlobalXYZRotationOrder ( );
    void PutUseGlobalXYZRotationOrder (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetConvertImportedFilesToZOF ( );
    void PutConvertImportedFilesToZOF (
        VARIANT_BOOL pRetVal );
    _bstr_t GetConsiderObjects ( );
    void PutConsiderObjects (
        _bstr_t pRetVal );
    _bstr_t GetIgnoreObjects ( );
    void PutIgnoreObjects (
        _bstr_t pRetVal );
    enum RaysIgnoreObjectType GetRaysIgnoreObject ( );
    void PutRaysIgnoreObject (
        enum RaysIgnoreObjectType pRetVal );
    VARIANT_BOOL GetUseConsiderIgnoreWhenSplitting ( );
    void PutUseConsiderIgnoreWhenSplitting (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetFastRayTrace ( );
    void PutFastRayTrace (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetUseFastApproximateRayTrace ( );
    void PutUseFastApproximateRayTrace (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetObjectIsADetector ( );
    void PutObjectIsADetector (
        VARIANT_BOOL pRetVal );
    enum DetectorShowAsType GetDetectorShowAs ( );
    void PutDetectorShowAs (
        enum DetectorShowAsType pRetVal );
    VARIANT_BOOL GetUsePixelInterpolation ( );
    void PutUsePixelInterpolation (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetNormalizeCoherentPower ( );
    void PutNormalizeCoherentPower (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetRecordSpectralData ( );
    void PutRecordSpectralData (
        VARIANT_BOOL pRetVal );
    long GetNumberOfSpectralData ( );
    void PutNumberOfSpectralData (
        long pRetVal );
    double GetSpectralDataMinWave ( );
    void PutSpectralDataMinWave (
        double pRetVal );
    double GetSpectralDataMaxWave ( );
    void PutSpectralDataMaxWave (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AreUDASettingsAvailable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_UserDefinedAperture (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UserDefinedAperture (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UDAScale (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UDAScale (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_UDAFile (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UDAFile (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailableUDAFiles (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetUDAFileFullPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RowColor (
        /*[out,retval]*/ enum ZemaxColor * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RowColor (
        /*[in]*/ enum ZemaxColor pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseGlobalXYZRotationOrder (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseGlobalXYZRotationOrder (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ConvertImportedFilesToZOF (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ConvertImportedFilesToZOF (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ConsiderObjects (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ConsiderObjects (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_IgnoreObjects (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IgnoreObjects (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_RaysIgnoreObject (
        /*[out,retval]*/ enum RaysIgnoreObjectType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RaysIgnoreObject (
        /*[in]*/ enum RaysIgnoreObjectType pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseConsiderIgnoreWhenSplitting (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseConsiderIgnoreWhenSplitting (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_FastRayTrace (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FastRayTrace (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseFastApproximateRayTrace (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseFastApproximateRayTrace (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectIsADetector (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ObjectIsADetector (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_DetectorShowAs (
        /*[out,retval]*/ enum DetectorShowAsType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DetectorShowAs (
        /*[in]*/ enum DetectorShowAsType pRetVal ) = 0;
      virtual HRESULT __stdcall get_UsePixelInterpolation (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UsePixelInterpolation (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_NormalizeCoherentPower (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NormalizeCoherentPower (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_RecordSpectralData (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RecordSpectralData (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfSpectralData (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfSpectralData (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_SpectralDataMinWave (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SpectralDataMinWave (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_SpectralDataMaxWave (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SpectralDataMaxWave (
        /*[in]*/ double pRetVal ) = 0;
};

enum __declspec(uuid("003a348f-98fb-4f10-b204-c7b6569dc4fd"))
ZemaxOpacity
{
    ZemaxOpacity_P100 = 0,
    ZemaxOpacity_P90 = 1,
    ZemaxOpacity_P80 = 2,
    ZemaxOpacity_P70 = 3,
    ZemaxOpacity_P60 = 4,
    ZemaxOpacity_P50 = 5,
    ZemaxOpacity_P40 = 6,
    ZemaxOpacity_P30 = 7,
    ZemaxOpacity_P20 = 8,
    ZemaxOpacity_P10 = 9,
    ZemaxOpacity_P00 = 10
};

struct __declspec(uuid("eda57d36-7943-40e2-bc76-97e750de7b55"))
INCEDrawData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDoNotDrawObject,put=PutDoNotDrawObject))
    VARIANT_BOOL DoNotDrawObject;
    __declspec(property(get=GetDrawLocalAxis,put=PutDrawLocalAxis))
    VARIANT_BOOL DrawLocalAxis;
    __declspec(property(get=GetSupportsDrawingResolution))
    VARIANT_BOOL SupportsDrawingResolution;
    __declspec(property(get=GetDrawingResolution,put=PutDrawingResolution))
    enum DrawingResolutionType DrawingResolution;
    __declspec(property(get=GetNumSegments1,put=PutNumSegments1))
    long NumSegments1;
    __declspec(property(get=GetSegments1Type))
    _bstr_t Segments1Type;
    __declspec(property(get=GetNumSegments2,put=PutNumSegments2))
    long NumSegments2;
    __declspec(property(get=GetSegments2Type))
    _bstr_t Segments2Type;
    __declspec(property(get=GetExportAsTriangles,put=PutExportAsTriangles))
    VARIANT_BOOL ExportAsTriangles;
    __declspec(property(get=GetIncreaseResolutionOnShadedModelLayouts,put=PutIncreaseResolutionOnShadedModelLayouts))
    VARIANT_BOOL IncreaseResolutionOnShadedModelLayouts;
    __declspec(property(get=GetOpacity,put=PutOpacity))
    enum ZemaxOpacity Opacity;
    __declspec(property(get=GetObjectColor,put=PutObjectColor))
    enum ZemaxColor ObjectColor;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetDoNotDrawObject ( );
    void PutDoNotDrawObject (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetDrawLocalAxis ( );
    void PutDrawLocalAxis (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetSupportsDrawingResolution ( );
    enum DrawingResolutionType GetDrawingResolution ( );
    void PutDrawingResolution (
        enum DrawingResolutionType pRetVal );
    long GetNumSegments1 ( );
    void PutNumSegments1 (
        long pRetVal );
    _bstr_t GetSegments1Type ( );
    long GetNumSegments2 ( );
    void PutNumSegments2 (
        long pRetVal );
    _bstr_t GetSegments2Type ( );
    VARIANT_BOOL MakeAllObjectsDrawLikeThisOne ( );
    VARIANT_BOOL GetExportAsTriangles ( );
    void PutExportAsTriangles (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIncreaseResolutionOnShadedModelLayouts ( );
    void PutIncreaseResolutionOnShadedModelLayouts (
        VARIANT_BOOL pRetVal );
    enum ZemaxOpacity GetOpacity ( );
    void PutOpacity (
        enum ZemaxOpacity pRetVal );
    enum ZemaxColor GetObjectColor ( );
    void PutObjectColor (
        enum ZemaxColor pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DoNotDrawObject (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DoNotDrawObject (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_DrawLocalAxis (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DrawLocalAxis (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_SupportsDrawingResolution (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DrawingResolution (
        /*[out,retval]*/ enum DrawingResolutionType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DrawingResolution (
        /*[in]*/ enum DrawingResolutionType pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumSegments1 (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumSegments1 (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Segments1Type (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumSegments2 (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumSegments2 (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Segments2Type (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_MakeAllObjectsDrawLikeThisOne (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ExportAsTriangles (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ExportAsTriangles (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IncreaseResolutionOnShadedModelLayouts (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IncreaseResolutionOnShadedModelLayouts (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Opacity (
        /*[out,retval]*/ enum ZemaxOpacity * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Opacity (
        /*[in]*/ enum ZemaxOpacity pRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectColor (
        /*[out,retval]*/ enum ZemaxColor * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ObjectColor (
        /*[in]*/ enum ZemaxColor pRetVal ) = 0;
};

struct __declspec(uuid("b671c677-b21f-49e9-bc66-0e4f1719596c"))
ILDETypeData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSurfaceColor,put=PutSurfaceColor))
    enum ZemaxColor SurfaceColor;
    __declspec(property(get=GetSurfaceOpacity,put=PutSurfaceOpacity))
    enum ZemaxOpacity SurfaceOpacity;
    __declspec(property(get=GetRowColor,put=PutRowColor))
    enum ZemaxColor RowColor;
    __declspec(property(get=GetIsStop,put=PutIsStop))
    VARIANT_BOOL IsStop;
    __declspec(property(get=GetCanBeStop))
    VARIANT_BOOL CanBeStop;
    __declspec(property(get=GetIsGlobalCoordinateReference,put=PutIsGlobalCoordinateReference))
    VARIANT_BOOL IsGlobalCoordinateReference;
    __declspec(property(get=GetCanBeGCR))
    VARIANT_BOOL CanBeGCR;
    __declspec(property(get=GetIgnoreSurface,put=PutIgnoreSurface))
    VARIANT_BOOL IgnoreSurface;
    __declspec(property(get=GetSurfaceCannotBeHyperhemispheric,put=PutSurfaceCannotBeHyperhemispheric))
    VARIANT_BOOL SurfaceCannotBeHyperhemispheric;

    //
    // Wrapper methods for error-handling
    //

    enum ZemaxColor GetSurfaceColor ( );
    void PutSurfaceColor (
        enum ZemaxColor pRetVal );
    enum ZemaxOpacity GetSurfaceOpacity ( );
    void PutSurfaceOpacity (
        enum ZemaxOpacity pRetVal );
    enum ZemaxColor GetRowColor ( );
    void PutRowColor (
        enum ZemaxColor pRetVal );
    VARIANT_BOOL GetIsStop ( );
    void PutIsStop (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetCanBeStop ( );
    VARIANT_BOOL GetIsGlobalCoordinateReference ( );
    void PutIsGlobalCoordinateReference (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetCanBeGCR ( );
    VARIANT_BOOL GetIgnoreSurface ( );
    void PutIgnoreSurface (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetSurfaceCannotBeHyperhemispheric ( );
    void PutSurfaceCannotBeHyperhemispheric (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SurfaceColor (
        /*[out,retval]*/ enum ZemaxColor * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SurfaceColor (
        /*[in]*/ enum ZemaxColor pRetVal ) = 0;
      virtual HRESULT __stdcall get_SurfaceOpacity (
        /*[out,retval]*/ enum ZemaxOpacity * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SurfaceOpacity (
        /*[in]*/ enum ZemaxOpacity pRetVal ) = 0;
      virtual HRESULT __stdcall get_RowColor (
        /*[out,retval]*/ enum ZemaxColor * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RowColor (
        /*[in]*/ enum ZemaxColor pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsStop (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsStop (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_CanBeStop (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsGlobalCoordinateReference (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsGlobalCoordinateReference (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_CanBeGCR (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IgnoreSurface (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IgnoreSurface (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_SurfaceCannotBeHyperhemispheric (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SurfaceCannotBeHyperhemispheric (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("53fc0963-b84e-4871-a3d4-25a0a0dc2ab1"))
IVectorData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetLength))
    long Length;
    __declspec(property(get=GetData,put=PutData))
    SAFEARRAY * Data;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsReadOnly ( );
    long GetLength ( );
    SAFEARRAY * GetData ( );
    void PutData (
        SAFEARRAY * pRetVal );
    HRESULT ReadData (
        long size,
        double * Data );
    HRESULT WriteData (
        long size,
        double * Data );
    double GetValueAt (
        long position );
    HRESULT SetValueAt (
        long position,
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Data (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Data (
        /*[in]*/ SAFEARRAY * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ReadData (
        /*[in]*/ long size,
        /*[in,out]*/ double * Data ) = 0;
      virtual HRESULT __stdcall raw_WriteData (
        /*[in]*/ long size,
        /*[in]*/ double * Data ) = 0;
      virtual HRESULT __stdcall raw_GetValueAt (
        /*[in]*/ long position,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetValueAt (
        /*[in]*/ long position,
        /*[in]*/ double Value ) = 0;
};

struct __declspec(uuid("b6495ec7-f923-4090-87fe-4e6f37e0121a"))
IMatrixData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetRows))
    long Rows;
    __declspec(property(get=GetCols))
    long Cols;
    __declspec(property(get=GetTotalLength))
    long TotalLength;
    __declspec(property(get=GetData,put=PutData))
    SAFEARRAY * Data;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsReadOnly ( );
    long GetRows ( );
    long GetCols ( );
    long GetTotalLength ( );
    SAFEARRAY * GetData ( );
    void PutData (
        SAFEARRAY * pRetVal );
    HRESULT ReadData (
        long size,
        double * Data );
    HRESULT WriteData (
        long size,
        double * Data );
    double GetValueAt (
        long Row,
        long Col );
    HRESULT SetValueAt (
        long Row,
        long Col,
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Rows (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Cols (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TotalLength (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Data (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Data (
        /*[in]*/ SAFEARRAY * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ReadData (
        /*[in]*/ long size,
        /*[in,out]*/ double * Data ) = 0;
      virtual HRESULT __stdcall raw_WriteData (
        /*[in]*/ long size,
        /*[in]*/ double * Data ) = 0;
      virtual HRESULT __stdcall raw_GetValueAt (
        /*[in]*/ long Row,
        /*[in]*/ long Col,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetValueAt (
        /*[in]*/ long Row,
        /*[in]*/ long Col,
        /*[in]*/ double Value ) = 0;
};

enum __declspec(uuid("06c94169-0d56-4445-be39-3691843dd2ca"))
SettingsDataType
{
    SettingsDataType_None = 0,
    SettingsDataType_Integer = 1,
    SettingsDataType_Double = 2,
    SettingsDataType_Float = 3,
    SettingsDataType_String = 4,
    SettingsDataType_Byte = 5,
    SettingsDataType_Boolean = 6
};

struct __declspec(uuid("42d06af0-fb89-4e98-a0e6-7b197348f699"))
ISettingsData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNumberOfSettings))
    long NumberOfSettings;

    //
    // Wrapper methods for error-handling
    //

    long GetNumberOfSettings ( );
    SAFEARRAY * GetKeys ( );
    VARIANT_BOOL GetEntryType (
        _bstr_t key,
        enum SettingsDataType * Type,
        VARIANT_BOOL * isArray,
        long * arraySize );
    VARIANT_BOOL GetDoubleValue (
        _bstr_t key,
        double * val );
    VARIANT_BOOL GetIntegerValue (
        _bstr_t key,
        long * val );
    VARIANT_BOOL GetFloatValue (
        _bstr_t key,
        float * val );
    VARIANT_BOOL GetStringValue (
        _bstr_t key,
        BSTR * val );
    VARIANT_BOOL GetByteValue (
        _bstr_t key,
        unsigned char * val );
    VARIANT_BOOL GetBooleanValue (
        _bstr_t key,
        VARIANT_BOOL * val );
    HRESULT SetDoubleValue (
        _bstr_t key,
        double val );
    HRESULT SetIntegerValue (
        _bstr_t key,
        long val );
    HRESULT SetFloatValue (
        _bstr_t key,
        float val );
    HRESULT SetStringValue (
        _bstr_t key,
        _bstr_t val );
    HRESULT SetByteValue (
        _bstr_t key,
        unsigned char val );
    HRESULT SetBooleanValue (
        _bstr_t key,
        VARIANT_BOOL val );
    VARIANT_BOOL GetDoubleArray (
        _bstr_t key,
        long size,
        double * val );
    VARIANT_BOOL GetIntegerArray (
        _bstr_t key,
        long size,
        long * val );
    VARIANT_BOOL GetFloatArray (
        _bstr_t key,
        long size,
        float * val );
    VARIANT_BOOL GetByteArray (
        _bstr_t key,
        long size,
        unsigned char * val );
    VARIANT_BOOL GetBooleanArray (
        _bstr_t key,
        long size,
        VARIANT_BOOL * val );
    HRESULT SetDoubleArray (
        _bstr_t key,
        long size,
        double * val );
    HRESULT SetIntegerArray (
        _bstr_t key,
        long size,
        long * val );
    HRESULT SetFloatArray (
        _bstr_t key,
        long size,
        float * val );
    HRESULT SetByteArray (
        _bstr_t key,
        long size,
        unsigned char * val );
    HRESULT SetBooleanArray (
        _bstr_t key,
        long size,
        VARIANT_BOOL * val );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NumberOfSettings (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetKeys (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetEntryType (
        /*[in]*/ BSTR key,
        /*[out]*/ enum SettingsDataType * Type,
        /*[out]*/ VARIANT_BOOL * isArray,
        /*[out]*/ long * arraySize,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetDoubleValue (
        /*[in]*/ BSTR key,
        /*[out]*/ double * val,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetIntegerValue (
        /*[in]*/ BSTR key,
        /*[out]*/ long * val,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetFloatValue (
        /*[in]*/ BSTR key,
        /*[out]*/ float * val,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetStringValue (
        /*[in]*/ BSTR key,
        /*[out]*/ BSTR * val,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetByteValue (
        /*[in]*/ BSTR key,
        /*[out]*/ unsigned char * val,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetBooleanValue (
        /*[in]*/ BSTR key,
        /*[out]*/ VARIANT_BOOL * val,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetDoubleValue (
        /*[in]*/ BSTR key,
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall raw_SetIntegerValue (
        /*[in]*/ BSTR key,
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall raw_SetFloatValue (
        /*[in]*/ BSTR key,
        /*[in]*/ float val ) = 0;
      virtual HRESULT __stdcall raw_SetStringValue (
        /*[in]*/ BSTR key,
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall raw_SetByteValue (
        /*[in]*/ BSTR key,
        /*[in]*/ unsigned char val ) = 0;
      virtual HRESULT __stdcall raw_SetBooleanValue (
        /*[in]*/ BSTR key,
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall raw_GetDoubleArray (
        /*[in]*/ BSTR key,
        /*[in]*/ long size,
        /*[in,out]*/ double * val,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetIntegerArray (
        /*[in]*/ BSTR key,
        /*[in]*/ long size,
        /*[in,out]*/ long * val,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetFloatArray (
        /*[in]*/ BSTR key,
        /*[in]*/ long size,
        /*[in,out]*/ float * val,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetByteArray (
        /*[in]*/ BSTR key,
        /*[in]*/ long size,
        /*[in,out]*/ unsigned char * val,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetBooleanArray (
        /*[in]*/ BSTR key,
        /*[in]*/ long size,
        /*[in,out]*/ VARIANT_BOOL * val,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetDoubleArray (
        /*[in]*/ BSTR key,
        /*[in]*/ long size,
        /*[in]*/ double * val ) = 0;
      virtual HRESULT __stdcall raw_SetIntegerArray (
        /*[in]*/ BSTR key,
        /*[in]*/ long size,
        /*[in]*/ long * val ) = 0;
      virtual HRESULT __stdcall raw_SetFloatArray (
        /*[in]*/ BSTR key,
        /*[in]*/ long size,
        /*[in]*/ float * val ) = 0;
      virtual HRESULT __stdcall raw_SetByteArray (
        /*[in]*/ BSTR key,
        /*[in]*/ long size,
        /*[in]*/ unsigned char * val ) = 0;
      virtual HRESULT __stdcall raw_SetBooleanArray (
        /*[in]*/ BSTR key,
        /*[in]*/ long size,
        /*[in]*/ VARIANT_BOOL * val ) = 0;
};

enum __declspec(uuid("6aacaaed-c624-4e91-b2bb-593af900d25d"))
AnalysisIDM
{
    AnalysisIDM_RayFan = 0,
    AnalysisIDM_OpticalPathFan = 1,
    AnalysisIDM_PupilAberrationFan = 2,
    AnalysisIDM_FieldCurvatureAndDistortion = 3,
    AnalysisIDM_FocalShiftDiagram = 4,
    AnalysisIDM_GridDistortion = 5,
    AnalysisIDM_LateralColor = 6,
    AnalysisIDM_LongitudinalAberration = 7,
    AnalysisIDM_RayTrace = 8,
    AnalysisIDM_SeidelCoefficients = 9,
    AnalysisIDM_SeidelDiagram = 10,
    AnalysisIDM_ZernikeAnnularCoefficients = 11,
    AnalysisIDM_ZernikeCoefficientsVsField = 12,
    AnalysisIDM_ZernikeFringeCoefficients = 13,
    AnalysisIDM_ZernikeStandardCoefficients = 14,
    AnalysisIDM_FftMtf = 15,
    AnalysisIDM_FftThroughFocusMtf = 16,
    AnalysisIDM_GeometricThroughFocusMtf = 17,
    AnalysisIDM_GeometricMtf = 18,
    AnalysisIDM_FftMtfMap = 19,
    AnalysisIDM_GeometricMtfMap = 20,
    AnalysisIDM_FftSurfaceMtf = 21,
    AnalysisIDM_FftMtfvsField = 22,
    AnalysisIDM_GeometricMtfvsField = 23,
    AnalysisIDM_HuygensMtfvsField = 24,
    AnalysisIDM_HuygensMtf = 25,
    AnalysisIDM_HuygensSurfaceMtf = 26,
    AnalysisIDM_HuygensThroughFocusMtf = 27,
    AnalysisIDM_FftPsf = 28,
    AnalysisIDM_FftPsfCrossSection = 29,
    AnalysisIDM_FftPsfLineEdgeSpread = 30,
    AnalysisIDM_HuygensPsfCrossSection = 31,
    AnalysisIDM_HuygensPsf = 32,
    AnalysisIDM_DiffractionEncircledEnergy = 33,
    AnalysisIDM_GeometricEncircledEnergy = 34,
    AnalysisIDM_GeometricLineEdgeSpread = 35,
    AnalysisIDM_ExtendedSourceEncircledEnergy = 36,
    AnalysisIDM_SurfaceCurvatureCross = 37,
    AnalysisIDM_SurfacePhaseCross = 38,
    AnalysisIDM_SurfaceSagCross = 39,
    AnalysisIDM_SurfaceCurvature = 40,
    AnalysisIDM_SurfacePhase = 41,
    AnalysisIDM_SurfaceSag = 42,
    AnalysisIDM_StandardSpot = 43,
    AnalysisIDM_ThroughFocusSpot = 44,
    AnalysisIDM_FullFieldSpot = 45,
    AnalysisIDM_MatrixSpot = 46,
    AnalysisIDM_ConfigurationMatrixSpot = 47,
    AnalysisIDM_RMSField = 48,
    AnalysisIDM_RMSFieldMap = 49,
    AnalysisIDM_RMSLambdaDiagram = 50,
    AnalysisIDM_RMSFocus = 51,
    AnalysisIDM_Foucault = 52,
    AnalysisIDM_Interferogram = 53,
    AnalysisIDM_WavefrontMap = 54,
    AnalysisIDM_DetectorViewer = 55,
    AnalysisIDM_Draw2D = 56,
    AnalysisIDM_Draw3D = 57,
    AnalysisIDM_ImageSimulation = 58,
    AnalysisIDM_GeometricImageAnalysis = 59,
    AnalysisIDM_IMABIMFileViewer = 60,
    AnalysisIDM_GeometricBitmapImageAnalysis = 61,
    AnalysisIDM_BitmapFileViewer = 62,
    AnalysisIDM_LightSourceAnalysis = 63,
    AnalysisIDM_PartiallyCoherentImageAnalysis = 64,
    AnalysisIDM_ExtendedDiffractionImageAnalysis = 65,
    AnalysisIDM_BiocularFieldOfViewAnalysis = 66,
    AnalysisIDM_BiocularDipvergenceConvergence = 67,
    AnalysisIDM_RelativeIllumination = 68,
    AnalysisIDM_VignettingDiagramSettings = 69,
    AnalysisIDM_FootprintSettings = 70,
    AnalysisIDM_YYbarDiagram = 71,
    AnalysisIDM_PowerFieldMapSettings = 72,
    AnalysisIDM_PowerPupilMapSettings = 73,
    AnalysisIDM_IncidentAnglevsImageHeight = 74,
    AnalysisIDM_FiberCouplingSettings = 75,
    AnalysisIDM_YNIContributions = 76,
    AnalysisIDM_SagTable = 77,
    AnalysisIDM_CardinalPoints = 78,
    AnalysisIDM_DispersionDiagram = 79,
    AnalysisIDM_GlassMap = 80,
    AnalysisIDM_AthermalGlassMap = 81,
    AnalysisIDM_InternalTransmissionvsWavelength = 82,
    AnalysisIDM_DispersionvsWavelength = 83,
    AnalysisIDM_GrinProfile = 84,
    AnalysisIDM_GradiumProfile = 85,
    AnalysisIDM_UniversalPlot1D = 86,
    AnalysisIDM_UniversalPlot2D = 87,
    AnalysisIDM_PolarizationRayTrace = 88,
    AnalysisIDM_PolarizationPupilMap = 89,
    AnalysisIDM_Transmission = 90,
    AnalysisIDM_PhaseAberration = 91,
    AnalysisIDM_TransmissionFan = 92,
    AnalysisIDM_ParaxialGaussianBeam = 93,
    AnalysisIDM_SkewGaussianBeam = 94,
    AnalysisIDM_PhysicalOpticsPropagation = 95,
    AnalysisIDM_BeamFileViewer = 96,
    AnalysisIDM_ReflectionvsAngle = 97,
    AnalysisIDM_TransmissionvsAngle = 98,
    AnalysisIDM_AbsorptionvsAngle = 99,
    AnalysisIDM_DiattenuationvsAngle = 100,
    AnalysisIDM_PhasevsAngle = 101,
    AnalysisIDM_RetardancevsAngle = 102,
    AnalysisIDM_ReflectionvsWavelength = 103,
    AnalysisIDM_TransmissionvsWavelength = 104,
    AnalysisIDM_AbsorptionvsWavelength = 105,
    AnalysisIDM_DiattenuationvsWavelength = 106,
    AnalysisIDM_PhasevsWavelength = 107,
    AnalysisIDM_RetardancevsWavelength = 108,
    AnalysisIDM_DirectivityPlot = 109,
    AnalysisIDM_SourcePolarViewer = 110,
    AnalysisIDM_PhotoluminscenceViewer = 111,
    AnalysisIDM_SourceSpectrumViewer = 112,
    AnalysisIDM_RadiantSourceModelViewerSettings = 113,
    AnalysisIDM_SurfaceDataSettings = 114,
    AnalysisIDM_PrescriptionDataSettings = 115,
    AnalysisIDM_FileComparatorSettings = 116,
    AnalysisIDM_PartViewer = 117,
    AnalysisIDM_ReverseRadianceAnalysis = 118,
    AnalysisIDM_PathAnalysis = 119,
    AnalysisIDM_FluxvsWavelength = 120,
    AnalysisIDM_RoadwayLighting = 121,
    AnalysisIDM_SourceIlluminationMap = 122,
    AnalysisIDM_ScatterFunctionViewer = 123,
    AnalysisIDM_ScatterPolarPlotSettings = 124,
    AnalysisIDM_ZemaxElementDrawing = 125,
    AnalysisIDM_ShadedModel = 126,
    AnalysisIDM_NSCShadedModel = 127,
    AnalysisIDM_NSC3DLayout = 128,
    AnalysisIDM_NSCObjectViewer = 129,
    AnalysisIDM_RayDatabaseViewer = 130,
    AnalysisIDM_ISOElementDrawing = 131,
    AnalysisIDM_SystemData = 132,
    AnalysisIDM_TestPlateList = 133,
    AnalysisIDM_SourceColorChart1931 = 134,
    AnalysisIDM_SourceColorChart1976 = 135,
    AnalysisIDM_PrescriptionGraphic = 136,
    AnalysisIDM_CriticalRayTracer = 137
};

enum __declspec(uuid("755a1ce9-3abb-40fa-afa6-d91521f3ff87"))
ErrorType
{
    ErrorType_Success = 0,
    ErrorType_InvalidParameter = 1,
    ErrorType_InvalidSettings = 2,
    ErrorType_Failed = 3,
    ErrorType_AnalysisUnavailableForProgramMode = 4,
    ErrorType_NotYetImplemented = 5
};

struct __declspec(uuid("d7bb5e27-8a09-47bd-88ca-75c60042eec0"))
INSCRayTrace : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAutoUpdate,put=PutAutoUpdate))
    VARIANT_BOOL AutoUpdate;
    __declspec(property(get=GetNumberOfCores,put=PutNumberOfCores))
    long NumberOfCores;
    __declspec(property(get=GetUsePolarization,put=PutUsePolarization))
    VARIANT_BOOL UsePolarization;
    __declspec(property(get=GetIgnoreErrors,put=PutIgnoreErrors))
    VARIANT_BOOL IgnoreErrors;
    __declspec(property(get=GetSplitNSCRays,put=PutSplitNSCRays))
    VARIANT_BOOL SplitNSCRays;
    __declspec(property(get=GetScatterNSCRays,put=PutScatterNSCRays))
    VARIANT_BOOL ScatterNSCRays;
    __declspec(property(get=GetSaveRays,put=PutSaveRays))
    VARIANT_BOOL SaveRays;
    __declspec(property(get=GetSaveRaysFile,put=PutSaveRaysFile))
    _bstr_t SaveRaysFile;
    __declspec(property(get=GetZRDFormat,put=PutZRDFormat))
    enum ZRDFormatType ZRDFormat;
    __declspec(property(get=GetFilter,put=PutFilter))
    _bstr_t Filter;

    //
    // Wrapper methods for error-handling
    //

    enum ErrorType ClearDetectors (
        long DetectorNumber );
    enum ErrorType ClearDetectorObject (
        long ObjectNumber );
    VARIANT_BOOL GetAutoUpdate ( );
    void PutAutoUpdate (
        VARIANT_BOOL pRetVal );
    long GetNumberOfCores ( );
    void PutNumberOfCores (
        long pRetVal );
    VARIANT_BOOL GetUsePolarization ( );
    void PutUsePolarization (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIgnoreErrors ( );
    void PutIgnoreErrors (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetSplitNSCRays ( );
    void PutSplitNSCRays (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetScatterNSCRays ( );
    void PutScatterNSCRays (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetSaveRays ( );
    void PutSaveRays (
        VARIANT_BOOL pRetVal );
    _bstr_t GetSaveRaysFile ( );
    void PutSaveRaysFile (
        _bstr_t pRetVal );
    enum ZRDFormatType GetZRDFormat ( );
    void PutZRDFormat (
        enum ZRDFormatType pRetVal );
    _bstr_t GetFilter ( );
    void PutFilter (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ClearDetectors (
        /*[in]*/ long DetectorNumber,
        /*[out,retval]*/ enum ErrorType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ClearDetectorObject (
        /*[in]*/ long ObjectNumber,
        /*[out,retval]*/ enum ErrorType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AutoUpdate (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AutoUpdate (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfCores (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfCores (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_UsePolarization (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UsePolarization (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IgnoreErrors (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IgnoreErrors (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_SplitNSCRays (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SplitNSCRays (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ScatterNSCRays (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ScatterNSCRays (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_SaveRays (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SaveRays (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_SaveRaysFile (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SaveRaysFile (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZRDFormat (
        /*[out,retval]*/ enum ZRDFormatType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ZRDFormat (
        /*[in]*/ enum ZRDFormatType pRetVal ) = 0;
      virtual HRESULT __stdcall get_Filter (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Filter (
        /*[in]*/ BSTR pRetVal ) = 0;
};

struct __declspec(uuid("faa2258a-3c52-4eb5-b65f-a7b6ae7e6cae"))
IOpticalSystemTools : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCurrentTool))
    ISystemToolPtr CurrentTool;
    __declspec(property(get=GetProgress))
    long Progress;
    __declspec(property(get=GetStatus))
    _bstr_t Status;
    __declspec(property(get=GetIsRunning))
    VARIANT_BOOL IsRunning;

    //
    // Wrapper methods for error-handling
    //

    ISystemToolPtr GetCurrentTool ( );
    long GetProgress ( );
    _bstr_t GetStatus ( );
    VARIANT_BOOL GetIsRunning ( );
    IBatchRayTracePtr OpenBatchRayTrace ( );
    INSCRayTracePtr OpenNSCRayTrace ( );
    IQuickAdjustPtr OpenQuickAdjust ( );
    IQuickFocusPtr OpenQuickFocus ( );
    ILightningTracePtr OpenLightningTrace ( );
    ILocalOptimizationPtr OpenLocalOptimization ( );
    IGlobalOptimizationPtr OpenGlobalOptimization ( );
    IHammerOptimizationPtr OpenHammerOptimization ( );
    ITolerancingPtr OpenTolerancing ( );
    IRestoreArchivePtr OpenRestoreZAR ( );
    ICreateArchivePtr OpenCreateZAR ( );
    IExportCADPtr OpenExportCAD ( );
    IScalePtr OpenScale ( );
    IMFCalculatorPtr OpenMeritFunctionCalculator ( );
    IUnknownPtr OpenLensCatalogs ( );
    IConvertToNSCGroupPtr OpenConvertToNSCGroup ( );
    IDesignLockdownPtr OpenDesignLockdown ( );
    ICriticalRaysetGeneratorPtr OpenCriticalRaysetGenerator ( );
    VARIANT_BOOL RemoveAllVariables ( );
    long SetAllRadiiVariable ( );
    long SetAllThicknessesVariable ( );
    SAFEARRAY * CreateDoubleVector (
        long numElements );
    SAFEARRAY * CreateDoubleMatrix (
        long Rows,
        long Cols );
    IZRDReaderPtr OpenRayDatabaseReader ( );
    IComputeRMSSpotSizePtr OpenRMSSpotRadiusCalculator ( );
    double GetConversionToSystemUnits (
        enum ZemaxSystemUnits fromUnits );
    double GetConversionFromSystemUnits (
        enum ZemaxSystemUnits toUnits );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CurrentTool (
        /*[out,retval]*/ struct ISystemTool * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Progress (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Status (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsRunning (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_OpenBatchRayTrace (
        /*[out,retval]*/ struct IBatchRayTrace * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_OpenNSCRayTrace (
        /*[out,retval]*/ struct INSCRayTrace * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_OpenQuickAdjust (
        /*[out,retval]*/ struct IQuickAdjust * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_OpenQuickFocus (
        /*[out,retval]*/ struct IQuickFocus * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_OpenLightningTrace (
        /*[out,retval]*/ struct ILightningTrace * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_OpenLocalOptimization (
        /*[out,retval]*/ struct ILocalOptimization * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_OpenGlobalOptimization (
        /*[out,retval]*/ struct IGlobalOptimization * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_OpenHammerOptimization (
        /*[out,retval]*/ struct IHammerOptimization * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_OpenTolerancing (
        /*[out,retval]*/ struct ITolerancing * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_OpenRestoreZAR (
        /*[out,retval]*/ struct IRestoreArchive * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_OpenCreateZAR (
        /*[out,retval]*/ struct ICreateArchive * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_OpenExportCAD (
        /*[out,retval]*/ struct IExportCAD * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_OpenScale (
        /*[out,retval]*/ struct IScale * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_OpenMeritFunctionCalculator (
        /*[out,retval]*/ struct IMFCalculator * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_OpenLensCatalogs (
        /*[out,retval]*/ IUnknown * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_OpenConvertToNSCGroup (
        /*[out,retval]*/ struct IConvertToNSCGroup * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_OpenDesignLockdown (
        /*[out,retval]*/ struct IDesignLockdown * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_OpenCriticalRaysetGenerator (
        /*[out,retval]*/ struct ICriticalRaysetGenerator * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllVariables (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetAllRadiiVariable (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetAllThicknessesVariable (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateDoubleVector (
        /*[in]*/ long numElements,
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateDoubleMatrix (
        /*[in]*/ long Rows,
        /*[in]*/ long Cols,
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_OpenRayDatabaseReader (
        /*[out,retval]*/ struct IZRDReader * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_OpenRMSSpotRadiusCalculator (
        /*[out,retval]*/ struct IComputeRMSSpotSize * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetConversionToSystemUnits (
        /*[in]*/ enum ZemaxSystemUnits fromUnits,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetConversionFromSystemUnits (
        /*[in]*/ enum ZemaxSystemUnits toUnits,
        /*[out,retval]*/ double * pRetVal ) = 0;
};

struct __declspec(uuid("4d96d146-624f-48ab-bee2-5c1437e9925f"))
IMessage : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetErrorCode))
    enum ErrorType ErrorCode;
    __declspec(property(get=GetText))
    _bstr_t Text;

    //
    // Wrapper methods for error-handling
    //

    enum ErrorType GetErrorCode ( );
    _bstr_t GetText ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ErrorCode (
        /*[out,retval]*/ enum ErrorType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("b8695a85-282b-4958-8b48-c71ee40f7eaa"))
IMessages : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT WriteLine (
        _bstr_t s,
        long userV,
        long settingsV );
    HRESULT WriteLine_2 (
        _bstr_t s,
        VARIANT_BOOL userV,
        VARIANT_BOOL settingsV );
    HRESULT WriteLine_3 (
        _bstr_t s,
        double userV,
        double settingsV );
    HRESULT WriteLine_4 (
        _bstr_t s,
        _bstr_t userV,
        _bstr_t settingsV );
    _bstr_t AllToString ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_WriteLine (
        /*[in]*/ BSTR s,
        /*[in]*/ long userV,
        /*[in]*/ long settingsV ) = 0;
      virtual HRESULT __stdcall raw_WriteLine_2 (
        /*[in]*/ BSTR s,
        /*[in]*/ VARIANT_BOOL userV,
        /*[in]*/ VARIANT_BOOL settingsV ) = 0;
      virtual HRESULT __stdcall raw_WriteLine_3 (
        /*[in]*/ BSTR s,
        /*[in]*/ double userV,
        /*[in]*/ double settingsV ) = 0;
      virtual HRESULT __stdcall raw_WriteLine_4 (
        /*[in]*/ BSTR s,
        /*[in]*/ BSTR userV,
        /*[in]*/ BSTR settingsV ) = 0;
      virtual HRESULT __stdcall raw_AllToString (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

enum __declspec(uuid("adf0aca9-9e83-4c00-88d9-52754575f51e"))
UserAnalysisDataType
{
    UserAnalysisDataType_None = 0,
    UserAnalysisDataType_Line2D = 1,
    UserAnalysisDataType_Grid = 2,
    UserAnalysisDataType_GridRGB = 3,
    UserAnalysisDataType_Text = 4
};

struct __declspec(uuid("92525150-c2fd-467a-95f3-0c98b2a54129"))
IUser2DLineData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPlotDescription))
    _bstr_t PlotDescription;
    __declspec(property(get=GetXLabel,put=PutXLabel))
    _bstr_t XLabel;
    __declspec(property(get=GetYAxisLog,put=PutYAxisLog))
    VARIANT_BOOL YAxisLog;
    __declspec(property(get=GetYLabel,put=PutYLabel))
    _bstr_t YLabel;
    __declspec(property(get=GetYAxisReversed,put=PutYAxisReversed))
    VARIANT_BOOL YAxisReversed;
    __declspec(property(get=GetNumberOfXValues))
    unsigned long NumberOfXValues;
    __declspec(property(get=GetNumberOfYValues))
    unsigned long NumberOfYValues;
    __declspec(property(get=GetNumberOfSeries))
    unsigned long NumberOfSeries;
    __declspec(property(get=GetYAxisSymmetric,put=PutYAxisSymmetric))
    VARIANT_BOOL YAxisSymmetric;
    __declspec(property(get=GetXAxisMin,put=PutXAxisMin))
    double XAxisMin;
    __declspec(property(get=GetXAxisMinAuto,put=PutXAxisMinAuto))
    VARIANT_BOOL XAxisMinAuto;
    __declspec(property(get=GetXAxisMax,put=PutXAxisMax))
    double XAxisMax;
    __declspec(property(get=GetXAxisMaxAuto,put=PutXAxisMaxAuto))
    VARIANT_BOOL XAxisMaxAuto;
    __declspec(property(get=GetXAxisLog,put=PutXAxisLog))
    VARIANT_BOOL XAxisLog;
    __declspec(property(get=GetXAxisReversed,put=PutXAxisReversed))
    VARIANT_BOOL XAxisReversed;
    __declspec(property(get=GetXAxisSymmetric,put=PutXAxisSymmetric))
    VARIANT_BOOL XAxisSymmetric;
    __declspec(property(get=GetYAxisMin,put=PutYAxisMin))
    double YAxisMin;
    __declspec(property(get=GetYAxisMinAuto,put=PutYAxisMinAuto))
    VARIANT_BOOL YAxisMinAuto;
    __declspec(property(get=GetYAxisMax,put=PutYAxisMax))
    double YAxisMax;
    __declspec(property(get=GetYAxisMaxAuto,put=PutYAxisMaxAuto))
    VARIANT_BOOL YAxisMaxAuto;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetPlotDescription ( );
    _bstr_t GetXLabel ( );
    void PutXLabel (
        _bstr_t pRetVal );
    _bstr_t GetYLabel ( );
    void PutYLabel (
        _bstr_t pRetVal );
    unsigned long GetNumberOfXValues ( );
    unsigned long GetNumberOfYValues ( );
    unsigned long GetNumberOfSeries ( );
    HRESULT AddSeries (
        _bstr_t seriesName,
        enum ZemaxColor seriesColor,
        unsigned long NumberOfYValues,
        double * yValues );
    HRESULT AddSeriesSafe (
        _bstr_t seriesName,
        enum ZemaxColor seriesColor,
        SAFEARRAY * yValues );
    double GetXAxisMin ( );
    void PutXAxisMin (
        double pRetVal );
    VARIANT_BOOL GetXAxisMinAuto ( );
    void PutXAxisMinAuto (
        VARIANT_BOOL pRetVal );
    double GetXAxisMax ( );
    void PutXAxisMax (
        double pRetVal );
    VARIANT_BOOL GetXAxisMaxAuto ( );
    void PutXAxisMaxAuto (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetXAxisLog ( );
    void PutXAxisLog (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetXAxisReversed ( );
    void PutXAxisReversed (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetXAxisSymmetric ( );
    void PutXAxisSymmetric (
        VARIANT_BOOL pRetVal );
    double GetYAxisMin ( );
    void PutYAxisMin (
        double pRetVal );
    VARIANT_BOOL GetYAxisMinAuto ( );
    void PutYAxisMinAuto (
        VARIANT_BOOL pRetVal );
    double GetYAxisMax ( );
    void PutYAxisMax (
        double pRetVal );
    VARIANT_BOOL GetYAxisMaxAuto ( );
    void PutYAxisMaxAuto (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetYAxisLog ( );
    void PutYAxisLog (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetYAxisReversed ( );
    void PutYAxisReversed (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetYAxisSymmetric ( );
    void PutYAxisSymmetric (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PlotDescription (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XLabel (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XLabel (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_YLabel (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YLabel (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfXValues (
        /*[out,retval]*/ unsigned long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfYValues (
        /*[out,retval]*/ unsigned long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfSeries (
        /*[out,retval]*/ unsigned long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddSeries (
        /*[in]*/ BSTR seriesName,
        /*[in]*/ enum ZemaxColor seriesColor,
        /*[in]*/ unsigned long NumberOfYValues,
        /*[in]*/ double * yValues ) = 0;
      virtual HRESULT __stdcall raw_AddSeriesSafe (
        /*[in]*/ BSTR seriesName,
        /*[in]*/ enum ZemaxColor seriesColor,
        /*[in]*/ SAFEARRAY * yValues ) = 0;
      virtual HRESULT __stdcall get_XAxisMin (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XAxisMin (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_XAxisMinAuto (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XAxisMinAuto (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_XAxisMax (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XAxisMax (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_XAxisMaxAuto (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XAxisMaxAuto (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_XAxisLog (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XAxisLog (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_XAxisReversed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XAxisReversed (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_XAxisSymmetric (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XAxisSymmetric (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_YAxisMin (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YAxisMin (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YAxisMinAuto (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YAxisMinAuto (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_YAxisMax (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YAxisMax (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YAxisMaxAuto (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YAxisMaxAuto (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_YAxisLog (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YAxisLog (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_YAxisReversed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YAxisReversed (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_YAxisSymmetric (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YAxisSymmetric (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

enum __declspec(uuid("7bf6c4b4-193e-4a0f-b9a6-db3b3e028621"))
GridPlotType
{
    GridPlotType_Surface = 0,
    GridPlotType_Contour = 1,
    GridPlotType_GrayScale = 2,
    GridPlotType_InverseGrayScale = 3,
    GridPlotType_FalseColor = 4,
    GridPlotType_InverseFalseColor = 5
};

struct __declspec(uuid("7c80a4f4-b5bf-40d2-9381-3a11f8830c4a"))
IUserGridData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPlotDescription))
    _bstr_t PlotDescription;
    __declspec(property(get=GetXLabel,put=PutXLabel))
    _bstr_t XLabel;
    __declspec(property(get=GetYLabel,put=PutYLabel))
    _bstr_t YLabel;
    __declspec(property(get=GetValueLabel,put=PutValueLabel))
    _bstr_t ValueLabel;
    __declspec(property(get=GetShowAsType,put=PutShowAsType))
    enum GridPlotType ShowAsType;
    __declspec(property(get=GetNumberOfXDataValues))
    unsigned long NumberOfXDataValues;
    __declspec(property(get=GetXDataMin))
    double XDataMin;
    __declspec(property(get=GetXDataMax))
    double XDataMax;
    __declspec(property(get=GetDataDX))
    double DataDX;
    __declspec(property(get=GetNumberOfYDataValues))
    unsigned long NumberOfYDataValues;
    __declspec(property(get=GetYDataMin))
    double YDataMin;
    __declspec(property(get=GetYDataMax))
    double YDataMax;
    __declspec(property(get=GetDataDY))
    double DataDY;
    __declspec(property(get=GetXAxisMin,put=PutXAxisMin))
    double XAxisMin;
    __declspec(property(get=GetXAxisMinAuto,put=PutXAxisMinAuto))
    VARIANT_BOOL XAxisMinAuto;
    __declspec(property(get=GetXAxisMax,put=PutXAxisMax))
    double XAxisMax;
    __declspec(property(get=GetXAxisMaxAuto,put=PutXAxisMaxAuto))
    VARIANT_BOOL XAxisMaxAuto;
    __declspec(property(get=GetXAxisSymmetric,put=PutXAxisSymmetric))
    VARIANT_BOOL XAxisSymmetric;
    __declspec(property(get=GetYAxisMin,put=PutYAxisMin))
    double YAxisMin;
    __declspec(property(get=GetYAxisMinAuto,put=PutYAxisMinAuto))
    VARIANT_BOOL YAxisMinAuto;
    __declspec(property(get=GetYAxisMax,put=PutYAxisMax))
    double YAxisMax;
    __declspec(property(get=GetYAxisMaxAuto,put=PutYAxisMaxAuto))
    VARIANT_BOOL YAxisMaxAuto;
    __declspec(property(get=GetYAxisSymmetric,put=PutYAxisSymmetric))
    VARIANT_BOOL YAxisSymmetric;
    __declspec(property(get=GetZAxisMin,put=PutZAxisMin))
    double ZAxisMin;
    __declspec(property(get=GetZAxisMinAuto,put=PutZAxisMinAuto))
    VARIANT_BOOL ZAxisMinAuto;
    __declspec(property(get=GetZAxisMax,put=PutZAxisMax))
    double ZAxisMax;
    __declspec(property(get=GetZAxisMaxAuto,put=PutZAxisMaxAuto))
    VARIANT_BOOL ZAxisMaxAuto;
    __declspec(property(get=GetZAxisLog,put=PutZAxisLog))
    VARIANT_BOOL ZAxisLog;
    __declspec(property(get=GetLogColorMap,put=PutLogColorMap))
    VARIANT_BOOL LogColorMap;
    __declspec(property(get=GetInterpolateLowResolutionContours,put=PutInterpolateLowResolutionContours))
    VARIANT_BOOL InterpolateLowResolutionContours;
    __declspec(property(get=GetXYAspectRatio,put=PutXYAspectRatio))
    double XYAspectRatio;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetPlotDescription ( );
    _bstr_t GetXLabel ( );
    void PutXLabel (
        _bstr_t pRetVal );
    _bstr_t GetYLabel ( );
    void PutYLabel (
        _bstr_t pRetVal );
    _bstr_t GetValueLabel ( );
    void PutValueLabel (
        _bstr_t pRetVal );
    enum GridPlotType GetShowAsType ( );
    void PutShowAsType (
        enum GridPlotType pRetVal );
    unsigned long GetNumberOfXDataValues ( );
    double GetXDataMin ( );
    double GetXDataMax ( );
    double GetDataDX ( );
    HRESULT SetXDataDimensions (
        double XDataMin,
        double XDataMax );
    unsigned long GetNumberOfYDataValues ( );
    double GetYDataMin ( );
    double GetYDataMax ( );
    double GetDataDY ( );
    HRESULT SetYDataDimensions (
        double YDataMin,
        double YDataMax );
    double GetXAxisMin ( );
    void PutXAxisMin (
        double pRetVal );
    VARIANT_BOOL GetXAxisMinAuto ( );
    void PutXAxisMinAuto (
        VARIANT_BOOL pRetVal );
    double GetXAxisMax ( );
    void PutXAxisMax (
        double pRetVal );
    VARIANT_BOOL GetXAxisMaxAuto ( );
    void PutXAxisMaxAuto (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetXAxisSymmetric ( );
    void PutXAxisSymmetric (
        VARIANT_BOOL pRetVal );
    double GetYAxisMin ( );
    void PutYAxisMin (
        double pRetVal );
    VARIANT_BOOL GetYAxisMinAuto ( );
    void PutYAxisMinAuto (
        VARIANT_BOOL pRetVal );
    double GetYAxisMax ( );
    void PutYAxisMax (
        double pRetVal );
    VARIANT_BOOL GetYAxisMaxAuto ( );
    void PutYAxisMaxAuto (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetYAxisSymmetric ( );
    void PutYAxisSymmetric (
        VARIANT_BOOL pRetVal );
    double GetZAxisMin ( );
    void PutZAxisMin (
        double pRetVal );
    VARIANT_BOOL GetZAxisMinAuto ( );
    void PutZAxisMinAuto (
        VARIANT_BOOL pRetVal );
    double GetZAxisMax ( );
    void PutZAxisMax (
        double pRetVal );
    VARIANT_BOOL GetZAxisMaxAuto ( );
    void PutZAxisMaxAuto (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetZAxisLog ( );
    void PutZAxisLog (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetLogColorMap ( );
    void PutLogColorMap (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetInterpolateLowResolutionContours ( );
    void PutInterpolateLowResolutionContours (
        VARIANT_BOOL pRetVal );
    double GetXYAspectRatio ( );
    void PutXYAspectRatio (
        double pRetVal );
    HRESULT SetData (
        unsigned long totalSize,
        unsigned long numXValues,
        unsigned long numYValues,
        double * Data );
    HRESULT SetDataSafe (
        SAFEARRAY * Data );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PlotDescription (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XLabel (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XLabel (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_YLabel (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YLabel (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_ValueLabel (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ValueLabel (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShowAsType (
        /*[out,retval]*/ enum GridPlotType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ShowAsType (
        /*[in]*/ enum GridPlotType pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfXDataValues (
        /*[out,retval]*/ unsigned long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XDataMin (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XDataMax (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DataDX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetXDataDimensions (
        /*[in]*/ double XDataMin,
        /*[in]*/ double XDataMax ) = 0;
      virtual HRESULT __stdcall get_NumberOfYDataValues (
        /*[out,retval]*/ unsigned long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YDataMin (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YDataMax (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DataDY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetYDataDimensions (
        /*[in]*/ double YDataMin,
        /*[in]*/ double YDataMax ) = 0;
      virtual HRESULT __stdcall get_XAxisMin (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XAxisMin (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_XAxisMinAuto (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XAxisMinAuto (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_XAxisMax (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XAxisMax (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_XAxisMaxAuto (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XAxisMaxAuto (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_XAxisSymmetric (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XAxisSymmetric (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_YAxisMin (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YAxisMin (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YAxisMinAuto (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YAxisMinAuto (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_YAxisMax (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YAxisMax (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YAxisMaxAuto (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YAxisMaxAuto (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_YAxisSymmetric (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YAxisSymmetric (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZAxisMin (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ZAxisMin (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZAxisMinAuto (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ZAxisMinAuto (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZAxisMax (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ZAxisMax (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZAxisMaxAuto (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ZAxisMaxAuto (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZAxisLog (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ZAxisLog (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_LogColorMap (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_LogColorMap (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_InterpolateLowResolutionContours (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_InterpolateLowResolutionContours (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_XYAspectRatio (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XYAspectRatio (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetData (
        /*[in]*/ unsigned long totalSize,
        /*[in]*/ unsigned long numXValues,
        /*[in]*/ unsigned long numYValues,
        /*[in]*/ double * Data ) = 0;
      virtual HRESULT __stdcall raw_SetDataSafe (
        /*[in]*/ SAFEARRAY * Data ) = 0;
};

struct __declspec(uuid("070ddeb5-df6c-403f-b9e7-9c63e25cecd5"))
IUserGridRGBData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPlotDescription))
    _bstr_t PlotDescription;
    __declspec(property(get=GetXLabel,put=PutXLabel))
    _bstr_t XLabel;
    __declspec(property(get=GetYLabel,put=PutYLabel))
    _bstr_t YLabel;
    __declspec(property(get=GetValueLabel,put=PutValueLabel))
    _bstr_t ValueLabel;
    __declspec(property(get=GetNumberOfXDataValues))
    unsigned long NumberOfXDataValues;
    __declspec(property(get=GetXDataMin))
    double XDataMin;
    __declspec(property(get=GetXDataMax))
    double XDataMax;
    __declspec(property(get=GetDataDX))
    double DataDX;
    __declspec(property(get=GetNumberOfYDataValues))
    unsigned long NumberOfYDataValues;
    __declspec(property(get=GetYDataMin))
    double YDataMin;
    __declspec(property(get=GetYDataMax))
    double YDataMax;
    __declspec(property(get=GetDataDY))
    double DataDY;
    __declspec(property(get=GetXAxisMin,put=PutXAxisMin))
    double XAxisMin;
    __declspec(property(get=GetXAxisMinAuto,put=PutXAxisMinAuto))
    VARIANT_BOOL XAxisMinAuto;
    __declspec(property(get=GetXAxisMax,put=PutXAxisMax))
    double XAxisMax;
    __declspec(property(get=GetXAxisMaxAuto,put=PutXAxisMaxAuto))
    VARIANT_BOOL XAxisMaxAuto;
    __declspec(property(get=GetXAxisSymmetric,put=PutXAxisSymmetric))
    VARIANT_BOOL XAxisSymmetric;
    __declspec(property(get=GetYAxisMin,put=PutYAxisMin))
    double YAxisMin;
    __declspec(property(get=GetYAxisMinAuto,put=PutYAxisMinAuto))
    VARIANT_BOOL YAxisMinAuto;
    __declspec(property(get=GetYAxisMax,put=PutYAxisMax))
    double YAxisMax;
    __declspec(property(get=GetYAxisMaxAuto,put=PutYAxisMaxAuto))
    VARIANT_BOOL YAxisMaxAuto;
    __declspec(property(get=GetYAxisSymmetric,put=PutYAxisSymmetric))
    VARIANT_BOOL YAxisSymmetric;
    __declspec(property(get=GetXYAspectRatio,put=PutXYAspectRatio))
    double XYAspectRatio;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetPlotDescription ( );
    _bstr_t GetXLabel ( );
    void PutXLabel (
        _bstr_t pRetVal );
    _bstr_t GetYLabel ( );
    void PutYLabel (
        _bstr_t pRetVal );
    _bstr_t GetValueLabel ( );
    void PutValueLabel (
        _bstr_t pRetVal );
    unsigned long GetNumberOfXDataValues ( );
    double GetXDataMin ( );
    double GetXDataMax ( );
    double GetDataDX ( );
    HRESULT SetXDataDimensions (
        double XDataMin,
        double XDataMax );
    unsigned long GetNumberOfYDataValues ( );
    double GetYDataMin ( );
    double GetYDataMax ( );
    double GetDataDY ( );
    HRESULT SetYDataDimensions (
        double YDataMin,
        double YDataMax );
    HRESULT SetDataRGB (
        unsigned long fullSize,
        unsigned long numXValues,
        unsigned long numYValues,
        double * rData,
        double * gData,
        double * bData );
    HRESULT SetDataRGBSafe (
        SAFEARRAY * rData,
        SAFEARRAY * gData,
        SAFEARRAY * bData );
    HRESULT SetData (
        unsigned long fullSize,
        unsigned long numXValues,
        unsigned long numYValues,
        double * rgbData );
    HRESULT SetDataSafe (
        SAFEARRAY * rgbData );
    double GetXAxisMin ( );
    void PutXAxisMin (
        double pRetVal );
    VARIANT_BOOL GetXAxisMinAuto ( );
    void PutXAxisMinAuto (
        VARIANT_BOOL pRetVal );
    double GetXAxisMax ( );
    void PutXAxisMax (
        double pRetVal );
    VARIANT_BOOL GetXAxisMaxAuto ( );
    void PutXAxisMaxAuto (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetXAxisSymmetric ( );
    void PutXAxisSymmetric (
        VARIANT_BOOL pRetVal );
    double GetYAxisMin ( );
    void PutYAxisMin (
        double pRetVal );
    VARIANT_BOOL GetYAxisMinAuto ( );
    void PutYAxisMinAuto (
        VARIANT_BOOL pRetVal );
    double GetYAxisMax ( );
    void PutYAxisMax (
        double pRetVal );
    VARIANT_BOOL GetYAxisMaxAuto ( );
    void PutYAxisMaxAuto (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetYAxisSymmetric ( );
    void PutYAxisSymmetric (
        VARIANT_BOOL pRetVal );
    double GetXYAspectRatio ( );
    void PutXYAspectRatio (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PlotDescription (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XLabel (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XLabel (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_YLabel (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YLabel (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_ValueLabel (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ValueLabel (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfXDataValues (
        /*[out,retval]*/ unsigned long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XDataMin (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XDataMax (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DataDX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetXDataDimensions (
        /*[in]*/ double XDataMin,
        /*[in]*/ double XDataMax ) = 0;
      virtual HRESULT __stdcall get_NumberOfYDataValues (
        /*[out,retval]*/ unsigned long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YDataMin (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YDataMax (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DataDY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetYDataDimensions (
        /*[in]*/ double YDataMin,
        /*[in]*/ double YDataMax ) = 0;
      virtual HRESULT __stdcall raw_SetDataRGB (
        /*[in]*/ unsigned long fullSize,
        /*[in]*/ unsigned long numXValues,
        /*[in]*/ unsigned long numYValues,
        /*[in]*/ double * rData,
        /*[in]*/ double * gData,
        /*[in]*/ double * bData ) = 0;
      virtual HRESULT __stdcall raw_SetDataRGBSafe (
        /*[in]*/ SAFEARRAY * rData,
        /*[in]*/ SAFEARRAY * gData,
        /*[in]*/ SAFEARRAY * bData ) = 0;
      virtual HRESULT __stdcall raw_SetData (
        /*[in]*/ unsigned long fullSize,
        /*[in]*/ unsigned long numXValues,
        /*[in]*/ unsigned long numYValues,
        /*[in]*/ double * rgbData ) = 0;
      virtual HRESULT __stdcall raw_SetDataSafe (
        /*[in]*/ SAFEARRAY * rgbData ) = 0;
      virtual HRESULT __stdcall get_XAxisMin (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XAxisMin (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_XAxisMinAuto (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XAxisMinAuto (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_XAxisMax (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XAxisMax (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_XAxisMaxAuto (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XAxisMaxAuto (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_XAxisSymmetric (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XAxisSymmetric (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_YAxisMin (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YAxisMin (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YAxisMinAuto (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YAxisMinAuto (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_YAxisMax (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YAxisMax (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YAxisMaxAuto (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YAxisMaxAuto (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_YAxisSymmetric (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YAxisSymmetric (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_XYAspectRatio (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XYAspectRatio (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("910f4534-e095-4241-9e41-3913250559a7"))
IUserTextData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetData,put=PutData))
    _bstr_t Data;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetData ( );
    void PutData (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Data (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Data (
        /*[in]*/ BSTR pRetVal ) = 0;
};

struct __declspec(uuid("569a0e6d-b1d4-4860-8e93-93fd9108e4ee"))
IUserAnalysisData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAnalysisNumber))
    long AnalysisNumber;
    __declspec(property(get=GetPlotType))
    enum UserAnalysisDataType PlotType;
    __declspec(property(get=GetWindowTitle,put=PutWindowTitle))
    _bstr_t WindowTitle;
    __declspec(property(get=GetFeatureDescription,put=PutFeatureDescription))
    _bstr_t FeatureDescription;
    __declspec(property(get=GetHeaderData,put=PutHeaderData))
    SAFEARRAY * HeaderData;
    __declspec(property(get=GetShowLegend,put=PutShowLegend))
    VARIANT_BOOL ShowLegend;
    __declspec(property(get=GetUserSettings))
    ISettingsDataPtr UserSettings;
    __declspec(property(get=GetRunAnalysisOnSettingsClosed,put=PutRunAnalysisOnSettingsClosed))
    VARIANT_BOOL RunAnalysisOnSettingsClosed;

    //
    // Wrapper methods for error-handling
    //

    long GetAnalysisNumber ( );
    enum UserAnalysisDataType GetPlotType ( );
    _bstr_t GetWindowTitle ( );
    void PutWindowTitle (
        _bstr_t pRetVal );
    _bstr_t GetFeatureDescription ( );
    void PutFeatureDescription (
        _bstr_t pRetVal );
    SAFEARRAY * GetHeaderData ( );
    void PutHeaderData (
        SAFEARRAY * pRetVal );
    VARIANT_BOOL GetShowLegend ( );
    void PutShowLegend (
        VARIANT_BOOL pRetVal );
    ISettingsDataPtr GetUserSettings ( );
    VARIANT_BOOL GetRunAnalysisOnSettingsClosed ( );
    void PutRunAnalysisOnSettingsClosed (
        VARIANT_BOOL pRetVal );
    IUser2DLineDataPtr Make2DLinePlot (
        _bstr_t PlotDescription,
        unsigned long numValues,
        double * xValues );
    IUser2DLineDataPtr Make2DLinePlotSafe (
        _bstr_t PlotDescription,
        SAFEARRAY * xValues );
    IUserGridDataPtr MakeGridPlot (
        _bstr_t PlotDescription );
    IUserGridRGBDataPtr MakeGridRGBPlot (
        _bstr_t PlotDescription );
    IUserTextDataPtr MakeText ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AnalysisNumber (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_PlotType (
        /*[out,retval]*/ enum UserAnalysisDataType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_WindowTitle (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_WindowTitle (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_FeatureDescription (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FeatureDescription (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_HeaderData (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall put_HeaderData (
        /*[in]*/ SAFEARRAY * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShowLegend (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ShowLegend (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UserSettings (
        /*[out,retval]*/ struct ISettingsData * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RunAnalysisOnSettingsClosed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RunAnalysisOnSettingsClosed (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Make2DLinePlot (
        /*[in]*/ BSTR PlotDescription,
        /*[in]*/ unsigned long numValues,
        /*[in]*/ double * xValues,
        /*[out,retval]*/ struct IUser2DLineData * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Make2DLinePlotSafe (
        /*[in]*/ BSTR PlotDescription,
        /*[in]*/ SAFEARRAY * xValues,
        /*[out,retval]*/ struct IUser2DLineData * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_MakeGridPlot (
        /*[in]*/ BSTR PlotDescription,
        /*[out,retval]*/ struct IUserGridData * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_MakeGridRGBPlot (
        /*[in]*/ BSTR PlotDescription,
        /*[out,retval]*/ struct IUserGridRGBData * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_MakeText (
        /*[out,retval]*/ struct IUserTextData * * pRetVal ) = 0;
};

enum __declspec(uuid("0e56ad4b-5bc7-49b1-9ffd-7c44a71a86be"))
SurfaceCurvatureData
{
    SurfaceCurvatureData_TangentialCurvature = 0,
    SurfaceCurvatureData_SagitalCurvature = 1,
    SurfaceCurvatureData_X_Curvature = 2,
    SurfaceCurvatureData_Y_Curvature = 3
};

enum __declspec(uuid("257607ad-dc90-4f80-8559-3d9aabc4a391"))
SurfaceCurvatureCrossData
{
    SurfaceCurvatureCrossData_TangentialCurvature = 0,
    SurfaceCurvatureCrossData_SagitalCurvature = 1,
    SurfaceCurvatureCrossData_X_Curvature = 2,
    SurfaceCurvatureCrossData_Y_Curvature = 3,
    SurfaceCurvatureCrossData_TanPlusSagCurvature = 4,
    SurfaceCurvatureCrossData_XPlusYCurvature = 5
};

enum __declspec(uuid("adcbcf1e-78b1-409a-a358-4b803fedaa7e"))
SurfacePhaseData
{
    SurfacePhaseData_SurfacePhase = 0
};

enum __declspec(uuid("6c291317-c595-40ab-8099-0ee113227c61"))
SurfaceSagData
{
    SurfaceSagData_SurfaceSag = 0
};

enum __declspec(uuid("d6a5777b-25da-4de9-91fc-88a1142da5ef"))
SampleSizes
{
    SampleSizes_S_32x32 = 1,
    SampleSizes_S_64x64 = 2,
    SampleSizes_S_128x128 = 3,
    SampleSizes_S_256x256 = 4,
    SampleSizes_S_512x512 = 5,
    SampleSizes_S_1024x1024 = 6,
    SampleSizes_S_2048x2048 = 7,
    SampleSizes_S_4096x4096 = 8,
    SampleSizes_S_8192x8192 = 9
};

enum __declspec(uuid("6d91127a-e819-478b-8259-726deb43fbab"))
SampleSizes_Pow2Plus1
{
    SampleSizes_Pow2Plus1_S_33 = 1,
    SampleSizes_Pow2Plus1_S_65 = 2,
    SampleSizes_Pow2Plus1_S_129 = 3,
    SampleSizes_Pow2Plus1_S_257 = 4,
    SampleSizes_Pow2Plus1_S_513 = 5,
    SampleSizes_Pow2Plus1_S_1025 = 6,
    SampleSizes_Pow2Plus1_S_2049 = 7,
    SampleSizes_Pow2Plus1_S_4097 = 8,
    SampleSizes_Pow2Plus1_S_8193 = 9
};

enum __declspec(uuid("47a8d80d-91cb-4766-9b0c-9ea7b0fc7fa0"))
SampleSizes_Pow2Plus1_X
{
    SampleSizes_Pow2Plus1_X_S_33x33 = 1,
    SampleSizes_Pow2Plus1_X_S_65x65 = 2,
    SampleSizes_Pow2Plus1_X_S_129x129 = 3,
    SampleSizes_Pow2Plus1_X_S_257x257 = 4,
    SampleSizes_Pow2Plus1_X_S_513x513 = 5,
    SampleSizes_Pow2Plus1_X_S_1025x1025 = 6,
    SampleSizes_Pow2Plus1_X_S_2049x2049 = 7,
    SampleSizes_Pow2Plus1_X_S_4097x4097 = 8,
    SampleSizes_Pow2Plus1_X_S_8193x8193 = 9
};

enum __declspec(uuid("31326ed1-77b1-4e16-bfbf-29095f411a5c"))
ShowAs
{
    ShowAs_Surface = 0,
    ShowAs_Contour = 1,
    ShowAs_GreyScale = 2,
    ShowAs_InverseGreyScale = 3,
    ShowAs_FalseColor = 4,
    ShowAs_InverseFalseColor = 5
};

enum __declspec(uuid("78ea1024-8c5f-42be-b121-7d6484e5efa6"))
DetectorViewerShowAsTypes
{
    DetectorViewerShowAsTypes_FullListing = 0,
    DetectorViewerShowAsTypes_AzimuthCrossSection = 1,
    DetectorViewerShowAsTypes_Text_CrossSection_Row = 1,
    DetectorViewerShowAsTypes_Text_CrossSection_Column = 2,
    DetectorViewerShowAsTypes_FluxVsWaveLength = 3,
    DetectorViewerShowAsTypes_GreyScale = 0,
    DetectorViewerShowAsTypes_GreyScale_Inverted = 1,
    DetectorViewerShowAsTypes_FalseColor = 2,
    DetectorViewerShowAsTypes_FalseColor_Inverted = 3,
    DetectorViewerShowAsTypes_TrueColor = 4,
    DetectorViewerShowAsTypes_Color_CrossSection_Row = 5,
    DetectorViewerShowAsTypes_Color_CrossSection_Column = 6,
    DetectorViewerShowAsTypes_Color_FluxVsWavelength = 7,
    DetectorViewerShowAsTypes_CrossSection = 5,
    DetectorViewerShowAsTypes_Directivity_Full = 6,
    DetectorViewerShowAsTypes_Directivity_Half = 7,
    DetectorViewerShowAsTypes_CrossSection_Row = 4,
    DetectorViewerShowAsTypes_CrossSection_Column = 5,
    DetectorViewerShowAsTypes_GeometricMtf = 6
};

enum __declspec(uuid("01e02c73-72e7-4c17-abdf-0262015d9ad1"))
DetectorViewerShowDataTypes
{
    DetectorViewerShowDataTypes_IncidentFlux = 0,
    DetectorViewerShowDataTypes_AbsorbedFlux = 1,
    DetectorViewerShowDataTypes_AbsorbedFluxVolume = 2,
    DetectorViewerShowDataTypes_PositionSpace = 0,
    DetectorViewerShowDataTypes_AngleSpace = 1,
    DetectorViewerShowDataTypes_Polar_AngleSpace = 0,
    DetectorViewerShowDataTypes_IncoherentIrradiance = 0,
    DetectorViewerShowDataTypes_CoherentIrradiance = 1,
    DetectorViewerShowDataTypes_CoherentPhase = 2,
    DetectorViewerShowDataTypes_RadiantIntensity = 3,
    DetectorViewerShowDataTypes_RadiancePositionSpace = 4,
    DetectorViewerShowDataTypes_RadianceAngleSpace = 5,
    DetectorViewerShowDataTypes_IncoherentIlluminance = 0,
    DetectorViewerShowDataTypes_CoherentIlluminance = 1,
    DetectorViewerShowDataTypes_LuminousIntensity = 3,
    DetectorViewerShowDataTypes_LuminancePositionSpace = 4,
    DetectorViewerShowDataTypes_LuminanceAngleSpace = 5,
    DetectorViewerShowDataTypes_IncoherentFluence = 0,
    DetectorViewerShowDataTypes_CoherentFluence = 1
};

enum __declspec(uuid("b848be6e-4a43-4209-a6d2-a2dc50cb5c07"))
HuygensSurfaceMftShowAsTypes
{
    HuygensSurfaceMftShowAsTypes_GreyScale = 0,
    HuygensSurfaceMftShowAsTypes_InverseGreyScale = 1,
    HuygensSurfaceMftShowAsTypes_FalseColor = 2,
    HuygensSurfaceMftShowAsTypes_InverseFalseColor = 3
};

enum __declspec(uuid("ed2be65c-9e2e-4746-b2e5-aab0014fd579"))
HuygensShowAsTypes
{
    HuygensShowAsTypes_Surface = 0,
    HuygensShowAsTypes_Contour = 1,
    HuygensShowAsTypes_GreyScale = 2,
    HuygensShowAsTypes_InverseGreyScale = 3,
    HuygensShowAsTypes_FalseColor = 4,
    HuygensShowAsTypes_InverseFalseColor = 5,
    HuygensShowAsTypes_TrueColor = 6
};

enum __declspec(uuid("88c5b6c5-63eb-450e-8bbb-853bb7c834fc"))
Beam
{
    Beam_Reference = 0,
    Beam_Configuration_1 = 1,
    Beam_Configuration_2 = 2,
    Beam_Configuration_3 = 3,
    Beam_Configuration_4 = 4,
    Beam_Configuration_5 = 5,
    Beam_Configuration_6 = 6,
    Beam_Configuration_7 = 7,
    Beam_Configuration_8 = 8,
    Beam_Configuration_9 = 9,
    Beam_Configuration_10 = 10,
    Beam_Configuration_11 = 11,
    Beam_Configuration_12 = 12,
    Beam_Configuration_13 = 13,
    Beam_Configuration_14 = 14,
    Beam_Configuration_15 = 15,
    Beam_Configuration_16 = 16,
    Beam_Configuration_17 = 17,
    Beam_Configuration_18 = 18,
    Beam_Configuration_19 = 19,
    Beam_Configuration_20 = 20
};

struct __declspec(uuid("f7b1b0f1-4b73-4cb4-9a7e-73962faf4233"))
IAR_Rgb : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetR))
    float R;
    __declspec(property(get=GetG))
    float G;
    __declspec(property(get=GetB))
    float B;

    //
    // Wrapper methods for error-handling
    //

    float GetR ( );
    float GetG ( );
    float GetB ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_R (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall get_G (
        /*[out,retval]*/ float * pRetVal ) = 0;
      virtual HRESULT __stdcall get_B (
        /*[out,retval]*/ float * pRetVal ) = 0;
};

struct __declspec(uuid("2cac9767-602e-4b98-9700-2e4e72a69d28"))
IAR_ScatterPoint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetX))
    double X;
    __declspec(property(get=GetY))
    double Y;
    __declspec(property(get=GetValue))
    double Value;

    //
    // Wrapper methods for error-handling
    //

    double GetX ( );
    double GetY ( );
    double GetValue ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ double * pRetVal ) = 0;
};

struct __declspec(uuid("6a0796ab-7f18-4bde-a71d-60ce339e48a0"))
IAR_ScatterPointRgb : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetX))
    double X;
    __declspec(property(get=GetY))
    double Y;
    __declspec(property(get=GetValue))
    IAR_RgbPtr Value;

    //
    // Wrapper methods for error-handling
    //

    double GetX ( );
    double GetY ( );
    IAR_RgbPtr GetValue ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ struct IAR_Rgb * * pRetVal ) = 0;
};

struct __declspec(uuid("07e9bd52-d30e-4f40-8f74-fdf29082f043"))
IAR_MetaData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFeatureDescription))
    _bstr_t FeatureDescription;
    __declspec(property(get=GetLensFile))
    _bstr_t LensFile;
    __declspec(property(get=GetLensTitle))
    _bstr_t LensTitle;
    __declspec(property(get=GetDate))
    DATE Date;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFeatureDescription ( );
    _bstr_t GetLensFile ( );
    _bstr_t GetLensTitle ( );
    DATE GetDate ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FeatureDescription (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LensFile (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LensTitle (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Date (
        /*[out,retval]*/ DATE * pRetVal ) = 0;
};

struct __declspec(uuid("037a128a-01ab-479c-bfb3-c45e92a52bec"))
IAR_HeaderData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLines))
    SAFEARRAY * Lines;

    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * GetLines ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Lines (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
};

struct __declspec(uuid("bd067d0a-ae8d-4c84-a8bd-a8680b9fe3e8"))
IAR_XYZ : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetX))
    double X;
    __declspec(property(get=GetY))
    double Y;
    __declspec(property(get=GetZ))
    double Z;

    //
    // Wrapper methods for error-handling
    //

    double GetX ( );
    double GetY ( );
    double GetZ ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ double * pRetVal ) = 0;
};

struct __declspec(uuid("574dbe70-bb55-4a0a-bced-8d08b24c10e2"))
IAR_DataGrid : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetXLabel))
    _bstr_t XLabel;
    __declspec(property(get=GetYLabel))
    _bstr_t YLabel;
    __declspec(property(get=GetValueLabel))
    _bstr_t ValueLabel;
    __declspec(property(get=GetNx))
    unsigned long Nx;
    __declspec(property(get=GetNy))
    unsigned long Ny;
    __declspec(property(get=GetDx))
    double Dx;
    __declspec(property(get=GetDy))
    double Dy;
    __declspec(property(get=GetMinX))
    double MinX;
    __declspec(property(get=GetMinY))
    double MinY;
    __declspec(property(get=GetValues))
    SAFEARRAY * Values;
    __declspec(property(get=GetValueData))
    IMatrixDataPtr ValueData;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetDescription ( );
    _bstr_t GetXLabel ( );
    _bstr_t GetYLabel ( );
    _bstr_t GetValueLabel ( );
    unsigned long GetNx ( );
    unsigned long GetNy ( );
    double GetDx ( );
    double GetDy ( );
    double GetMinX ( );
    double GetMinY ( );
    SAFEARRAY * GetValues ( );
    IMatrixDataPtr GetValueData ( );
    double X (
        long rowX );
    double Y (
        long colY );
    double Z (
        long rowX,
        long colY );
    IAR_XYZPtr XYZ (
        long rowX,
        long colY );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XLabel (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YLabel (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ValueLabel (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Nx (
        /*[out,retval]*/ unsigned long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Ny (
        /*[out,retval]*/ unsigned long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Dx (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Dy (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Values (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ValueData (
        /*[out,retval]*/ struct IMatrixData * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_X (
        /*[in]*/ long rowX,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Y (
        /*[in]*/ long colY,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Z (
        /*[in]*/ long rowX,
        /*[in]*/ long colY,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_XYZ (
        /*[in]*/ long rowX,
        /*[in]*/ long colY,
        /*[out,retval]*/ struct IAR_XYZ * * pRetVal ) = 0;
};

struct __declspec(uuid("87a51042-19d2-4d01-85d4-02fff599d79a"))
IAR_DataGridRgb : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetXLabel))
    _bstr_t XLabel;
    __declspec(property(get=GetYLabel))
    _bstr_t YLabel;
    __declspec(property(get=GetValueLabel))
    _bstr_t ValueLabel;
    __declspec(property(get=GetNx))
    unsigned long Nx;
    __declspec(property(get=GetNy))
    unsigned long Ny;
    __declspec(property(get=GetDx))
    double Dx;
    __declspec(property(get=GetDy))
    double Dy;
    __declspec(property(get=GetMinX))
    double MinX;
    __declspec(property(get=GetMinY))
    double MinY;
    __declspec(property(get=GetValues))
    SAFEARRAY * Values;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetDescription ( );
    _bstr_t GetXLabel ( );
    _bstr_t GetYLabel ( );
    _bstr_t GetValueLabel ( );
    unsigned long GetNx ( );
    unsigned long GetNy ( );
    double GetDx ( );
    double GetDy ( );
    double GetMinX ( );
    double GetMinY ( );
    SAFEARRAY * GetValues ( );
    IAR_RgbPtr GetValue (
        long X,
        long Y );
    HRESULT FillValues (
        unsigned long fullSize,
        float * rData,
        float * gData,
        float * bData );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XLabel (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YLabel (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ValueLabel (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Nx (
        /*[out,retval]*/ unsigned long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Ny (
        /*[out,retval]*/ unsigned long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Dx (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Dy (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Values (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetValue (
        /*[in]*/ long X,
        /*[in]*/ long Y,
        /*[out,retval]*/ struct IAR_Rgb * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FillValues (
        /*[in]*/ unsigned long fullSize,
        /*[in,out]*/ float * rData,
        /*[in,out]*/ float * gData,
        /*[in,out]*/ float * bData ) = 0;
};

struct __declspec(uuid("5570536f-0c5f-41c9-ad2c-c56b280319e6"))
IAR_DataSeries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetXLabel))
    _bstr_t XLabel;
    __declspec(property(get=GetXData))
    IVectorDataPtr XData;
    __declspec(property(get=GetSeriesLabels))
    SAFEARRAY * SeriesLabels;
    __declspec(property(get=GetNumSeries))
    long NumSeries;
    __declspec(property(get=GetYData))
    IMatrixDataPtr YData;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetDescription ( );
    _bstr_t GetXLabel ( );
    IVectorDataPtr GetXData ( );
    SAFEARRAY * GetSeriesLabels ( );
    long GetNumSeries ( );
    IMatrixDataPtr GetYData ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XLabel (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XData (
        /*[out,retval]*/ struct IVectorData * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SeriesLabels (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumSeries (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YData (
        /*[out,retval]*/ struct IMatrixData * * pRetVal ) = 0;
};

struct __declspec(uuid("5c88b347-e31c-426b-9488-02e148ec2886"))
IAR_DataSeriesRgb : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetNumSeries))
    unsigned long NumSeries;
    __declspec(property(get=GetXData))
    IVectorDataPtr XData;
    __declspec(property(get=GetNumberOfRows))
    unsigned long NumberOfRows;
    __declspec(property(get=GetYVals))
    SAFEARRAY * YVals;
    __declspec(property(get=GetXLabel))
    _bstr_t XLabel;
    __declspec(property(get=GetSeriesLabels))
    SAFEARRAY * SeriesLabels;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetDescription ( );
    unsigned long GetNumSeries ( );
    IVectorDataPtr GetXData ( );
    unsigned long GetNumberOfRows ( );
    SAFEARRAY * GetYVals ( );
    IAR_RgbPtr GetYPoint (
        long Row,
        long Col );
    HRESULT FillYValues (
        unsigned long fullSize,
        float * rData,
        float * gData,
        float * bData );
    _bstr_t GetXLabel ( );
    SAFEARRAY * GetSeriesLabels ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumSeries (
        /*[out,retval]*/ unsigned long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XData (
        /*[out,retval]*/ struct IVectorData * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfRows (
        /*[out,retval]*/ unsigned long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YVals (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetYPoint (
        /*[in]*/ long Row,
        /*[in]*/ long Col,
        /*[out,retval]*/ struct IAR_Rgb * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FillYValues (
        /*[in]*/ unsigned long fullSize,
        /*[in,out]*/ float * rData,
        /*[in,out]*/ float * gData,
        /*[in,out]*/ float * bData ) = 0;
      virtual HRESULT __stdcall get_XLabel (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SeriesLabels (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
};

struct __declspec(uuid("7b7b1d1c-1b7a-47d6-8cd5-3dbbc4b6c8a2"))
IAR_DataScatterPoints : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetNumPoints))
    unsigned long NumPoints;
    __declspec(property(get=GetPoints))
    SAFEARRAY * Points;
    __declspec(property(get=GetXLabel))
    _bstr_t XLabel;
    __declspec(property(get=GetYLabel))
    _bstr_t YLabel;
    __declspec(property(get=GetValueLabel))
    _bstr_t ValueLabel;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetDescription ( );
    unsigned long GetNumPoints ( );
    SAFEARRAY * GetPoints ( );
    IAR_ScatterPointPtr GetPoint (
        long idx );
    HRESULT FillPointValues (
        unsigned long fullSize,
        double * XData,
        double * YData,
        double * ValueData );
    _bstr_t GetXLabel ( );
    _bstr_t GetYLabel ( );
    _bstr_t GetValueLabel ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumPoints (
        /*[out,retval]*/ unsigned long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Points (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetPoint (
        /*[in]*/ long idx,
        /*[out,retval]*/ struct IAR_ScatterPoint * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FillPointValues (
        /*[in]*/ unsigned long fullSize,
        /*[in,out]*/ double * XData,
        /*[in,out]*/ double * YData,
        /*[in,out]*/ double * ValueData ) = 0;
      virtual HRESULT __stdcall get_XLabel (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YLabel (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ValueLabel (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("97788734-b5df-479c-a7ad-31b647f8e6f8"))
IAR_DataScatterPointsRgb : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetNumPoints))
    unsigned long NumPoints;
    __declspec(property(get=GetPoints))
    SAFEARRAY * Points;
    __declspec(property(get=GetXLabel))
    _bstr_t XLabel;
    __declspec(property(get=GetYLabel))
    _bstr_t YLabel;
    __declspec(property(get=GetValueLabel))
    _bstr_t ValueLabel;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetDescription ( );
    unsigned long GetNumPoints ( );
    SAFEARRAY * GetPoints ( );
    IAR_ScatterPointRgbPtr GetPoint (
        long idx );
    HRESULT FillPointValues (
        unsigned long fullSize,
        double * XData,
        double * YData,
        float * rData,
        float * gData,
        float * bData );
    _bstr_t GetXLabel ( );
    _bstr_t GetYLabel ( );
    _bstr_t GetValueLabel ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumPoints (
        /*[out,retval]*/ unsigned long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Points (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetPoint (
        /*[in]*/ long idx,
        /*[out,retval]*/ struct IAR_ScatterPointRgb * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FillPointValues (
        /*[in]*/ unsigned long fullSize,
        /*[in,out]*/ double * XData,
        /*[in,out]*/ double * YData,
        /*[in,out]*/ float * rData,
        /*[in,out]*/ float * gData,
        /*[in,out]*/ float * bData ) = 0;
      virtual HRESULT __stdcall get_XLabel (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YLabel (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ValueLabel (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("13eb31a2-68f3-40a7-990f-1dc09be61a28"))
IAR_RayInfo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetrayIndex))
    long rayIndex;
    __declspec(property(get=GetSegment))
    long Segment;
    __declspec(property(get=Getparent))
    long parent;
    __declspec(property(get=Getlevel))
    long level;
    __declspec(property(get=Getin_object))
    long in_object;
    __declspec(property(get=Gethit_object))
    long hit_object;
    __declspec(property(get=Gethit_face))
    long hit_face;
    __declspec(property(get=GetX))
    double X;
    __declspec(property(get=GetY))
    double Y;
    __declspec(property(get=GetZ))
    double Z;
    __declspec(property(get=GetL))
    double L;
    __declspec(property(get=GetM))
    double M;
    __declspec(property(get=GetN))
    double N;
    __declspec(property(get=GetNx))
    double Nx;
    __declspec(property(get=GetNy))
    double Ny;
    __declspec(property(get=GetNz))
    double Nz;
    __declspec(property(get=GetEx))
    double Ex;
    __declspec(property(get=GetEy))
    double Ey;
    __declspec(property(get=GetEz))
    double Ez;
    __declspec(property(get=GetpathLength))
    double pathLength;
    __declspec(property(get=GetOpticalPathLength))
    double OpticalPathLength;
    __declspec(property(get=GetWavelength))
    double Wavelength;
    __declspec(property(get=GetVignetted))
    long Vignetted;
    __declspec(property(get=Geterror))
    long error;

    //
    // Wrapper methods for error-handling
    //

    long GetrayIndex ( );
    long GetSegment ( );
    long Getparent ( );
    long Getlevel ( );
    long Getin_object ( );
    long Gethit_object ( );
    long Gethit_face ( );
    double GetX ( );
    double GetY ( );
    double GetZ ( );
    double GetL ( );
    double GetM ( );
    double GetN ( );
    double GetNx ( );
    double GetNy ( );
    double GetNz ( );
    double GetEx ( );
    double GetEy ( );
    double GetEz ( );
    double GetpathLength ( );
    double GetOpticalPathLength ( );
    double GetWavelength ( );
    long GetVignetted ( );
    long Geterror ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_rayIndex (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Segment (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_parent (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_level (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_in_object (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_hit_object (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_hit_face (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_L (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_M (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_N (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Nx (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Ny (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Nz (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Ex (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Ey (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Ez (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_pathLength (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_OpticalPathLength (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Wavelength (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Vignetted (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_error (
        /*[out,retval]*/ long * pRetVal ) = 0;
};

struct __declspec(uuid("10cb0805-6d74-430f-8d18-40045ada4e43"))
IAR_RayData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetNumRays))
    unsigned long NumRays;
    __declspec(property(get=GetRays))
    SAFEARRAY * Rays;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetDescription ( );
    unsigned long GetNumRays ( );
    SAFEARRAY * GetRays ( );
    IAR_RayInfoPtr GetRay (
        long idx );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumRays (
        /*[out,retval]*/ unsigned long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Rays (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetRay (
        /*[in]*/ long idx,
        /*[out,retval]*/ struct IAR_RayInfo * * pRetVal ) = 0;
};

struct __declspec(uuid("81f3e249-59d5-468b-92eb-2b3ce7c423e4"))
IAR_CriticalRayInfo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFieldPoint))
    long FieldPoint;
    __declspec(property(get=GetrayType))
    enum CriticalRayType rayType;
    __declspec(property(get=GetPass))
    VARIANT_BOOL Pass;
    __declspec(property(get=GetTerminationObject))
    long TerminationObject;
    __declspec(property(get=GetWavelength))
    double Wavelength;
    __declspec(property(get=GetXIn))
    double XIn;
    __declspec(property(get=GetYIn))
    double YIn;
    __declspec(property(get=GetZIn))
    double ZIn;
    __declspec(property(get=GetLIn))
    double LIn;
    __declspec(property(get=GetMin))
    double Min;
    __declspec(property(get=GetNIn))
    double NIn;
    __declspec(property(get=GetXTarget))
    double XTarget;
    __declspec(property(get=GetYTarget))
    double YTarget;
    __declspec(property(get=GetZTarget))
    double ZTarget;
    __declspec(property(get=GetLTarget))
    double LTarget;
    __declspec(property(get=GetMTarget))
    double MTarget;
    __declspec(property(get=GetNTarget))
    double NTarget;
    __declspec(property(get=GetXActual))
    double XActual;
    __declspec(property(get=GetYActual))
    double YActual;
    __declspec(property(get=GetZActual))
    double ZActual;
    __declspec(property(get=GetLActual))
    double LActual;
    __declspec(property(get=GetMActual))
    double MActual;
    __declspec(property(get=GetNActual))
    double NActual;

    //
    // Wrapper methods for error-handling
    //

    long GetFieldPoint ( );
    enum CriticalRayType GetrayType ( );
    VARIANT_BOOL GetPass ( );
    long GetTerminationObject ( );
    double GetWavelength ( );
    double GetXIn ( );
    double GetYIn ( );
    double GetZIn ( );
    double GetLIn ( );
    double GetMin ( );
    double GetNIn ( );
    double GetXTarget ( );
    double GetYTarget ( );
    double GetZTarget ( );
    double GetLTarget ( );
    double GetMTarget ( );
    double GetNTarget ( );
    double GetXActual ( );
    double GetYActual ( );
    double GetZActual ( );
    double GetLActual ( );
    double GetMActual ( );
    double GetNActual ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FieldPoint (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_rayType (
        /*[out,retval]*/ enum CriticalRayType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Pass (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TerminationObject (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Wavelength (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XIn (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YIn (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZIn (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LIn (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Min (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NIn (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XTarget (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YTarget (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZTarget (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LTarget (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MTarget (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NTarget (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XActual (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YActual (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZActual (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LActual (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MActual (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NActual (
        /*[out,retval]*/ double * pRetVal ) = 0;
};

struct __declspec(uuid("04576353-2f54-425d-8ce1-b74002f0628c"))
IAR_CriticalRayData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNumRays))
    unsigned long NumRays;
    __declspec(property(get=GetHeaderLabels))
    SAFEARRAY * HeaderLabels;
    __declspec(property(get=GetRays))
    SAFEARRAY * Rays;

    //
    // Wrapper methods for error-handling
    //

    unsigned long GetNumRays ( );
    SAFEARRAY * GetHeaderLabels ( );
    SAFEARRAY * GetRays ( );
    IAR_CriticalRayInfoPtr GetRay (
        unsigned long idx );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NumRays (
        /*[out,retval]*/ unsigned long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_HeaderLabels (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Rays (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetRay (
        /*[in]*/ unsigned long idx,
        /*[out,retval]*/ struct IAR_CriticalRayInfo * * pRetVal ) = 0;
};

struct __declspec(uuid("033b7ede-0ab4-44ca-8485-f23dbfc188fb"))
IAR_SpotDataResult : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetY,put=PutY))
    double Y;
    __declspec(property(get=GetZ,put=PutZ))
    double Z;
    __declspec(property(get=GetL,put=PutL))
    double L;
    __declspec(property(get=GetM,put=PutM))
    double M;
    __declspec(property(get=GetN,put=PutN))
    double N;
    __declspec(property(get=GetDetector_X,put=PutDetector_X))
    double Detector_X;
    __declspec(property(get=GetDetector_Y,put=PutDetector_Y))
    double Detector_Y;
    __declspec(property(get=GetDetector_Z,put=PutDetector_Z))
    double Detector_Z;
    __declspec(property(get=GetRefCoord_X,put=PutRefCoord_X))
    double RefCoord_X;
    __declspec(property(get=GetRefCoord_Y,put=PutRefCoord_Y))
    double RefCoord_Y;
    __declspec(property(get=GetRMSSpot_X,put=PutRMSSpot_X))
    double RMSSpot_X;
    __declspec(property(get=GetRMSSpot_Y,put=PutRMSSpot_Y))
    double RMSSpot_Y;
    __declspec(property(get=GetRMSSpotSize,put=PutRMSSpotSize))
    double RMSSpotSize;
    __declspec(property(get=GetGeoSpotSize,put=PutGeoSpotSize))
    double GeoSpotSize;

    //
    // Wrapper methods for error-handling
    //

    double GetX ( );
    void PutX (
        double pRetVal );
    double GetY ( );
    void PutY (
        double pRetVal );
    double GetZ ( );
    void PutZ (
        double pRetVal );
    double GetL ( );
    void PutL (
        double pRetVal );
    double GetM ( );
    void PutM (
        double pRetVal );
    double GetN ( );
    void PutN (
        double pRetVal );
    double GetDetector_X ( );
    void PutDetector_X (
        double pRetVal );
    double GetDetector_Y ( );
    void PutDetector_Y (
        double pRetVal );
    double GetDetector_Z ( );
    void PutDetector_Z (
        double pRetVal );
    double GetRefCoord_X ( );
    void PutRefCoord_X (
        double pRetVal );
    double GetRefCoord_Y ( );
    void PutRefCoord_Y (
        double pRetVal );
    double GetRMSSpot_X ( );
    void PutRMSSpot_X (
        double pRetVal );
    double GetRMSSpot_Y ( );
    void PutRMSSpot_Y (
        double pRetVal );
    double GetRMSSpotSize ( );
    void PutRMSSpotSize (
        double pRetVal );
    double GetGeoSpotSize ( );
    void PutGeoSpotSize (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Z (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_L (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_L (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_M (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_M (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_N (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_N (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Detector_X (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Detector_X (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Detector_Y (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Detector_Y (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Detector_Z (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Detector_Z (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RefCoord_X (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RefCoord_X (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RefCoord_Y (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RefCoord_Y (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RMSSpot_X (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RMSSpot_X (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RMSSpot_Y (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RMSSpot_Y (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RMSSpotSize (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RMSSpotSize (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_GeoSpotSize (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_GeoSpotSize (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("a3cf12b7-6361-41c1-bce5-11b246c07227"))
IAR_SpotDataResultMatrix : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHalfWidth_X))
    double HalfWidth_X;
    __declspec(property(get=GetHalfWidth_Y))
    double HalfWidth_Y;
    __declspec(property(get=GetMaxRadius))
    double MaxRadius;
    __declspec(property(get=GetMeanRadius))
    double MeanRadius;
    __declspec(property(get=GetNumberOfFields))
    long NumberOfFields;
    __declspec(property(get=GetNumberOfWavelengths))
    long NumberOfWavelengths;

    //
    // Wrapper methods for error-handling
    //

    double Get_X_For (
        long fieldN,
        long waveN );
    double Get_Y_For (
        long fieldN,
        long waveN );
    double Get_Z_For (
        long fieldN,
        long waveN );
    double Get_L_For (
        long fieldN,
        long waveN );
    double Get_M_For (
        long fieldN,
        long waveN );
    double Get_N_For (
        long fieldN,
        long waveN );
    double GetDetector_X_For (
        long fieldN,
        long waveN );
    double GetDetector_Y_For (
        long fieldN,
        long waveN );
    double GetDetector_Z_For (
        long fieldN,
        long waveN );
    double GetGeoSpotSizeFor (
        long fieldN,
        long waveN );
    double GetRMSSpotSizeFor (
        long fieldN,
        long waveN );
    double GetRMSSpot_X_For (
        long fieldN,
        long waveN );
    double GetRMSSpot_Y_For (
        long fieldN,
        long waveN );
    double GetReferenceCoordinate_X_For (
        long fieldN,
        long waveN );
    double GetReferenceCoordinate_Y_For (
        long fieldN,
        long waveN );
    double GetHalfWidth_X ( );
    double GetHalfWidth_Y ( );
    double GetMaxRadius ( );
    double GetMeanRadius ( );
    long GetNumberOfFields ( );
    long GetNumberOfWavelengths ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Get_X_For (
        /*[in]*/ long fieldN,
        /*[in]*/ long waveN,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Get_Y_For (
        /*[in]*/ long fieldN,
        /*[in]*/ long waveN,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Get_Z_For (
        /*[in]*/ long fieldN,
        /*[in]*/ long waveN,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Get_L_For (
        /*[in]*/ long fieldN,
        /*[in]*/ long waveN,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Get_M_For (
        /*[in]*/ long fieldN,
        /*[in]*/ long waveN,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Get_N_For (
        /*[in]*/ long fieldN,
        /*[in]*/ long waveN,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetDetector_X_For (
        /*[in]*/ long fieldN,
        /*[in]*/ long waveN,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetDetector_Y_For (
        /*[in]*/ long fieldN,
        /*[in]*/ long waveN,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetDetector_Z_For (
        /*[in]*/ long fieldN,
        /*[in]*/ long waveN,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetGeoSpotSizeFor (
        /*[in]*/ long fieldN,
        /*[in]*/ long waveN,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetRMSSpotSizeFor (
        /*[in]*/ long fieldN,
        /*[in]*/ long waveN,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetRMSSpot_X_For (
        /*[in]*/ long fieldN,
        /*[in]*/ long waveN,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetRMSSpot_Y_For (
        /*[in]*/ long fieldN,
        /*[in]*/ long waveN,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetReferenceCoordinate_X_For (
        /*[in]*/ long fieldN,
        /*[in]*/ long waveN,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetReferenceCoordinate_Y_For (
        /*[in]*/ long fieldN,
        /*[in]*/ long waveN,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_HalfWidth_X (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_HalfWidth_Y (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaxRadius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MeanRadius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfFields (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfWavelengths (
        /*[out,retval]*/ long * pRetVal ) = 0;
};

struct __declspec(uuid("6bf1dff7-e038-4661-be64-04f3af547816"))
IAR_PathAnalysisEntry : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPathNumber))
    unsigned long PathNumber;
    __declspec(property(get=GetRaysInPath))
    unsigned __int64 RaysInPath;
    __declspec(property(get=GetHitsInPath))
    unsigned long HitsInPath;
    __declspec(property(get=GetGhostsInPath))
    unsigned long GhostsInPath;
    __declspec(property(get=GetUniqueObjectsInPath))
    unsigned long UniqueObjectsInPath;
    __declspec(property(get=GetTotalPathFlux))
    double TotalPathFlux;
    __declspec(property(get=GetNumberOfObjectsInPath))
    unsigned long NumberOfObjectsInPath;
    __declspec(property(get=GetPathObjectList))
    SAFEARRAY * PathObjectList;
    __declspec(property(get=GetPathSource))
    long PathSource;

    //
    // Wrapper methods for error-handling
    //

    unsigned long GetPathNumber ( );
    unsigned __int64 GetRaysInPath ( );
    unsigned long GetHitsInPath ( );
    unsigned long GetGhostsInPath ( );
    unsigned long GetUniqueObjectsInPath ( );
    double GetTotalPathFlux ( );
    unsigned long GetNumberOfObjectsInPath ( );
    SAFEARRAY * GetPathObjectList ( );
    long GetPathObjectNumber (
        long ObjectNumber );
    long GetPathSource ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PathNumber (
        /*[out,retval]*/ unsigned long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RaysInPath (
        /*[out,retval]*/ unsigned __int64 * pRetVal ) = 0;
      virtual HRESULT __stdcall get_HitsInPath (
        /*[out,retval]*/ unsigned long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_GhostsInPath (
        /*[out,retval]*/ unsigned long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_UniqueObjectsInPath (
        /*[out,retval]*/ unsigned long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TotalPathFlux (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfObjectsInPath (
        /*[out,retval]*/ unsigned long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_PathObjectList (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetPathObjectNumber (
        /*[in]*/ long ObjectNumber,
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_PathSource (
        /*[out,retval]*/ long * pRetVal ) = 0;
};

struct __declspec(uuid("b8b620e8-3c5a-4677-b44c-7e57cd8ea2c1"))
IAR_PathAnalysisData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTotalFluxIn))
    double TotalFluxIn;
    __declspec(property(get=GetTotalFluxOut))
    double TotalFluxOut;
    __declspec(property(get=GetTotalRays))
    unsigned long TotalRays;
    __declspec(property(get=GetTotalHits))
    unsigned long TotalHits;
    __declspec(property(get=GetNumPaths))
    unsigned long NumPaths;
    __declspec(property(get=GetPaths))
    SAFEARRAY * Paths;

    //
    // Wrapper methods for error-handling
    //

    double GetTotalFluxIn ( );
    double GetTotalFluxOut ( );
    unsigned long GetTotalRays ( );
    unsigned long GetTotalHits ( );
    unsigned long GetNumPaths ( );
    SAFEARRAY * GetPaths ( );
    IAR_PathAnalysisEntryPtr GetPathNumber (
        unsigned long idx );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TotalFluxIn (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TotalFluxOut (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TotalRays (
        /*[out,retval]*/ unsigned long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TotalHits (
        /*[out,retval]*/ unsigned long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumPaths (
        /*[out,retval]*/ unsigned long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Paths (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetPathNumber (
        /*[in]*/ unsigned long idx,
        /*[out,retval]*/ struct IAR_PathAnalysisEntry * * pRetVal ) = 0;
};

struct __declspec(uuid("e1fba4e6-b9dc-44a4-9958-60003d26e1a0"))
IAR_ : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMetaData))
    IAR_MetaDataPtr MetaData;
    __declspec(property(get=GetHeaderData))
    IAR_HeaderDataPtr HeaderData;
    __declspec(property(get=GetNumberOfDataGrids))
    long NumberOfDataGrids;
    __declspec(property(get=GetDataGrids))
    SAFEARRAY * DataGrids;
    __declspec(property(get=GetNumberOfDataGridsRgb))
    long NumberOfDataGridsRgb;
    __declspec(property(get=GetDataGridsRgb))
    SAFEARRAY * DataGridsRgb;
    __declspec(property(get=GetNumberOfDataSeries))
    long NumberOfDataSeries;
    __declspec(property(get=GetDataSeries))
    SAFEARRAY * DataSeries;
    __declspec(property(get=GetNumberOfDataSeriesRgb))
    long NumberOfDataSeriesRgb;
    __declspec(property(get=GetDataSeriesRgb))
    SAFEARRAY * DataSeriesRgb;
    __declspec(property(get=GetNumberOfDataScatterPoints))
    long NumberOfDataScatterPoints;
    __declspec(property(get=GetDataScatterPoints))
    SAFEARRAY * DataScatterPoints;
    __declspec(property(get=GetNumberOfDataScatterPointsRgb))
    long NumberOfDataScatterPointsRgb;
    __declspec(property(get=GetDataScatterPointsRgb))
    SAFEARRAY * DataScatterPointsRgb;
    __declspec(property(get=GetNumberOfRayData))
    long NumberOfRayData;
    __declspec(property(get=GetRayData))
    SAFEARRAY * RayData;
    __declspec(property(get=GetCriticalRayData))
    IAR_CriticalRayDataPtr CriticalRayData;
    __declspec(property(get=GetPathAnalysisData))
    IAR_PathAnalysisDataPtr PathAnalysisData;
    __declspec(property(get=GetSpotData))
    IAR_SpotDataResultMatrixPtr SpotData;
    __declspec(property(get=GetNumberOfMessages))
    long NumberOfMessages;
    __declspec(property(get=GetMessages))
    SAFEARRAY * Messages;

    //
    // Wrapper methods for error-handling
    //

    IAR_MetaDataPtr GetMetaData ( );
    IAR_HeaderDataPtr GetHeaderData ( );
    long GetNumberOfDataGrids ( );
    IAR_DataGridPtr GetDataGrid (
        long index );
    SAFEARRAY * GetDataGrids ( );
    long GetNumberOfDataGridsRgb ( );
    IAR_DataGridRgbPtr GetDataGridRgb (
        long index );
    SAFEARRAY * GetDataGridsRgb ( );
    long GetNumberOfDataSeries ( );
    IAR_DataSeriesPtr GetDataSeries (
        long index );
    SAFEARRAY * GetDataSeries ( );
    long GetNumberOfDataSeriesRgb ( );
    IAR_DataSeriesRgbPtr GetDataSeriesRgb (
        long index );
    SAFEARRAY * GetDataSeriesRgb ( );
    long GetNumberOfDataScatterPoints ( );
    IAR_DataScatterPointsPtr GetDataScatterPoint (
        long index );
    SAFEARRAY * GetDataScatterPoints ( );
    long GetNumberOfDataScatterPointsRgb ( );
    IAR_DataScatterPointsRgbPtr GetDataScatterPointRgb (
        long index );
    SAFEARRAY * GetDataScatterPointsRgb ( );
    long GetNumberOfRayData ( );
    IAR_RayDataPtr GetRayData (
        long index );
    SAFEARRAY * GetRayData ( );
    IAR_CriticalRayDataPtr GetCriticalRayData ( );
    IAR_PathAnalysisDataPtr GetPathAnalysisData ( );
    IAR_SpotDataResultMatrixPtr GetSpotData ( );
    long GetNumberOfMessages ( );
    IMessagePtr GetMessageAt (
        long index );
    SAFEARRAY * GetMessages ( );
    VARIANT_BOOL GetTextFile (
        _bstr_t fileName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MetaData (
        /*[out,retval]*/ struct IAR_MetaData * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_HeaderData (
        /*[out,retval]*/ struct IAR_HeaderData * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfDataGrids (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetDataGrid (
        /*[in]*/ long index,
        /*[out,retval]*/ struct IAR_DataGrid * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DataGrids (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfDataGridsRgb (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetDataGridRgb (
        /*[in]*/ long index,
        /*[out,retval]*/ struct IAR_DataGridRgb * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DataGridsRgb (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfDataSeries (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetDataSeries (
        /*[in]*/ long index,
        /*[out,retval]*/ struct IAR_DataSeries * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DataSeries (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfDataSeriesRgb (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetDataSeriesRgb (
        /*[in]*/ long index,
        /*[out,retval]*/ struct IAR_DataSeriesRgb * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DataSeriesRgb (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfDataScatterPoints (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetDataScatterPoint (
        /*[in]*/ long index,
        /*[out,retval]*/ struct IAR_DataScatterPoints * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DataScatterPoints (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfDataScatterPointsRgb (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetDataScatterPointRgb (
        /*[in]*/ long index,
        /*[out,retval]*/ struct IAR_DataScatterPointsRgb * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DataScatterPointsRgb (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfRayData (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetRayData (
        /*[in]*/ long index,
        /*[out,retval]*/ struct IAR_RayData * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RayData (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CriticalRayData (
        /*[out,retval]*/ struct IAR_CriticalRayData * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_PathAnalysisData (
        /*[out,retval]*/ struct IAR_PathAnalysisData * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SpotData (
        /*[out,retval]*/ struct IAR_SpotDataResultMatrix * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfMessages (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetMessageAt (
        /*[in]*/ long index,
        /*[out,retval]*/ struct IMessage * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Messages (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetTextFile (
        /*[in]*/ BSTR fileName,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("e1d1ed07-94c5-4268-a6fe-67c09a0fc290"))
IAS_ : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IMessagesPtr verify ( );
    HRESULT Save ( );
    HRESULT Load ( );
    HRESULT Reset ( );
    VARIANT_BOOL SaveTo (
        _bstr_t settingsFile );
    VARIANT_BOOL LoadFrom (
        _bstr_t settingsFile );
    VARIANT_BOOL ModifySettings (
        _bstr_t settingsFile,
        _bstr_t typeCode,
        _bstr_t newValue );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_verify (
        /*[out,retval]*/ struct IMessages * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Save ( ) = 0;
      virtual HRESULT __stdcall raw_Load ( ) = 0;
      virtual HRESULT __stdcall raw_Reset ( ) = 0;
      virtual HRESULT __stdcall raw_SaveTo (
        /*[in]*/ BSTR settingsFile,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_LoadFrom (
        /*[in]*/ BSTR settingsFile,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ModifySettings (
        /*[in]*/ BSTR settingsFile,
        /*[in]*/ BSTR typeCode,
        /*[in]*/ BSTR newValue,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("d8be2cb0-9a28-4cfc-963c-730c5fd1d054"))
IA_ : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTitle))
    _bstr_t Title;
    __declspec(property(get=GetGetAnalysisName))
    _bstr_t GetAnalysisName;
    __declspec(property(get=GetAnalysisType))
    enum AnalysisIDM AnalysisType;
    __declspec(property(get=GetStatusMessages))
    IMessagesPtr StatusMessages;
    __declspec(property(get=GetHasAnalysisSpecificSettings))
    VARIANT_BOOL HasAnalysisSpecificSettings;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetTitle ( );
    _bstr_t GetGetAnalysisName ( );
    enum AnalysisIDM GetAnalysisType ( );
    IMessagesPtr GetStatusMessages ( );
    VARIANT_BOOL GetHasAnalysisSpecificSettings ( );
    IAS_Ptr GetSettings ( );
    IAR_Ptr GetResults ( );
    VARIANT_BOOL IsRunning ( );
    IMessagePtr Apply ( );
    IMessagePtr ApplyAndWaitForCompletion ( );
    VARIANT_BOOL Terminate ( );
    HRESULT WaitForCompletion ( );
    HRESULT Close ( );
    HRESULT Release_2 ( );
    HRESULT ToFile (
        _bstr_t fileName,
        VARIANT_BOOL showSettings,
        VARIANT_BOOL verify );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Title (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_GetAnalysisName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AnalysisType (
        /*[out,retval]*/ enum AnalysisIDM * pRetVal ) = 0;
      virtual HRESULT __stdcall get_StatusMessages (
        /*[out,retval]*/ struct IMessages * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_HasAnalysisSpecificSettings (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetSettings (
        /*[out,retval]*/ struct IAS_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetResults (
        /*[out,retval]*/ struct IAR_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsRunning (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Apply (
        /*[out,retval]*/ struct IMessage * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ApplyAndWaitForCompletion (
        /*[out,retval]*/ struct IMessage * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Terminate (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_WaitForCompletion ( ) = 0;
      virtual HRESULT __stdcall raw_Close ( ) = 0;
      virtual HRESULT __stdcall raw_Release_2 ( ) = 0;
      virtual HRESULT __stdcall raw_ToFile (
        /*[in]*/ BSTR fileName,
        /*[in]*/ VARIANT_BOOL showSettings,
        /*[in]*/ VARIANT_BOOL verify ) = 0;
};

struct __declspec(uuid("b96379c2-d2ce-417c-827e-7bf644637c95"))
I_Analyses : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNumberOfAnalyses))
    long NumberOfAnalyses;

    //
    // Wrapper methods for error-handling
    //

    long GetNumberOfAnalyses ( );
    VARIANT_BOOL CloseAnalysis (
        long index );
    VARIANT_BOOL CloseAnalysis_2 (
        struct IA_ * analysis );
    IA_Ptr Get_AnalysisAtIndex (
        long index );
    IA_Ptr New_Analysis (
        enum AnalysisIDM AnalysisType );
    IA_Ptr New_Analysis_SettingsFirst (
        enum AnalysisIDM AnalysisType );
    IA_Ptr New_RayFan ( );
    IA_Ptr New_OpticalPathFan ( );
    IA_Ptr New_PupilAberrationFan ( );
    IA_Ptr New_FieldCurvatureAndDistortion ( );
    IA_Ptr New_FocalShiftDiagram ( );
    IA_Ptr New_GridDistortion ( );
    IA_Ptr New_LateralColor ( );
    IA_Ptr New_LongitudinalAberration ( );
    IA_Ptr New_RayTrace ( );
    IA_Ptr New_SeidelCoefficients ( );
    IA_Ptr New_SeidelDiagram ( );
    IA_Ptr New_ZernikeAnnularCoefficients ( );
    IA_Ptr New_ZernikeCoefficientsVsField ( );
    IA_Ptr New_ZernikeFringeCoefficients ( );
    IA_Ptr New_ZernikeStandardCoefficients ( );
    IA_Ptr New_FftMtf ( );
    IA_Ptr New_FftThroughFocusMtf ( );
    IA_Ptr New_GeometricThroughFocusMtf ( );
    IA_Ptr New_GeometricMtf ( );
    IA_Ptr New_FftMtfMap ( );
    IA_Ptr New_GeometricMtfMap ( );
    IA_Ptr New_FftSurfaceMtf ( );
    IA_Ptr New_FftMtfvsField ( );
    IA_Ptr New_GeometricMtfvsField ( );
    IA_Ptr New_HuygensMtfvsField ( );
    IA_Ptr New_HuygensMtf ( );
    IA_Ptr New_HuygensSurfaceMtf ( );
    IA_Ptr New_HuygensThroughFocusMtf ( );
    IA_Ptr New_FftPsf ( );
    IA_Ptr New_FftPsfCrossSection ( );
    IA_Ptr New_FftPsfLineEdgeSpread ( );
    IA_Ptr New_HuygensPsfCrossSection ( );
    IA_Ptr New_HuygensPsf ( );
    IA_Ptr New_DiffractionEncircledEnergy ( );
    IA_Ptr New_GeometricEncircledEnergy ( );
    IA_Ptr New_GeometricLineEdgeSpread ( );
    IA_Ptr New_ExtendedSourceEncircledEnergy ( );
    IA_Ptr New_SurfaceCurvatureCross ( );
    IA_Ptr New_SurfacePhaseCross ( );
    IA_Ptr New_SurfaceSagCross ( );
    IA_Ptr New_SurfaceCurvature ( );
    IA_Ptr New_SurfacePhase ( );
    IA_Ptr New_SurfaceSag ( );
    IA_Ptr New_StandardSpot ( );
    IA_Ptr New_ThroughFocusSpot ( );
    IA_Ptr New_FullFieldSpot ( );
    IA_Ptr New_MatrixSpot ( );
    IA_Ptr New_ConfigurationMatrixSpot ( );
    IA_Ptr New_RMSField ( );
    IA_Ptr New_RMSFieldMap ( );
    IA_Ptr New_RMSLambdaDiagram ( );
    IA_Ptr New_RMSFocus ( );
    IA_Ptr New_Foucault ( );
    IA_Ptr New_Interferogram ( );
    IA_Ptr New_WavefrontMap ( );
    IA_Ptr New_DetectorViewer ( );
    IA_Ptr New_CriticalRayTracer ( );
    IA_Ptr New_PathAnalysis ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NumberOfAnalyses (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CloseAnalysis (
        /*[in]*/ long index,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CloseAnalysis_2 (
        /*[in]*/ struct IA_ * analysis,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Get_AnalysisAtIndex (
        /*[in]*/ long index,
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New_Analysis (
        /*[in]*/ enum AnalysisIDM AnalysisType,
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New_Analysis_SettingsFirst (
        /*[in]*/ enum AnalysisIDM AnalysisType,
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
    virtual HRESULT _VtblGapPlaceholder1( ) { return E_NOTIMPL; }
      virtual HRESULT __stdcall raw_New_RayFan (
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New_OpticalPathFan (
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New_PupilAberrationFan (
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New_FieldCurvatureAndDistortion (
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New_FocalShiftDiagram (
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New_GridDistortion (
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New_LateralColor (
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New_LongitudinalAberration (
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New_RayTrace (
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New_SeidelCoefficients (
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New_SeidelDiagram (
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New_ZernikeAnnularCoefficients (
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New_ZernikeCoefficientsVsField (
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New_ZernikeFringeCoefficients (
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New_ZernikeStandardCoefficients (
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New_FftMtf (
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New_FftThroughFocusMtf (
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New_GeometricThroughFocusMtf (
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New_GeometricMtf (
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New_FftMtfMap (
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New_GeometricMtfMap (
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New_FftSurfaceMtf (
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New_FftMtfvsField (
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New_GeometricMtfvsField (
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New_HuygensMtfvsField (
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New_HuygensMtf (
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New_HuygensSurfaceMtf (
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New_HuygensThroughFocusMtf (
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New_FftPsf (
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New_FftPsfCrossSection (
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New_FftPsfLineEdgeSpread (
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New_HuygensPsfCrossSection (
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New_HuygensPsf (
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New_DiffractionEncircledEnergy (
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New_GeometricEncircledEnergy (
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New_GeometricLineEdgeSpread (
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New_ExtendedSourceEncircledEnergy (
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New_SurfaceCurvatureCross (
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New_SurfacePhaseCross (
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New_SurfaceSagCross (
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New_SurfaceCurvature (
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New_SurfacePhase (
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New_SurfaceSag (
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New_StandardSpot (
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New_ThroughFocusSpot (
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New_FullFieldSpot (
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New_MatrixSpot (
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New_ConfigurationMatrixSpot (
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New_RMSField (
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New_RMSFieldMap (
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New_RMSLambdaDiagram (
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New_RMSFocus (
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New_Foucault (
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New_Interferogram (
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New_WavefrontMap (
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New_DetectorViewer (
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New_CriticalRayTracer (
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New_PathAnalysis (
        /*[out,retval]*/ struct IA_ * * pRetVal ) = 0;
};

struct __declspec(uuid("88f2d30a-46ac-4074-b541-2768185b9a8d"))
IAS_Field : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    long GetFieldNumber ( );
    IMessagePtr SetFieldNumber (
        long N );
    IMessagePtr UseAllFields ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetFieldNumber (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetFieldNumber (
        /*[in]*/ long N,
        /*[out,retval]*/ struct IMessage * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_UseAllFields (
        /*[out,retval]*/ struct IMessage * * pRetVal ) = 0;
};

struct __declspec(uuid("6d82abb7-7b0e-4ea0-bc92-a94cc09768cd"))
IAS_Surface : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    long GetSurfaceNumber ( );
    IMessagePtr SetSurfaceNumber (
        long N );
    IMessagePtr UseImageSurface ( );
    IMessagePtr UseObjectiveSurface ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetSurfaceNumber (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetSurfaceNumber (
        /*[in]*/ long N,
        /*[out,retval]*/ struct IMessage * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_UseImageSurface (
        /*[out,retval]*/ struct IMessage * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_UseObjectiveSurface (
        /*[out,retval]*/ struct IMessage * * pRetVal ) = 0;
};

struct __declspec(uuid("af3381d9-0d13-4bcd-a7a7-42abb50529c0"))
IAS_Detector : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    long GetDetectorNumber ( );
    IMessagePtr SetDetectorNumber (
        long N );
    IMessagePtr SummarizeAll ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetDetectorNumber (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetDetectorNumber (
        /*[in]*/ long N,
        /*[out,retval]*/ struct IMessage * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SummarizeAll (
        /*[out,retval]*/ struct IMessage * * pRetVal ) = 0;
};

struct __declspec(uuid("5332e4e7-51de-4ef6-9d30-564f8695840c"))
IAS_Wavelength : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    long GetWavelengthNumber ( );
    IMessagePtr SetWavelengthNumber (
        long N );
    IMessagePtr UseAllWavelengths ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetWavelengthNumber (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetWavelengthNumber (
        /*[in]*/ long N,
        /*[out,retval]*/ struct IMessage * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_UseAllWavelengths (
        /*[out,retval]*/ struct IMessage * * pRetVal ) = 0;
};

enum __declspec(uuid("ca9ecd49-4c34-49c9-9219-bbd86ef00437"))
HuygensPsfTypes
{
    HuygensPsfTypes_Linear = 0,
    HuygensPsfTypes_Log_Minus_1 = 1,
    HuygensPsfTypes_Log_Minus_2 = 2,
    HuygensPsfTypes_Log_Minus_3 = 3,
    HuygensPsfTypes_Log_Minus_4 = 4,
    HuygensPsfTypes_Log_Minus_5 = 5,
    HuygensPsfTypes_Real = 6,
    HuygensPsfTypes_Imaginary = 7,
    HuygensPsfTypes_Phase = 8
};

enum __declspec(uuid("476804c5-1805-4bfb-8421-05ddb898a971"))
DetectorViewerScaleTypes
{
    DetectorViewerScaleTypes_Linear = 0,
    DetectorViewerScaleTypes_Log_Minus_5 = 1,
    DetectorViewerScaleTypes_Normalized = 1,
    DetectorViewerScaleTypes_Log_Minus_10 = 2,
    DetectorViewerScaleTypes_Log_Minus_15 = 3
};

enum __declspec(uuid("9619b30a-6e18-4b44-84f6-cd53eecea909"))
PsfTypes
{
    PsfTypes_X_Linear = 0,
    PsfTypes_Y_Linear = 1,
    PsfTypes_X_Logarithmic = 2,
    PsfTypes_Y_Logarithmic = 3,
    PsfTypes_X_Phase = 4,
    PsfTypes_Y_Phase = 5,
    PsfTypes_X_RealPart = 6,
    PsfTypes_Y_RealPart = 7,
    PsfTypes_X_ImaginaryPart = 8,
    PsfTypes_Y_ImaginaryPart = 9
};

enum __declspec(uuid("881c3fd2-ee26-4a5e-9524-9e30721368db"))
PsfSpread
{
    PsfSpread_Line = 0,
    PsfSpread_Edge = 1
};

enum __declspec(uuid("e08402e2-7b4e-4e49-bb85-cd80850737de"))
Rotations
{
    Rotations_Rotate_0 = 0,
    Rotations_Rotate_90 = 1,
    Rotations_Rotate_180 = 2,
    Rotations_Rotate_270 = 3
};

enum __declspec(uuid("1bd7ebd0-0ace-41c2-a1c5-b68d207f2e7e"))
Polarizations
{
    Polarizations_None = 0,
    Polarizations_Ex = 1,
    Polarizations_Ey = 2,
    Polarizations_Ez = 3
};

enum __declspec(uuid("2094b670-52c5-4dad-b3f4-b1e57bbefe8e"))
ScanTypes
{
    ScanTypes_Plus_Y = 0,
    ScanTypes_Plus_X = 1,
    ScanTypes_Minus_Y = 2,
    ScanTypes_Minus_X = 3
};

enum __declspec(uuid("80c8ca7f-33fb-4a7c-8f17-9f39b354c1b0"))
DisplayOption
{
    DisplayOption_AllRays = 0,
    DisplayOption_FailedRays = 1,
    DisplayOption_PassedRays = 2
};

struct __declspec(uuid("87c59792-5ec0-4dc3-8e90-4e7e15568bcf"))
IAS_CriticalRayTracer : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPositionTolerance,put=PutPositionTolerance))
    double PositionTolerance;
    __declspec(property(get=GetAngleTolerance,put=PutAngleTolerance))
    double AngleTolerance;
    __declspec(property(get=GetfileName,put=PutfileName))
    _bstr_t fileName;
    __declspec(property(get=GetRaysToDisplay,put=PutRaysToDisplay))
    enum DisplayOption RaysToDisplay;
    __declspec(property(get=GetDisplayXYZ,put=PutDisplayXYZ))
    VARIANT_BOOL DisplayXYZ;
    __declspec(property(get=GetDisplayLMN,put=PutDisplayLMN))
    VARIANT_BOOL DisplayLMN;
    __declspec(property(get=GetDisplayActualEndData,put=PutDisplayActualEndData))
    VARIANT_BOOL DisplayActualEndData;
    __declspec(property(get=GetDisplayTargetEndData,put=PutDisplayTargetEndData))
    VARIANT_BOOL DisplayTargetEndData;
    __declspec(property(get=GetDisplayStartData,put=PutDisplayStartData))
    VARIANT_BOOL DisplayStartData;

    //
    // Wrapper methods for error-handling
    //

    double GetPositionTolerance ( );
    void PutPositionTolerance (
        double pRetVal );
    double GetAngleTolerance ( );
    void PutAngleTolerance (
        double pRetVal );
    _bstr_t GetfileName ( );
    void PutfileName (
        _bstr_t pRetVal );
    enum DisplayOption GetRaysToDisplay ( );
    void PutRaysToDisplay (
        enum DisplayOption pRetVal );
    VARIANT_BOOL GetDisplayXYZ ( );
    void PutDisplayXYZ (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetDisplayLMN ( );
    void PutDisplayLMN (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetDisplayActualEndData ( );
    void PutDisplayActualEndData (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetDisplayTargetEndData ( );
    void PutDisplayTargetEndData (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetDisplayStartData ( );
    void PutDisplayStartData (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PositionTolerance (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PositionTolerance (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_AngleTolerance (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AngleTolerance (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_fileName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_fileName (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_RaysToDisplay (
        /*[out,retval]*/ enum DisplayOption * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RaysToDisplay (
        /*[in]*/ enum DisplayOption pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayXYZ (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayXYZ (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayLMN (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayLMN (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayActualEndData (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayActualEndData (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayTargetEndData (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayTargetEndData (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayStartData (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayStartData (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("a6ec2613-1a0e-4b49-9aa4-88f506399fdd"))
IAS_Interferogram : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetField))
    IAS_FieldPtr Field;
    __declspec(property(get=GetSurface))
    IAS_SurfacePtr Surface;
    __declspec(property(get=GetWavelength))
    IAS_WavelengthPtr Wavelength;
    __declspec(property(get=GetSampling,put=PutSampling))
    enum SampleSizes Sampling;
    __declspec(property(get=GetShowAs,put=PutShowAs))
    enum ShowAs _ShowAs;
    __declspec(property(get=GetBeam_1,put=PutBeam_1))
    enum Beam Beam_1;
    __declspec(property(get=GetBeam_2,put=PutBeam_2))
    enum Beam Beam_2;
    __declspec(property(get=GetRef_Beam_1_To_Vertex,put=PutRef_Beam_1_To_Vertex))
    VARIANT_BOOL Ref_Beam_1_To_Vertex;
    __declspec(property(get=GetRef_Beam_2_To_Vertex,put=PutRef_Beam_2_To_Vertex))
    VARIANT_BOOL Ref_Beam_2_To_Vertex;
    __declspec(property(get=GetUseExitPupil,put=PutUseExitPupil))
    VARIANT_BOOL UseExitPupil;
    __declspec(property(get=GetConsiderOPL,put=PutConsiderOPL))
    VARIANT_BOOL ConsiderOPL;
    __declspec(property(get=GetScaleFactor,put=PutScaleFactor))
    double ScaleFactor;
    __declspec(property(get=GetX_Tilt,put=PutX_Tilt))
    double X_Tilt;
    __declspec(property(get=GetY_Tilt,put=PutY_Tilt))
    double Y_Tilt;
    __declspec(property(get=GetSubaperture_X,put=PutSubaperture_X))
    double Subaperture_X;
    __declspec(property(get=GetSubaperture_Y,put=PutSubaperture_Y))
    double Subaperture_Y;
    __declspec(property(get=GetSubaperture_R,put=PutSubaperture_R))
    double Subaperture_R;
    __declspec(property(get=GetContourFormat,put=PutContourFormat))
    _bstr_t ContourFormat;

    //
    // Wrapper methods for error-handling
    //

    IAS_FieldPtr GetField ( );
    IAS_SurfacePtr GetSurface ( );
    IAS_WavelengthPtr GetWavelength ( );
    enum SampleSizes GetSampling ( );
    void PutSampling (
        enum SampleSizes pRetVal );
    enum ShowAs GetShowAs ( );
    void PutShowAs (
        enum ShowAs pRetVal );
    enum Beam GetBeam_1 ( );
    void PutBeam_1 (
        enum Beam pRetVal );
    enum Beam GetBeam_2 ( );
    void PutBeam_2 (
        enum Beam pRetVal );
    VARIANT_BOOL GetRef_Beam_1_To_Vertex ( );
    void PutRef_Beam_1_To_Vertex (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetRef_Beam_2_To_Vertex ( );
    void PutRef_Beam_2_To_Vertex (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetUseExitPupil ( );
    void PutUseExitPupil (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetConsiderOPL ( );
    void PutConsiderOPL (
        VARIANT_BOOL pRetVal );
    double GetScaleFactor ( );
    void PutScaleFactor (
        double pRetVal );
    double GetX_Tilt ( );
    void PutX_Tilt (
        double pRetVal );
    double GetY_Tilt ( );
    void PutY_Tilt (
        double pRetVal );
    double GetSubaperture_X ( );
    void PutSubaperture_X (
        double pRetVal );
    double GetSubaperture_Y ( );
    void PutSubaperture_Y (
        double pRetVal );
    double GetSubaperture_R ( );
    void PutSubaperture_R (
        double pRetVal );
    _bstr_t GetContourFormat ( );
    void PutContourFormat (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Field (
        /*[out,retval]*/ struct IAS_Field * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Surface (
        /*[out,retval]*/ struct IAS_Surface * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Wavelength (
        /*[out,retval]*/ struct IAS_Wavelength * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Sampling (
        /*[out,retval]*/ enum SampleSizes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Sampling (
        /*[in]*/ enum SampleSizes pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShowAs (
        /*[out,retval]*/ enum ShowAs * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ShowAs (
        /*[in]*/ enum ShowAs pRetVal ) = 0;
      virtual HRESULT __stdcall get_Beam_1 (
        /*[out,retval]*/ enum Beam * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Beam_1 (
        /*[in]*/ enum Beam pRetVal ) = 0;
      virtual HRESULT __stdcall get_Beam_2 (
        /*[out,retval]*/ enum Beam * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Beam_2 (
        /*[in]*/ enum Beam pRetVal ) = 0;
      virtual HRESULT __stdcall get_Ref_Beam_1_To_Vertex (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Ref_Beam_1_To_Vertex (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Ref_Beam_2_To_Vertex (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Ref_Beam_2_To_Vertex (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseExitPupil (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseExitPupil (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ConsiderOPL (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ConsiderOPL (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ScaleFactor (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ScaleFactor (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X_Tilt (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X_Tilt (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y_Tilt (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Y_Tilt (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Subaperture_X (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Subaperture_X (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Subaperture_Y (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Subaperture_Y (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Subaperture_R (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Subaperture_R (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ContourFormat (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ContourFormat (
        /*[in]*/ BSTR pRetVal ) = 0;
};

struct __declspec(uuid("5bcc6767-e4ad-4428-812a-f800aa512cf8"))
IAS_WavefrontMap : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetField))
    IAS_FieldPtr Field;
    __declspec(property(get=GetSurface))
    IAS_SurfacePtr Surface;
    __declspec(property(get=GetWavelength))
    IAS_WavelengthPtr Wavelength;
    __declspec(property(get=GetShowAs,put=PutShowAs))
    enum ShowAs _ShowAs;
    __declspec(property(get=GetRotation,put=PutRotation))
    enum Rotations Rotation;
    __declspec(property(get=GetSampling,put=PutSampling))
    enum SampleSizes Sampling;
    __declspec(property(get=GetPolarization,put=PutPolarization))
    enum Polarizations Polarization;
    __declspec(property(get=GetReferenceToPrimary,put=PutReferenceToPrimary))
    VARIANT_BOOL ReferenceToPrimary;
    __declspec(property(get=GetUseExitPupil,put=PutUseExitPupil))
    VARIANT_BOOL UseExitPupil;
    __declspec(property(get=GetRemoveTilt,put=PutRemoveTilt))
    VARIANT_BOOL RemoveTilt;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetSubaperture_X,put=PutSubaperture_X))
    double Subaperture_X;
    __declspec(property(get=GetSubaperture_Y,put=PutSubaperture_Y))
    double Subaperture_Y;
    __declspec(property(get=GetSubaperture_R,put=PutSubaperture_R))
    double Subaperture_R;
    __declspec(property(get=GetContourFormat,put=PutContourFormat))
    _bstr_t ContourFormat;

    //
    // Wrapper methods for error-handling
    //

    IAS_FieldPtr GetField ( );
    IAS_SurfacePtr GetSurface ( );
    IAS_WavelengthPtr GetWavelength ( );
    enum ShowAs GetShowAs ( );
    void PutShowAs (
        enum ShowAs pRetVal );
    enum Rotations GetRotation ( );
    void PutRotation (
        enum Rotations pRetVal );
    enum SampleSizes GetSampling ( );
    void PutSampling (
        enum SampleSizes pRetVal );
    enum Polarizations GetPolarization ( );
    void PutPolarization (
        enum Polarizations pRetVal );
    VARIANT_BOOL GetReferenceToPrimary ( );
    void PutReferenceToPrimary (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetUseExitPupil ( );
    void PutUseExitPupil (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetRemoveTilt ( );
    void PutRemoveTilt (
        VARIANT_BOOL pRetVal );
    double GetScale ( );
    void PutScale (
        double pRetVal );
    double GetSubaperture_X ( );
    void PutSubaperture_X (
        double pRetVal );
    double GetSubaperture_Y ( );
    void PutSubaperture_Y (
        double pRetVal );
    double GetSubaperture_R ( );
    void PutSubaperture_R (
        double pRetVal );
    _bstr_t GetContourFormat ( );
    void PutContourFormat (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Field (
        /*[out,retval]*/ struct IAS_Field * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Surface (
        /*[out,retval]*/ struct IAS_Surface * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Wavelength (
        /*[out,retval]*/ struct IAS_Wavelength * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShowAs (
        /*[out,retval]*/ enum ShowAs * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ShowAs (
        /*[in]*/ enum ShowAs pRetVal ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ enum Rotations * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ enum Rotations pRetVal ) = 0;
      virtual HRESULT __stdcall get_Sampling (
        /*[out,retval]*/ enum SampleSizes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Sampling (
        /*[in]*/ enum SampleSizes pRetVal ) = 0;
      virtual HRESULT __stdcall get_Polarization (
        /*[out,retval]*/ enum Polarizations * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Polarization (
        /*[in]*/ enum Polarizations pRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceToPrimary (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceToPrimary (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseExitPupil (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseExitPupil (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_RemoveTilt (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RemoveTilt (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Subaperture_X (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Subaperture_X (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Subaperture_Y (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Subaperture_Y (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Subaperture_R (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Subaperture_R (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ContourFormat (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ContourFormat (
        /*[in]*/ BSTR pRetVal ) = 0;
};

struct __declspec(uuid("d7427a7b-cac0-41b9-8bbe-1097582183f8"))
IAS_XXXTemplateXXX : IDispatch
{};

enum __declspec(uuid("6ab96b5d-1376-4d52-ac12-5539f041e3ed"))
ZOSAPI_Analysis_Settings_Wavefront_DataType
{
    ZOSAPI_Analysis_Settings_Wavefront_DataType_Computed = 0,
    ZOSAPI_Analysis_Settings_Wavefront_DataType_Reference = 1,
    ZOSAPI_Analysis_Settings_Wavefront_DataType_Difference = 2
};

enum __declspec(uuid("eaa20085-2dae-4cc5-a15e-02b950425221"))
KnifeType
{
    KnifeType_Horiz_Above = 0,
    KnifeType_Horiz_Below = 1,
    KnifeType_Vert_Right = 2,
    KnifeType_Vert_Left = 3
};

enum __declspec(uuid("e8b7590e-567e-4a17-bb1f-de9eee69680a"))
FoucaultShowAs
{
    FoucaultShowAs_Surface = 0,
    FoucaultShowAs_Contour = 1,
    FoucaultShowAs_GreyScale = 2,
    FoucaultShowAs_InverseGreyScale = 3,
    FoucaultShowAs_FalseColor = 4,
    FoucaultShowAs_InverseFalseColor = 5,
    FoucaultShowAs_X_CrossSection = 6,
    FoucaultShowAs_Y_CrossSection = 7
};

enum __declspec(uuid("70971654-14b4-47cc-9fc9-084501970e9e"))
Types
{
    Types_Linear = 0,
    Types_Log_Minus_3 = 1,
    Types_Log_Minus_6 = 2,
    Types_Log_Minus_9 = 3,
    Types_Log_Minus_12 = 4,
    Types_Log_Minus_15 = 5,
    Types_Log_Minus_18 = 6
};

struct __declspec(uuid("a2554db1-ac95-402a-b53b-283e86ca4792"))
IAS_Foucault : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetField))
    IAS_FieldPtr Field;
    __declspec(property(get=GetWavelength))
    IAS_WavelengthPtr Wavelength;
    __declspec(property(get=GetType,put=PutType))
    enum Types Type;
    __declspec(property(get=GetSampling,put=PutSampling))
    enum SampleSizes Sampling;
    __declspec(property(get=GetShowAs,put=PutShowAs))
    enum FoucaultShowAs ShowAs;
    __declspec(property(get=GetKnife,put=PutKnife))
    enum KnifeType Knife;
    __declspec(property(get=GetData,put=PutData))
    enum ZOSAPI_Analysis_Settings_Wavefront_DataType Data;
    __declspec(property(get=GetRowColumn,put=PutRowColumn))
    long RowColumn;
    __declspec(property(get=GetUsePolarization,put=PutUsePolarization))
    VARIANT_BOOL UsePolarization;
    __declspec(property(get=GetY_Position,put=PutY_Position))
    double Y_Position;
    __declspec(property(get=GetDecenter_X,put=PutDecenter_X))
    double Decenter_X;
    __declspec(property(get=GetDecenter_Y,put=PutDecenter_Y))
    double Decenter_Y;
    __declspec(property(get=GetScale_X,put=PutScale_X))
    double Scale_X;
    __declspec(property(get=GetScale_Y,put=PutScale_Y))
    double Scale_Y;
    __declspec(property(get=Getsource,put=Putsource))
    _bstr_t source;
    __declspec(property(get=GetSaveBMP,put=PutSaveBMP))
    _bstr_t SaveBMP;

    //
    // Wrapper methods for error-handling
    //

    IAS_FieldPtr GetField ( );
    IAS_WavelengthPtr GetWavelength ( );
    enum Types GetType ( );
    void PutType (
        enum Types pRetVal );
    enum SampleSizes GetSampling ( );
    void PutSampling (
        enum SampleSizes pRetVal );
    enum FoucaultShowAs GetShowAs ( );
    void PutShowAs (
        enum FoucaultShowAs pRetVal );
    enum KnifeType GetKnife ( );
    void PutKnife (
        enum KnifeType pRetVal );
    enum ZOSAPI_Analysis_Settings_Wavefront_DataType GetData ( );
    void PutData (
        enum ZOSAPI_Analysis_Settings_Wavefront_DataType pRetVal );
    long GetRowColumn ( );
    void PutRowColumn (
        long pRetVal );
    VARIANT_BOOL GetUsePolarization ( );
    void PutUsePolarization (
        VARIANT_BOOL pRetVal );
    double GetY_Position ( );
    void PutY_Position (
        double pRetVal );
    double GetDecenter_X ( );
    void PutDecenter_X (
        double pRetVal );
    double GetDecenter_Y ( );
    void PutDecenter_Y (
        double pRetVal );
    double GetScale_X ( );
    void PutScale_X (
        double pRetVal );
    double GetScale_Y ( );
    void PutScale_Y (
        double pRetVal );
    _bstr_t Getsource ( );
    void Putsource (
        _bstr_t pRetVal );
    _bstr_t GetSaveBMP ( );
    void PutSaveBMP (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Field (
        /*[out,retval]*/ struct IAS_Field * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Wavelength (
        /*[out,retval]*/ struct IAS_Wavelength * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum Types * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum Types pRetVal ) = 0;
      virtual HRESULT __stdcall get_Sampling (
        /*[out,retval]*/ enum SampleSizes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Sampling (
        /*[in]*/ enum SampleSizes pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShowAs (
        /*[out,retval]*/ enum FoucaultShowAs * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ShowAs (
        /*[in]*/ enum FoucaultShowAs pRetVal ) = 0;
      virtual HRESULT __stdcall get_Knife (
        /*[out,retval]*/ enum KnifeType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Knife (
        /*[in]*/ enum KnifeType pRetVal ) = 0;
      virtual HRESULT __stdcall get_Data (
        /*[out,retval]*/ enum ZOSAPI_Analysis_Settings_Wavefront_DataType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Data (
        /*[in]*/ enum ZOSAPI_Analysis_Settings_Wavefront_DataType pRetVal ) = 0;
      virtual HRESULT __stdcall get_RowColumn (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RowColumn (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_UsePolarization (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UsePolarization (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y_Position (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Y_Position (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Decenter_X (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Decenter_X (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Decenter_Y (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Decenter_Y (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Scale_X (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Scale_X (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Scale_Y (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Scale_Y (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_source (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_source (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_SaveBMP (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SaveBMP (
        /*[in]*/ BSTR pRetVal ) = 0;
};

struct __declspec(uuid("8f426da5-bdda-4956-ac0e-e4a6560916ca"))
IAS_SurfaceSag : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSurface))
    IAS_SurfacePtr Surface;
    __declspec(property(get=GetSampling,put=PutSampling))
    enum SampleSizes_Pow2Plus1_X Sampling;
    __declspec(property(get=GetData,put=PutData))
    enum SurfaceSagData Data;
    __declspec(property(get=GetShowAs,put=PutShowAs))
    enum ShowAs _ShowAs;
    __declspec(property(get=GetContourFormat,put=PutContourFormat))
    _bstr_t ContourFormat;

    //
    // Wrapper methods for error-handling
    //

    IAS_SurfacePtr GetSurface ( );
    enum SampleSizes_Pow2Plus1_X GetSampling ( );
    void PutSampling (
        enum SampleSizes_Pow2Plus1_X pRetVal );
    enum SurfaceSagData GetData ( );
    void PutData (
        enum SurfaceSagData pRetVal );
    enum ShowAs GetShowAs ( );
    void PutShowAs (
        enum ShowAs pRetVal );
    _bstr_t GetContourFormat ( );
    void PutContourFormat (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Surface (
        /*[out,retval]*/ struct IAS_Surface * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Sampling (
        /*[out,retval]*/ enum SampleSizes_Pow2Plus1_X * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Sampling (
        /*[in]*/ enum SampleSizes_Pow2Plus1_X pRetVal ) = 0;
      virtual HRESULT __stdcall get_Data (
        /*[out,retval]*/ enum SurfaceSagData * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Data (
        /*[in]*/ enum SurfaceSagData pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShowAs (
        /*[out,retval]*/ enum ShowAs * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ShowAs (
        /*[in]*/ enum ShowAs pRetVal ) = 0;
      virtual HRESULT __stdcall get_ContourFormat (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ContourFormat (
        /*[in]*/ BSTR pRetVal ) = 0;
};

struct __declspec(uuid("26e1fb33-8e8e-4e8b-a5a6-e56581c9eda2"))
IAS_SurfacePhase : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSurface))
    IAS_SurfacePtr Surface;
    __declspec(property(get=GetSampling,put=PutSampling))
    enum SampleSizes_Pow2Plus1_X Sampling;
    __declspec(property(get=GetData,put=PutData))
    enum SurfacePhaseData Data;
    __declspec(property(get=GetShowAs,put=PutShowAs))
    enum ShowAs _ShowAs;
    __declspec(property(get=GetContourFormat,put=PutContourFormat))
    _bstr_t ContourFormat;

    //
    // Wrapper methods for error-handling
    //

    IAS_SurfacePtr GetSurface ( );
    enum SampleSizes_Pow2Plus1_X GetSampling ( );
    void PutSampling (
        enum SampleSizes_Pow2Plus1_X pRetVal );
    enum SurfacePhaseData GetData ( );
    void PutData (
        enum SurfacePhaseData pRetVal );
    enum ShowAs GetShowAs ( );
    void PutShowAs (
        enum ShowAs pRetVal );
    _bstr_t GetContourFormat ( );
    void PutContourFormat (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Surface (
        /*[out,retval]*/ struct IAS_Surface * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Sampling (
        /*[out,retval]*/ enum SampleSizes_Pow2Plus1_X * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Sampling (
        /*[in]*/ enum SampleSizes_Pow2Plus1_X pRetVal ) = 0;
      virtual HRESULT __stdcall get_Data (
        /*[out,retval]*/ enum SurfacePhaseData * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Data (
        /*[in]*/ enum SurfacePhaseData pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShowAs (
        /*[out,retval]*/ enum ShowAs * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ShowAs (
        /*[in]*/ enum ShowAs pRetVal ) = 0;
      virtual HRESULT __stdcall get_ContourFormat (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ContourFormat (
        /*[in]*/ BSTR pRetVal ) = 0;
};

struct __declspec(uuid("af426711-0db1-4738-8183-80fb4c8f7829"))
IAS_SurfaceCurvature : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSurface))
    IAS_SurfacePtr Surface;
    __declspec(property(get=GetSampling,put=PutSampling))
    enum SampleSizes_Pow2Plus1_X Sampling;
    __declspec(property(get=GetData,put=PutData))
    enum SurfaceCurvatureData Data;
    __declspec(property(get=GetShowAs,put=PutShowAs))
    enum ShowAs _ShowAs;
    __declspec(property(get=GetContourFormat,put=PutContourFormat))
    _bstr_t ContourFormat;

    //
    // Wrapper methods for error-handling
    //

    IAS_SurfacePtr GetSurface ( );
    enum SampleSizes_Pow2Plus1_X GetSampling ( );
    void PutSampling (
        enum SampleSizes_Pow2Plus1_X pRetVal );
    enum SurfaceCurvatureData GetData ( );
    void PutData (
        enum SurfaceCurvatureData pRetVal );
    enum ShowAs GetShowAs ( );
    void PutShowAs (
        enum ShowAs pRetVal );
    _bstr_t GetContourFormat ( );
    void PutContourFormat (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Surface (
        /*[out,retval]*/ struct IAS_Surface * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Sampling (
        /*[out,retval]*/ enum SampleSizes_Pow2Plus1_X * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Sampling (
        /*[in]*/ enum SampleSizes_Pow2Plus1_X pRetVal ) = 0;
      virtual HRESULT __stdcall get_Data (
        /*[out,retval]*/ enum SurfaceCurvatureData * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Data (
        /*[in]*/ enum SurfaceCurvatureData pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShowAs (
        /*[out,retval]*/ enum ShowAs * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ShowAs (
        /*[in]*/ enum ShowAs pRetVal ) = 0;
      virtual HRESULT __stdcall get_ContourFormat (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ContourFormat (
        /*[in]*/ BSTR pRetVal ) = 0;
};

struct __declspec(uuid("f9d33a39-c401-4e69-8cae-6f565d5de4cb"))
IAS_SurfaceSagCross : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSurface))
    IAS_SurfacePtr Surface;
    __declspec(property(get=GetData,put=PutData))
    enum SurfaceSagData Data;
    __declspec(property(get=GetSampling,put=PutSampling))
    enum SampleSizes_Pow2Plus1 Sampling;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;

    //
    // Wrapper methods for error-handling
    //

    IAS_SurfacePtr GetSurface ( );
    enum SurfaceSagData GetData ( );
    void PutData (
        enum SurfaceSagData pRetVal );
    enum SampleSizes_Pow2Plus1 GetSampling ( );
    void PutSampling (
        enum SampleSizes_Pow2Plus1 pRetVal );
    double GetAngle ( );
    void PutAngle (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Surface (
        /*[out,retval]*/ struct IAS_Surface * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Data (
        /*[out,retval]*/ enum SurfaceSagData * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Data (
        /*[in]*/ enum SurfaceSagData pRetVal ) = 0;
      virtual HRESULT __stdcall get_Sampling (
        /*[out,retval]*/ enum SampleSizes_Pow2Plus1 * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Sampling (
        /*[in]*/ enum SampleSizes_Pow2Plus1 pRetVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("ee2e4c4c-fb5a-45f2-8e9c-67534fdc8ad9"))
IAS_SurfacePhaseCross : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSurface))
    IAS_SurfacePtr Surface;
    __declspec(property(get=GetData,put=PutData))
    enum SurfacePhaseData Data;
    __declspec(property(get=GetSampling,put=PutSampling))
    enum SampleSizes_Pow2Plus1 Sampling;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;

    //
    // Wrapper methods for error-handling
    //

    IAS_SurfacePtr GetSurface ( );
    enum SurfacePhaseData GetData ( );
    void PutData (
        enum SurfacePhaseData pRetVal );
    enum SampleSizes_Pow2Plus1 GetSampling ( );
    void PutSampling (
        enum SampleSizes_Pow2Plus1 pRetVal );
    double GetAngle ( );
    void PutAngle (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Surface (
        /*[out,retval]*/ struct IAS_Surface * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Data (
        /*[out,retval]*/ enum SurfacePhaseData * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Data (
        /*[in]*/ enum SurfacePhaseData pRetVal ) = 0;
      virtual HRESULT __stdcall get_Sampling (
        /*[out,retval]*/ enum SampleSizes_Pow2Plus1 * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Sampling (
        /*[in]*/ enum SampleSizes_Pow2Plus1 pRetVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("08e39510-9647-467c-97cf-fdaab294b6a5"))
IAS_SurfaceCurvatureCross : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSurface))
    IAS_SurfacePtr Surface;
    __declspec(property(get=GetData,put=PutData))
    enum SurfaceCurvatureCrossData Data;
    __declspec(property(get=GetSampling,put=PutSampling))
    enum SampleSizes_Pow2Plus1 Sampling;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;

    //
    // Wrapper methods for error-handling
    //

    IAS_SurfacePtr GetSurface ( );
    enum SurfaceCurvatureCrossData GetData ( );
    void PutData (
        enum SurfaceCurvatureCrossData pRetVal );
    enum SampleSizes_Pow2Plus1 GetSampling ( );
    void PutSampling (
        enum SampleSizes_Pow2Plus1 pRetVal );
    double GetAngle ( );
    void PutAngle (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Surface (
        /*[out,retval]*/ struct IAS_Surface * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Data (
        /*[out,retval]*/ enum SurfaceCurvatureCrossData * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Data (
        /*[in]*/ enum SurfaceCurvatureCrossData pRetVal ) = 0;
      virtual HRESULT __stdcall get_Sampling (
        /*[out,retval]*/ enum SampleSizes_Pow2Plus1 * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Sampling (
        /*[in]*/ enum SampleSizes_Pow2Plus1 pRetVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double pRetVal ) = 0;
};

enum __declspec(uuid("952254e7-4310-4229-acfe-98a9fcf941db"))
Patterns
{
    Patterns_Square = 0,
    Patterns_Hexapolar = 1,
    Patterns_Dithered = 2
};

enum __declspec(uuid("3ddee9f7-ac96-43e6-97df-696e46472531"))
Reference
{
    Reference_ChiefRay = 0,
    Reference_Centroid = 1,
    Reference_Middle = 2,
    Reference_Vertex = 3
};

enum __declspec(uuid("59e17c84-9ec0-4a1a-b46a-967f9772da75"))
ShowScales
{
    ShowScales_ScaleBar = 0,
    ShowScales_Box = 1,
    ShowScales_Cross = 2,
    ShowScales_Circle = 3
};

enum __declspec(uuid("cc851d2c-91c6-46b7-ae70-35252b4c32ff"))
ColorRaysBy
{
    ColorRaysBy_Fields = 0,
    ColorRaysBy_Waves = 1,
    ColorRaysBy_Config = 2,
    ColorRaysBy_Wavelength = 3
};

struct __declspec(uuid("9ff6cd79-d587-4745-8b70-defb4e33eb7f"))
IAS_Spot : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetField))
    IAS_FieldPtr Field;
    __declspec(property(get=GetSurface))
    IAS_SurfacePtr Surface;
    __declspec(property(get=GetWavelength))
    IAS_WavelengthPtr Wavelength;
    __declspec(property(get=GetPattern,put=PutPattern))
    enum Patterns Pattern;
    __declspec(property(get=GetReferTo,put=PutReferTo))
    enum Reference ReferTo;
    __declspec(property(get=GetShowScale,put=PutShowScale))
    enum ShowScales ShowScale;
    __declspec(property(get=GetColorRaysBy,put=PutColorRaysBy))
    enum ColorRaysBy _ColorRaysBy;
    __declspec(property(get=GetRayDensity,put=PutRayDensity))
    long RayDensity;
    __declspec(property(get=GetConfiguration,put=PutConfiguration))
    long Configuration;
    __declspec(property(get=GetDirectionCosines,put=PutDirectionCosines))
    VARIANT_BOOL DirectionCosines;
    __declspec(property(get=GetUseSymbols,put=PutUseSymbols))
    VARIANT_BOOL UseSymbols;
    __declspec(property(get=GetUsePolarization,put=PutUsePolarization))
    VARIANT_BOOL UsePolarization;
    __declspec(property(get=GetScatterRays,put=PutScatterRays))
    VARIANT_BOOL ScatterRays;
    __declspec(property(get=GetShowAiryDisk,put=PutShowAiryDisk))
    VARIANT_BOOL ShowAiryDisk;
    __declspec(property(get=GetIgnoreLateralColor,put=PutIgnoreLateralColor))
    VARIANT_BOOL IgnoreLateralColor;
    __declspec(property(get=GetPlotScale,put=PutPlotScale))
    double PlotScale;
    __declspec(property(get=GetDeltaFocus,put=PutDeltaFocus))
    double DeltaFocus;
    __declspec(property(get=GetExaggerate,put=PutExaggerate))
    double Exaggerate;

    //
    // Wrapper methods for error-handling
    //

    IAS_FieldPtr GetField ( );
    IAS_SurfacePtr GetSurface ( );
    IAS_WavelengthPtr GetWavelength ( );
    enum Patterns GetPattern ( );
    void PutPattern (
        enum Patterns pRetVal );
    enum Reference GetReferTo ( );
    void PutReferTo (
        enum Reference pRetVal );
    enum ShowScales GetShowScale ( );
    void PutShowScale (
        enum ShowScales pRetVal );
    enum ColorRaysBy GetColorRaysBy ( );
    void PutColorRaysBy (
        enum ColorRaysBy pRetVal );
    long GetRayDensity ( );
    void PutRayDensity (
        long pRetVal );
    long GetConfiguration ( );
    void PutConfiguration (
        long pRetVal );
    VARIANT_BOOL GetDirectionCosines ( );
    void PutDirectionCosines (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetUseSymbols ( );
    void PutUseSymbols (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetUsePolarization ( );
    void PutUsePolarization (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetScatterRays ( );
    void PutScatterRays (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetShowAiryDisk ( );
    void PutShowAiryDisk (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIgnoreLateralColor ( );
    void PutIgnoreLateralColor (
        VARIANT_BOOL pRetVal );
    double GetPlotScale ( );
    void PutPlotScale (
        double pRetVal );
    double GetDeltaFocus ( );
    void PutDeltaFocus (
        double pRetVal );
    double GetExaggerate ( );
    void PutExaggerate (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Field (
        /*[out,retval]*/ struct IAS_Field * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Surface (
        /*[out,retval]*/ struct IAS_Surface * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Wavelength (
        /*[out,retval]*/ struct IAS_Wavelength * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Pattern (
        /*[out,retval]*/ enum Patterns * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Pattern (
        /*[in]*/ enum Patterns pRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferTo (
        /*[out,retval]*/ enum Reference * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferTo (
        /*[in]*/ enum Reference pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShowScale (
        /*[out,retval]*/ enum ShowScales * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ShowScale (
        /*[in]*/ enum ShowScales pRetVal ) = 0;
      virtual HRESULT __stdcall get_ColorRaysBy (
        /*[out,retval]*/ enum ColorRaysBy * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ColorRaysBy (
        /*[in]*/ enum ColorRaysBy pRetVal ) = 0;
      virtual HRESULT __stdcall get_RayDensity (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RayDensity (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Configuration (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Configuration (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_DirectionCosines (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DirectionCosines (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseSymbols (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseSymbols (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UsePolarization (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UsePolarization (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ScatterRays (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ScatterRays (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShowAiryDisk (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ShowAiryDisk (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IgnoreLateralColor (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IgnoreLateralColor (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_PlotScale (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PlotScale (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_DeltaFocus (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DeltaFocus (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Exaggerate (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Exaggerate (
        /*[in]*/ double pRetVal ) = 0;
};

enum __declspec(uuid("e0258114-ca7e-45bc-9efc-14a44012a1fd"))
Method
{
    Method_GaussQuad = 0,
    Method_RectArray = 1
};

enum __declspec(uuid("ea15af5d-26b6-4242-9b61-b6838e7d47e2"))
FieldDensities
{
    FieldDensities_FieldDens_5 = 1,
    FieldDensities_FieldDens_10 = 2,
    FieldDensities_FieldDens_15 = 3,
    FieldDensities_FieldDens_20 = 4,
    FieldDensities_FieldDens_25 = 5,
    FieldDensities_FieldDens_30 = 6,
    FieldDensities_FieldDens_35 = 7,
    FieldDensities_FieldDens_40 = 8,
    FieldDensities_FieldDens_45 = 9,
    FieldDensities_FieldDens_50 = 10,
    FieldDensities_FieldDens_55 = 11,
    FieldDensities_FieldDens_60 = 12,
    FieldDensities_FieldDens_65 = 13,
    FieldDensities_FieldDens_70 = 14,
    FieldDensities_FieldDens_75 = 15,
    FieldDensities_FieldDens_80 = 16,
    FieldDensities_FieldDens_85 = 17,
    FieldDensities_FieldDens_90 = 18,
    FieldDensities_FieldDens_95 = 19,
    FieldDensities_FieldDens_100 = 20
};

enum __declspec(uuid("63e3dcbd-c900-4449-8f02-8fe2911326d8"))
FocusDensities
{
    FocusDensities_FocusDens_5 = 1,
    FocusDensities_FocusDens_10 = 2,
    FocusDensities_FocusDens_15 = 3,
    FocusDensities_FocusDens_20 = 4,
    FocusDensities_FocusDens_25 = 5,
    FocusDensities_FocusDens_30 = 6,
    FocusDensities_FocusDens_35 = 7,
    FocusDensities_FocusDens_40 = 8,
    FocusDensities_FocusDens_45 = 9,
    FocusDensities_FocusDens_50 = 10,
    FocusDensities_FocusDens_55 = 11,
    FocusDensities_FocusDens_60 = 12,
    FocusDensities_FocusDens_65 = 13,
    FocusDensities_FocusDens_70 = 14,
    FocusDensities_FocusDens_75 = 15,
    FocusDensities_FocusDens_80 = 16,
    FocusDensities_FocusDens_85 = 17,
    FocusDensities_FocusDens_90 = 18,
    FocusDensities_FocusDens_95 = 19,
    FocusDensities_FocusDens_100 = 20
};

enum __declspec(uuid("c8eef18d-6060-4eef-b419-b9bb9e0a2ddb"))
WaveDensities
{
    WaveDensities_WaveDens_5 = 1,
    WaveDensities_WaveDens_10 = 2,
    WaveDensities_WaveDens_15 = 3,
    WaveDensities_WaveDens_20 = 4,
    WaveDensities_WaveDens_25 = 5,
    WaveDensities_WaveDens_30 = 6,
    WaveDensities_WaveDens_35 = 7,
    WaveDensities_WaveDens_40 = 8,
    WaveDensities_WaveDens_45 = 9,
    WaveDensities_WaveDens_50 = 10,
    WaveDensities_WaveDens_55 = 11,
    WaveDensities_WaveDens_60 = 12,
    WaveDensities_WaveDens_65 = 13,
    WaveDensities_WaveDens_70 = 14,
    WaveDensities_WaveDens_75 = 15,
    WaveDensities_WaveDens_80 = 16,
    WaveDensities_WaveDens_85 = 17,
    WaveDensities_WaveDens_90 = 18,
    WaveDensities_WaveDens_95 = 19,
    WaveDensities_WaveDens_100 = 20
};

enum __declspec(uuid("a535341c-ebab-4106-8dcd-3e7042ff3676"))
RayDensities
{
    RayDensities_RayDens_32x32 = 1,
    RayDensities_RayDens_64x64 = 2,
    RayDensities_RayDens_128x128 = 3,
    RayDensities_RayDens_256x256 = 4,
    RayDensities_RayDens_512x512 = 5,
    RayDensities_RayDens_1024x1024 = 6,
    RayDensities_RayDens_2048x2048 = 7,
    RayDensities_RayDens_4096x4096 = 8,
    RayDensities_RayDens_8192x8192 = 9,
    RayDensities_RayDens_16384x16384 = 10,
    RayDensities_RayDens_1 = 1,
    RayDensities_RayDens_2 = 2,
    RayDensities_RayDens_3 = 3,
    RayDensities_RayDens_4 = 4,
    RayDensities_RayDens_5 = 5,
    RayDensities_RayDens_6 = 6,
    RayDensities_RayDens_7 = 7,
    RayDensities_RayDens_8 = 8,
    RayDensities_RayDens_9 = 9,
    RayDensities_RayDens_10 = 10,
    RayDensities_RayDens_11 = 11,
    RayDensities_RayDens_12 = 12,
    RayDensities_RayDens_13 = 13,
    RayDensities_RayDens_14 = 14,
    RayDensities_RayDens_15 = 15,
    RayDensities_RayDens_16 = 16,
    RayDensities_RayDens_17 = 17,
    RayDensities_RayDens_18 = 18,
    RayDensities_RayDens_19 = 19,
    RayDensities_RayDens_20 = 20
};

enum __declspec(uuid("4a2b99d9-8d13-4520-9317-dc0ed3076e49"))
ReferTo
{
    ReferTo_ChiefRay = 0,
    ReferTo_Centroid = 1
};

enum __declspec(uuid("8a52f615-6599-4fc2-bd8d-036c2094c792"))
Orientations
{
    Orientations_Plus_Y = 0,
    Orientations_Minus_Y = 1,
    Orientations_Plus_X = 2,
    Orientations_Minus_X = 3
};

enum __declspec(uuid("fef8b33d-25c7-47f5-bdba-471dbcb60937"))
ZOSAPI_Analysis_Settings_RMS_RMSField_DataType
{
    ZOSAPI_Analysis_Settings_RMS_RMSField_DataType_Wavefront = 0,
    ZOSAPI_Analysis_Settings_RMS_RMSField_DataType_SpotRadius = 1,
    ZOSAPI_Analysis_Settings_RMS_RMSField_DataType_Spot_X = 2,
    ZOSAPI_Analysis_Settings_RMS_RMSField_DataType_Spot_Y = 3,
    ZOSAPI_Analysis_Settings_RMS_RMSField_DataType_StrehlRation = 4
};

struct __declspec(uuid("c56bc141-e5f2-4771-bef2-652eb0d5b88f"))
IAS_RMSField : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetWavelength))
    IAS_WavelengthPtr Wavelength;
    __declspec(property(get=GetData,put=PutData))
    enum ZOSAPI_Analysis_Settings_RMS_RMSField_DataType Data;
    __declspec(property(get=GetFieldDensity,put=PutFieldDensity))
    enum FieldDensities FieldDensity;
    __declspec(property(get=GetRayDensity,put=PutRayDensity))
    enum RayDensities RayDensity;
    __declspec(property(get=GetReferTo,put=PutReferTo))
    enum ReferTo _ReferTo;
    __declspec(property(get=GetMethod,put=PutMethod))
    enum Method _Method;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum Orientations Orientation;
    __declspec(property(get=GetShowDiffractionLimit,put=PutShowDiffractionLimit))
    VARIANT_BOOL ShowDiffractionLimit;
    __declspec(property(get=GetUseDashes,put=PutUseDashes))
    VARIANT_BOOL UseDashes;
    __declspec(property(get=GetUsePolarization,put=PutUsePolarization))
    VARIANT_BOOL UsePolarization;
    __declspec(property(get=GetRemoveVignettingFactors,put=PutRemoveVignettingFactors))
    VARIANT_BOOL RemoveVignettingFactors;
    __declspec(property(get=GetPlotScale,put=PutPlotScale))
    double PlotScale;

    //
    // Wrapper methods for error-handling
    //

    IAS_WavelengthPtr GetWavelength ( );
    enum ZOSAPI_Analysis_Settings_RMS_RMSField_DataType GetData ( );
    void PutData (
        enum ZOSAPI_Analysis_Settings_RMS_RMSField_DataType pRetVal );
    enum FieldDensities GetFieldDensity ( );
    void PutFieldDensity (
        enum FieldDensities pRetVal );
    enum RayDensities GetRayDensity ( );
    void PutRayDensity (
        enum RayDensities pRetVal );
    enum ReferTo GetReferTo ( );
    void PutReferTo (
        enum ReferTo pRetVal );
    enum Method GetMethod ( );
    void PutMethod (
        enum Method pRetVal );
    enum Orientations GetOrientation ( );
    void PutOrientation (
        enum Orientations pRetVal );
    VARIANT_BOOL GetShowDiffractionLimit ( );
    void PutShowDiffractionLimit (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetUseDashes ( );
    void PutUseDashes (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetUsePolarization ( );
    void PutUsePolarization (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetRemoveVignettingFactors ( );
    void PutRemoveVignettingFactors (
        VARIANT_BOOL pRetVal );
    double GetPlotScale ( );
    void PutPlotScale (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Wavelength (
        /*[out,retval]*/ struct IAS_Wavelength * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Data (
        /*[out,retval]*/ enum ZOSAPI_Analysis_Settings_RMS_RMSField_DataType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Data (
        /*[in]*/ enum ZOSAPI_Analysis_Settings_RMS_RMSField_DataType pRetVal ) = 0;
      virtual HRESULT __stdcall get_FieldDensity (
        /*[out,retval]*/ enum FieldDensities * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FieldDensity (
        /*[in]*/ enum FieldDensities pRetVal ) = 0;
      virtual HRESULT __stdcall get_RayDensity (
        /*[out,retval]*/ enum RayDensities * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RayDensity (
        /*[in]*/ enum RayDensities pRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferTo (
        /*[out,retval]*/ enum ReferTo * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferTo (
        /*[in]*/ enum ReferTo pRetVal ) = 0;
      virtual HRESULT __stdcall get_Method (
        /*[out,retval]*/ enum Method * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Method (
        /*[in]*/ enum Method pRetVal ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ enum Orientations * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ enum Orientations pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShowDiffractionLimit (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ShowDiffractionLimit (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseDashes (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseDashes (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UsePolarization (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UsePolarization (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_RemoveVignettingFactors (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RemoveVignettingFactors (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_PlotScale (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PlotScale (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("c10ce9df-309e-431b-8263-5b51ea781c5e"))
IAS_RMSLambdaDiagram : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetField))
    IAS_FieldPtr Field;
    __declspec(property(get=GetRayDensity,put=PutRayDensity))
    enum RayDensities RayDensity;
    __declspec(property(get=GetWaveDensity,put=PutWaveDensity))
    enum WaveDensities WaveDensity;
    __declspec(property(get=GetData,put=PutData))
    enum ZOSAPI_Analysis_Settings_RMS_RMSField_DataType Data;
    __declspec(property(get=GetReferTo,put=PutReferTo))
    enum ReferTo _ReferTo;
    __declspec(property(get=GetMethod,put=PutMethod))
    enum Method _Method;
    __declspec(property(get=GetUseDashes,put=PutUseDashes))
    VARIANT_BOOL UseDashes;
    __declspec(property(get=GetShowDiffractionLimit,put=PutShowDiffractionLimit))
    VARIANT_BOOL ShowDiffractionLimit;
    __declspec(property(get=GetUsePolarization,put=PutUsePolarization))
    VARIANT_BOOL UsePolarization;
    __declspec(property(get=GetPlotScale,put=PutPlotScale))
    double PlotScale;

    //
    // Wrapper methods for error-handling
    //

    IAS_FieldPtr GetField ( );
    enum RayDensities GetRayDensity ( );
    void PutRayDensity (
        enum RayDensities pRetVal );
    enum WaveDensities GetWaveDensity ( );
    void PutWaveDensity (
        enum WaveDensities pRetVal );
    enum ZOSAPI_Analysis_Settings_RMS_RMSField_DataType GetData ( );
    void PutData (
        enum ZOSAPI_Analysis_Settings_RMS_RMSField_DataType pRetVal );
    enum ReferTo GetReferTo ( );
    void PutReferTo (
        enum ReferTo pRetVal );
    enum Method GetMethod ( );
    void PutMethod (
        enum Method pRetVal );
    VARIANT_BOOL GetUseDashes ( );
    void PutUseDashes (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetShowDiffractionLimit ( );
    void PutShowDiffractionLimit (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetUsePolarization ( );
    void PutUsePolarization (
        VARIANT_BOOL pRetVal );
    double GetPlotScale ( );
    void PutPlotScale (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Field (
        /*[out,retval]*/ struct IAS_Field * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RayDensity (
        /*[out,retval]*/ enum RayDensities * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RayDensity (
        /*[in]*/ enum RayDensities pRetVal ) = 0;
      virtual HRESULT __stdcall get_WaveDensity (
        /*[out,retval]*/ enum WaveDensities * pRetVal ) = 0;
      virtual HRESULT __stdcall put_WaveDensity (
        /*[in]*/ enum WaveDensities pRetVal ) = 0;
      virtual HRESULT __stdcall get_Data (
        /*[out,retval]*/ enum ZOSAPI_Analysis_Settings_RMS_RMSField_DataType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Data (
        /*[in]*/ enum ZOSAPI_Analysis_Settings_RMS_RMSField_DataType pRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferTo (
        /*[out,retval]*/ enum ReferTo * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferTo (
        /*[in]*/ enum ReferTo pRetVal ) = 0;
      virtual HRESULT __stdcall get_Method (
        /*[out,retval]*/ enum Method * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Method (
        /*[in]*/ enum Method pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseDashes (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseDashes (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShowDiffractionLimit (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ShowDiffractionLimit (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UsePolarization (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UsePolarization (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_PlotScale (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PlotScale (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("ca8ea978-53f2-4fd5-953c-f9d00ae1f613"))
IAS_RMSFocus : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetWavelength))
    IAS_WavelengthPtr Wavelength;
    __declspec(property(get=GetRayDensity,put=PutRayDensity))
    enum RayDensities RayDensity;
    __declspec(property(get=GetFocusDensity,put=PutFocusDensity))
    enum FocusDensities FocusDensity;
    __declspec(property(get=GetData,put=PutData))
    enum ZOSAPI_Analysis_Settings_RMS_RMSField_DataType Data;
    __declspec(property(get=GetReferTo,put=PutReferTo))
    enum ReferTo _ReferTo;
    __declspec(property(get=GetMethod,put=PutMethod))
    enum Method _Method;
    __declspec(property(get=GetUseDashes,put=PutUseDashes))
    VARIANT_BOOL UseDashes;
    __declspec(property(get=GetShowDiffractionLimit,put=PutShowDiffractionLimit))
    VARIANT_BOOL ShowDiffractionLimit;
    __declspec(property(get=GetUsePolarization,put=PutUsePolarization))
    VARIANT_BOOL UsePolarization;
    __declspec(property(get=GetPlotScale,put=PutPlotScale))
    double PlotScale;
    __declspec(property(get=GetMinimumFocus,put=PutMinimumFocus))
    double MinimumFocus;
    __declspec(property(get=GetMaximumFocus,put=PutMaximumFocus))
    double MaximumFocus;

    //
    // Wrapper methods for error-handling
    //

    IAS_WavelengthPtr GetWavelength ( );
    enum RayDensities GetRayDensity ( );
    void PutRayDensity (
        enum RayDensities pRetVal );
    enum FocusDensities GetFocusDensity ( );
    void PutFocusDensity (
        enum FocusDensities pRetVal );
    enum ZOSAPI_Analysis_Settings_RMS_RMSField_DataType GetData ( );
    void PutData (
        enum ZOSAPI_Analysis_Settings_RMS_RMSField_DataType pRetVal );
    enum ReferTo GetReferTo ( );
    void PutReferTo (
        enum ReferTo pRetVal );
    enum Method GetMethod ( );
    void PutMethod (
        enum Method pRetVal );
    VARIANT_BOOL GetUseDashes ( );
    void PutUseDashes (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetShowDiffractionLimit ( );
    void PutShowDiffractionLimit (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetUsePolarization ( );
    void PutUsePolarization (
        VARIANT_BOOL pRetVal );
    double GetPlotScale ( );
    void PutPlotScale (
        double pRetVal );
    double GetMinimumFocus ( );
    void PutMinimumFocus (
        double pRetVal );
    double GetMaximumFocus ( );
    void PutMaximumFocus (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Wavelength (
        /*[out,retval]*/ struct IAS_Wavelength * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RayDensity (
        /*[out,retval]*/ enum RayDensities * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RayDensity (
        /*[in]*/ enum RayDensities pRetVal ) = 0;
      virtual HRESULT __stdcall get_FocusDensity (
        /*[out,retval]*/ enum FocusDensities * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FocusDensity (
        /*[in]*/ enum FocusDensities pRetVal ) = 0;
      virtual HRESULT __stdcall get_Data (
        /*[out,retval]*/ enum ZOSAPI_Analysis_Settings_RMS_RMSField_DataType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Data (
        /*[in]*/ enum ZOSAPI_Analysis_Settings_RMS_RMSField_DataType pRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferTo (
        /*[out,retval]*/ enum ReferTo * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferTo (
        /*[in]*/ enum ReferTo pRetVal ) = 0;
      virtual HRESULT __stdcall get_Method (
        /*[out,retval]*/ enum Method * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Method (
        /*[in]*/ enum Method pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseDashes (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseDashes (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShowDiffractionLimit (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ShowDiffractionLimit (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UsePolarization (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UsePolarization (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_PlotScale (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PlotScale (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinimumFocus (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MinimumFocus (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumFocus (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaximumFocus (
        /*[in]*/ double pRetVal ) = 0;
};

enum __declspec(uuid("f06c36bc-1a3a-42e6-8f29-9043295cf887"))
ZOSAPI_Analysis_Settings_RMS_RMSFieldMap_DataType
{
    ZOSAPI_Analysis_Settings_RMS_RMSFieldMap_DataType_Wavefront = 0,
    ZOSAPI_Analysis_Settings_RMS_RMSFieldMap_DataType_SpotRadius = 1,
    ZOSAPI_Analysis_Settings_RMS_RMSFieldMap_DataType_Spot_X = 2,
    ZOSAPI_Analysis_Settings_RMS_RMSFieldMap_DataType_Spot_Y = 3,
    ZOSAPI_Analysis_Settings_RMS_RMSFieldMap_DataType_StrehlRation = 4,
    ZOSAPI_Analysis_Settings_RMS_RMSFieldMap_DataType_PTWavefront = 5
};

struct __declspec(uuid("ed7a7536-63a9-4463-be65-2a062ee0d1df"))
IAS_RMSFieldMap : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetField))
    IAS_FieldPtr Field;
    __declspec(property(get=GetSurface))
    IAS_SurfacePtr Surface;
    __declspec(property(get=GetWavelength))
    IAS_WavelengthPtr Wavelength;
    __declspec(property(get=GetData,put=PutData))
    enum ZOSAPI_Analysis_Settings_RMS_RMSFieldMap_DataType Data;
    __declspec(property(get=GetMethodType,put=PutMethodType))
    enum Method MethodType;
    __declspec(property(get=GetRayDensity,put=PutRayDensity))
    enum RayDensities RayDensity;
    __declspec(property(get=GetReferTo,put=PutReferTo))
    enum ReferTo _ReferTo;
    __declspec(property(get=GetShowAs,put=PutShowAs))
    enum ShowAs _ShowAs;
    __declspec(property(get=GetUsePolarization,put=PutUsePolarization))
    VARIANT_BOOL UsePolarization;
    __declspec(property(get=GetRemoveVignettingFactors,put=PutRemoveVignettingFactors))
    VARIANT_BOOL RemoveVignettingFactors;
    __declspec(property(get=GetX_FieldSampling,put=PutX_FieldSampling))
    long X_FieldSampling;
    __declspec(property(get=GetY_FieldSampling,put=PutY_FieldSampling))
    long Y_FieldSampling;
    __declspec(property(get=GetX_FieldSize,put=PutX_FieldSize))
    double X_FieldSize;
    __declspec(property(get=GetY_FieldSize,put=PutY_FieldSize))
    double Y_FieldSize;
    __declspec(property(get=GetPlotScale,put=PutPlotScale))
    double PlotScale;
    __declspec(property(get=GetContourFormat,put=PutContourFormat))
    _bstr_t ContourFormat;

    //
    // Wrapper methods for error-handling
    //

    IAS_FieldPtr GetField ( );
    IAS_SurfacePtr GetSurface ( );
    IAS_WavelengthPtr GetWavelength ( );
    enum ZOSAPI_Analysis_Settings_RMS_RMSFieldMap_DataType GetData ( );
    void PutData (
        enum ZOSAPI_Analysis_Settings_RMS_RMSFieldMap_DataType pRetVal );
    enum Method GetMethodType ( );
    void PutMethodType (
        enum Method pRetVal );
    enum RayDensities GetRayDensity ( );
    void PutRayDensity (
        enum RayDensities pRetVal );
    enum ReferTo GetReferTo ( );
    void PutReferTo (
        enum ReferTo pRetVal );
    enum ShowAs GetShowAs ( );
    void PutShowAs (
        enum ShowAs pRetVal );
    VARIANT_BOOL GetUsePolarization ( );
    void PutUsePolarization (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetRemoveVignettingFactors ( );
    void PutRemoveVignettingFactors (
        VARIANT_BOOL pRetVal );
    long GetX_FieldSampling ( );
    void PutX_FieldSampling (
        long pRetVal );
    long GetY_FieldSampling ( );
    void PutY_FieldSampling (
        long pRetVal );
    double GetX_FieldSize ( );
    void PutX_FieldSize (
        double pRetVal );
    double GetY_FieldSize ( );
    void PutY_FieldSize (
        double pRetVal );
    double GetPlotScale ( );
    void PutPlotScale (
        double pRetVal );
    _bstr_t GetContourFormat ( );
    void PutContourFormat (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Field (
        /*[out,retval]*/ struct IAS_Field * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Surface (
        /*[out,retval]*/ struct IAS_Surface * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Wavelength (
        /*[out,retval]*/ struct IAS_Wavelength * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Data (
        /*[out,retval]*/ enum ZOSAPI_Analysis_Settings_RMS_RMSFieldMap_DataType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Data (
        /*[in]*/ enum ZOSAPI_Analysis_Settings_RMS_RMSFieldMap_DataType pRetVal ) = 0;
      virtual HRESULT __stdcall get_MethodType (
        /*[out,retval]*/ enum Method * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MethodType (
        /*[in]*/ enum Method pRetVal ) = 0;
      virtual HRESULT __stdcall get_RayDensity (
        /*[out,retval]*/ enum RayDensities * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RayDensity (
        /*[in]*/ enum RayDensities pRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferTo (
        /*[out,retval]*/ enum ReferTo * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferTo (
        /*[in]*/ enum ReferTo pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShowAs (
        /*[out,retval]*/ enum ShowAs * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ShowAs (
        /*[in]*/ enum ShowAs pRetVal ) = 0;
      virtual HRESULT __stdcall get_UsePolarization (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UsePolarization (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_RemoveVignettingFactors (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RemoveVignettingFactors (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_X_FieldSampling (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X_FieldSampling (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y_FieldSampling (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Y_FieldSampling (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_X_FieldSize (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X_FieldSize (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y_FieldSize (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Y_FieldSize (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_PlotScale (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PlotScale (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ContourFormat (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ContourFormat (
        /*[in]*/ BSTR pRetVal ) = 0;
};

struct __declspec(uuid("c09da643-f633-4074-8f9a-f5e1306c55a9"))
IAS_DetectorViewer : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSurface))
    IAS_SurfacePtr Surface;
    __declspec(property(get=GetDetector))
    IAS_DetectorPtr Detector;
    __declspec(property(get=GetShowAs,put=PutShowAs))
    enum DetectorViewerShowAsTypes ShowAs;
    __declspec(property(get=GetScale,put=PutScale))
    enum DetectorViewerScaleTypes Scale;
    __declspec(property(get=GetDataType,put=PutDataType))
    enum DetectorViewerShowDataTypes DataType;
    __declspec(property(get=GetSymbolType,put=PutSymbolType))
    long SymbolType;
    __declspec(property(get=GetConfiguration,put=PutConfiguration))
    long Configuration;
    __declspec(property(get=GetExtraProperty,put=PutExtraProperty))
    long ExtraProperty;
    __declspec(property(get=GetSmoothing,put=PutSmoothing))
    long Smoothing;
    __declspec(property(get=GetRowCol,put=PutRowCol))
    long RowCol;
    __declspec(property(get=GetZplane,put=PutZplane))
    long Zplane;
    __declspec(property(get=GetContrast,put=PutContrast))
    unsigned short Contrast;
    __declspec(property(get=GetAngleList,put=PutAngleList))
    SAFEARRAY * AngleList;
    __declspec(property(get=GetPlotScaleMinimum,put=PutPlotScaleMinimum))
    double PlotScaleMinimum;
    __declspec(property(get=GetPlotScaleMaximum,put=PutPlotScaleMaximum))
    double PlotScaleMaximum;
    __declspec(property(get=GetRayDatabaseFilename,put=PutRayDatabaseFilename))
    _bstr_t RayDatabaseFilename;
    __declspec(property(get=GetFilter,put=PutFilter))
    _bstr_t Filter;
    __declspec(property(get=GetOutFile,put=PutOutFile))
    _bstr_t OutFile;
    __declspec(property(get=GetSuppressFrame,put=PutSuppressFrame))
    VARIANT_BOOL SuppressFrame;
    __declspec(property(get=GetNumberOfNonSequentialSurfaces))
    long NumberOfNonSequentialSurfaces;
    __declspec(property(get=GetNumberOfDetectorsOnSurface))
    long NumberOfDetectorsOnSurface;
    __declspec(property(get=GetNumberOfShowAsTypes))
    long NumberOfShowAsTypes;

    //
    // Wrapper methods for error-handling
    //

    IAS_SurfacePtr GetSurface ( );
    IAS_DetectorPtr GetDetector ( );
    enum DetectorViewerShowAsTypes GetShowAs ( );
    void PutShowAs (
        enum DetectorViewerShowAsTypes pRetVal );
    enum DetectorViewerScaleTypes GetScale ( );
    void PutScale (
        enum DetectorViewerScaleTypes pRetVal );
    enum DetectorViewerShowDataTypes GetDataType ( );
    void PutDataType (
        enum DetectorViewerShowDataTypes pRetVal );
    long GetSymbolType ( );
    void PutSymbolType (
        long pRetVal );
    long GetConfiguration ( );
    void PutConfiguration (
        long pRetVal );
    long GetExtraProperty ( );
    void PutExtraProperty (
        long pRetVal );
    long GetSmoothing ( );
    void PutSmoothing (
        long pRetVal );
    long GetRowCol ( );
    void PutRowCol (
        long pRetVal );
    long GetZplane ( );
    void PutZplane (
        long pRetVal );
    unsigned short GetContrast ( );
    void PutContrast (
        unsigned short pRetVal );
    SAFEARRAY * GetAngleList ( );
    void PutAngleList (
        SAFEARRAY * pRetVal );
    double GetPlotScaleMinimum ( );
    void PutPlotScaleMinimum (
        double pRetVal );
    double GetPlotScaleMaximum ( );
    void PutPlotScaleMaximum (
        double pRetVal );
    _bstr_t GetRayDatabaseFilename ( );
    void PutRayDatabaseFilename (
        _bstr_t pRetVal );
    _bstr_t GetFilter ( );
    void PutFilter (
        _bstr_t pRetVal );
    _bstr_t GetOutFile ( );
    void PutOutFile (
        _bstr_t pRetVal );
    VARIANT_BOOL GetSuppressFrame ( );
    void PutSuppressFrame (
        VARIANT_BOOL pRetVal );
    long GetNumberOfNonSequentialSurfaces ( );
    _bstr_t GetNonSequentialSurfaceName (
        long index );
    long GetNonSequentialSurfaceNumber (
        long index );
    long GetNumberOfDetectorsOnSurface ( );
    _bstr_t GetDetectorName (
        long index );
    long GetDetectorObjectNumber (
        long index );
    long GetNumberOfShowAsTypes ( );
    _bstr_t GetShowAsTypeNameAt (
        long idx );
    VARIANT_BOOL IsValidDetector (
        long N );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Surface (
        /*[out,retval]*/ struct IAS_Surface * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Detector (
        /*[out,retval]*/ struct IAS_Detector * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShowAs (
        /*[out,retval]*/ enum DetectorViewerShowAsTypes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ShowAs (
        /*[in]*/ enum DetectorViewerShowAsTypes pRetVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ enum DetectorViewerScaleTypes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ enum DetectorViewerScaleTypes pRetVal ) = 0;
      virtual HRESULT __stdcall get_DataType (
        /*[out,retval]*/ enum DetectorViewerShowDataTypes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DataType (
        /*[in]*/ enum DetectorViewerShowDataTypes pRetVal ) = 0;
      virtual HRESULT __stdcall get_SymbolType (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SymbolType (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Configuration (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Configuration (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_ExtraProperty (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ExtraProperty (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Smoothing (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Smoothing (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_RowCol (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RowCol (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Zplane (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Zplane (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Contrast (
        /*[out,retval]*/ unsigned short * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Contrast (
        /*[in]*/ unsigned short pRetVal ) = 0;
      virtual HRESULT __stdcall get_AngleList (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AngleList (
        /*[in]*/ SAFEARRAY * pRetVal ) = 0;
      virtual HRESULT __stdcall get_PlotScaleMinimum (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PlotScaleMinimum (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_PlotScaleMaximum (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PlotScaleMaximum (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RayDatabaseFilename (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RayDatabaseFilename (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Filter (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Filter (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_OutFile (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OutFile (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_SuppressFrame (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SuppressFrame (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfNonSequentialSurfaces (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetNonSequentialSurfaceName (
        /*[in]*/ long index,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetNonSequentialSurfaceNumber (
        /*[in]*/ long index,
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfDetectorsOnSurface (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetDetectorName (
        /*[in]*/ long index,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetDetectorObjectNumber (
        /*[in]*/ long index,
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfShowAsTypes (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetShowAsTypeNameAt (
        /*[in]*/ long idx,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsValidDetector (
        /*[in]*/ long N,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("f09485e3-3b98-4005-8d76-2059478de923"))
IAS_FftPsfCrossSection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetField))
    IAS_FieldPtr Field;
    __declspec(property(get=GetWavelength))
    IAS_WavelengthPtr Wavelength;
    __declspec(property(get=GetSampleSize,put=PutSampleSize))
    enum SampleSizes SampleSize;
    __declspec(property(get=GetType,put=PutType))
    enum PsfTypes Type;
    __declspec(property(get=GetUsePolarization,put=PutUsePolarization))
    VARIANT_BOOL UsePolarization;
    __declspec(property(get=GetNormalize,put=PutNormalize))
    VARIANT_BOOL Normalize;
    __declspec(property(get=GetPlotScale,put=PutPlotScale))
    double PlotScale;
    __declspec(property(get=GetRowCol,put=PutRowCol))
    long RowCol;

    //
    // Wrapper methods for error-handling
    //

    IAS_FieldPtr GetField ( );
    IAS_WavelengthPtr GetWavelength ( );
    enum SampleSizes GetSampleSize ( );
    void PutSampleSize (
        enum SampleSizes pRetVal );
    enum PsfTypes GetType ( );
    void PutType (
        enum PsfTypes pRetVal );
    VARIANT_BOOL GetUsePolarization ( );
    void PutUsePolarization (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetNormalize ( );
    void PutNormalize (
        VARIANT_BOOL pRetVal );
    double GetPlotScale ( );
    void PutPlotScale (
        double pRetVal );
    long GetRowCol ( );
    void PutRowCol (
        long pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Field (
        /*[out,retval]*/ struct IAS_Field * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Wavelength (
        /*[out,retval]*/ struct IAS_Wavelength * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SampleSize (
        /*[out,retval]*/ enum SampleSizes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SampleSize (
        /*[in]*/ enum SampleSizes pRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum PsfTypes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum PsfTypes pRetVal ) = 0;
      virtual HRESULT __stdcall get_UsePolarization (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UsePolarization (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Normalize (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Normalize (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_PlotScale (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PlotScale (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RowCol (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RowCol (
        /*[in]*/ long pRetVal ) = 0;
};

struct __declspec(uuid("90108689-029d-44f2-97f8-9ac7da84c64e"))
IAS_FftPsfLineEdgeSpread : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetField))
    IAS_FieldPtr Field;
    __declspec(property(get=GetWavelength))
    IAS_WavelengthPtr Wavelength;
    __declspec(property(get=GetSampleSize,put=PutSampleSize))
    enum SampleSizes SampleSize;
    __declspec(property(get=GetSpread,put=PutSpread))
    enum PsfSpread Spread;
    __declspec(property(get=GetType,put=PutType))
    enum PsfTypes Type;
    __declspec(property(get=GetUseCoherentPSF,put=PutUseCoherentPSF))
    VARIANT_BOOL UseCoherentPSF;
    __declspec(property(get=GetUsePolarization,put=PutUsePolarization))
    VARIANT_BOOL UsePolarization;
    __declspec(property(get=GetPlotScale,put=PutPlotScale))
    double PlotScale;

    //
    // Wrapper methods for error-handling
    //

    IAS_FieldPtr GetField ( );
    IAS_WavelengthPtr GetWavelength ( );
    enum SampleSizes GetSampleSize ( );
    void PutSampleSize (
        enum SampleSizes pRetVal );
    enum PsfSpread GetSpread ( );
    void PutSpread (
        enum PsfSpread pRetVal );
    enum PsfTypes GetType ( );
    void PutType (
        enum PsfTypes pRetVal );
    VARIANT_BOOL GetUseCoherentPSF ( );
    void PutUseCoherentPSF (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetUsePolarization ( );
    void PutUsePolarization (
        VARIANT_BOOL pRetVal );
    double GetPlotScale ( );
    void PutPlotScale (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Field (
        /*[out,retval]*/ struct IAS_Field * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Wavelength (
        /*[out,retval]*/ struct IAS_Wavelength * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SampleSize (
        /*[out,retval]*/ enum SampleSizes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SampleSize (
        /*[in]*/ enum SampleSizes pRetVal ) = 0;
      virtual HRESULT __stdcall get_Spread (
        /*[out,retval]*/ enum PsfSpread * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Spread (
        /*[in]*/ enum PsfSpread pRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum PsfTypes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum PsfTypes pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseCoherentPSF (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseCoherentPSF (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UsePolarization (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UsePolarization (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_PlotScale (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PlotScale (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("56faf916-4711-48eb-8193-3127aad0e084"))
IAS_HuygensPsfCrossSection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetField))
    IAS_FieldPtr Field;
    __declspec(property(get=GetWavelength))
    IAS_WavelengthPtr Wavelength;
    __declspec(property(get=GetPupilSampleSize,put=PutPupilSampleSize))
    enum SampleSizes PupilSampleSize;
    __declspec(property(get=GetImageSampleSize,put=PutImageSampleSize))
    enum SampleSizes ImageSampleSize;
    __declspec(property(get=GetType,put=PutType))
    enum PsfTypes Type;
    __declspec(property(get=GetNormalize,put=PutNormalize))
    VARIANT_BOOL Normalize;
    __declspec(property(get=GetUseCentroid,put=PutUseCentroid))
    VARIANT_BOOL UseCentroid;
    __declspec(property(get=GetUsePolarization,put=PutUsePolarization))
    VARIANT_BOOL UsePolarization;
    __declspec(property(get=GetImageDelta,put=PutImageDelta))
    double ImageDelta;
    __declspec(property(get=GetConfiguration,put=PutConfiguration))
    long Configuration;
    __declspec(property(get=GetRowCol,put=PutRowCol))
    long RowCol;

    //
    // Wrapper methods for error-handling
    //

    IAS_FieldPtr GetField ( );
    IAS_WavelengthPtr GetWavelength ( );
    enum SampleSizes GetPupilSampleSize ( );
    void PutPupilSampleSize (
        enum SampleSizes pRetVal );
    enum SampleSizes GetImageSampleSize ( );
    void PutImageSampleSize (
        enum SampleSizes pRetVal );
    enum PsfTypes GetType ( );
    void PutType (
        enum PsfTypes pRetVal );
    VARIANT_BOOL GetNormalize ( );
    void PutNormalize (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetUseCentroid ( );
    void PutUseCentroid (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetUsePolarization ( );
    void PutUsePolarization (
        VARIANT_BOOL pRetVal );
    double GetImageDelta ( );
    void PutImageDelta (
        double pRetVal );
    long GetConfiguration ( );
    void PutConfiguration (
        long pRetVal );
    long GetRowCol ( );
    void PutRowCol (
        long pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Field (
        /*[out,retval]*/ struct IAS_Field * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Wavelength (
        /*[out,retval]*/ struct IAS_Wavelength * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_PupilSampleSize (
        /*[out,retval]*/ enum SampleSizes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PupilSampleSize (
        /*[in]*/ enum SampleSizes pRetVal ) = 0;
      virtual HRESULT __stdcall get_ImageSampleSize (
        /*[out,retval]*/ enum SampleSizes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ImageSampleSize (
        /*[in]*/ enum SampleSizes pRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum PsfTypes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum PsfTypes pRetVal ) = 0;
      virtual HRESULT __stdcall get_Normalize (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Normalize (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseCentroid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseCentroid (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UsePolarization (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UsePolarization (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ImageDelta (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ImageDelta (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Configuration (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Configuration (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_RowCol (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RowCol (
        /*[in]*/ long pRetVal ) = 0;
};

struct __declspec(uuid("f9ecd9a5-e212-4510-a438-df29c2717ee3"))
IAS_HuygensPsf : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetField))
    IAS_FieldPtr Field;
    __declspec(property(get=GetWavelength))
    IAS_WavelengthPtr Wavelength;
    __declspec(property(get=GetPupilSampleSize,put=PutPupilSampleSize))
    enum SampleSizes PupilSampleSize;
    __declspec(property(get=GetImageSampleSize,put=PutImageSampleSize))
    enum SampleSizes ImageSampleSize;
    __declspec(property(get=GetType,put=PutType))
    enum HuygensPsfTypes Type;
    __declspec(property(get=GetShowAsType,put=PutShowAsType))
    enum HuygensShowAsTypes ShowAsType;
    __declspec(property(get=GetRotation,put=PutRotation))
    enum Rotations Rotation;
    __declspec(property(get=GetNormalize,put=PutNormalize))
    VARIANT_BOOL Normalize;
    __declspec(property(get=GetUseCentroid,put=PutUseCentroid))
    VARIANT_BOOL UseCentroid;
    __declspec(property(get=GetUsePolarization,put=PutUsePolarization))
    VARIANT_BOOL UsePolarization;
    __declspec(property(get=GetImageDelta,put=PutImageDelta))
    double ImageDelta;
    __declspec(property(get=GetConfiguration,put=PutConfiguration))
    long Configuration;

    //
    // Wrapper methods for error-handling
    //

    IAS_FieldPtr GetField ( );
    IAS_WavelengthPtr GetWavelength ( );
    enum SampleSizes GetPupilSampleSize ( );
    void PutPupilSampleSize (
        enum SampleSizes pRetVal );
    enum SampleSizes GetImageSampleSize ( );
    void PutImageSampleSize (
        enum SampleSizes pRetVal );
    enum HuygensPsfTypes GetType ( );
    void PutType (
        enum HuygensPsfTypes pRetVal );
    enum HuygensShowAsTypes GetShowAsType ( );
    void PutShowAsType (
        enum HuygensShowAsTypes pRetVal );
    enum Rotations GetRotation ( );
    void PutRotation (
        enum Rotations pRetVal );
    VARIANT_BOOL GetNormalize ( );
    void PutNormalize (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetUseCentroid ( );
    void PutUseCentroid (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetUsePolarization ( );
    void PutUsePolarization (
        VARIANT_BOOL pRetVal );
    double GetImageDelta ( );
    void PutImageDelta (
        double pRetVal );
    long GetConfiguration ( );
    void PutConfiguration (
        long pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Field (
        /*[out,retval]*/ struct IAS_Field * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Wavelength (
        /*[out,retval]*/ struct IAS_Wavelength * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_PupilSampleSize (
        /*[out,retval]*/ enum SampleSizes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PupilSampleSize (
        /*[in]*/ enum SampleSizes pRetVal ) = 0;
      virtual HRESULT __stdcall get_ImageSampleSize (
        /*[out,retval]*/ enum SampleSizes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ImageSampleSize (
        /*[in]*/ enum SampleSizes pRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum HuygensPsfTypes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum HuygensPsfTypes pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShowAsType (
        /*[out,retval]*/ enum HuygensShowAsTypes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ShowAsType (
        /*[in]*/ enum HuygensShowAsTypes pRetVal ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ enum Rotations * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ enum Rotations pRetVal ) = 0;
      virtual HRESULT __stdcall get_Normalize (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Normalize (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseCentroid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseCentroid (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UsePolarization (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UsePolarization (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ImageDelta (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ImageDelta (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Configuration (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Configuration (
        /*[in]*/ long pRetVal ) = 0;
};

enum __declspec(uuid("9bc4a9a7-c4b0-469d-88f5-3fedbf3820f3"))
PsfSampling
{
    PsfSampling_PsfS_32x32 = 1,
    PsfSampling_PsfS_64x64 = 2,
    PsfSampling_PsfS_128x128 = 3,
    PsfSampling_PsfS_256x256 = 4,
    PsfSampling_PsfS_512x512 = 5,
    PsfSampling_PsfS_1024x1024 = 6,
    PsfSampling_PsfS_2048x2048 = 7,
    PsfSampling_PsfS_4096x4096 = 8,
    PsfSampling_PsfS_8192x8192 = 9,
    PsfSampling_PsfS_16384x16384 = 10
};

enum __declspec(uuid("6066cb5b-3562-4d8c-9b7a-d73c54b03381"))
PsfRotation
{
    PsfRotation_CW0 = 0,
    PsfRotation_CW90 = 1,
    PsfRotation_CW180 = 2,
    PsfRotation_CW270 = 3
};

enum __declspec(uuid("b9cc3ddf-5c60-4f7b-8f3f-4608e4bb4543"))
FftPsfType
{
    FftPsfType_Linear = 0,
    FftPsfType_Log = 1,
    FftPsfType_Phase = 2,
    FftPsfType_Real = 3,
    FftPsfType_Imaginary = 4
};

struct __declspec(uuid("d32f67cc-60df-4c7d-b47c-9bc1cf384533"))
IAS_FftPsf : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetField))
    IAS_FieldPtr Field;
    __declspec(property(get=GetSurface))
    IAS_SurfacePtr Surface;
    __declspec(property(get=GetWavelength))
    IAS_WavelengthPtr Wavelength;
    __declspec(property(get=GetSampleSize,put=PutSampleSize))
    enum PsfSampling SampleSize;
    __declspec(property(get=GetOutputSize,put=PutOutputSize))
    enum PsfSampling OutputSize;
    __declspec(property(get=GetRotation,put=PutRotation))
    enum PsfRotation Rotation;
    __declspec(property(get=GetImageDelta,put=PutImageDelta))
    double ImageDelta;
    __declspec(property(get=GetUsePolarization,put=PutUsePolarization))
    VARIANT_BOOL UsePolarization;
    __declspec(property(get=GetType,put=PutType))
    enum FftPsfType Type;
    __declspec(property(get=GetNormalize,put=PutNormalize))
    VARIANT_BOOL Normalize;

    //
    // Wrapper methods for error-handling
    //

    IAS_FieldPtr GetField ( );
    IAS_SurfacePtr GetSurface ( );
    IAS_WavelengthPtr GetWavelength ( );
    enum PsfSampling GetSampleSize ( );
    void PutSampleSize (
        enum PsfSampling pRetVal );
    enum PsfSampling GetOutputSize ( );
    void PutOutputSize (
        enum PsfSampling pRetVal );
    enum PsfRotation GetRotation ( );
    void PutRotation (
        enum PsfRotation pRetVal );
    double GetImageDelta ( );
    void PutImageDelta (
        double pRetVal );
    VARIANT_BOOL GetUsePolarization ( );
    void PutUsePolarization (
        VARIANT_BOOL pRetVal );
    enum FftPsfType GetType ( );
    void PutType (
        enum FftPsfType pRetVal );
    VARIANT_BOOL GetNormalize ( );
    void PutNormalize (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Field (
        /*[out,retval]*/ struct IAS_Field * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Surface (
        /*[out,retval]*/ struct IAS_Surface * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Wavelength (
        /*[out,retval]*/ struct IAS_Wavelength * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SampleSize (
        /*[out,retval]*/ enum PsfSampling * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SampleSize (
        /*[in]*/ enum PsfSampling pRetVal ) = 0;
      virtual HRESULT __stdcall get_OutputSize (
        /*[out,retval]*/ enum PsfSampling * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OutputSize (
        /*[in]*/ enum PsfSampling pRetVal ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ enum PsfRotation * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ enum PsfRotation pRetVal ) = 0;
      virtual HRESULT __stdcall get_ImageDelta (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ImageDelta (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_UsePolarization (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UsePolarization (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum FftPsfType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum FftPsfType pRetVal ) = 0;
      virtual HRESULT __stdcall get_Normalize (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Normalize (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("5176eacf-508c-447e-9d5a-490104eaec64"))
IAS_HuygensMtfvsField : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetWavelength))
    IAS_WavelengthPtr Wavelength;
    __declspec(property(get=GetSampleSize,put=PutSampleSize))
    enum SampleSizes SampleSize;
    __declspec(property(get=GetScanType,put=PutScanType))
    enum ScanTypes ScanType;
    __declspec(property(get=GetRemoveVignetting,put=PutRemoveVignetting))
    VARIANT_BOOL RemoveVignetting;
    __declspec(property(get=GetUseDashes,put=PutUseDashes))
    VARIANT_BOOL UseDashes;
    __declspec(property(get=GetUsePolarization,put=PutUsePolarization))
    VARIANT_BOOL UsePolarization;
    __declspec(property(get=GetFreq_1,put=PutFreq_1))
    double Freq_1;
    __declspec(property(get=GetFreq_2,put=PutFreq_2))
    double Freq_2;
    __declspec(property(get=GetFreq_3,put=PutFreq_3))
    double Freq_3;
    __declspec(property(get=GetFreq_4,put=PutFreq_4))
    double Freq_4;
    __declspec(property(get=GetFreq_5,put=PutFreq_5))
    double Freq_5;
    __declspec(property(get=GetFreq_6,put=PutFreq_6))
    double Freq_6;
    __declspec(property(get=GetFieldDensity,put=PutFieldDensity))
    long FieldDensity;

    //
    // Wrapper methods for error-handling
    //

    IAS_WavelengthPtr GetWavelength ( );
    enum SampleSizes GetSampleSize ( );
    void PutSampleSize (
        enum SampleSizes pRetVal );
    enum ScanTypes GetScanType ( );
    void PutScanType (
        enum ScanTypes pRetVal );
    VARIANT_BOOL GetRemoveVignetting ( );
    void PutRemoveVignetting (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetUseDashes ( );
    void PutUseDashes (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetUsePolarization ( );
    void PutUsePolarization (
        VARIANT_BOOL pRetVal );
    double GetFreq_1 ( );
    void PutFreq_1 (
        double pRetVal );
    double GetFreq_2 ( );
    void PutFreq_2 (
        double pRetVal );
    double GetFreq_3 ( );
    void PutFreq_3 (
        double pRetVal );
    double GetFreq_4 ( );
    void PutFreq_4 (
        double pRetVal );
    double GetFreq_5 ( );
    void PutFreq_5 (
        double pRetVal );
    double GetFreq_6 ( );
    void PutFreq_6 (
        double pRetVal );
    long GetFieldDensity ( );
    void PutFieldDensity (
        long pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Wavelength (
        /*[out,retval]*/ struct IAS_Wavelength * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SampleSize (
        /*[out,retval]*/ enum SampleSizes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SampleSize (
        /*[in]*/ enum SampleSizes pRetVal ) = 0;
      virtual HRESULT __stdcall get_ScanType (
        /*[out,retval]*/ enum ScanTypes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ScanType (
        /*[in]*/ enum ScanTypes pRetVal ) = 0;
      virtual HRESULT __stdcall get_RemoveVignetting (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RemoveVignetting (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseDashes (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseDashes (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UsePolarization (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UsePolarization (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Freq_1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Freq_1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Freq_2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Freq_2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Freq_3 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Freq_3 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Freq_4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Freq_4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Freq_5 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Freq_5 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Freq_6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Freq_6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FieldDensity (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FieldDensity (
        /*[in]*/ long pRetVal ) = 0;
};

struct __declspec(uuid("b662cb93-8103-4359-85ee-e8042b64babd"))
IAS_GeometricMtfvsField : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetWavelength))
    IAS_WavelengthPtr Wavelength;
    __declspec(property(get=GetSampleSize,put=PutSampleSize))
    enum SampleSizes SampleSize;
    __declspec(property(get=GetScanType,put=PutScanType))
    enum ScanTypes ScanType;
    __declspec(property(get=GetMultiplyByDiffractionLimit,put=PutMultiplyByDiffractionLimit))
    VARIANT_BOOL MultiplyByDiffractionLimit;
    __declspec(property(get=GetScatterRays,put=PutScatterRays))
    VARIANT_BOOL ScatterRays;
    __declspec(property(get=GetRemoveVignetting,put=PutRemoveVignetting))
    VARIANT_BOOL RemoveVignetting;
    __declspec(property(get=GetUseDashes,put=PutUseDashes))
    VARIANT_BOOL UseDashes;
    __declspec(property(get=GetUsePolarization,put=PutUsePolarization))
    VARIANT_BOOL UsePolarization;
    __declspec(property(get=GetFreq_1,put=PutFreq_1))
    double Freq_1;
    __declspec(property(get=GetFreq_2,put=PutFreq_2))
    double Freq_2;
    __declspec(property(get=GetFreq_3,put=PutFreq_3))
    double Freq_3;
    __declspec(property(get=GetFreq_4,put=PutFreq_4))
    double Freq_4;
    __declspec(property(get=GetFreq_5,put=PutFreq_5))
    double Freq_5;
    __declspec(property(get=GetFreq_6,put=PutFreq_6))
    double Freq_6;
    __declspec(property(get=GetFieldDensity,put=PutFieldDensity))
    long FieldDensity;

    //
    // Wrapper methods for error-handling
    //

    IAS_WavelengthPtr GetWavelength ( );
    enum SampleSizes GetSampleSize ( );
    void PutSampleSize (
        enum SampleSizes pRetVal );
    enum ScanTypes GetScanType ( );
    void PutScanType (
        enum ScanTypes pRetVal );
    VARIANT_BOOL GetMultiplyByDiffractionLimit ( );
    void PutMultiplyByDiffractionLimit (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetScatterRays ( );
    void PutScatterRays (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetRemoveVignetting ( );
    void PutRemoveVignetting (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetUseDashes ( );
    void PutUseDashes (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetUsePolarization ( );
    void PutUsePolarization (
        VARIANT_BOOL pRetVal );
    double GetFreq_1 ( );
    void PutFreq_1 (
        double pRetVal );
    double GetFreq_2 ( );
    void PutFreq_2 (
        double pRetVal );
    double GetFreq_3 ( );
    void PutFreq_3 (
        double pRetVal );
    double GetFreq_4 ( );
    void PutFreq_4 (
        double pRetVal );
    double GetFreq_5 ( );
    void PutFreq_5 (
        double pRetVal );
    double GetFreq_6 ( );
    void PutFreq_6 (
        double pRetVal );
    long GetFieldDensity ( );
    void PutFieldDensity (
        long pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Wavelength (
        /*[out,retval]*/ struct IAS_Wavelength * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SampleSize (
        /*[out,retval]*/ enum SampleSizes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SampleSize (
        /*[in]*/ enum SampleSizes pRetVal ) = 0;
      virtual HRESULT __stdcall get_ScanType (
        /*[out,retval]*/ enum ScanTypes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ScanType (
        /*[in]*/ enum ScanTypes pRetVal ) = 0;
      virtual HRESULT __stdcall get_MultiplyByDiffractionLimit (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MultiplyByDiffractionLimit (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ScatterRays (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ScatterRays (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_RemoveVignetting (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RemoveVignetting (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseDashes (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseDashes (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UsePolarization (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UsePolarization (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Freq_1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Freq_1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Freq_2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Freq_2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Freq_3 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Freq_3 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Freq_4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Freq_4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Freq_5 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Freq_5 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Freq_6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Freq_6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FieldDensity (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FieldDensity (
        /*[in]*/ long pRetVal ) = 0;
};

struct __declspec(uuid("a5109f82-50cc-4934-afb1-e70162997a6a"))
IAS_GeometricMtf : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetField))
    IAS_FieldPtr Field;
    __declspec(property(get=GetWavelength))
    IAS_WavelengthPtr Wavelength;
    __declspec(property(get=GetSampleSize,put=PutSampleSize))
    enum SampleSizes SampleSize;
    __declspec(property(get=GetMultiplyByDiffractionLimit,put=PutMultiplyByDiffractionLimit))
    VARIANT_BOOL MultiplyByDiffractionLimit;
    __declspec(property(get=GetScatterRays,put=PutScatterRays))
    VARIANT_BOOL ScatterRays;
    __declspec(property(get=GetUseDashes,put=PutUseDashes))
    VARIANT_BOOL UseDashes;
    __declspec(property(get=GetUsePolarization,put=PutUsePolarization))
    VARIANT_BOOL UsePolarization;
    __declspec(property(get=GetMaximumFrequency,put=PutMaximumFrequency))
    double MaximumFrequency;

    //
    // Wrapper methods for error-handling
    //

    IAS_FieldPtr GetField ( );
    IAS_WavelengthPtr GetWavelength ( );
    enum SampleSizes GetSampleSize ( );
    void PutSampleSize (
        enum SampleSizes pRetVal );
    VARIANT_BOOL GetMultiplyByDiffractionLimit ( );
    void PutMultiplyByDiffractionLimit (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetScatterRays ( );
    void PutScatterRays (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetUseDashes ( );
    void PutUseDashes (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetUsePolarization ( );
    void PutUsePolarization (
        VARIANT_BOOL pRetVal );
    double GetMaximumFrequency ( );
    void PutMaximumFrequency (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Field (
        /*[out,retval]*/ struct IAS_Field * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Wavelength (
        /*[out,retval]*/ struct IAS_Wavelength * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SampleSize (
        /*[out,retval]*/ enum SampleSizes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SampleSize (
        /*[in]*/ enum SampleSizes pRetVal ) = 0;
      virtual HRESULT __stdcall get_MultiplyByDiffractionLimit (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MultiplyByDiffractionLimit (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ScatterRays (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ScatterRays (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseDashes (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseDashes (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UsePolarization (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UsePolarization (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumFrequency (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaximumFrequency (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("53e14e49-2013-4565-a500-7057bdf5fb2a"))
IAS_GeometricThroughFocusMtf : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetField))
    IAS_FieldPtr Field;
    __declspec(property(get=GetWavelength))
    IAS_WavelengthPtr Wavelength;
    __declspec(property(get=GetSampleSize,put=PutSampleSize))
    enum SampleSizes SampleSize;
    __declspec(property(get=GetMultiplyByDiffractionLimit,put=PutMultiplyByDiffractionLimit))
    VARIANT_BOOL MultiplyByDiffractionLimit;
    __declspec(property(get=GetScatterRays,put=PutScatterRays))
    VARIANT_BOOL ScatterRays;
    __declspec(property(get=GetUseDashes,put=PutUseDashes))
    VARIANT_BOOL UseDashes;
    __declspec(property(get=GetUsePolarization,put=PutUsePolarization))
    VARIANT_BOOL UsePolarization;
    __declspec(property(get=GetDeltaFocus,put=PutDeltaFocus))
    double DeltaFocus;
    __declspec(property(get=GetFrequency,put=PutFrequency))
    double Frequency;
    __declspec(property(get=GetNumberOfSteps,put=PutNumberOfSteps))
    long NumberOfSteps;

    //
    // Wrapper methods for error-handling
    //

    IAS_FieldPtr GetField ( );
    IAS_WavelengthPtr GetWavelength ( );
    enum SampleSizes GetSampleSize ( );
    void PutSampleSize (
        enum SampleSizes pRetVal );
    VARIANT_BOOL GetMultiplyByDiffractionLimit ( );
    void PutMultiplyByDiffractionLimit (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetScatterRays ( );
    void PutScatterRays (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetUseDashes ( );
    void PutUseDashes (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetUsePolarization ( );
    void PutUsePolarization (
        VARIANT_BOOL pRetVal );
    double GetDeltaFocus ( );
    void PutDeltaFocus (
        double pRetVal );
    double GetFrequency ( );
    void PutFrequency (
        double pRetVal );
    long GetNumberOfSteps ( );
    void PutNumberOfSteps (
        long pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Field (
        /*[out,retval]*/ struct IAS_Field * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Wavelength (
        /*[out,retval]*/ struct IAS_Wavelength * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SampleSize (
        /*[out,retval]*/ enum SampleSizes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SampleSize (
        /*[in]*/ enum SampleSizes pRetVal ) = 0;
      virtual HRESULT __stdcall get_MultiplyByDiffractionLimit (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MultiplyByDiffractionLimit (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ScatterRays (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ScatterRays (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseDashes (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseDashes (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UsePolarization (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UsePolarization (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_DeltaFocus (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DeltaFocus (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Frequency (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Frequency (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfSteps (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfSteps (
        /*[in]*/ long pRetVal ) = 0;
};

enum __declspec(uuid("ddcbc8cd-fb59-4e9b-9bcf-d0c33e20d8bf"))
MtfTypes
{
    MtfTypes_Modulation = 0,
    MtfTypes_Real = 1,
    MtfTypes_Imaginary = 2,
    MtfTypes_Phase = 3,
    MtfTypes_SquareWave = 4
};

struct __declspec(uuid("f2937106-c97d-4144-b99a-bfd738ab089b"))
IAS_FftThroughFocusMtf : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetField))
    IAS_FieldPtr Field;
    __declspec(property(get=GetWavelength))
    IAS_WavelengthPtr Wavelength;
    __declspec(property(get=GetType,put=PutType))
    enum MtfTypes Type;
    __declspec(property(get=GetSampleSize,put=PutSampleSize))
    enum SampleSizes SampleSize;
    __declspec(property(get=GetUseDashes,put=PutUseDashes))
    VARIANT_BOOL UseDashes;
    __declspec(property(get=GetUsePolarization,put=PutUsePolarization))
    VARIANT_BOOL UsePolarization;
    __declspec(property(get=GetDeltaFocus,put=PutDeltaFocus))
    double DeltaFocus;
    __declspec(property(get=GetFrequency,put=PutFrequency))
    double Frequency;
    __declspec(property(get=GetNumberOfSteps,put=PutNumberOfSteps))
    long NumberOfSteps;

    //
    // Wrapper methods for error-handling
    //

    IAS_FieldPtr GetField ( );
    IAS_WavelengthPtr GetWavelength ( );
    enum MtfTypes GetType ( );
    void PutType (
        enum MtfTypes pRetVal );
    enum SampleSizes GetSampleSize ( );
    void PutSampleSize (
        enum SampleSizes pRetVal );
    VARIANT_BOOL GetUseDashes ( );
    void PutUseDashes (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetUsePolarization ( );
    void PutUsePolarization (
        VARIANT_BOOL pRetVal );
    double GetDeltaFocus ( );
    void PutDeltaFocus (
        double pRetVal );
    double GetFrequency ( );
    void PutFrequency (
        double pRetVal );
    long GetNumberOfSteps ( );
    void PutNumberOfSteps (
        long pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Field (
        /*[out,retval]*/ struct IAS_Field * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Wavelength (
        /*[out,retval]*/ struct IAS_Wavelength * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum MtfTypes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum MtfTypes pRetVal ) = 0;
      virtual HRESULT __stdcall get_SampleSize (
        /*[out,retval]*/ enum SampleSizes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SampleSize (
        /*[in]*/ enum SampleSizes pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseDashes (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseDashes (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UsePolarization (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UsePolarization (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_DeltaFocus (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DeltaFocus (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Frequency (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Frequency (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfSteps (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfSteps (
        /*[in]*/ long pRetVal ) = 0;
};

struct __declspec(uuid("f0cdf654-11cf-49c6-9d6a-6f61993822ab"))
IAS_FftMtf : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetField))
    IAS_FieldPtr Field;
    __declspec(property(get=GetSurface))
    IAS_SurfacePtr Surface;
    __declspec(property(get=GetWavelength))
    IAS_WavelengthPtr Wavelength;
    __declspec(property(get=GetType,put=PutType))
    enum MtfTypes Type;
    __declspec(property(get=GetSampleSize,put=PutSampleSize))
    enum SampleSizes SampleSize;
    __declspec(property(get=GetShowDiffractionLimit,put=PutShowDiffractionLimit))
    VARIANT_BOOL ShowDiffractionLimit;
    __declspec(property(get=GetUseDashes,put=PutUseDashes))
    VARIANT_BOOL UseDashes;
    __declspec(property(get=GetUsePolarization,put=PutUsePolarization))
    VARIANT_BOOL UsePolarization;
    __declspec(property(get=GetMaximumFrequency,put=PutMaximumFrequency))
    double MaximumFrequency;

    //
    // Wrapper methods for error-handling
    //

    IAS_FieldPtr GetField ( );
    IAS_SurfacePtr GetSurface ( );
    IAS_WavelengthPtr GetWavelength ( );
    enum MtfTypes GetType ( );
    void PutType (
        enum MtfTypes pRetVal );
    enum SampleSizes GetSampleSize ( );
    void PutSampleSize (
        enum SampleSizes pRetVal );
    VARIANT_BOOL GetShowDiffractionLimit ( );
    void PutShowDiffractionLimit (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetUseDashes ( );
    void PutUseDashes (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetUsePolarization ( );
    void PutUsePolarization (
        VARIANT_BOOL pRetVal );
    double GetMaximumFrequency ( );
    void PutMaximumFrequency (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Field (
        /*[out,retval]*/ struct IAS_Field * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Surface (
        /*[out,retval]*/ struct IAS_Surface * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Wavelength (
        /*[out,retval]*/ struct IAS_Wavelength * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum MtfTypes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum MtfTypes pRetVal ) = 0;
      virtual HRESULT __stdcall get_SampleSize (
        /*[out,retval]*/ enum SampleSizes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SampleSize (
        /*[in]*/ enum SampleSizes pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShowDiffractionLimit (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ShowDiffractionLimit (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseDashes (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseDashes (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UsePolarization (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UsePolarization (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumFrequency (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaximumFrequency (
        /*[in]*/ double pRetVal ) = 0;
};

enum __declspec(uuid("21a21deb-c225-43fa-bf8b-5339ac417118"))
MtfDataTypes
{
    MtfDataTypes_Average = 0,
    MtfDataTypes_Tangential = 1,
    MtfDataTypes_Sagittal = 2
};

enum __declspec(uuid("7616882d-96b7-481a-97fb-9f1dccf822c0"))
ShowAsTypes
{
    ShowAsTypes_GreyScale = 0,
    ShowAsTypes_GreyScaleInverted = 1,
    ShowAsTypes_FalseColor = 2,
    ShowAsTypes_FalseColorInverted = 3
};

struct __declspec(uuid("9939d304-e27d-4091-8226-9639286750a6"))
IAS_GeometricMtfMap : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceField))
    IAS_FieldPtr ReferenceField;
    __declspec(property(get=GetWavelength))
    IAS_WavelengthPtr Wavelength;
    __declspec(property(get=GetMTF_DataType,put=PutMTF_DataType))
    enum MtfDataTypes MTF_DataType;
    __declspec(property(get=GetSampleSize,put=PutSampleSize))
    enum SampleSizes SampleSize;
    __declspec(property(get=GetShowAs,put=PutShowAs))
    enum ShowAsTypes ShowAs;
    __declspec(property(get=GetUsePolarization,put=PutUsePolarization))
    VARIANT_BOOL UsePolarization;
    __declspec(property(get=GetScatterRays,put=PutScatterRays))
    VARIANT_BOOL ScatterRays;
    __declspec(property(get=GetRemoveVignetting,put=PutRemoveVignetting))
    VARIANT_BOOL RemoveVignetting;
    __declspec(property(get=GetFrequency,put=PutFrequency))
    double Frequency;
    __declspec(property(get=GetX_Field_Width,put=PutX_Field_Width))
    double X_Field_Width;
    __declspec(property(get=GetY_Field_Width,put=PutY_Field_Width))
    double Y_Field_Width;
    __declspec(property(get=GetX_Pixels,put=PutX_Pixels))
    long X_Pixels;
    __declspec(property(get=GetY_Pixels,put=PutY_Pixels))
    long Y_Pixels;

    //
    // Wrapper methods for error-handling
    //

    IAS_FieldPtr GetReferenceField ( );
    IAS_WavelengthPtr GetWavelength ( );
    enum MtfDataTypes GetMTF_DataType ( );
    void PutMTF_DataType (
        enum MtfDataTypes pRetVal );
    enum SampleSizes GetSampleSize ( );
    void PutSampleSize (
        enum SampleSizes pRetVal );
    enum ShowAsTypes GetShowAs ( );
    void PutShowAs (
        enum ShowAsTypes pRetVal );
    VARIANT_BOOL GetUsePolarization ( );
    void PutUsePolarization (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetScatterRays ( );
    void PutScatterRays (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetRemoveVignetting ( );
    void PutRemoveVignetting (
        VARIANT_BOOL pRetVal );
    double GetFrequency ( );
    void PutFrequency (
        double pRetVal );
    double GetX_Field_Width ( );
    void PutX_Field_Width (
        double pRetVal );
    double GetY_Field_Width ( );
    void PutY_Field_Width (
        double pRetVal );
    long GetX_Pixels ( );
    void PutX_Pixels (
        long pRetVal );
    long GetY_Pixels ( );
    void PutY_Pixels (
        long pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceField (
        /*[out,retval]*/ struct IAS_Field * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Wavelength (
        /*[out,retval]*/ struct IAS_Wavelength * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MTF_DataType (
        /*[out,retval]*/ enum MtfDataTypes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MTF_DataType (
        /*[in]*/ enum MtfDataTypes pRetVal ) = 0;
      virtual HRESULT __stdcall get_SampleSize (
        /*[out,retval]*/ enum SampleSizes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SampleSize (
        /*[in]*/ enum SampleSizes pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShowAs (
        /*[out,retval]*/ enum ShowAsTypes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ShowAs (
        /*[in]*/ enum ShowAsTypes pRetVal ) = 0;
      virtual HRESULT __stdcall get_UsePolarization (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UsePolarization (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ScatterRays (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ScatterRays (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_RemoveVignetting (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RemoveVignetting (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Frequency (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Frequency (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X_Field_Width (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X_Field_Width (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y_Field_Width (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Y_Field_Width (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X_Pixels (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X_Pixels (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y_Pixels (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Y_Pixels (
        /*[in]*/ long pRetVal ) = 0;
};

struct __declspec(uuid("32634f60-6b54-415b-978b-c34249771947"))
IAS_FftMtfMap : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceField))
    IAS_FieldPtr ReferenceField;
    __declspec(property(get=GetWavelength))
    IAS_WavelengthPtr Wavelength;
    __declspec(property(get=GetMTF_DataType,put=PutMTF_DataType))
    enum MtfDataTypes MTF_DataType;
    __declspec(property(get=GetSampleSize,put=PutSampleSize))
    enum SampleSizes SampleSize;
    __declspec(property(get=GetShowAs,put=PutShowAs))
    enum ShowAsTypes ShowAs;
    __declspec(property(get=GetUsePolarization,put=PutUsePolarization))
    VARIANT_BOOL UsePolarization;
    __declspec(property(get=GetRemoveVignetting,put=PutRemoveVignetting))
    VARIANT_BOOL RemoveVignetting;
    __declspec(property(get=GetFrequency,put=PutFrequency))
    double Frequency;
    __declspec(property(get=GetX_Field_Width,put=PutX_Field_Width))
    double X_Field_Width;
    __declspec(property(get=GetY_Field_Width,put=PutY_Field_Width))
    double Y_Field_Width;
    __declspec(property(get=GetX_Pixels,put=PutX_Pixels))
    long X_Pixels;
    __declspec(property(get=GetY_Pixels,put=PutY_Pixels))
    long Y_Pixels;

    //
    // Wrapper methods for error-handling
    //

    IAS_FieldPtr GetReferenceField ( );
    IAS_WavelengthPtr GetWavelength ( );
    enum MtfDataTypes GetMTF_DataType ( );
    void PutMTF_DataType (
        enum MtfDataTypes pRetVal );
    enum SampleSizes GetSampleSize ( );
    void PutSampleSize (
        enum SampleSizes pRetVal );
    enum ShowAsTypes GetShowAs ( );
    void PutShowAs (
        enum ShowAsTypes pRetVal );
    VARIANT_BOOL GetUsePolarization ( );
    void PutUsePolarization (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetRemoveVignetting ( );
    void PutRemoveVignetting (
        VARIANT_BOOL pRetVal );
    double GetFrequency ( );
    void PutFrequency (
        double pRetVal );
    double GetX_Field_Width ( );
    void PutX_Field_Width (
        double pRetVal );
    double GetY_Field_Width ( );
    void PutY_Field_Width (
        double pRetVal );
    long GetX_Pixels ( );
    void PutX_Pixels (
        long pRetVal );
    long GetY_Pixels ( );
    void PutY_Pixels (
        long pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceField (
        /*[out,retval]*/ struct IAS_Field * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Wavelength (
        /*[out,retval]*/ struct IAS_Wavelength * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MTF_DataType (
        /*[out,retval]*/ enum MtfDataTypes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MTF_DataType (
        /*[in]*/ enum MtfDataTypes pRetVal ) = 0;
      virtual HRESULT __stdcall get_SampleSize (
        /*[out,retval]*/ enum SampleSizes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SampleSize (
        /*[in]*/ enum SampleSizes pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShowAs (
        /*[out,retval]*/ enum ShowAsTypes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ShowAs (
        /*[in]*/ enum ShowAsTypes pRetVal ) = 0;
      virtual HRESULT __stdcall get_UsePolarization (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UsePolarization (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_RemoveVignetting (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RemoveVignetting (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Frequency (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Frequency (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X_Field_Width (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X_Field_Width (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y_Field_Width (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Y_Field_Width (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X_Pixels (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X_Pixels (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y_Pixels (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Y_Pixels (
        /*[in]*/ long pRetVal ) = 0;
};

enum __declspec(uuid("59ed7b0c-64fe-4ade-b7b8-08f747466cdd"))
SurfaceMtfTypes
{
    SurfaceMtfTypes_MTF_Incoherent = 0,
    SurfaceMtfTypes_Real_Incoherent = 1,
    SurfaceMtfTypes_Imaginary_Incoherent = 2,
    SurfaceMtfTypes_MTF_Coherent = 3,
    SurfaceMtfTypes_Real_Coherent = 4,
    SurfaceMtfTypes_Imaginary_Coherent = 5
};

struct __declspec(uuid("3c87ee44-c997-46c1-8788-529613e0f616"))
IAS_HuygensSurfaceMtf : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetField))
    IAS_FieldPtr Field;
    __declspec(property(get=GetWavelength))
    IAS_WavelengthPtr Wavelength;
    __declspec(property(get=GetImageSampleSize,put=PutImageSampleSize))
    enum SampleSizes ImageSampleSize;
    __declspec(property(get=GetPupilSampleSize,put=PutPupilSampleSize))
    enum SampleSizes PupilSampleSize;
    __declspec(property(get=GetShowAs,put=PutShowAs))
    enum HuygensSurfaceMftShowAsTypes ShowAs;
    __declspec(property(get=GetType,put=PutType))
    enum SurfaceMtfTypes Type;
    __declspec(property(get=GetUsePolarization,put=PutUsePolarization))
    VARIANT_BOOL UsePolarization;
    __declspec(property(get=GetImageDelta,put=PutImageDelta))
    double ImageDelta;
    __declspec(property(get=GetConfiguration,put=PutConfiguration))
    long Configuration;

    //
    // Wrapper methods for error-handling
    //

    IAS_FieldPtr GetField ( );
    IAS_WavelengthPtr GetWavelength ( );
    enum SampleSizes GetImageSampleSize ( );
    void PutImageSampleSize (
        enum SampleSizes pRetVal );
    enum SampleSizes GetPupilSampleSize ( );
    void PutPupilSampleSize (
        enum SampleSizes pRetVal );
    enum HuygensSurfaceMftShowAsTypes GetShowAs ( );
    void PutShowAs (
        enum HuygensSurfaceMftShowAsTypes pRetVal );
    enum SurfaceMtfTypes GetType ( );
    void PutType (
        enum SurfaceMtfTypes pRetVal );
    VARIANT_BOOL GetUsePolarization ( );
    void PutUsePolarization (
        VARIANT_BOOL pRetVal );
    double GetImageDelta ( );
    void PutImageDelta (
        double pRetVal );
    long GetConfiguration ( );
    void PutConfiguration (
        long pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Field (
        /*[out,retval]*/ struct IAS_Field * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Wavelength (
        /*[out,retval]*/ struct IAS_Wavelength * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ImageSampleSize (
        /*[out,retval]*/ enum SampleSizes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ImageSampleSize (
        /*[in]*/ enum SampleSizes pRetVal ) = 0;
      virtual HRESULT __stdcall get_PupilSampleSize (
        /*[out,retval]*/ enum SampleSizes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PupilSampleSize (
        /*[in]*/ enum SampleSizes pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShowAs (
        /*[out,retval]*/ enum HuygensSurfaceMftShowAsTypes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ShowAs (
        /*[in]*/ enum HuygensSurfaceMftShowAsTypes pRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum SurfaceMtfTypes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum SurfaceMtfTypes pRetVal ) = 0;
      virtual HRESULT __stdcall get_UsePolarization (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UsePolarization (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ImageDelta (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ImageDelta (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Configuration (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Configuration (
        /*[in]*/ long pRetVal ) = 0;
};

struct __declspec(uuid("07ca848e-f712-4e17-8a3c-512c3c5c99ca"))
IAS_FftSurfaceMtf : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetField))
    IAS_FieldPtr Field;
    __declspec(property(get=GetWavelength))
    IAS_WavelengthPtr Wavelength;
    __declspec(property(get=GetType,put=PutType))
    enum SurfaceMtfTypes Type;
    __declspec(property(get=GetRotation,put=PutRotation))
    enum Rotations Rotation;
    __declspec(property(get=GetSampleSize,put=PutSampleSize))
    enum SampleSizes SampleSize;
    __declspec(property(get=GetShowAs,put=PutShowAs))
    enum ShowAs _ShowAs;
    __declspec(property(get=GetUsePolarization,put=PutUsePolarization))
    VARIANT_BOOL UsePolarization;
    __declspec(property(get=GetScaleFactor,put=PutScaleFactor))
    double ScaleFactor;

    //
    // Wrapper methods for error-handling
    //

    IAS_FieldPtr GetField ( );
    IAS_WavelengthPtr GetWavelength ( );
    enum SurfaceMtfTypes GetType ( );
    void PutType (
        enum SurfaceMtfTypes pRetVal );
    enum Rotations GetRotation ( );
    void PutRotation (
        enum Rotations pRetVal );
    enum SampleSizes GetSampleSize ( );
    void PutSampleSize (
        enum SampleSizes pRetVal );
    enum ShowAs GetShowAs ( );
    void PutShowAs (
        enum ShowAs pRetVal );
    VARIANT_BOOL GetUsePolarization ( );
    void PutUsePolarization (
        VARIANT_BOOL pRetVal );
    double GetScaleFactor ( );
    void PutScaleFactor (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Field (
        /*[out,retval]*/ struct IAS_Field * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Wavelength (
        /*[out,retval]*/ struct IAS_Wavelength * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum SurfaceMtfTypes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum SurfaceMtfTypes pRetVal ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ enum Rotations * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ enum Rotations pRetVal ) = 0;
      virtual HRESULT __stdcall get_SampleSize (
        /*[out,retval]*/ enum SampleSizes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SampleSize (
        /*[in]*/ enum SampleSizes pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShowAs (
        /*[out,retval]*/ enum ShowAs * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ShowAs (
        /*[in]*/ enum ShowAs pRetVal ) = 0;
      virtual HRESULT __stdcall get_UsePolarization (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UsePolarization (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ScaleFactor (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ScaleFactor (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("14ace4dc-676f-4b4c-8585-a5f2f0e036e4"))
IAS_FftMtfvsField : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetWavelength))
    IAS_WavelengthPtr Wavelength;
    __declspec(property(get=GetSampleSize,put=PutSampleSize))
    enum SampleSizes SampleSize;
    __declspec(property(get=GetScanType,put=PutScanType))
    enum ScanTypes ScanType;
    __declspec(property(get=GetRemoveVignetting,put=PutRemoveVignetting))
    VARIANT_BOOL RemoveVignetting;
    __declspec(property(get=GetUseDashes,put=PutUseDashes))
    VARIANT_BOOL UseDashes;
    __declspec(property(get=GetUsePolarization,put=PutUsePolarization))
    VARIANT_BOOL UsePolarization;
    __declspec(property(get=GetFreq_1,put=PutFreq_1))
    double Freq_1;
    __declspec(property(get=GetFreq_2,put=PutFreq_2))
    double Freq_2;
    __declspec(property(get=GetFreq_3,put=PutFreq_3))
    double Freq_3;
    __declspec(property(get=GetFreq_4,put=PutFreq_4))
    double Freq_4;
    __declspec(property(get=GetFreq_5,put=PutFreq_5))
    double Freq_5;
    __declspec(property(get=GetFreq_6,put=PutFreq_6))
    double Freq_6;
    __declspec(property(get=GetFieldDensity,put=PutFieldDensity))
    long FieldDensity;

    //
    // Wrapper methods for error-handling
    //

    IAS_WavelengthPtr GetWavelength ( );
    enum SampleSizes GetSampleSize ( );
    void PutSampleSize (
        enum SampleSizes pRetVal );
    enum ScanTypes GetScanType ( );
    void PutScanType (
        enum ScanTypes pRetVal );
    VARIANT_BOOL GetRemoveVignetting ( );
    void PutRemoveVignetting (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetUseDashes ( );
    void PutUseDashes (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetUsePolarization ( );
    void PutUsePolarization (
        VARIANT_BOOL pRetVal );
    double GetFreq_1 ( );
    void PutFreq_1 (
        double pRetVal );
    double GetFreq_2 ( );
    void PutFreq_2 (
        double pRetVal );
    double GetFreq_3 ( );
    void PutFreq_3 (
        double pRetVal );
    double GetFreq_4 ( );
    void PutFreq_4 (
        double pRetVal );
    double GetFreq_5 ( );
    void PutFreq_5 (
        double pRetVal );
    double GetFreq_6 ( );
    void PutFreq_6 (
        double pRetVal );
    long GetFieldDensity ( );
    void PutFieldDensity (
        long pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Wavelength (
        /*[out,retval]*/ struct IAS_Wavelength * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SampleSize (
        /*[out,retval]*/ enum SampleSizes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SampleSize (
        /*[in]*/ enum SampleSizes pRetVal ) = 0;
      virtual HRESULT __stdcall get_ScanType (
        /*[out,retval]*/ enum ScanTypes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ScanType (
        /*[in]*/ enum ScanTypes pRetVal ) = 0;
      virtual HRESULT __stdcall get_RemoveVignetting (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RemoveVignetting (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseDashes (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseDashes (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UsePolarization (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UsePolarization (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Freq_1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Freq_1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Freq_2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Freq_2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Freq_3 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Freq_3 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Freq_4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Freq_4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Freq_5 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Freq_5 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Freq_6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Freq_6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FieldDensity (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FieldDensity (
        /*[in]*/ long pRetVal ) = 0;
};

enum __declspec(uuid("94107009-3416-4682-97ef-10c8b964178f"))
HuygensMtfTypes
{
    HuygensMtfTypes_Modulation = 0
};

struct __declspec(uuid("a97fdb1f-3d9d-473b-b452-c9c7e3e699e8"))
IAS_HuygensThroughFocusMtf : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetField))
    IAS_FieldPtr Field;
    __declspec(property(get=GetWavelength))
    IAS_WavelengthPtr Wavelength;
    __declspec(property(get=GetImageSampleSize,put=PutImageSampleSize))
    enum SampleSizes ImageSampleSize;
    __declspec(property(get=GetPupilSampleSize,put=PutPupilSampleSize))
    enum SampleSizes PupilSampleSize;
    __declspec(property(get=GetType,put=PutType))
    enum HuygensMtfTypes Type;
    __declspec(property(get=GetUseDashes,put=PutUseDashes))
    VARIANT_BOOL UseDashes;
    __declspec(property(get=GetUsePolarization,put=PutUsePolarization))
    VARIANT_BOOL UsePolarization;
    __declspec(property(get=GetDeltaFocus,put=PutDeltaFocus))
    double DeltaFocus;
    __declspec(property(get=GetImageDelta,put=PutImageDelta))
    double ImageDelta;
    __declspec(property(get=GetFrequency,put=PutFrequency))
    double Frequency;
    __declspec(property(get=GetConfiguration,put=PutConfiguration))
    long Configuration;
    __declspec(property(get=GetNumberOfSteps,put=PutNumberOfSteps))
    long NumberOfSteps;

    //
    // Wrapper methods for error-handling
    //

    IAS_FieldPtr GetField ( );
    IAS_WavelengthPtr GetWavelength ( );
    enum SampleSizes GetImageSampleSize ( );
    void PutImageSampleSize (
        enum SampleSizes pRetVal );
    enum SampleSizes GetPupilSampleSize ( );
    void PutPupilSampleSize (
        enum SampleSizes pRetVal );
    enum HuygensMtfTypes GetType ( );
    void PutType (
        enum HuygensMtfTypes pRetVal );
    VARIANT_BOOL GetUseDashes ( );
    void PutUseDashes (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetUsePolarization ( );
    void PutUsePolarization (
        VARIANT_BOOL pRetVal );
    double GetDeltaFocus ( );
    void PutDeltaFocus (
        double pRetVal );
    double GetImageDelta ( );
    void PutImageDelta (
        double pRetVal );
    double GetFrequency ( );
    void PutFrequency (
        double pRetVal );
    long GetConfiguration ( );
    void PutConfiguration (
        long pRetVal );
    long GetNumberOfSteps ( );
    void PutNumberOfSteps (
        long pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Field (
        /*[out,retval]*/ struct IAS_Field * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Wavelength (
        /*[out,retval]*/ struct IAS_Wavelength * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ImageSampleSize (
        /*[out,retval]*/ enum SampleSizes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ImageSampleSize (
        /*[in]*/ enum SampleSizes pRetVal ) = 0;
      virtual HRESULT __stdcall get_PupilSampleSize (
        /*[out,retval]*/ enum SampleSizes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PupilSampleSize (
        /*[in]*/ enum SampleSizes pRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum HuygensMtfTypes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum HuygensMtfTypes pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseDashes (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseDashes (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UsePolarization (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UsePolarization (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_DeltaFocus (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DeltaFocus (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ImageDelta (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ImageDelta (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Frequency (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Frequency (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Configuration (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Configuration (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfSteps (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfSteps (
        /*[in]*/ long pRetVal ) = 0;
};

struct __declspec(uuid("8b37d664-3cd9-41f3-9abf-a8ead68e56e7"))
IAS_HuygensMtf : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetField))
    IAS_FieldPtr Field;
    __declspec(property(get=GetWavelength))
    IAS_WavelengthPtr Wavelength;
    __declspec(property(get=GetImageSampleSize,put=PutImageSampleSize))
    enum SampleSizes ImageSampleSize;
    __declspec(property(get=GetPupilSampleSize,put=PutPupilSampleSize))
    enum SampleSizes PupilSampleSize;
    __declspec(property(get=GetType,put=PutType))
    enum HuygensMtfTypes Type;
    __declspec(property(get=GetUseDashes,put=PutUseDashes))
    VARIANT_BOOL UseDashes;
    __declspec(property(get=GetUsePolarization,put=PutUsePolarization))
    VARIANT_BOOL UsePolarization;
    __declspec(property(get=GetImageDelta,put=PutImageDelta))
    double ImageDelta;
    __declspec(property(get=GetMaximumFrequency,put=PutMaximumFrequency))
    double MaximumFrequency;
    __declspec(property(get=GetConfiguration,put=PutConfiguration))
    long Configuration;

    //
    // Wrapper methods for error-handling
    //

    IAS_FieldPtr GetField ( );
    IAS_WavelengthPtr GetWavelength ( );
    enum SampleSizes GetImageSampleSize ( );
    void PutImageSampleSize (
        enum SampleSizes pRetVal );
    enum SampleSizes GetPupilSampleSize ( );
    void PutPupilSampleSize (
        enum SampleSizes pRetVal );
    enum HuygensMtfTypes GetType ( );
    void PutType (
        enum HuygensMtfTypes pRetVal );
    VARIANT_BOOL GetUseDashes ( );
    void PutUseDashes (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetUsePolarization ( );
    void PutUsePolarization (
        VARIANT_BOOL pRetVal );
    double GetImageDelta ( );
    void PutImageDelta (
        double pRetVal );
    double GetMaximumFrequency ( );
    void PutMaximumFrequency (
        double pRetVal );
    long GetConfiguration ( );
    void PutConfiguration (
        long pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Field (
        /*[out,retval]*/ struct IAS_Field * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Wavelength (
        /*[out,retval]*/ struct IAS_Wavelength * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ImageSampleSize (
        /*[out,retval]*/ enum SampleSizes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ImageSampleSize (
        /*[in]*/ enum SampleSizes pRetVal ) = 0;
      virtual HRESULT __stdcall get_PupilSampleSize (
        /*[out,retval]*/ enum SampleSizes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PupilSampleSize (
        /*[in]*/ enum SampleSizes pRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum HuygensMtfTypes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum HuygensMtfTypes pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseDashes (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseDashes (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UsePolarization (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UsePolarization (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ImageDelta (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ImageDelta (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumFrequency (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaximumFrequency (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Configuration (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Configuration (
        /*[in]*/ long pRetVal ) = 0;
};

enum __declspec(uuid("b6387306-be6d-4f21-ba1d-31e4cb45bee3"))
SagittalAberrationComponent
{
    SagittalAberrationComponent_Aberration_X = 0,
    SagittalAberrationComponent_Aberration_Y = 1
};

enum __declspec(uuid("ade64b08-169f-441e-8cca-6092241363a4"))
TangentialAberrationComponent
{
    TangentialAberrationComponent_Aberration_Y = 0,
    TangentialAberrationComponent_Aberration_X = 1
};

struct __declspec(uuid("eb02a480-7000-4b85-a0b9-98eab30b96a9"))
IAS_Fan : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetField))
    IAS_FieldPtr Field;
    __declspec(property(get=GetSurface))
    IAS_SurfacePtr Surface;
    __declspec(property(get=GetWavelength))
    IAS_WavelengthPtr Wavelength;
    __declspec(property(get=GetNumberOfRays,put=PutNumberOfRays))
    long NumberOfRays;
    __declspec(property(get=GetPlotScale,put=PutPlotScale))
    double PlotScale;
    __declspec(property(get=GetCheckApertures,put=PutCheckApertures))
    VARIANT_BOOL CheckApertures;
    __declspec(property(get=GetVignettedPupil,put=PutVignettedPupil))
    VARIANT_BOOL VignettedPupil;
    __declspec(property(get=GetUseDashes,put=PutUseDashes))
    VARIANT_BOOL UseDashes;
    __declspec(property(get=GetSagittal,put=PutSagittal))
    enum SagittalAberrationComponent Sagittal;
    __declspec(property(get=GetTangential,put=PutTangential))
    enum TangentialAberrationComponent Tangential;

    //
    // Wrapper methods for error-handling
    //

    IAS_FieldPtr GetField ( );
    IAS_SurfacePtr GetSurface ( );
    IAS_WavelengthPtr GetWavelength ( );
    long GetNumberOfRays ( );
    void PutNumberOfRays (
        long pRetVal );
    double GetPlotScale ( );
    void PutPlotScale (
        double pRetVal );
    VARIANT_BOOL GetCheckApertures ( );
    void PutCheckApertures (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetVignettedPupil ( );
    void PutVignettedPupil (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetUseDashes ( );
    void PutUseDashes (
        VARIANT_BOOL pRetVal );
    enum SagittalAberrationComponent GetSagittal ( );
    void PutSagittal (
        enum SagittalAberrationComponent pRetVal );
    enum TangentialAberrationComponent GetTangential ( );
    void PutTangential (
        enum TangentialAberrationComponent pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Field (
        /*[out,retval]*/ struct IAS_Field * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Surface (
        /*[out,retval]*/ struct IAS_Surface * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Wavelength (
        /*[out,retval]*/ struct IAS_Wavelength * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfRays (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfRays (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_PlotScale (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PlotScale (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CheckApertures (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CheckApertures (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_VignettedPupil (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_VignettedPupil (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseDashes (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseDashes (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Sagittal (
        /*[out,retval]*/ enum SagittalAberrationComponent * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Sagittal (
        /*[in]*/ enum SagittalAberrationComponent pRetVal ) = 0;
      virtual HRESULT __stdcall get_Tangential (
        /*[out,retval]*/ enum TangentialAberrationComponent * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Tangential (
        /*[in]*/ enum TangentialAberrationComponent pRetVal ) = 0;
};

enum __declspec(uuid("83e4b3a9-33a6-41f4-904c-0060ac2b15a7"))
GeometricLineEdgeSpreadTypes
{
    GeometricLineEdgeSpreadTypes_LineEdge = 1,
    GeometricLineEdgeSpreadTypes_Line = 2,
    GeometricLineEdgeSpreadTypes_Edge = 3
};

struct __declspec(uuid("5434f735-f258-4a1e-b16d-c1fa426c0618"))
IAS_GeometricLineEdgeSpread : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetField))
    IAS_FieldPtr Field;
    __declspec(property(get=GetSurface))
    IAS_SurfacePtr Surface;
    __declspec(property(get=GetWavelength))
    IAS_WavelengthPtr Wavelength;
    __declspec(property(get=GetSampleSize,put=PutSampleSize))
    enum SampleSizes SampleSize;
    __declspec(property(get=GetType,put=PutType))
    enum GeometricLineEdgeSpreadTypes Type;
    __declspec(property(get=GetUsePolarization,put=PutUsePolarization))
    VARIANT_BOOL UsePolarization;
    __declspec(property(get=GetRadiusMaximum,put=PutRadiusMaximum))
    double RadiusMaximum;

    //
    // Wrapper methods for error-handling
    //

    IAS_FieldPtr GetField ( );
    IAS_SurfacePtr GetSurface ( );
    IAS_WavelengthPtr GetWavelength ( );
    enum SampleSizes GetSampleSize ( );
    void PutSampleSize (
        enum SampleSizes pRetVal );
    enum GeometricLineEdgeSpreadTypes GetType ( );
    void PutType (
        enum GeometricLineEdgeSpreadTypes pRetVal );
    VARIANT_BOOL GetUsePolarization ( );
    void PutUsePolarization (
        VARIANT_BOOL pRetVal );
    double GetRadiusMaximum ( );
    void PutRadiusMaximum (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Field (
        /*[out,retval]*/ struct IAS_Field * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Surface (
        /*[out,retval]*/ struct IAS_Surface * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Wavelength (
        /*[out,retval]*/ struct IAS_Wavelength * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SampleSize (
        /*[out,retval]*/ enum SampleSizes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SampleSize (
        /*[in]*/ enum SampleSizes pRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum GeometricLineEdgeSpreadTypes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum GeometricLineEdgeSpreadTypes pRetVal ) = 0;
      virtual HRESULT __stdcall get_UsePolarization (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UsePolarization (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadiusMaximum (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RadiusMaximum (
        /*[in]*/ double pRetVal ) = 0;
};

enum __declspec(uuid("ab54b33f-409f-4268-b514-122e1b5b83ff"))
EncircledEnergyTypes
{
    EncircledEnergyTypes_Encircled = 1,
    EncircledEnergyTypes_X_Only = 2,
    EncircledEnergyTypes_Y_Only = 3,
    EncircledEnergyTypes_Ensquared = 4
};

enum __declspec(uuid("b4905081-9b49-47d8-8bdf-264636057712"))
ReferToTypes
{
    ReferToTypes_ChiefRay = 0,
    ReferToTypes_Centroid = 1,
    ReferToTypes_Vertex = 2
};

struct __declspec(uuid("fbfe00c5-8fca-457d-939b-96b650811e79"))
IAS_DiffractionEncircledEnergy : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetField))
    IAS_FieldPtr Field;
    __declspec(property(get=GetSurface))
    IAS_SurfacePtr Surface;
    __declspec(property(get=GetWavelength))
    IAS_WavelengthPtr Wavelength;
    __declspec(property(get=GetHuygensSample,put=PutHuygensSample))
    enum SampleSizes HuygensSample;
    __declspec(property(get=GetSampleSize,put=PutSampleSize))
    enum SampleSizes SampleSize;
    __declspec(property(get=GetType,put=PutType))
    enum EncircledEnergyTypes Type;
    __declspec(property(get=GetReferTo,put=PutReferTo))
    enum ReferToTypes ReferTo;
    __declspec(property(get=GetScatterRays,put=PutScatterRays))
    VARIANT_BOOL ScatterRays;
    __declspec(property(get=GetShowDiffractionLimit,put=PutShowDiffractionLimit))
    VARIANT_BOOL ShowDiffractionLimit;
    __declspec(property(get=GetUseDashes,put=PutUseDashes))
    VARIANT_BOOL UseDashes;
    __declspec(property(get=GetUseHuygensPSF,put=PutUseHuygensPSF))
    VARIANT_BOOL UseHuygensPSF;
    __declspec(property(get=GetUsePolarization,put=PutUsePolarization))
    VARIANT_BOOL UsePolarization;
    __declspec(property(get=GetHuygensDelta,put=PutHuygensDelta))
    double HuygensDelta;
    __declspec(property(get=GetRadiusMaximum,put=PutRadiusMaximum))
    double RadiusMaximum;

    //
    // Wrapper methods for error-handling
    //

    IAS_FieldPtr GetField ( );
    IAS_SurfacePtr GetSurface ( );
    IAS_WavelengthPtr GetWavelength ( );
    enum SampleSizes GetHuygensSample ( );
    void PutHuygensSample (
        enum SampleSizes pRetVal );
    enum SampleSizes GetSampleSize ( );
    void PutSampleSize (
        enum SampleSizes pRetVal );
    enum EncircledEnergyTypes GetType ( );
    void PutType (
        enum EncircledEnergyTypes pRetVal );
    enum ReferToTypes GetReferTo ( );
    void PutReferTo (
        enum ReferToTypes pRetVal );
    VARIANT_BOOL GetScatterRays ( );
    void PutScatterRays (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetShowDiffractionLimit ( );
    void PutShowDiffractionLimit (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetUseDashes ( );
    void PutUseDashes (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetUseHuygensPSF ( );
    void PutUseHuygensPSF (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetUsePolarization ( );
    void PutUsePolarization (
        VARIANT_BOOL pRetVal );
    double GetHuygensDelta ( );
    void PutHuygensDelta (
        double pRetVal );
    double GetRadiusMaximum ( );
    void PutRadiusMaximum (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Field (
        /*[out,retval]*/ struct IAS_Field * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Surface (
        /*[out,retval]*/ struct IAS_Surface * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Wavelength (
        /*[out,retval]*/ struct IAS_Wavelength * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_HuygensSample (
        /*[out,retval]*/ enum SampleSizes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_HuygensSample (
        /*[in]*/ enum SampleSizes pRetVal ) = 0;
      virtual HRESULT __stdcall get_SampleSize (
        /*[out,retval]*/ enum SampleSizes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SampleSize (
        /*[in]*/ enum SampleSizes pRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum EncircledEnergyTypes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum EncircledEnergyTypes pRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferTo (
        /*[out,retval]*/ enum ReferToTypes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferTo (
        /*[in]*/ enum ReferToTypes pRetVal ) = 0;
      virtual HRESULT __stdcall get_ScatterRays (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ScatterRays (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShowDiffractionLimit (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ShowDiffractionLimit (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseDashes (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseDashes (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseHuygensPSF (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseHuygensPSF (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UsePolarization (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UsePolarization (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_HuygensDelta (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_HuygensDelta (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadiusMaximum (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RadiusMaximum (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("103dfa9d-c6c9-49df-942c-4bf5553469f3"))
IAS_GeometricEncircledEnergy : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetField))
    IAS_FieldPtr Field;
    __declspec(property(get=GetSurface))
    IAS_SurfacePtr Surface;
    __declspec(property(get=GetWavelength))
    IAS_WavelengthPtr Wavelength;
    __declspec(property(get=GetHuygensSample,put=PutHuygensSample))
    enum SampleSizes HuygensSample;
    __declspec(property(get=GetSampleSize,put=PutSampleSize))
    enum SampleSizes SampleSize;
    __declspec(property(get=GetType,put=PutType))
    enum EncircledEnergyTypes Type;
    __declspec(property(get=GetReferTo,put=PutReferTo))
    enum ReferToTypes ReferTo;
    __declspec(property(get=GetScatterRays,put=PutScatterRays))
    VARIANT_BOOL ScatterRays;
    __declspec(property(get=GetShowDiffractionLimit,put=PutShowDiffractionLimit))
    VARIANT_BOOL ShowDiffractionLimit;
    __declspec(property(get=GetUseDashes,put=PutUseDashes))
    VARIANT_BOOL UseDashes;
    __declspec(property(get=GetUseHuygensPSF,put=PutUseHuygensPSF))
    VARIANT_BOOL UseHuygensPSF;
    __declspec(property(get=GetUsePolarization,put=PutUsePolarization))
    VARIANT_BOOL UsePolarization;
    __declspec(property(get=GetHuygensDelta,put=PutHuygensDelta))
    double HuygensDelta;
    __declspec(property(get=GetRadiusMaximum,put=PutRadiusMaximum))
    double RadiusMaximum;

    //
    // Wrapper methods for error-handling
    //

    IAS_FieldPtr GetField ( );
    IAS_SurfacePtr GetSurface ( );
    IAS_WavelengthPtr GetWavelength ( );
    enum SampleSizes GetHuygensSample ( );
    void PutHuygensSample (
        enum SampleSizes pRetVal );
    enum SampleSizes GetSampleSize ( );
    void PutSampleSize (
        enum SampleSizes pRetVal );
    enum EncircledEnergyTypes GetType ( );
    void PutType (
        enum EncircledEnergyTypes pRetVal );
    enum ReferToTypes GetReferTo ( );
    void PutReferTo (
        enum ReferToTypes pRetVal );
    VARIANT_BOOL GetScatterRays ( );
    void PutScatterRays (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetShowDiffractionLimit ( );
    void PutShowDiffractionLimit (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetUseDashes ( );
    void PutUseDashes (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetUseHuygensPSF ( );
    void PutUseHuygensPSF (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetUsePolarization ( );
    void PutUsePolarization (
        VARIANT_BOOL pRetVal );
    double GetHuygensDelta ( );
    void PutHuygensDelta (
        double pRetVal );
    double GetRadiusMaximum ( );
    void PutRadiusMaximum (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Field (
        /*[out,retval]*/ struct IAS_Field * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Surface (
        /*[out,retval]*/ struct IAS_Surface * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Wavelength (
        /*[out,retval]*/ struct IAS_Wavelength * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_HuygensSample (
        /*[out,retval]*/ enum SampleSizes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_HuygensSample (
        /*[in]*/ enum SampleSizes pRetVal ) = 0;
      virtual HRESULT __stdcall get_SampleSize (
        /*[out,retval]*/ enum SampleSizes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SampleSize (
        /*[in]*/ enum SampleSizes pRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum EncircledEnergyTypes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum EncircledEnergyTypes pRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferTo (
        /*[out,retval]*/ enum ReferToTypes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferTo (
        /*[in]*/ enum ReferToTypes pRetVal ) = 0;
      virtual HRESULT __stdcall get_ScatterRays (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ScatterRays (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShowDiffractionLimit (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ShowDiffractionLimit (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseDashes (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseDashes (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseHuygensPSF (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseHuygensPSF (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UsePolarization (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UsePolarization (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_HuygensDelta (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_HuygensDelta (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadiusMaximum (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RadiusMaximum (
        /*[in]*/ double pRetVal ) = 0;
};

enum __declspec(uuid("f7b69877-3e92-4cce-a043-9f869282afdb"))
ExtendedSourceTypes
{
    ExtendedSourceTypes_Encircled = 1,
    ExtendedSourceTypes_X_Only = 2,
    ExtendedSourceTypes_Y_Only = 3,
    ExtendedSourceTypes_Ensquared = 4,
    ExtendedSourceTypes_X_Distrib = 5,
    ExtendedSourceTypes_Y_Distrib = 6
};

struct __declspec(uuid("e387594f-f19f-4794-8b96-835a9cde6a86"))
IAS_ExtendedSourceEncircledEnergy : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetField))
    IAS_FieldPtr Field;
    __declspec(property(get=GetSurface))
    IAS_SurfacePtr Surface;
    __declspec(property(get=GetWavelength))
    IAS_WavelengthPtr Wavelength;
    __declspec(property(get=GetType,put=PutType))
    enum ExtendedSourceTypes Type;
    __declspec(property(get=GetReferTo,put=PutReferTo))
    enum ReferToTypes ReferTo;
    __declspec(property(get=GetRaysX1000,put=PutRaysX1000))
    long RaysX1000;
    __declspec(property(get=GetMultiplyByDiffractionLimit,put=PutMultiplyByDiffractionLimit))
    VARIANT_BOOL MultiplyByDiffractionLimit;
    __declspec(property(get=GetRemoveVignettingFactors,put=PutRemoveVignettingFactors))
    VARIANT_BOOL RemoveVignettingFactors;
    __declspec(property(get=GetUseDashes,put=PutUseDashes))
    VARIANT_BOOL UseDashes;
    __declspec(property(get=GetUsePolarization,put=PutUsePolarization))
    VARIANT_BOOL UsePolarization;
    __declspec(property(get=GetMaximumDistance,put=PutMaximumDistance))
    double MaximumDistance;
    __declspec(property(get=GetFieldSize,put=PutFieldSize))
    double FieldSize;
    __declspec(property(get=GetRotation,put=PutRotation))
    double Rotation;
    __declspec(property(get=GetImageName,put=PutImageName))
    _bstr_t ImageName;

    //
    // Wrapper methods for error-handling
    //

    IAS_FieldPtr GetField ( );
    IAS_SurfacePtr GetSurface ( );
    IAS_WavelengthPtr GetWavelength ( );
    enum ExtendedSourceTypes GetType ( );
    void PutType (
        enum ExtendedSourceTypes pRetVal );
    enum ReferToTypes GetReferTo ( );
    void PutReferTo (
        enum ReferToTypes pRetVal );
    long GetRaysX1000 ( );
    void PutRaysX1000 (
        long pRetVal );
    VARIANT_BOOL GetMultiplyByDiffractionLimit ( );
    void PutMultiplyByDiffractionLimit (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetRemoveVignettingFactors ( );
    void PutRemoveVignettingFactors (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetUseDashes ( );
    void PutUseDashes (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetUsePolarization ( );
    void PutUsePolarization (
        VARIANT_BOOL pRetVal );
    double GetMaximumDistance ( );
    void PutMaximumDistance (
        double pRetVal );
    double GetFieldSize ( );
    void PutFieldSize (
        double pRetVal );
    double GetRotation ( );
    void PutRotation (
        double pRetVal );
    _bstr_t GetImageName ( );
    void PutImageName (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Field (
        /*[out,retval]*/ struct IAS_Field * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Surface (
        /*[out,retval]*/ struct IAS_Surface * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Wavelength (
        /*[out,retval]*/ struct IAS_Wavelength * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum ExtendedSourceTypes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum ExtendedSourceTypes pRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferTo (
        /*[out,retval]*/ enum ReferToTypes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferTo (
        /*[in]*/ enum ReferToTypes pRetVal ) = 0;
      virtual HRESULT __stdcall get_RaysX1000 (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RaysX1000 (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_MultiplyByDiffractionLimit (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MultiplyByDiffractionLimit (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_RemoveVignettingFactors (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RemoveVignettingFactors (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseDashes (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseDashes (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UsePolarization (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UsePolarization (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumDistance (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaximumDistance (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FieldSize (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FieldSize (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ImageName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ImageName (
        /*[in]*/ BSTR pRetVal ) = 0;
};

struct __declspec(uuid("7554c6d6-f76b-4671-a23e-5e89023ab1d7"))
IAS_ZernikeFringeCoefficients : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetField))
    IAS_FieldPtr Field;
    __declspec(property(get=GetSurface))
    IAS_SurfacePtr Surface;
    __declspec(property(get=GetWavelength))
    IAS_WavelengthPtr Wavelength;
    __declspec(property(get=GetSampleSize,put=PutSampleSize))
    enum SampleSizes SampleSize;
    __declspec(property(get=GetReferenceOBDToVertex,put=PutReferenceOBDToVertex))
    VARIANT_BOOL ReferenceOBDToVertex;
    __declspec(property(get=GetSx,put=PutSx))
    double Sx;
    __declspec(property(get=GetSy,put=PutSy))
    double Sy;
    __declspec(property(get=GetSr,put=PutSr))
    double Sr;
    __declspec(property(get=GetMaximumNumberOfTerms,put=PutMaximumNumberOfTerms))
    long MaximumNumberOfTerms;

    //
    // Wrapper methods for error-handling
    //

    IAS_FieldPtr GetField ( );
    IAS_SurfacePtr GetSurface ( );
    IAS_WavelengthPtr GetWavelength ( );
    enum SampleSizes GetSampleSize ( );
    void PutSampleSize (
        enum SampleSizes pRetVal );
    VARIANT_BOOL GetReferenceOBDToVertex ( );
    void PutReferenceOBDToVertex (
        VARIANT_BOOL pRetVal );
    double GetSx ( );
    void PutSx (
        double pRetVal );
    double GetSy ( );
    void PutSy (
        double pRetVal );
    double GetSr ( );
    void PutSr (
        double pRetVal );
    long GetMaximumNumberOfTerms ( );
    void PutMaximumNumberOfTerms (
        long pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Field (
        /*[out,retval]*/ struct IAS_Field * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Surface (
        /*[out,retval]*/ struct IAS_Surface * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Wavelength (
        /*[out,retval]*/ struct IAS_Wavelength * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SampleSize (
        /*[out,retval]*/ enum SampleSizes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SampleSize (
        /*[in]*/ enum SampleSizes pRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceOBDToVertex (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceOBDToVertex (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Sx (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Sx (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Sy (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Sy (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Sr (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Sr (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumNumberOfTerms (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaximumNumberOfTerms (
        /*[in]*/ long pRetVal ) = 0;
};

struct __declspec(uuid("8556f78b-1e22-4994-a960-508502f8a594"))
IAS_ZernikeAnnularCoefficients : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetField))
    IAS_FieldPtr Field;
    __declspec(property(get=GetSurface))
    IAS_SurfacePtr Surface;
    __declspec(property(get=GetWavelength))
    IAS_WavelengthPtr Wavelength;
    __declspec(property(get=GetSampleSize,put=PutSampleSize))
    enum SampleSizes SampleSize;
    __declspec(property(get=GetReferenceOBDToVertex,put=PutReferenceOBDToVertex))
    VARIANT_BOOL ReferenceOBDToVertex;
    __declspec(property(get=GetSx,put=PutSx))
    double Sx;
    __declspec(property(get=GetSy,put=PutSy))
    double Sy;
    __declspec(property(get=GetSr,put=PutSr))
    double Sr;
    __declspec(property(get=GetObscuration,put=PutObscuration))
    double Obscuration;
    __declspec(property(get=GetMaximumNumberOfTerms,put=PutMaximumNumberOfTerms))
    long MaximumNumberOfTerms;

    //
    // Wrapper methods for error-handling
    //

    IAS_FieldPtr GetField ( );
    IAS_SurfacePtr GetSurface ( );
    IAS_WavelengthPtr GetWavelength ( );
    enum SampleSizes GetSampleSize ( );
    void PutSampleSize (
        enum SampleSizes pRetVal );
    VARIANT_BOOL GetReferenceOBDToVertex ( );
    void PutReferenceOBDToVertex (
        VARIANT_BOOL pRetVal );
    double GetSx ( );
    void PutSx (
        double pRetVal );
    double GetSy ( );
    void PutSy (
        double pRetVal );
    double GetSr ( );
    void PutSr (
        double pRetVal );
    double GetObscuration ( );
    void PutObscuration (
        double pRetVal );
    long GetMaximumNumberOfTerms ( );
    void PutMaximumNumberOfTerms (
        long pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Field (
        /*[out,retval]*/ struct IAS_Field * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Surface (
        /*[out,retval]*/ struct IAS_Surface * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Wavelength (
        /*[out,retval]*/ struct IAS_Wavelength * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SampleSize (
        /*[out,retval]*/ enum SampleSizes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SampleSize (
        /*[in]*/ enum SampleSizes pRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceOBDToVertex (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceOBDToVertex (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Sx (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Sx (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Sy (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Sy (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Sr (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Sr (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Obscuration (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Obscuration (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumNumberOfTerms (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaximumNumberOfTerms (
        /*[in]*/ long pRetVal ) = 0;
};

struct __declspec(uuid("71fc34ca-cd91-4711-93b0-9fc5771e33b2"))
IAS_FocalShiftDiagram : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMaximumShift,put=PutMaximumShift))
    double MaximumShift;
    __declspec(property(get=GetPupilZone,put=PutPupilZone))
    double PupilZone;

    //
    // Wrapper methods for error-handling
    //

    double GetMaximumShift ( );
    void PutMaximumShift (
        double pRetVal );
    double GetPupilZone ( );
    void PutPupilZone (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MaximumShift (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaximumShift (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_PupilZone (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PupilZone (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("385dafbb-350f-4612-8608-748541b87b11"))
IAS_GridDistortion : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetField))
    IAS_FieldPtr Field;
    __declspec(property(get=GetWavelength))
    IAS_WavelengthPtr Wavelength;
    __declspec(property(get=GetSymmetricMagnification,put=PutSymmetricMagnification))
    VARIANT_BOOL SymmetricMagnification;
    __declspec(property(get=GetScaleFactor,put=PutScaleFactor))
    double ScaleFactor;
    __declspec(property(get=GetAspect,put=PutAspect))
    double Aspect;
    __declspec(property(get=GetFieldWidth,put=PutFieldWidth))
    double FieldWidth;
    __declspec(property(get=GetGridNumber,put=PutGridNumber))
    long GridNumber;
    __declspec(property(get=GetMethod,put=PutMethod))
    long Method;
    __declspec(property(get=GetRotateText,put=PutRotateText))
    long RotateText;

    //
    // Wrapper methods for error-handling
    //

    IAS_FieldPtr GetField ( );
    IAS_WavelengthPtr GetWavelength ( );
    VARIANT_BOOL GetSymmetricMagnification ( );
    void PutSymmetricMagnification (
        VARIANT_BOOL pRetVal );
    double GetScaleFactor ( );
    void PutScaleFactor (
        double pRetVal );
    double GetAspect ( );
    void PutAspect (
        double pRetVal );
    double GetFieldWidth ( );
    void PutFieldWidth (
        double pRetVal );
    long GetGridNumber ( );
    void PutGridNumber (
        long pRetVal );
    long GetMethod ( );
    void PutMethod (
        long pRetVal );
    long GetRotateText ( );
    void PutRotateText (
        long pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Field (
        /*[out,retval]*/ struct IAS_Field * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Wavelength (
        /*[out,retval]*/ struct IAS_Wavelength * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SymmetricMagnification (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SymmetricMagnification (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ScaleFactor (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ScaleFactor (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Aspect (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Aspect (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FieldWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FieldWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_GridNumber (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_GridNumber (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Method (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Method (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_RotateText (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RotateText (
        /*[in]*/ long pRetVal ) = 0;
};

struct __declspec(uuid("a3366b2a-8c3a-4c39-bc12-0ee405bebcda"))
IAS_LateralColor : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAllWavelengths,put=PutAllWavelengths))
    VARIANT_BOOL AllWavelengths;
    __declspec(property(get=GetShowAiryDisk,put=PutShowAiryDisk))
    VARIANT_BOOL ShowAiryDisk;
    __declspec(property(get=GetUseRealRays,put=PutUseRealRays))
    VARIANT_BOOL UseRealRays;
    __declspec(property(get=GetPlotScale,put=PutPlotScale))
    double PlotScale;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetAllWavelengths ( );
    void PutAllWavelengths (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetShowAiryDisk ( );
    void PutShowAiryDisk (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetUseRealRays ( );
    void PutUseRealRays (
        VARIANT_BOOL pRetVal );
    double GetPlotScale ( );
    void PutPlotScale (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AllWavelengths (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AllWavelengths (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShowAiryDisk (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ShowAiryDisk (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseRealRays (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseRealRays (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_PlotScale (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PlotScale (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("8f625b27-f93d-433d-8898-ac299a5bd653"))
IAS_LongitudinalAberration : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUseDashes,put=PutUseDashes))
    VARIANT_BOOL UseDashes;
    __declspec(property(get=GetPlotScale,put=PutPlotScale))
    double PlotScale;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUseDashes ( );
    void PutUseDashes (
        VARIANT_BOOL pRetVal );
    double GetPlotScale ( );
    void PutPlotScale (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UseDashes (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseDashes (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_PlotScale (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PlotScale (
        /*[in]*/ double pRetVal ) = 0;
};

enum __declspec(uuid("a74a380e-49ea-4f15-8818-7dc1574ba059"))
RayTraceType
{
    RayTraceType_DirectionCosines = 0,
    RayTraceType_TangentAngle = 1,
    RayTraceType_YmUmYcUc = 2
};

struct __declspec(uuid("da20bbdb-d41f-4532-b148-7694469c0251"))
IAS_RayTrace : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetField))
    IAS_FieldPtr Field;
    __declspec(property(get=GetWavelength))
    IAS_WavelengthPtr Wavelength;
    __declspec(property(get=GetUseGlobal,put=PutUseGlobal))
    VARIANT_BOOL UseGlobal;
    __declspec(property(get=GetHx,put=PutHx))
    double Hx;
    __declspec(property(get=GetHy,put=PutHy))
    double Hy;
    __declspec(property(get=GetPx,put=PutPx))
    double Px;
    __declspec(property(get=GetPy,put=PutPy))
    double Py;
    __declspec(property(get=GetType,put=PutType))
    enum RayTraceType Type;

    //
    // Wrapper methods for error-handling
    //

    IAS_FieldPtr GetField ( );
    IAS_WavelengthPtr GetWavelength ( );
    VARIANT_BOOL GetUseGlobal ( );
    void PutUseGlobal (
        VARIANT_BOOL pRetVal );
    double GetHx ( );
    void PutHx (
        double pRetVal );
    double GetHy ( );
    void PutHy (
        double pRetVal );
    double GetPx ( );
    void PutPx (
        double pRetVal );
    double GetPy ( );
    void PutPy (
        double pRetVal );
    enum RayTraceType GetType ( );
    void PutType (
        enum RayTraceType pRetVal );
    HRESULT UseArbitraryRay ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Field (
        /*[out,retval]*/ struct IAS_Field * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Wavelength (
        /*[out,retval]*/ struct IAS_Wavelength * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseGlobal (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseGlobal (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Hx (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Hx (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Hy (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Hy (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Px (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Px (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Py (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Py (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum RayTraceType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum RayTraceType pRetVal ) = 0;
      virtual HRESULT __stdcall raw_UseArbitraryRay ( ) = 0;
};

struct __declspec(uuid("66c2141c-9320-469c-85f8-b35f1147dd54"))
IAS_SeidelDiagram : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIgnoreChromatic,put=PutIgnoreChromatic))
    VARIANT_BOOL IgnoreChromatic;
    __declspec(property(get=GetIgnoreDistortion,put=PutIgnoreDistortion))
    VARIANT_BOOL IgnoreDistortion;
    __declspec(property(get=GetSuppressFrame,put=PutSuppressFrame))
    VARIANT_BOOL SuppressFrame;
    __declspec(property(get=GetPlotScale,put=PutPlotScale))
    double PlotScale;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIgnoreChromatic ( );
    void PutIgnoreChromatic (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIgnoreDistortion ( );
    void PutIgnoreDistortion (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetSuppressFrame ( );
    void PutSuppressFrame (
        VARIANT_BOOL pRetVal );
    double GetPlotScale ( );
    void PutPlotScale (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IgnoreChromatic (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IgnoreChromatic (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IgnoreDistortion (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IgnoreDistortion (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_SuppressFrame (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SuppressFrame (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_PlotScale (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PlotScale (
        /*[in]*/ double pRetVal ) = 0;
};

enum __declspec(uuid("1dc98c2a-215f-4b16-9939-ddf4cdd0b77c"))
Distortions
{
    Distortions_F_TanTheta = 0,
    Distortions_F_Theta = 1,
    Distortions_Cal_F_Theta = 2,
    Distortions_Cal_F_TanTheta = 3
};

enum __declspec(uuid("b8a5fdff-68c4-4397-a46c-c5caad41f13d"))
DisplayAsTypes
{
    DisplayAsTypes_Percent = 0,
    DisplayAsTypes_Absolute = 1
};

struct __declspec(uuid("145d0aad-e5ee-442f-be24-6e2d0fb70167"))
IAS_SeidelCoefficients : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetWavelength))
    IAS_WavelengthPtr Wavelength;

    //
    // Wrapper methods for error-handling
    //

    IAS_WavelengthPtr GetWavelength ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Wavelength (
        /*[out,retval]*/ struct IAS_Wavelength * * pRetVal ) = 0;
};

enum __declspec(uuid("acaf8cd2-a87d-44bf-9182-57a2c27d7c24"))
FieldScanDirections
{
    FieldScanDirections_Plus_Y = 0,
    FieldScanDirections_Plus_X = 1,
    FieldScanDirections_Minus_Y = 2,
    FieldScanDirections_Minus_X = 3
};

struct __declspec(uuid("7d93126d-ae09-416a-ab2d-b10f19c0293a"))
IAS_FieldCurvatureAndDistortion : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetWavelength))
    IAS_WavelengthPtr Wavelength;
    __declspec(property(get=GetDisplayAs,put=PutDisplayAs))
    enum DisplayAsTypes DisplayAs;
    __declspec(property(get=GetDistortion,put=PutDistortion))
    enum Distortions Distortion;
    __declspec(property(get=GetScanType,put=PutScanType))
    enum FieldScanDirections ScanType;
    __declspec(property(get=GetUseDashes,put=PutUseDashes))
    VARIANT_BOOL UseDashes;
    __declspec(property(get=GetIgnoreVignette,put=PutIgnoreVignette))
    VARIANT_BOOL IgnoreVignette;
    __declspec(property(get=GetMaximumCurvature,put=PutMaximumCurvature))
    double MaximumCurvature;
    __declspec(property(get=GetMaximumDistortion,put=PutMaximumDistortion))
    double MaximumDistortion;

    //
    // Wrapper methods for error-handling
    //

    IAS_WavelengthPtr GetWavelength ( );
    enum DisplayAsTypes GetDisplayAs ( );
    void PutDisplayAs (
        enum DisplayAsTypes pRetVal );
    enum Distortions GetDistortion ( );
    void PutDistortion (
        enum Distortions pRetVal );
    enum FieldScanDirections GetScanType ( );
    void PutScanType (
        enum FieldScanDirections pRetVal );
    VARIANT_BOOL GetUseDashes ( );
    void PutUseDashes (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIgnoreVignette ( );
    void PutIgnoreVignette (
        VARIANT_BOOL pRetVal );
    double GetMaximumCurvature ( );
    void PutMaximumCurvature (
        double pRetVal );
    double GetMaximumDistortion ( );
    void PutMaximumDistortion (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Wavelength (
        /*[out,retval]*/ struct IAS_Wavelength * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayAs (
        /*[out,retval]*/ enum DisplayAsTypes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DisplayAs (
        /*[in]*/ enum DisplayAsTypes pRetVal ) = 0;
      virtual HRESULT __stdcall get_Distortion (
        /*[out,retval]*/ enum Distortions * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Distortion (
        /*[in]*/ enum Distortions pRetVal ) = 0;
      virtual HRESULT __stdcall get_ScanType (
        /*[out,retval]*/ enum FieldScanDirections * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ScanType (
        /*[in]*/ enum FieldScanDirections pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseDashes (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseDashes (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IgnoreVignette (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IgnoreVignette (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumCurvature (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaximumCurvature (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumDistortion (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaximumDistortion (
        /*[in]*/ double pRetVal ) = 0;
};

enum __declspec(uuid("d4600e8a-2676-4b94-b8cb-1d1a54942a5e"))
ZernikeCoefficientTypes
{
    ZernikeCoefficientTypes_Fringe = 0,
    ZernikeCoefficientTypes_Standard = 1,
    ZernikeCoefficientTypes_Annular = 2
};

struct __declspec(uuid("4812d1cd-db6b-4767-a14b-34d2f73366e9"))
IAS_ZernikeCoefficientsVsField : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetWavelength))
    IAS_WavelengthPtr Wavelength;
    __declspec(property(get=GetSampleSize,put=PutSampleSize))
    enum SampleSizes SampleSize;
    __declspec(property(get=GetFieldScanDirection,put=PutFieldScanDirection))
    enum FieldScanDirections FieldScanDirection;
    __declspec(property(get=GetZernikeCoefficientType,put=PutZernikeCoefficientType))
    enum ZernikeCoefficientTypes ZernikeCoefficientType;
    __declspec(property(get=GetScaleMinimum,put=PutScaleMinimum))
    double ScaleMinimum;
    __declspec(property(get=GetScaleMaximum,put=PutScaleMaximum))
    double ScaleMaximum;
    __declspec(property(get=GetObscurationFactor,put=PutObscurationFactor))
    double ObscurationFactor;
    __declspec(property(get=GetFieldDensity,put=PutFieldDensity))
    long FieldDensity;
    __declspec(property(get=GetCoefficients,put=PutCoefficients))
    _bstr_t Coefficients;

    //
    // Wrapper methods for error-handling
    //

    IAS_WavelengthPtr GetWavelength ( );
    enum SampleSizes GetSampleSize ( );
    void PutSampleSize (
        enum SampleSizes pRetVal );
    enum FieldScanDirections GetFieldScanDirection ( );
    void PutFieldScanDirection (
        enum FieldScanDirections pRetVal );
    enum ZernikeCoefficientTypes GetZernikeCoefficientType ( );
    void PutZernikeCoefficientType (
        enum ZernikeCoefficientTypes pRetVal );
    double GetScaleMinimum ( );
    void PutScaleMinimum (
        double pRetVal );
    double GetScaleMaximum ( );
    void PutScaleMaximum (
        double pRetVal );
    double GetObscurationFactor ( );
    void PutObscurationFactor (
        double pRetVal );
    long GetFieldDensity ( );
    void PutFieldDensity (
        long pRetVal );
    _bstr_t GetCoefficients ( );
    void PutCoefficients (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Wavelength (
        /*[out,retval]*/ struct IAS_Wavelength * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SampleSize (
        /*[out,retval]*/ enum SampleSizes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SampleSize (
        /*[in]*/ enum SampleSizes pRetVal ) = 0;
      virtual HRESULT __stdcall get_FieldScanDirection (
        /*[out,retval]*/ enum FieldScanDirections * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FieldScanDirection (
        /*[in]*/ enum FieldScanDirections pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZernikeCoefficientType (
        /*[out,retval]*/ enum ZernikeCoefficientTypes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ZernikeCoefficientType (
        /*[in]*/ enum ZernikeCoefficientTypes pRetVal ) = 0;
      virtual HRESULT __stdcall get_ScaleMinimum (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ScaleMinimum (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ScaleMaximum (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ScaleMaximum (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ObscurationFactor (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ObscurationFactor (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FieldDensity (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FieldDensity (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coefficients (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coefficients (
        /*[in]*/ BSTR pRetVal ) = 0;
};

struct __declspec(uuid("0333ec45-6aa0-4cb3-8acd-c5005282edd5"))
IAS_ZernikeStandardCoefficients : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetField))
    IAS_FieldPtr Field;
    __declspec(property(get=GetSurface))
    IAS_SurfacePtr Surface;
    __declspec(property(get=GetWavelength))
    IAS_WavelengthPtr Wavelength;
    __declspec(property(get=GetSampleSize,put=PutSampleSize))
    enum SampleSizes SampleSize;
    __declspec(property(get=GetReferenceOBDToVertex,put=PutReferenceOBDToVertex))
    VARIANT_BOOL ReferenceOBDToVertex;
    __declspec(property(get=GetSx,put=PutSx))
    double Sx;
    __declspec(property(get=GetSy,put=PutSy))
    double Sy;
    __declspec(property(get=GetSr,put=PutSr))
    double Sr;
    __declspec(property(get=GetEpsilon,put=PutEpsilon))
    double Epsilon;
    __declspec(property(get=GetMaximumNumberOfTerms,put=PutMaximumNumberOfTerms))
    long MaximumNumberOfTerms;

    //
    // Wrapper methods for error-handling
    //

    IAS_FieldPtr GetField ( );
    IAS_SurfacePtr GetSurface ( );
    IAS_WavelengthPtr GetWavelength ( );
    enum SampleSizes GetSampleSize ( );
    void PutSampleSize (
        enum SampleSizes pRetVal );
    VARIANT_BOOL GetReferenceOBDToVertex ( );
    void PutReferenceOBDToVertex (
        VARIANT_BOOL pRetVal );
    double GetSx ( );
    void PutSx (
        double pRetVal );
    double GetSy ( );
    void PutSy (
        double pRetVal );
    double GetSr ( );
    void PutSr (
        double pRetVal );
    double GetEpsilon ( );
    void PutEpsilon (
        double pRetVal );
    long GetMaximumNumberOfTerms ( );
    void PutMaximumNumberOfTerms (
        long pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Field (
        /*[out,retval]*/ struct IAS_Field * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Surface (
        /*[out,retval]*/ struct IAS_Surface * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Wavelength (
        /*[out,retval]*/ struct IAS_Wavelength * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SampleSize (
        /*[out,retval]*/ enum SampleSizes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SampleSize (
        /*[in]*/ enum SampleSizes pRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceOBDToVertex (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceOBDToVertex (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Sx (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Sx (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Sy (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Sy (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Sr (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Sr (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Epsilon (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Epsilon (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumNumberOfTerms (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaximumNumberOfTerms (
        /*[in]*/ long pRetVal ) = 0;
};

struct __declspec(uuid("ed0b14a9-df23-4748-aee9-1c71ae48073b"))
IZOSAPI_Connection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsAlive))
    VARIANT_BOOL IsAlive;
    __declspec(property(get=GetInitializationSettings,put=PutInitializationSettings))
    _bstr_t InitializationSettings;
    __declspec(property(get=GetIntializationProgress))
    SAFEARRAY * IntializationProgress;
    __declspec(property(get=GetConnectionTimeoutSeconds,put=PutConnectionTimeoutSeconds))
    double ConnectionTimeoutSeconds;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsAlive ( );
    IZOSAPI_ApplicationPtr ConnectToApplication ( );
    IZOSAPI_ApplicationPtr CreateNewApplication ( );
    IZOSAPI_ApplicationPtr CreateZemaxServer (
        _bstr_t applicationName );
    _bstr_t GetInitializationSettings ( );
    void PutInitializationSettings (
        _bstr_t pRetVal );
    SAFEARRAY * GetIntializationProgress ( );
    double GetConnectionTimeoutSeconds ( );
    void PutConnectionTimeoutSeconds (
        double pRetVal );
    IZOSAPI_ApplicationPtr ConnectAsExtension (
        long zemaxInstance );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsAlive (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ConnectToApplication (
        /*[out,retval]*/ struct IZOSAPI_Application * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateNewApplication (
        /*[out,retval]*/ struct IZOSAPI_Application * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateZemaxServer (
        /*[in]*/ BSTR applicationName,
        /*[out,retval]*/ struct IZOSAPI_Application * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_InitializationSettings (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_InitializationSettings (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_IntializationProgress (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ConnectionTimeoutSeconds (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ConnectionTimeoutSeconds (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ConnectAsExtension (
        /*[in]*/ long zemaxInstance,
        /*[out,retval]*/ struct IZOSAPI_Application * * pRetVal ) = 0;
};

struct __declspec(uuid("aab429ca-15a5-4934-98d5-a4257e9e04ab"))
IZOSAPI_Application : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLicenseStatus))
    enum LicenseStatusType LicenseStatus;
    __declspec(property(get=GetIsValidLicenseForAPI))
    VARIANT_BOOL IsValidLicenseForAPI;
    __declspec(property(get=GetInitializationErrors))
    _bstr_t InitializationErrors;
    __declspec(property(get=GetInitializationErrorCode))
    _bstr_t InitializationErrorCode;
    __declspec(property(get=GetMode))
    enum ZOSAPI_Mode Mode;
    __declspec(property(get=GetSerialCode))
    _bstr_t SerialCode;
    __declspec(property(get=GetOpticStudioVersion))
    long OpticStudioVersion;
    __declspec(property(get=GetExpirationYear))
    long ExpirationYear;
    __declspec(property(get=GetExpirationMonth))
    long ExpirationMonth;
    __declspec(property(get=GetExpirationDay))
    long ExpirationDay;
    __declspec(property(get=GetNumberOfOpticalSystems))
    long NumberOfOpticalSystems;
    __declspec(property(get=GetPrimarySystem))
    IOpticalSystemPtr PrimarySystem;
    __declspec(property(get=GetNumberOfCPUs))
    long NumberOfCPUs;
    __declspec(property(get=GetProgramDir))
    _bstr_t ProgramDir;
    __declspec(property(get=GetLensDir))
    _bstr_t LensDir;
    __declspec(property(get=GetObjectsDir))
    _bstr_t ObjectsDir;
    __declspec(property(get=GetGlassDir))
    _bstr_t GlassDir;
    __declspec(property(get=GetZPLDir))
    _bstr_t ZPLDir;
    __declspec(property(get=GetCoatingDir))
    _bstr_t CoatingDir;
    __declspec(property(get=GetPOPDir))
    _bstr_t POPDir;
    __declspec(property(get=GetImagesDir))
    _bstr_t ImagesDir;
    __declspec(property(get=GetSolidWorksFilesDir))
    _bstr_t SolidWorksFilesDir;
    __declspec(property(get=GetAutodeskInventorFilesDir))
    _bstr_t AutodeskInventorFilesDir;
    __declspec(property(get=GetCreoParametricFilesDir))
    _bstr_t CreoParametricFilesDir;
    __declspec(property(get=GetMATLABFilesDir))
    _bstr_t MATLABFilesDir;
    __declspec(property(get=GetScatterDir))
    _bstr_t ScatterDir;
    __declspec(property(get=GetUndoDir))
    _bstr_t UndoDir;
    __declspec(property(get=GetSamplesDir))
    _bstr_t SamplesDir;
    __declspec(property(get=GetZemaxDataDir))
    _bstr_t ZemaxDataDir;
    __declspec(property(get=GetOperandResults))
    IVectorDataPtr OperandResults;
    __declspec(property(get=GetOperandArgument1))
    double OperandArgument1;
    __declspec(property(get=GetOperandArgument2))
    double OperandArgument2;
    __declspec(property(get=GetOperandArgument3))
    double OperandArgument3;
    __declspec(property(get=GetOperandArgument4))
    double OperandArgument4;
    __declspec(property(get=GetUserAnalysisData))
    IUserAnalysisDataPtr UserAnalysisData;
    __declspec(property(get=GetTerminateRequested))
    VARIANT_BOOL TerminateRequested;
    __declspec(property(get=GetShowChangesInUI,put=PutShowChangesInUI))
    VARIANT_BOOL ShowChangesInUI;
    __declspec(property(get=GetProgressMessage,put=PutProgressMessage))
    _bstr_t ProgressMessage;
    __declspec(property(get=GetProgressPercent,put=PutProgressPercent))
    double ProgressPercent;
    __declspec(property(get=GetCheckForUpdatesStatus))
    enum UpdateStatus CheckForUpdatesStatus;
    __declspec(property(get=GetCheckForUpdatesData))
    _bstr_t CheckForUpdatesData;
    __declspec(property(get=GetCheckForUpdatesVersion))
    long CheckForUpdatesVersion;

    //
    // Wrapper methods for error-handling
    //

    enum LicenseStatusType GetLicenseStatus ( );
    VARIANT_BOOL GetIsValidLicenseForAPI ( );
    _bstr_t GetInitializationErrors ( );
    _bstr_t GetInitializationErrorCode ( );
    enum ZOSAPI_Mode GetMode ( );
    _bstr_t GetSerialCode ( );
    long GetOpticStudioVersion ( );
    long GetExpirationYear ( );
    long GetExpirationMonth ( );
    long GetExpirationDay ( );
    long GetNumberOfOpticalSystems ( );
    IOpticalSystemPtr GetPrimarySystem ( );
    IOpticalSystemPtr GetSystemAt (
        long pos );
    VARIANT_BOOL CloseSystemAt (
        long pos,
        VARIANT_BOOL saveIfNeeded );
    IOpticalSystemPtr LoadNewSystem (
        _bstr_t LensFile );
    IOpticalSystemPtr CreateNewSystem (
        enum SystemType Mode );
    long GetNumberOfCPUs ( );
    HRESULT UpdateFileLists ( );
    _bstr_t GetProgramDir ( );
    _bstr_t GetLensDir ( );
    _bstr_t GetObjectsDir ( );
    _bstr_t GetGlassDir ( );
    _bstr_t GetZPLDir ( );
    _bstr_t GetCoatingDir ( );
    _bstr_t GetPOPDir ( );
    _bstr_t GetImagesDir ( );
    _bstr_t GetSolidWorksFilesDir ( );
    _bstr_t GetAutodeskInventorFilesDir ( );
    _bstr_t GetCreoParametricFilesDir ( );
    _bstr_t GetMATLABFilesDir ( );
    _bstr_t GetScatterDir ( );
    _bstr_t GetUndoDir ( );
    _bstr_t GetSamplesDir ( );
    _bstr_t GetZemaxDataDir ( );
    _bstr_t GetDate ( );
    IVectorDataPtr GetOperandResults ( );
    double GetOperandArgument1 ( );
    double GetOperandArgument2 ( );
    double GetOperandArgument3 ( );
    double GetOperandArgument4 ( );
    IUserAnalysisDataPtr GetUserAnalysisData ( );
    VARIANT_BOOL GetTerminateRequested ( );
    VARIANT_BOOL GetShowChangesInUI ( );
    void PutShowChangesInUI (
        VARIANT_BOOL pRetVal );
    _bstr_t GetProgressMessage ( );
    void PutProgressMessage (
        _bstr_t pRetVal );
    double GetProgressPercent ( );
    void PutProgressPercent (
        double pRetVal );
    HRESULT CloseApplication ( );
    enum UpdateStatus GetCheckForUpdatesStatus ( );
    _bstr_t GetCheckForUpdatesData ( );
    long GetCheckForUpdatesVersion ( );
    HRESULT CheckForUpdates ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LicenseStatus (
        /*[out,retval]*/ enum LicenseStatusType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValidLicenseForAPI (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_InitializationErrors (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_InitializationErrorCode (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Mode (
        /*[out,retval]*/ enum ZOSAPI_Mode * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SerialCode (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_OpticStudioVersion (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ExpirationYear (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ExpirationMonth (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ExpirationDay (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfOpticalSystems (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_PrimarySystem (
        /*[out,retval]*/ struct IOpticalSystem * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetSystemAt (
        /*[in]*/ long pos,
        /*[out,retval]*/ struct IOpticalSystem * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CloseSystemAt (
        /*[in]*/ long pos,
        /*[in]*/ VARIANT_BOOL saveIfNeeded,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_LoadNewSystem (
        /*[in]*/ BSTR LensFile,
        /*[out,retval]*/ struct IOpticalSystem * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateNewSystem (
        /*[in]*/ enum SystemType Mode,
        /*[out,retval]*/ struct IOpticalSystem * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfCPUs (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_UpdateFileLists ( ) = 0;
      virtual HRESULT __stdcall get_ProgramDir (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LensDir (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectsDir (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_GlassDir (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZPLDir (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoatingDir (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_POPDir (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ImagesDir (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SolidWorksFilesDir (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AutodeskInventorFilesDir (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CreoParametricFilesDir (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MATLABFilesDir (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ScatterDir (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_UndoDir (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SamplesDir (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZemaxDataDir (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetDate (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_OperandResults (
        /*[out,retval]*/ struct IVectorData * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_OperandArgument1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_OperandArgument2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_OperandArgument3 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_OperandArgument4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_UserAnalysisData (
        /*[out,retval]*/ struct IUserAnalysisData * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TerminateRequested (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShowChangesInUI (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ShowChangesInUI (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ProgressMessage (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ProgressMessage (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_ProgressPercent (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ProgressPercent (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CloseApplication ( ) = 0;
      virtual HRESULT __stdcall get_CheckForUpdatesStatus (
        /*[out,retval]*/ enum UpdateStatus * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CheckForUpdatesData (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CheckForUpdatesVersion (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CheckForUpdates ( ) = 0;
};

struct __declspec(uuid("652e9881-9769-40ae-a08e-176b0bfcf464"))
IOpticalSystem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSystemName,put=PutSystemName))
    _bstr_t SystemName;
    __declspec(property(get=GetSystemID))
    long SystemID;
    __declspec(property(get=GetMode))
    enum SystemType Mode;
    __declspec(property(get=GetSystemFile))
    _bstr_t SystemFile;
    __declspec(property(get=GetIsNonAxial))
    VARIANT_BOOL IsNonAxial;
    __declspec(property(get=GetNeedsSave))
    VARIANT_BOOL NeedsSave;
    __declspec(property(get=GetSystemData))
    ISystemDataPtr SystemData;
    __declspec(property(get=GetLDE))
    ILensDataEditorPtr LDE;
    __declspec(property(get=GetNCE))
    INonSeqEditorPtr NCE;
    __declspec(property(get=GetTDE))
    IToleranceDataEditorPtr TDE;
    __declspec(property(get=GetMFE))
    IMeritFunctionEditorPtr MFE;
    __declspec(property(get=GetMCE))
    IMultiConfigEditorPtr MCE;
    __declspec(property(get=GetAnalyses))
    I_AnalysesPtr Analyses;
    __declspec(property(get=GetTools))
    IOpticalSystemToolsPtr Tools;
    __declspec(property(get=GetTheApplication))
    IZOSAPI_ApplicationPtr TheApplication;
    __declspec(property(get=GetUpdateMode,put=PutUpdateMode))
    enum LensUpdateMode UpdateMode;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetSystemName ( );
    void PutSystemName (
        _bstr_t pRetVal );
    long GetSystemID ( );
    enum SystemType GetMode ( );
    _bstr_t GetSystemFile ( );
    _bstr_t GetCurrentStatus ( );
    _bstr_t UpdateStatus ( );
    VARIANT_BOOL GetIsNonAxial ( );
    VARIANT_BOOL GetNeedsSave ( );
    VARIANT_BOOL MakeSequential ( );
    VARIANT_BOOL MakeNonSequential ( );
    VARIANT_BOOL LoadFile (
        _bstr_t LensFile,
        VARIANT_BOOL saveIfNeeded );
    HRESULT New (
        VARIANT_BOOL saveIfNeeded );
    HRESULT Save ( );
    HRESULT SaveAs (
        _bstr_t fileName );
    VARIANT_BOOL Close (
        VARIANT_BOOL saveIfNeeded );
    ISystemDataPtr GetSystemData ( );
    ILensDataEditorPtr GetLDE ( );
    INonSeqEditorPtr GetNCE ( );
    IToleranceDataEditorPtr GetTDE ( );
    IMeritFunctionEditorPtr GetMFE ( );
    IMultiConfigEditorPtr GetMCE ( );
    I_AnalysesPtr GetAnalyses ( );
    IOpticalSystemToolsPtr GetTools ( );
    IZOSAPI_ApplicationPtr GetTheApplication ( );
    IOpticalSystemPtr CopySystem ( );
    enum LensUpdateMode GetUpdateMode ( );
    void PutUpdateMode (
        enum LensUpdateMode pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SystemName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SystemName (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_SystemID (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Mode (
        /*[out,retval]*/ enum SystemType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SystemFile (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetCurrentStatus (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_UpdateStatus (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsNonAxial (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NeedsSave (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_MakeSequential (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_MakeNonSequential (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_LoadFile (
        /*[in]*/ BSTR LensFile,
        /*[in]*/ VARIANT_BOOL saveIfNeeded,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_New (
        /*[in]*/ VARIANT_BOOL saveIfNeeded ) = 0;
      virtual HRESULT __stdcall raw_Save ( ) = 0;
      virtual HRESULT __stdcall raw_SaveAs (
        /*[in]*/ BSTR fileName ) = 0;
      virtual HRESULT __stdcall raw_Close (
        /*[in]*/ VARIANT_BOOL saveIfNeeded,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SystemData (
        /*[out,retval]*/ struct ISystemData * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LDE (
        /*[out,retval]*/ struct ILensDataEditor * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NCE (
        /*[out,retval]*/ struct INonSeqEditor * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TDE (
        /*[out,retval]*/ struct IToleranceDataEditor * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MFE (
        /*[out,retval]*/ struct IMeritFunctionEditor * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MCE (
        /*[out,retval]*/ struct IMultiConfigEditor * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Analyses (
        /*[out,retval]*/ struct I_Analyses * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Tools (
        /*[out,retval]*/ struct IOpticalSystemTools * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TheApplication (
        /*[out,retval]*/ struct IZOSAPI_Application * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CopySystem (
        /*[out,retval]*/ struct IOpticalSystem * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_UpdateMode (
        /*[out,retval]*/ enum LensUpdateMode * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UpdateMode (
        /*[in]*/ enum LensUpdateMode pRetVal ) = 0;
};

struct __declspec(uuid("503f0796-3cad-48e3-b14a-4566a23647da"))
IEditor : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEditor))
    enum EditorType Editor;
    __declspec(property(get=GetNumberOfRows))
    long NumberOfRows;
    __declspec(property(get=GetMinColumn))
    long MinColumn;
    __declspec(property(get=GetMaxColumn))
    long MaxColumn;

    //
    // Wrapper methods for error-handling
    //

    enum EditorType GetEditor ( );
    long GetNumberOfRows ( );
    long GetMinColumn ( );
    long GetMaxColumn ( );
    IEditorRowPtr GetRowAt (
        long pos );
    IEditorRowPtr InsertRowAt (
        long pos );
    IEditorRowPtr AddRow ( );
    VARIANT_BOOL DeleteRowAt (
        long pos );
    long DeleteRowsAt (
        long pos,
        long NumberOfRows );
    long DeleteAllRows ( );
    VARIANT_BOOL ShowEditor ( );
    HRESULT HideEditor ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Editor (
        /*[out,retval]*/ enum EditorType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfRows (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinColumn (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaxColumn (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetRowAt (
        /*[in]*/ long pos,
        /*[out,retval]*/ struct IEditorRow * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_InsertRowAt (
        /*[in]*/ long pos,
        /*[out,retval]*/ struct IEditorRow * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddRow (
        /*[out,retval]*/ struct IEditorRow * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_DeleteRowAt (
        /*[in]*/ long pos,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_DeleteRowsAt (
        /*[in]*/ long pos,
        /*[in]*/ long NumberOfRows,
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_DeleteAllRows (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ShowEditor (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_HideEditor ( ) = 0;
};

struct __declspec(uuid("fefb8447-028d-427e-b522-8aae1477e979"))
IEditorRow : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEditor))
    IEditorPtr Editor;
    __declspec(property(get=GetIsValidRow))
    VARIANT_BOOL IsValidRow;
    __declspec(property(get=GetRowIndex))
    long RowIndex;
    __declspec(property(get=GetRowTypeName))
    _bstr_t RowTypeName;

    //
    // Wrapper methods for error-handling
    //

    IEditorPtr GetEditor ( );
    VARIANT_BOOL GetIsValidRow ( );
    long GetRowIndex ( );
    _bstr_t GetRowTypeName ( );
    IEditorCellPtr GetCellAt (
        long pos );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Editor (
        /*[out,retval]*/ struct IEditor * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValidRow (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RowIndex (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RowTypeName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetCellAt (
        /*[in]*/ long pos,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
};

struct __declspec(uuid("893e39c0-c5f0-41d9-b159-4b0dc4b0929e"))
IEditorCell : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRow))
    IEditorRowPtr Row;
    __declspec(property(get=GetCol))
    long Col;
    __declspec(property(get=GetIsActive))
    VARIANT_BOOL IsActive;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetHeader))
    _bstr_t Header;
    __declspec(property(get=GetDataType))
    enum CellDataType DataType;
    __declspec(property(get=GetIntegerValue,put=PutIntegerValue))
    long IntegerValue;
    __declspec(property(get=GetValue,put=PutValue))
    _bstr_t Value;
    __declspec(property(get=GetDoubleValue,put=PutDoubleValue))
    double DoubleValue;
    __declspec(property(get=GetSolve))
    enum SolveType Solve;

    //
    // Wrapper methods for error-handling
    //

    IEditorRowPtr GetRow ( );
    long GetCol ( );
    VARIANT_BOOL GetIsActive ( );
    VARIANT_BOOL GetIsReadOnly ( );
    _bstr_t GetHeader ( );
    enum CellDataType GetDataType ( );
    long GetIntegerValue ( );
    void PutIntegerValue (
        long pRetVal );
    double GetDoubleValue ( );
    void PutDoubleValue (
        double pRetVal );
    _bstr_t GetValue ( );
    void PutValue (
        _bstr_t pRetVal );
    enum SolveType GetSolve ( );
    ISolveDataPtr GetSolveData ( );
    long GetNumberOfSolveTypes ( );
    VARIANT_BOOL IsSolveTypeSupported (
        enum SolveType st );
    SAFEARRAY * GetAvailableSolveTypes ( );
    HRESULT FillAvailableSolveTypes (
        long Length,
        enum SolveType * solves );
    ISolveDataPtr CreateSolveType (
        enum SolveType Type );
    enum SolveStatus SetSolveData (
        struct ISolveData * Data );
    VARIANT_BOOL MakeSolveVariable ( );
    VARIANT_BOOL MakeSolveFixed ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Row (
        /*[out,retval]*/ struct IEditorRow * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Col (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsActive (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Header (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DataType (
        /*[out,retval]*/ enum CellDataType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IntegerValue (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IntegerValue (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_DoubleValue (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DoubleValue (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Solve (
        /*[out,retval]*/ enum SolveType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetSolveData (
        /*[out,retval]*/ struct ISolveData * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetNumberOfSolveTypes (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsSolveTypeSupported (
        /*[in]*/ enum SolveType st,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailableSolveTypes (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FillAvailableSolveTypes (
        /*[in]*/ long Length,
        /*[in,out]*/ enum SolveType * solves ) = 0;
      virtual HRESULT __stdcall raw_CreateSolveType (
        /*[in]*/ enum SolveType Type,
        /*[out,retval]*/ struct ISolveData * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetSolveData (
        /*[in]*/ struct ISolveData * Data,
        /*[out,retval]*/ enum SolveStatus * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_MakeSolveVariable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_MakeSolveFixed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("baedfac0-6510-4e3f-84cf-d3551a05121b"))
IObjectAnnularAsphericLens : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMinFrontApertureCell))
    IEditorCellPtr MinFrontApertureCell;
    __declspec(property(get=GetMaxFrontApertureCell))
    IEditorCellPtr MaxFrontApertureCell;
    __declspec(property(get=GetMinBackApertureCell))
    IEditorCellPtr MinBackApertureCell;
    __declspec(property(get=GetMaxBackApertureCell))
    IEditorCellPtr MaxBackApertureCell;
    __declspec(property(get=GetThkApertureCell))
    IEditorCellPtr ThkApertureCell;
    __declspec(property(get=GetRearRadiusCell))
    IEditorCellPtr RearRadiusCell;
    __declspec(property(get=GetRearConicCell))
    IEditorCellPtr RearConicCell;
    __declspec(property(get=GetThicknessCell))
    IEditorCellPtr ThicknessCell;
    __declspec(property(get=GetRearRPower2Cell))
    IEditorCellPtr RearRPower2Cell;
    __declspec(property(get=GetRearRPower4Cell))
    IEditorCellPtr RearRPower4Cell;
    __declspec(property(get=GetRearRPower6Cell))
    IEditorCellPtr RearRPower6Cell;
    __declspec(property(get=GetRearRPower8Cell))
    IEditorCellPtr RearRPower8Cell;
    __declspec(property(get=GetRearRPower10Cell))
    IEditorCellPtr RearRPower10Cell;
    __declspec(property(get=GetRearRPower12Cell))
    IEditorCellPtr RearRPower12Cell;
    __declspec(property(get=GetRearRPower14Cell))
    IEditorCellPtr RearRPower14Cell;
    __declspec(property(get=GetRearRPower16Cell))
    IEditorCellPtr RearRPower16Cell;
    __declspec(property(get=GetFrontRadiusCell))
    IEditorCellPtr FrontRadiusCell;
    __declspec(property(get=GetFrontConicCell))
    IEditorCellPtr FrontConicCell;
    __declspec(property(get=GetFrontRPower2Cell))
    IEditorCellPtr FrontRPower2Cell;
    __declspec(property(get=GetFrontRPower4Cell))
    IEditorCellPtr FrontRPower4Cell;
    __declspec(property(get=GetFrontRPower6Cell))
    IEditorCellPtr FrontRPower6Cell;
    __declspec(property(get=GetFrontRPower8Cell))
    IEditorCellPtr FrontRPower8Cell;
    __declspec(property(get=GetFrontRPower10Cell))
    IEditorCellPtr FrontRPower10Cell;
    __declspec(property(get=GetFrontRPower12Cell))
    IEditorCellPtr FrontRPower12Cell;
    __declspec(property(get=GetFrontRPower14Cell))
    IEditorCellPtr FrontRPower14Cell;
    __declspec(property(get=GetFrontRPower16Cell))
    IEditorCellPtr FrontRPower16Cell;
    __declspec(property(get=GetMinFrontAperture,put=PutMinFrontAperture))
    double MinFrontAperture;
    __declspec(property(get=GetMaxFrontAperture,put=PutMaxFrontAperture))
    double MaxFrontAperture;
    __declspec(property(get=GetMinBackAperture,put=PutMinBackAperture))
    double MinBackAperture;
    __declspec(property(get=GetMaxBackAperture,put=PutMaxBackAperture))
    double MaxBackAperture;
    __declspec(property(get=GetThkAperture,put=PutThkAperture))
    double ThkAperture;
    __declspec(property(get=GetRearRadius,put=PutRearRadius))
    double RearRadius;
    __declspec(property(get=GetRearConic,put=PutRearConic))
    double RearConic;
    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness;
    __declspec(property(get=GetRearRPower2,put=PutRearRPower2))
    double RearRPower2;
    __declspec(property(get=GetRearRPower4,put=PutRearRPower4))
    double RearRPower4;
    __declspec(property(get=GetRearRPower6,put=PutRearRPower6))
    double RearRPower6;
    __declspec(property(get=GetRearRPower8,put=PutRearRPower8))
    double RearRPower8;
    __declspec(property(get=GetRearRPower10,put=PutRearRPower10))
    double RearRPower10;
    __declspec(property(get=GetRearRPower12,put=PutRearRPower12))
    double RearRPower12;
    __declspec(property(get=GetRearRPower14,put=PutRearRPower14))
    double RearRPower14;
    __declspec(property(get=GetRearRPower16,put=PutRearRPower16))
    double RearRPower16;
    __declspec(property(get=GetFrontRadius,put=PutFrontRadius))
    double FrontRadius;
    __declspec(property(get=GetFrontConic,put=PutFrontConic))
    double FrontConic;
    __declspec(property(get=GetFrontRPower2,put=PutFrontRPower2))
    double FrontRPower2;
    __declspec(property(get=GetFrontRPower4,put=PutFrontRPower4))
    double FrontRPower4;
    __declspec(property(get=GetFrontRPower6,put=PutFrontRPower6))
    double FrontRPower6;
    __declspec(property(get=GetFrontRPower8,put=PutFrontRPower8))
    double FrontRPower8;
    __declspec(property(get=GetFrontRPower10,put=PutFrontRPower10))
    double FrontRPower10;
    __declspec(property(get=GetFrontRPower12,put=PutFrontRPower12))
    double FrontRPower12;
    __declspec(property(get=GetFrontRPower14,put=PutFrontRPower14))
    double FrontRPower14;
    __declspec(property(get=GetFrontRPower16,put=PutFrontRPower16))
    double FrontRPower16;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetMinFrontApertureCell ( );
    IEditorCellPtr GetMaxFrontApertureCell ( );
    IEditorCellPtr GetMinBackApertureCell ( );
    IEditorCellPtr GetMaxBackApertureCell ( );
    IEditorCellPtr GetThkApertureCell ( );
    IEditorCellPtr GetRearRadiusCell ( );
    IEditorCellPtr GetRearConicCell ( );
    IEditorCellPtr GetThicknessCell ( );
    IEditorCellPtr GetRearRPower2Cell ( );
    IEditorCellPtr GetRearRPower4Cell ( );
    IEditorCellPtr GetRearRPower6Cell ( );
    IEditorCellPtr GetRearRPower8Cell ( );
    IEditorCellPtr GetRearRPower10Cell ( );
    IEditorCellPtr GetRearRPower12Cell ( );
    IEditorCellPtr GetRearRPower14Cell ( );
    IEditorCellPtr GetRearRPower16Cell ( );
    IEditorCellPtr GetFrontRadiusCell ( );
    IEditorCellPtr GetFrontConicCell ( );
    IEditorCellPtr GetFrontRPower2Cell ( );
    IEditorCellPtr GetFrontRPower4Cell ( );
    IEditorCellPtr GetFrontRPower6Cell ( );
    IEditorCellPtr GetFrontRPower8Cell ( );
    IEditorCellPtr GetFrontRPower10Cell ( );
    IEditorCellPtr GetFrontRPower12Cell ( );
    IEditorCellPtr GetFrontRPower14Cell ( );
    IEditorCellPtr GetFrontRPower16Cell ( );
    double GetMinFrontAperture ( );
    void PutMinFrontAperture (
        double pRetVal );
    double GetMaxFrontAperture ( );
    void PutMaxFrontAperture (
        double pRetVal );
    double GetMinBackAperture ( );
    void PutMinBackAperture (
        double pRetVal );
    double GetMaxBackAperture ( );
    void PutMaxBackAperture (
        double pRetVal );
    double GetThkAperture ( );
    void PutThkAperture (
        double pRetVal );
    double GetRearRadius ( );
    void PutRearRadius (
        double pRetVal );
    double GetRearConic ( );
    void PutRearConic (
        double pRetVal );
    double GetThickness ( );
    void PutThickness (
        double pRetVal );
    double GetRearRPower2 ( );
    void PutRearRPower2 (
        double pRetVal );
    double GetRearRPower4 ( );
    void PutRearRPower4 (
        double pRetVal );
    double GetRearRPower6 ( );
    void PutRearRPower6 (
        double pRetVal );
    double GetRearRPower8 ( );
    void PutRearRPower8 (
        double pRetVal );
    double GetRearRPower10 ( );
    void PutRearRPower10 (
        double pRetVal );
    double GetRearRPower12 ( );
    void PutRearRPower12 (
        double pRetVal );
    double GetRearRPower14 ( );
    void PutRearRPower14 (
        double pRetVal );
    double GetRearRPower16 ( );
    void PutRearRPower16 (
        double pRetVal );
    double GetFrontRadius ( );
    void PutFrontRadius (
        double pRetVal );
    double GetFrontConic ( );
    void PutFrontConic (
        double pRetVal );
    double GetFrontRPower2 ( );
    void PutFrontRPower2 (
        double pRetVal );
    double GetFrontRPower4 ( );
    void PutFrontRPower4 (
        double pRetVal );
    double GetFrontRPower6 ( );
    void PutFrontRPower6 (
        double pRetVal );
    double GetFrontRPower8 ( );
    void PutFrontRPower8 (
        double pRetVal );
    double GetFrontRPower10 ( );
    void PutFrontRPower10 (
        double pRetVal );
    double GetFrontRPower12 ( );
    void PutFrontRPower12 (
        double pRetVal );
    double GetFrontRPower14 ( );
    void PutFrontRPower14 (
        double pRetVal );
    double GetFrontRPower16 ( );
    void PutFrontRPower16 (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MinFrontApertureCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaxFrontApertureCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinBackApertureCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaxBackApertureCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ThkApertureCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRadiusCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearConicCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ThicknessCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRPower2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRPower4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRPower6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRPower8Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRPower10Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRPower12Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRPower14Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRPower16Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontRadiusCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontConicCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontRPower2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontRPower4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontRPower6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontRPower8Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontRPower10Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontRPower12Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontRPower14Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontRPower16Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinFrontAperture (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MinFrontAperture (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaxFrontAperture (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaxFrontAperture (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinBackAperture (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MinBackAperture (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaxBackAperture (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaxBackAperture (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ThkAperture (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ThkAperture (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRadius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearRadius (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearConic (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearConic (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Thickness (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Thickness (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRPower2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearRPower2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRPower4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearRPower4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRPower6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearRPower6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRPower8 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearRPower8 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRPower10 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearRPower10 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRPower12 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearRPower12 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRPower14 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearRPower14 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRPower16 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearRPower16 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontRadius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontRadius (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontConic (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontConic (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontRPower2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontRPower2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontRPower4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontRPower4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontRPower6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontRPower6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontRPower8 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontRPower8 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontRPower10 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontRPower10 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontRPower12 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontRPower12 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontRPower14 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontRPower14 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontRPower16 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontRPower16 (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("44edd66b-7623-4feb-b196-a85e5fbe5009"))
IObjectAnnularAxialLens : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFrontRadiusCell))
    IEditorCellPtr FrontRadiusCell;
    __declspec(property(get=GetFrontConicCell))
    IEditorCellPtr FrontConicCell;
    __declspec(property(get=GetRearRadiusCell))
    IEditorCellPtr RearRadiusCell;
    __declspec(property(get=GetRearConicCell))
    IEditorCellPtr RearConicCell;
    __declspec(property(get=GetThicknessCell))
    IEditorCellPtr ThicknessCell;
    __declspec(property(get=GetApertureCell))
    IEditorCellPtr ApertureCell;
    __declspec(property(get=GetRevolutionCell))
    IEditorCellPtr RevolutionCell;
    __declspec(property(get=GetDecenterCell))
    IEditorCellPtr DecenterCell;
    __declspec(property(get=GetFrontRPower2Cell))
    IEditorCellPtr FrontRPower2Cell;
    __declspec(property(get=GetFrontRPower4Cell))
    IEditorCellPtr FrontRPower4Cell;
    __declspec(property(get=GetFrontRPower6Cell))
    IEditorCellPtr FrontRPower6Cell;
    __declspec(property(get=GetFrontRPower8Cell))
    IEditorCellPtr FrontRPower8Cell;
    __declspec(property(get=GetFrontRPower10Cell))
    IEditorCellPtr FrontRPower10Cell;
    __declspec(property(get=GetFrontRPower12Cell))
    IEditorCellPtr FrontRPower12Cell;
    __declspec(property(get=GetFrontRPower14Cell))
    IEditorCellPtr FrontRPower14Cell;
    __declspec(property(get=GetFrontRPower16Cell))
    IEditorCellPtr FrontRPower16Cell;
    __declspec(property(get=GetRearRPower2Cell))
    IEditorCellPtr RearRPower2Cell;
    __declspec(property(get=GetRearRPower4Cell))
    IEditorCellPtr RearRPower4Cell;
    __declspec(property(get=GetRearRPower6Cell))
    IEditorCellPtr RearRPower6Cell;
    __declspec(property(get=GetRearRPower8Cell))
    IEditorCellPtr RearRPower8Cell;
    __declspec(property(get=GetRearRPower10Cell))
    IEditorCellPtr RearRPower10Cell;
    __declspec(property(get=GetRearRPower12Cell))
    IEditorCellPtr RearRPower12Cell;
    __declspec(property(get=GetRearRPower14Cell))
    IEditorCellPtr RearRPower14Cell;
    __declspec(property(get=GetRearRPower16Cell))
    IEditorCellPtr RearRPower16Cell;
    __declspec(property(get=GetFrontRadius,put=PutFrontRadius))
    double FrontRadius;
    __declspec(property(get=GetFrontConic,put=PutFrontConic))
    double FrontConic;
    __declspec(property(get=GetRearRadius,put=PutRearRadius))
    double RearRadius;
    __declspec(property(get=GetRearConic,put=PutRearConic))
    double RearConic;
    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness;
    __declspec(property(get=GetAperture,put=PutAperture))
    double Aperture;
    __declspec(property(get=GetRevolution,put=PutRevolution))
    double Revolution;
    __declspec(property(get=GetDecenter,put=PutDecenter))
    double Decenter;
    __declspec(property(get=GetFrontRPower2,put=PutFrontRPower2))
    double FrontRPower2;
    __declspec(property(get=GetFrontRPower4,put=PutFrontRPower4))
    double FrontRPower4;
    __declspec(property(get=GetFrontRPower6,put=PutFrontRPower6))
    double FrontRPower6;
    __declspec(property(get=GetFrontRPower8,put=PutFrontRPower8))
    double FrontRPower8;
    __declspec(property(get=GetFrontRPower10,put=PutFrontRPower10))
    double FrontRPower10;
    __declspec(property(get=GetFrontRPower12,put=PutFrontRPower12))
    double FrontRPower12;
    __declspec(property(get=GetFrontRPower14,put=PutFrontRPower14))
    double FrontRPower14;
    __declspec(property(get=GetFrontRPower16,put=PutFrontRPower16))
    double FrontRPower16;
    __declspec(property(get=GetRearRPower2,put=PutRearRPower2))
    double RearRPower2;
    __declspec(property(get=GetRearRPower4,put=PutRearRPower4))
    double RearRPower4;
    __declspec(property(get=GetRearRPower6,put=PutRearRPower6))
    double RearRPower6;
    __declspec(property(get=GetRearRPower8,put=PutRearRPower8))
    double RearRPower8;
    __declspec(property(get=GetRearRPower10,put=PutRearRPower10))
    double RearRPower10;
    __declspec(property(get=GetRearRPower12,put=PutRearRPower12))
    double RearRPower12;
    __declspec(property(get=GetRearRPower14,put=PutRearRPower14))
    double RearRPower14;
    __declspec(property(get=GetRearRPower16,put=PutRearRPower16))
    double RearRPower16;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetFrontRadiusCell ( );
    IEditorCellPtr GetFrontConicCell ( );
    IEditorCellPtr GetRearRadiusCell ( );
    IEditorCellPtr GetRearConicCell ( );
    IEditorCellPtr GetThicknessCell ( );
    IEditorCellPtr GetApertureCell ( );
    IEditorCellPtr GetRevolutionCell ( );
    IEditorCellPtr GetDecenterCell ( );
    IEditorCellPtr GetFrontRPower2Cell ( );
    IEditorCellPtr GetFrontRPower4Cell ( );
    IEditorCellPtr GetFrontRPower6Cell ( );
    IEditorCellPtr GetFrontRPower8Cell ( );
    IEditorCellPtr GetFrontRPower10Cell ( );
    IEditorCellPtr GetFrontRPower12Cell ( );
    IEditorCellPtr GetFrontRPower14Cell ( );
    IEditorCellPtr GetFrontRPower16Cell ( );
    IEditorCellPtr GetRearRPower2Cell ( );
    IEditorCellPtr GetRearRPower4Cell ( );
    IEditorCellPtr GetRearRPower6Cell ( );
    IEditorCellPtr GetRearRPower8Cell ( );
    IEditorCellPtr GetRearRPower10Cell ( );
    IEditorCellPtr GetRearRPower12Cell ( );
    IEditorCellPtr GetRearRPower14Cell ( );
    IEditorCellPtr GetRearRPower16Cell ( );
    double GetFrontRadius ( );
    void PutFrontRadius (
        double pRetVal );
    double GetFrontConic ( );
    void PutFrontConic (
        double pRetVal );
    double GetRearRadius ( );
    void PutRearRadius (
        double pRetVal );
    double GetRearConic ( );
    void PutRearConic (
        double pRetVal );
    double GetThickness ( );
    void PutThickness (
        double pRetVal );
    double GetAperture ( );
    void PutAperture (
        double pRetVal );
    double GetRevolution ( );
    void PutRevolution (
        double pRetVal );
    double GetDecenter ( );
    void PutDecenter (
        double pRetVal );
    double GetFrontRPower2 ( );
    void PutFrontRPower2 (
        double pRetVal );
    double GetFrontRPower4 ( );
    void PutFrontRPower4 (
        double pRetVal );
    double GetFrontRPower6 ( );
    void PutFrontRPower6 (
        double pRetVal );
    double GetFrontRPower8 ( );
    void PutFrontRPower8 (
        double pRetVal );
    double GetFrontRPower10 ( );
    void PutFrontRPower10 (
        double pRetVal );
    double GetFrontRPower12 ( );
    void PutFrontRPower12 (
        double pRetVal );
    double GetFrontRPower14 ( );
    void PutFrontRPower14 (
        double pRetVal );
    double GetFrontRPower16 ( );
    void PutFrontRPower16 (
        double pRetVal );
    double GetRearRPower2 ( );
    void PutRearRPower2 (
        double pRetVal );
    double GetRearRPower4 ( );
    void PutRearRPower4 (
        double pRetVal );
    double GetRearRPower6 ( );
    void PutRearRPower6 (
        double pRetVal );
    double GetRearRPower8 ( );
    void PutRearRPower8 (
        double pRetVal );
    double GetRearRPower10 ( );
    void PutRearRPower10 (
        double pRetVal );
    double GetRearRPower12 ( );
    void PutRearRPower12 (
        double pRetVal );
    double GetRearRPower14 ( );
    void PutRearRPower14 (
        double pRetVal );
    double GetRearRPower16 ( );
    void PutRearRPower16 (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FrontRadiusCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontConicCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRadiusCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearConicCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ThicknessCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ApertureCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RevolutionCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DecenterCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontRPower2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontRPower4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontRPower6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontRPower8Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontRPower10Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontRPower12Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontRPower14Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontRPower16Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRPower2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRPower4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRPower6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRPower8Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRPower10Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRPower12Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRPower14Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRPower16Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontRadius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontRadius (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontConic (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontConic (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRadius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearRadius (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearConic (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearConic (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Thickness (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Thickness (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Aperture (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Aperture (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Revolution (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Revolution (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Decenter (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Decenter (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontRPower2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontRPower2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontRPower4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontRPower4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontRPower6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontRPower6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontRPower8 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontRPower8 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontRPower10 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontRPower10 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontRPower12 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontRPower12 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontRPower14 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontRPower14 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontRPower16 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontRPower16 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRPower2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearRPower2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRPower4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearRPower4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRPower6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearRPower6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRPower8 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearRPower8 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRPower10 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearRPower10 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRPower12 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearRPower12 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRPower14 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearRPower14 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRPower16 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearRPower16 (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("f70d36dd-f311-4e49-abc3-5b9b732eab86"))
IObjectAnnularVolume : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFrontXMinCell))
    IEditorCellPtr FrontXMinCell;
    __declspec(property(get=GetFrontYMinCell))
    IEditorCellPtr FrontYMinCell;
    __declspec(property(get=GetRearXMinCell))
    IEditorCellPtr RearXMinCell;
    __declspec(property(get=GetRearYMinCell))
    IEditorCellPtr RearYMinCell;
    __declspec(property(get=GetFrontXMaxCell))
    IEditorCellPtr FrontXMaxCell;
    __declspec(property(get=GetFrontYMaxCell))
    IEditorCellPtr FrontYMaxCell;
    __declspec(property(get=GetRearXMaxCell))
    IEditorCellPtr RearXMaxCell;
    __declspec(property(get=GetRearYMaxCell))
    IEditorCellPtr RearYMaxCell;
    __declspec(property(get=GetZLengthCell))
    IEditorCellPtr ZLengthCell;
    __declspec(property(get=GetFrontXAngleCell))
    IEditorCellPtr FrontXAngleCell;
    __declspec(property(get=GetFrontYAngleCell))
    IEditorCellPtr FrontYAngleCell;
    __declspec(property(get=GetBackXAngleCell))
    IEditorCellPtr BackXAngleCell;
    __declspec(property(get=GetBackYAngleCell))
    IEditorCellPtr BackYAngleCell;
    __declspec(property(get=GetFrontXMin,put=PutFrontXMin))
    double FrontXMin;
    __declspec(property(get=GetFrontYMin,put=PutFrontYMin))
    double FrontYMin;
    __declspec(property(get=GetRearXMin,put=PutRearXMin))
    double RearXMin;
    __declspec(property(get=GetRearYMin,put=PutRearYMin))
    double RearYMin;
    __declspec(property(get=GetFrontXMax,put=PutFrontXMax))
    double FrontXMax;
    __declspec(property(get=GetFrontYMax,put=PutFrontYMax))
    double FrontYMax;
    __declspec(property(get=GetRearXMax,put=PutRearXMax))
    double RearXMax;
    __declspec(property(get=GetRearYMax,put=PutRearYMax))
    double RearYMax;
    __declspec(property(get=GetZLength,put=PutZLength))
    double ZLength;
    __declspec(property(get=GetFrontXAngle,put=PutFrontXAngle))
    double FrontXAngle;
    __declspec(property(get=GetFrontYAngle,put=PutFrontYAngle))
    double FrontYAngle;
    __declspec(property(get=GetBackXAngle,put=PutBackXAngle))
    double BackXAngle;
    __declspec(property(get=GetBackYAngle,put=PutBackYAngle))
    double BackYAngle;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetFrontXMinCell ( );
    IEditorCellPtr GetFrontYMinCell ( );
    IEditorCellPtr GetRearXMinCell ( );
    IEditorCellPtr GetRearYMinCell ( );
    IEditorCellPtr GetFrontXMaxCell ( );
    IEditorCellPtr GetFrontYMaxCell ( );
    IEditorCellPtr GetRearXMaxCell ( );
    IEditorCellPtr GetRearYMaxCell ( );
    IEditorCellPtr GetZLengthCell ( );
    IEditorCellPtr GetFrontXAngleCell ( );
    IEditorCellPtr GetFrontYAngleCell ( );
    IEditorCellPtr GetBackXAngleCell ( );
    IEditorCellPtr GetBackYAngleCell ( );
    double GetFrontXMin ( );
    void PutFrontXMin (
        double pRetVal );
    double GetFrontYMin ( );
    void PutFrontYMin (
        double pRetVal );
    double GetRearXMin ( );
    void PutRearXMin (
        double pRetVal );
    double GetRearYMin ( );
    void PutRearYMin (
        double pRetVal );
    double GetFrontXMax ( );
    void PutFrontXMax (
        double pRetVal );
    double GetFrontYMax ( );
    void PutFrontYMax (
        double pRetVal );
    double GetRearXMax ( );
    void PutRearXMax (
        double pRetVal );
    double GetRearYMax ( );
    void PutRearYMax (
        double pRetVal );
    double GetZLength ( );
    void PutZLength (
        double pRetVal );
    double GetFrontXAngle ( );
    void PutFrontXAngle (
        double pRetVal );
    double GetFrontYAngle ( );
    void PutFrontYAngle (
        double pRetVal );
    double GetBackXAngle ( );
    void PutBackXAngle (
        double pRetVal );
    double GetBackYAngle ( );
    void PutBackYAngle (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FrontXMinCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontYMinCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearXMinCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearYMinCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontXMaxCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontYMaxCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearXMaxCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearYMaxCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZLengthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontXAngleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontYAngleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_BackXAngleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_BackYAngleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontXMin (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontXMin (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontYMin (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontYMin (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearXMin (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearXMin (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearYMin (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearYMin (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontXMax (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontXMax (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontYMax (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontYMax (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearXMax (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearXMax (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearYMax (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearYMax (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZLength (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ZLength (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontXAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontXAngle (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontYAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontYAngle (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_BackXAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BackXAngle (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_BackYAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BackYAngle (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("ad54737f-a986-4cc4-a678-a26db1c02051"))
IObjectAnnulus : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMaxXHalfWidthCell))
    IEditorCellPtr MaxXHalfWidthCell;
    __declspec(property(get=GetMaxYHalfWidthCell))
    IEditorCellPtr MaxYHalfWidthCell;
    __declspec(property(get=GetMinXHalfWidthCell))
    IEditorCellPtr MinXHalfWidthCell;
    __declspec(property(get=GetMinYHalfWidthCell))
    IEditorCellPtr MinYHalfWidthCell;
    __declspec(property(get=GetMaxXHalfWidth,put=PutMaxXHalfWidth))
    double MaxXHalfWidth;
    __declspec(property(get=GetMaxYHalfWidth,put=PutMaxYHalfWidth))
    double MaxYHalfWidth;
    __declspec(property(get=GetMinXHalfWidth,put=PutMinXHalfWidth))
    double MinXHalfWidth;
    __declspec(property(get=GetMinYHalfWidth,put=PutMinYHalfWidth))
    double MinYHalfWidth;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetMaxXHalfWidthCell ( );
    IEditorCellPtr GetMaxYHalfWidthCell ( );
    IEditorCellPtr GetMinXHalfWidthCell ( );
    IEditorCellPtr GetMinYHalfWidthCell ( );
    double GetMaxXHalfWidth ( );
    void PutMaxXHalfWidth (
        double pRetVal );
    double GetMaxYHalfWidth ( );
    void PutMaxYHalfWidth (
        double pRetVal );
    double GetMinXHalfWidth ( );
    void PutMinXHalfWidth (
        double pRetVal );
    double GetMinYHalfWidth ( );
    void PutMinYHalfWidth (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MaxXHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaxYHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinXHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinYHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaxXHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaxXHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaxYHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaxYHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinXHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MinXHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinYHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MinYHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("a530ddb6-6b4d-45a9-b3ed-c0e3ed56ced4"))
IObjectArray : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParentObjectNumberCell))
    IEditorCellPtr ParentObjectNumberCell;
    __declspec(property(get=GetNumberXCell))
    IEditorCellPtr NumberXCell;
    __declspec(property(get=GetNumberYCell))
    IEditorCellPtr NumberYCell;
    __declspec(property(get=GetNumberZCell))
    IEditorCellPtr NumberZCell;
    __declspec(property(get=GetDelta1XCell))
    IEditorCellPtr Delta1XCell;
    __declspec(property(get=GetDelta1YCell))
    IEditorCellPtr Delta1YCell;
    __declspec(property(get=GetDelta1ZCell))
    IEditorCellPtr Delta1ZCell;
    __declspec(property(get=GetXminusXCell))
    IEditorCellPtr XminusXCell;
    __declspec(property(get=GetXminusYCell))
    IEditorCellPtr XminusYCell;
    __declspec(property(get=GetXminusZCell))
    IEditorCellPtr XminusZCell;
    __declspec(property(get=GetYminusXCell))
    IEditorCellPtr YminusXCell;
    __declspec(property(get=GetYminusYCell))
    IEditorCellPtr YminusYCell;
    __declspec(property(get=GetYminusZCell))
    IEditorCellPtr YminusZCell;
    __declspec(property(get=GetZminusXCell))
    IEditorCellPtr ZminusXCell;
    __declspec(property(get=GetZminusYCell))
    IEditorCellPtr ZminusYCell;
    __declspec(property(get=GetZminusZCell))
    IEditorCellPtr ZminusZCell;
    __declspec(property(get=GetTiltXCell))
    IEditorCellPtr TiltXCell;
    __declspec(property(get=GetTiltYCell))
    IEditorCellPtr TiltYCell;
    __declspec(property(get=GetTiltZCell))
    IEditorCellPtr TiltZCell;
    __declspec(property(get=GetDrawLimitCell))
    IEditorCellPtr DrawLimitCell;
    __declspec(property(get=GetDrawBoundaryCell))
    IEditorCellPtr DrawBoundaryCell;
    __declspec(property(get=GetDelta2XCell))
    IEditorCellPtr Delta2XCell;
    __declspec(property(get=GetDelta2YCell))
    IEditorCellPtr Delta2YCell;
    __declspec(property(get=GetDelta2ZCell))
    IEditorCellPtr Delta2ZCell;
    __declspec(property(get=GetDelta3XCell))
    IEditorCellPtr Delta3XCell;
    __declspec(property(get=GetDelta3YCell))
    IEditorCellPtr Delta3YCell;
    __declspec(property(get=GetDelta3ZCell))
    IEditorCellPtr Delta3ZCell;
    __declspec(property(get=GetDelta4XCell))
    IEditorCellPtr Delta4XCell;
    __declspec(property(get=GetDelta4YCell))
    IEditorCellPtr Delta4YCell;
    __declspec(property(get=GetDelta4ZCell))
    IEditorCellPtr Delta4ZCell;
    __declspec(property(get=GetMaximumXCell))
    IEditorCellPtr MaximumXCell;
    __declspec(property(get=GetMaximumYCell))
    IEditorCellPtr MaximumYCell;
    __declspec(property(get=GetMaximumZCell))
    IEditorCellPtr MaximumZCell;
    __declspec(property(get=GetParentObjectNumber,put=PutParentObjectNumber))
    long ParentObjectNumber;
    __declspec(property(get=GetNumberX,put=PutNumberX))
    long NumberX;
    __declspec(property(get=GetNumberY,put=PutNumberY))
    long NumberY;
    __declspec(property(get=GetNumberZ,put=PutNumberZ))
    long NumberZ;
    __declspec(property(get=GetDelta1X,put=PutDelta1X))
    double Delta1X;
    __declspec(property(get=GetDelta1Y,put=PutDelta1Y))
    double Delta1Y;
    __declspec(property(get=GetDelta1Z,put=PutDelta1Z))
    double Delta1Z;
    __declspec(property(get=GetXminusX,put=PutXminusX))
    double XminusX;
    __declspec(property(get=GetXminusY,put=PutXminusY))
    double XminusY;
    __declspec(property(get=GetXminusZ,put=PutXminusZ))
    double XminusZ;
    __declspec(property(get=GetYminusX,put=PutYminusX))
    double YminusX;
    __declspec(property(get=GetYminusY,put=PutYminusY))
    double YminusY;
    __declspec(property(get=GetYminusZ,put=PutYminusZ))
    double YminusZ;
    __declspec(property(get=GetZminusX,put=PutZminusX))
    double ZminusX;
    __declspec(property(get=GetZminusY,put=PutZminusY))
    double ZminusY;
    __declspec(property(get=GetZminusZ,put=PutZminusZ))
    double ZminusZ;
    __declspec(property(get=GetTiltX,put=PutTiltX))
    double TiltX;
    __declspec(property(get=GetTiltY,put=PutTiltY))
    double TiltY;
    __declspec(property(get=GetTiltZ,put=PutTiltZ))
    double TiltZ;
    __declspec(property(get=GetDrawLimit,put=PutDrawLimit))
    long DrawLimit;
    __declspec(property(get=GetDrawBoundary,put=PutDrawBoundary))
    long DrawBoundary;
    __declspec(property(get=GetDelta2X,put=PutDelta2X))
    double Delta2X;
    __declspec(property(get=GetDelta2Y,put=PutDelta2Y))
    double Delta2Y;
    __declspec(property(get=GetDelta2Z,put=PutDelta2Z))
    double Delta2Z;
    __declspec(property(get=GetDelta3X,put=PutDelta3X))
    double Delta3X;
    __declspec(property(get=GetDelta3Y,put=PutDelta3Y))
    double Delta3Y;
    __declspec(property(get=GetDelta3Z,put=PutDelta3Z))
    double Delta3Z;
    __declspec(property(get=GetDelta4X,put=PutDelta4X))
    double Delta4X;
    __declspec(property(get=GetDelta4Y,put=PutDelta4Y))
    double Delta4Y;
    __declspec(property(get=GetDelta4Z,put=PutDelta4Z))
    double Delta4Z;
    __declspec(property(get=GetMaximumX,put=PutMaximumX))
    double MaximumX;
    __declspec(property(get=GetMaximumY,put=PutMaximumY))
    double MaximumY;
    __declspec(property(get=GetMaximumZ,put=PutMaximumZ))
    double MaximumZ;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetParentObjectNumberCell ( );
    IEditorCellPtr GetNumberXCell ( );
    IEditorCellPtr GetNumberYCell ( );
    IEditorCellPtr GetNumberZCell ( );
    IEditorCellPtr GetDelta1XCell ( );
    IEditorCellPtr GetDelta1YCell ( );
    IEditorCellPtr GetDelta1ZCell ( );
    IEditorCellPtr GetXminusXCell ( );
    IEditorCellPtr GetXminusYCell ( );
    IEditorCellPtr GetXminusZCell ( );
    IEditorCellPtr GetYminusXCell ( );
    IEditorCellPtr GetYminusYCell ( );
    IEditorCellPtr GetYminusZCell ( );
    IEditorCellPtr GetZminusXCell ( );
    IEditorCellPtr GetZminusYCell ( );
    IEditorCellPtr GetZminusZCell ( );
    IEditorCellPtr GetTiltXCell ( );
    IEditorCellPtr GetTiltYCell ( );
    IEditorCellPtr GetTiltZCell ( );
    IEditorCellPtr GetDrawLimitCell ( );
    IEditorCellPtr GetDrawBoundaryCell ( );
    IEditorCellPtr GetDelta2XCell ( );
    IEditorCellPtr GetDelta2YCell ( );
    IEditorCellPtr GetDelta2ZCell ( );
    IEditorCellPtr GetDelta3XCell ( );
    IEditorCellPtr GetDelta3YCell ( );
    IEditorCellPtr GetDelta3ZCell ( );
    IEditorCellPtr GetDelta4XCell ( );
    IEditorCellPtr GetDelta4YCell ( );
    IEditorCellPtr GetDelta4ZCell ( );
    IEditorCellPtr GetMaximumXCell ( );
    IEditorCellPtr GetMaximumYCell ( );
    IEditorCellPtr GetMaximumZCell ( );
    long GetParentObjectNumber ( );
    void PutParentObjectNumber (
        long pRetVal );
    long GetNumberX ( );
    void PutNumberX (
        long pRetVal );
    long GetNumberY ( );
    void PutNumberY (
        long pRetVal );
    long GetNumberZ ( );
    void PutNumberZ (
        long pRetVal );
    double GetDelta1X ( );
    void PutDelta1X (
        double pRetVal );
    double GetDelta1Y ( );
    void PutDelta1Y (
        double pRetVal );
    double GetDelta1Z ( );
    void PutDelta1Z (
        double pRetVal );
    double GetXminusX ( );
    void PutXminusX (
        double pRetVal );
    double GetXminusY ( );
    void PutXminusY (
        double pRetVal );
    double GetXminusZ ( );
    void PutXminusZ (
        double pRetVal );
    double GetYminusX ( );
    void PutYminusX (
        double pRetVal );
    double GetYminusY ( );
    void PutYminusY (
        double pRetVal );
    double GetYminusZ ( );
    void PutYminusZ (
        double pRetVal );
    double GetZminusX ( );
    void PutZminusX (
        double pRetVal );
    double GetZminusY ( );
    void PutZminusY (
        double pRetVal );
    double GetZminusZ ( );
    void PutZminusZ (
        double pRetVal );
    double GetTiltX ( );
    void PutTiltX (
        double pRetVal );
    double GetTiltY ( );
    void PutTiltY (
        double pRetVal );
    double GetTiltZ ( );
    void PutTiltZ (
        double pRetVal );
    long GetDrawLimit ( );
    void PutDrawLimit (
        long pRetVal );
    long GetDrawBoundary ( );
    void PutDrawBoundary (
        long pRetVal );
    double GetDelta2X ( );
    void PutDelta2X (
        double pRetVal );
    double GetDelta2Y ( );
    void PutDelta2Y (
        double pRetVal );
    double GetDelta2Z ( );
    void PutDelta2Z (
        double pRetVal );
    double GetDelta3X ( );
    void PutDelta3X (
        double pRetVal );
    double GetDelta3Y ( );
    void PutDelta3Y (
        double pRetVal );
    double GetDelta3Z ( );
    void PutDelta3Z (
        double pRetVal );
    double GetDelta4X ( );
    void PutDelta4X (
        double pRetVal );
    double GetDelta4Y ( );
    void PutDelta4Y (
        double pRetVal );
    double GetDelta4Z ( );
    void PutDelta4Z (
        double pRetVal );
    double GetMaximumX ( );
    void PutMaximumX (
        double pRetVal );
    double GetMaximumY ( );
    void PutMaximumY (
        double pRetVal );
    double GetMaximumZ ( );
    void PutMaximumZ (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ParentObjectNumberCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberXCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberYCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberZCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Delta1XCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Delta1YCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Delta1ZCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XminusXCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XminusYCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XminusZCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YminusXCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YminusYCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YminusZCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZminusXCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZminusYCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZminusZCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TiltXCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TiltYCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TiltZCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DrawLimitCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DrawBoundaryCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Delta2XCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Delta2YCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Delta2ZCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Delta3XCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Delta3YCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Delta3ZCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Delta4XCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Delta4YCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Delta4ZCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumXCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumYCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumZCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ParentObjectNumber (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ParentObjectNumber (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberX (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberX (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberY (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberY (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberZ (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberZ (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Delta1X (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Delta1X (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Delta1Y (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Delta1Y (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Delta1Z (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Delta1Z (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_XminusX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XminusX (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_XminusY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XminusY (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_XminusZ (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XminusZ (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YminusX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YminusX (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YminusY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YminusY (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YminusZ (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YminusZ (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZminusX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ZminusX (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZminusY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ZminusY (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZminusZ (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ZminusZ (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_TiltX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TiltX (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_TiltY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TiltY (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_TiltZ (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TiltZ (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_DrawLimit (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DrawLimit (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_DrawBoundary (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DrawBoundary (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Delta2X (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Delta2X (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Delta2Y (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Delta2Y (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Delta2Z (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Delta2Z (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Delta3X (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Delta3X (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Delta3Y (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Delta3Y (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Delta3Z (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Delta3Z (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Delta4X (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Delta4X (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Delta4Y (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Delta4Y (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Delta4Z (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Delta4Z (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaximumX (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaximumY (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumZ (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaximumZ (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("88f7ad5a-1f78-430e-80c1-4fa7f24808f8"))
IObjectArrayRing : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParentObjectNumberCell))
    IEditorCellPtr ParentObjectNumberCell;
    __declspec(property(get=GetModeCell))
    IEditorCellPtr ModeCell;
    __declspec(property(get=GetNumberOfElementsCell))
    IEditorCellPtr NumberOfElementsCell;
    __declspec(property(get=GetRadiusACell))
    IEditorCellPtr RadiusACell;
    __declspec(property(get=GetAlphaCell))
    IEditorCellPtr AlphaCell;
    __declspec(property(get=GetBetaCell))
    IEditorCellPtr BetaCell;
    __declspec(property(get=GetGammaCell))
    IEditorCellPtr GammaCell;
    __declspec(property(get=GetDeltaCell))
    IEditorCellPtr DeltaCell;
    __declspec(property(get=GetEpsilonCell))
    IEditorCellPtr EpsilonCell;
    __declspec(property(get=GetParentObjectNumber,put=PutParentObjectNumber))
    long ParentObjectNumber;
    __declspec(property(get=GetMode,put=PutMode))
    long Mode;
    __declspec(property(get=GetNumberOfElements,put=PutNumberOfElements))
    long NumberOfElements;
    __declspec(property(get=GetRadiusA,put=PutRadiusA))
    double RadiusA;
    __declspec(property(get=GetAlpha,put=PutAlpha))
    double Alpha;
    __declspec(property(get=GetBeta,put=PutBeta))
    double Beta;
    __declspec(property(get=GetGamma,put=PutGamma))
    double Gamma;
    __declspec(property(get=GetDelta,put=PutDelta))
    double Delta;
    __declspec(property(get=GetEpsilon,put=PutEpsilon))
    double Epsilon;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetParentObjectNumberCell ( );
    IEditorCellPtr GetModeCell ( );
    IEditorCellPtr GetNumberOfElementsCell ( );
    IEditorCellPtr GetRadiusACell ( );
    IEditorCellPtr GetAlphaCell ( );
    IEditorCellPtr GetBetaCell ( );
    IEditorCellPtr GetGammaCell ( );
    IEditorCellPtr GetDeltaCell ( );
    IEditorCellPtr GetEpsilonCell ( );
    long GetParentObjectNumber ( );
    void PutParentObjectNumber (
        long pRetVal );
    long GetMode ( );
    void PutMode (
        long pRetVal );
    long GetNumberOfElements ( );
    void PutNumberOfElements (
        long pRetVal );
    double GetRadiusA ( );
    void PutRadiusA (
        double pRetVal );
    double GetAlpha ( );
    void PutAlpha (
        double pRetVal );
    double GetBeta ( );
    void PutBeta (
        double pRetVal );
    double GetGamma ( );
    void PutGamma (
        double pRetVal );
    double GetDelta ( );
    void PutDelta (
        double pRetVal );
    double GetEpsilon ( );
    void PutEpsilon (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ParentObjectNumberCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ModeCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfElementsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadiusACell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AlphaCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_BetaCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_GammaCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DeltaCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EpsilonCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ParentObjectNumber (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ParentObjectNumber (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Mode (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Mode (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfElements (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfElements (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadiusA (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RadiusA (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Alpha (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Alpha (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Beta (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Beta (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Gamma (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Gamma (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Delta (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Delta (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Epsilon (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Epsilon (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("1c763e72-6890-4aad-adae-42f5347f5367"))
IObjectAsphericSurface : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRadiusCell))
    IEditorCellPtr RadiusCell;
    __declspec(property(get=GetConicCell))
    IEditorCellPtr ConicCell;
    __declspec(property(get=GetMaxApertureCell))
    IEditorCellPtr MaxApertureCell;
    __declspec(property(get=GetMinApertureCell))
    IEditorCellPtr MinApertureCell;
    __declspec(property(get=GetNumberOfTermsCell))
    IEditorCellPtr NumberOfTermsCell;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetConic,put=PutConic))
    double Conic;
    __declspec(property(get=GetMaxAperture,put=PutMaxAperture))
    double MaxAperture;
    __declspec(property(get=GetMinAperture,put=PutMinAperture))
    double MinAperture;
    __declspec(property(get=GetNumberOfTerms,put=PutNumberOfTerms))
    long NumberOfTerms;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetRadiusCell ( );
    IEditorCellPtr GetConicCell ( );
    IEditorCellPtr GetMaxApertureCell ( );
    IEditorCellPtr GetMinApertureCell ( );
    IEditorCellPtr GetNumberOfTermsCell ( );
    IEditorCellPtr RPowerICell (
        long i );
    double GetRadius ( );
    void PutRadius (
        double pRetVal );
    double GetConic ( );
    void PutConic (
        double pRetVal );
    double GetMaxAperture ( );
    void PutMaxAperture (
        double pRetVal );
    double GetMinAperture ( );
    void PutMinAperture (
        double pRetVal );
    long GetNumberOfTerms ( );
    void PutNumberOfTerms (
        long pRetVal );
    double GetRPowerI (
        long i );
    HRESULT SetRPowerI (
        long i,
        double v );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RadiusCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ConicCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaxApertureCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinApertureCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfTermsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_RPowerICell (
        /*[in]*/ long i,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Conic (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaxAperture (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaxAperture (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinAperture (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MinAperture (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfTerms (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfTerms (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetRPowerI (
        /*[in]*/ long i,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetRPowerI (
        /*[in]*/ long i,
        /*[in]*/ double v ) = 0;
};

struct __declspec(uuid("d4abfe0c-1509-4693-ae69-eccb136ab795"))
IObjectAsphericSurface2 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRadiusCell))
    IEditorCellPtr RadiusCell;
    __declspec(property(get=GetConicCell))
    IEditorCellPtr ConicCell;
    __declspec(property(get=GetMaxXCell))
    IEditorCellPtr MaxXCell;
    __declspec(property(get=GetMaxYCell))
    IEditorCellPtr MaxYCell;
    __declspec(property(get=GetMinXCell))
    IEditorCellPtr MinXCell;
    __declspec(property(get=GetMinYCell))
    IEditorCellPtr MinYCell;
    __declspec(property(get=GetDecenterXCell))
    IEditorCellPtr DecenterXCell;
    __declspec(property(get=GetDecenterYCell))
    IEditorCellPtr DecenterYCell;
    __declspec(property(get=GetIsRectangleCell))
    IEditorCellPtr IsRectangleCell;
    __declspec(property(get=GetNumberOfTermsCell))
    IEditorCellPtr NumberOfTermsCell;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetConic,put=PutConic))
    double Conic;
    __declspec(property(get=GetMaxX,put=PutMaxX))
    double MaxX;
    __declspec(property(get=GetMaxY,put=PutMaxY))
    double MaxY;
    __declspec(property(get=GetMinX,put=PutMinX))
    double MinX;
    __declspec(property(get=GetMinY,put=PutMinY))
    double MinY;
    __declspec(property(get=GetDecenterX,put=PutDecenterX))
    double DecenterX;
    __declspec(property(get=GetDecenterY,put=PutDecenterY))
    double DecenterY;
    __declspec(property(get=GetIsRectangle,put=PutIsRectangle))
    VARIANT_BOOL IsRectangle;
    __declspec(property(get=GetNumberOfTerms,put=PutNumberOfTerms))
    long NumberOfTerms;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetRadiusCell ( );
    IEditorCellPtr GetConicCell ( );
    IEditorCellPtr GetMaxXCell ( );
    IEditorCellPtr GetMaxYCell ( );
    IEditorCellPtr GetMinXCell ( );
    IEditorCellPtr GetMinYCell ( );
    IEditorCellPtr GetDecenterXCell ( );
    IEditorCellPtr GetDecenterYCell ( );
    IEditorCellPtr GetIsRectangleCell ( );
    IEditorCellPtr GetNumberOfTermsCell ( );
    IEditorCellPtr RPowerICell (
        long i );
    double GetRadius ( );
    void PutRadius (
        double pRetVal );
    double GetConic ( );
    void PutConic (
        double pRetVal );
    double GetMaxX ( );
    void PutMaxX (
        double pRetVal );
    double GetMaxY ( );
    void PutMaxY (
        double pRetVal );
    double GetMinX ( );
    void PutMinX (
        double pRetVal );
    double GetMinY ( );
    void PutMinY (
        double pRetVal );
    double GetDecenterX ( );
    void PutDecenterX (
        double pRetVal );
    double GetDecenterY ( );
    void PutDecenterY (
        double pRetVal );
    VARIANT_BOOL GetIsRectangle ( );
    void PutIsRectangle (
        VARIANT_BOOL pRetVal );
    long GetNumberOfTerms ( );
    void PutNumberOfTerms (
        long pRetVal );
    double GetRPowerI (
        long i );
    HRESULT SetRPowerI (
        long i,
        double v );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RadiusCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ConicCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaxXCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaxYCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinXCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinYCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DecenterXCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DecenterYCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsRectangleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfTermsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_RPowerICell (
        /*[in]*/ long i,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Conic (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaxX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaxX (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaxY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaxY (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MinX (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MinY (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_DecenterX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DecenterX (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_DecenterY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DecenterY (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsRectangle (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsRectangle (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfTerms (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfTerms (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetRPowerI (
        /*[in]*/ long i,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetRPowerI (
        /*[in]*/ long i,
        /*[in]*/ double v ) = 0;
};

struct __declspec(uuid("0ade32ac-7446-41da-a0eb-7b98d0e388b3"))
IObjectAxiconSurface : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLengthCell))
    IEditorCellPtr LengthCell;
    __declspec(property(get=GetCzCell))
    IEditorCellPtr CzCell;
    __declspec(property(get=GetCyCell))
    IEditorCellPtr CyCell;
    __declspec(property(get=GetLength,put=PutLength))
    double Length;
    __declspec(property(get=GetCz,put=PutCz))
    double Cz;
    __declspec(property(get=GetCy,put=PutCy))
    double Cy;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetLengthCell ( );
    IEditorCellPtr GetCzCell ( );
    IEditorCellPtr GetCyCell ( );
    double GetLength ( );
    void PutLength (
        double pRetVal );
    double GetCz ( );
    void PutCz (
        double pRetVal );
    double GetCy ( );
    void PutCy (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LengthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CzCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CyCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Length (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Cz (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Cz (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Cy (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Cy (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("187fac6c-b789-4fec-b779-7129d15da9b3"))
IObjectBiconicLens : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRadialHeightCell))
    IEditorCellPtr RadialHeightCell;
    __declspec(property(get=GetXHalfWidthCell))
    IEditorCellPtr XHalfWidthCell;
    __declspec(property(get=GetThicknessCell))
    IEditorCellPtr ThicknessCell;
    __declspec(property(get=GetRX1Cell))
    IEditorCellPtr RX1Cell;
    __declspec(property(get=GetRY1Cell))
    IEditorCellPtr RY1Cell;
    __declspec(property(get=GetKX1Cell))
    IEditorCellPtr KX1Cell;
    __declspec(property(get=GetKY1Cell))
    IEditorCellPtr KY1Cell;
    __declspec(property(get=GetRX2Cell))
    IEditorCellPtr RX2Cell;
    __declspec(property(get=GetRY2Cell))
    IEditorCellPtr RY2Cell;
    __declspec(property(get=GetKX2Cell))
    IEditorCellPtr KX2Cell;
    __declspec(property(get=GetKY2Cell))
    IEditorCellPtr KY2Cell;
    __declspec(property(get=GetRadialHeight,put=PutRadialHeight))
    double RadialHeight;
    __declspec(property(get=GetXHalfWidth,put=PutXHalfWidth))
    double XHalfWidth;
    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness;
    __declspec(property(get=GetRX1,put=PutRX1))
    double RX1;
    __declspec(property(get=GetRY1,put=PutRY1))
    double RY1;
    __declspec(property(get=GetKX1,put=PutKX1))
    double KX1;
    __declspec(property(get=GetKY1,put=PutKY1))
    double KY1;
    __declspec(property(get=GetRX2,put=PutRX2))
    double RX2;
    __declspec(property(get=GetRY2,put=PutRY2))
    double RY2;
    __declspec(property(get=GetKX2,put=PutKX2))
    double KX2;
    __declspec(property(get=GetKY2,put=PutKY2))
    double KY2;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetRadialHeightCell ( );
    IEditorCellPtr GetXHalfWidthCell ( );
    IEditorCellPtr GetThicknessCell ( );
    IEditorCellPtr GetRX1Cell ( );
    IEditorCellPtr GetRY1Cell ( );
    IEditorCellPtr GetKX1Cell ( );
    IEditorCellPtr GetKY1Cell ( );
    IEditorCellPtr GetRX2Cell ( );
    IEditorCellPtr GetRY2Cell ( );
    IEditorCellPtr GetKX2Cell ( );
    IEditorCellPtr GetKY2Cell ( );
    double GetRadialHeight ( );
    void PutRadialHeight (
        double pRetVal );
    double GetXHalfWidth ( );
    void PutXHalfWidth (
        double pRetVal );
    double GetThickness ( );
    void PutThickness (
        double pRetVal );
    double GetRX1 ( );
    void PutRX1 (
        double pRetVal );
    double GetRY1 ( );
    void PutRY1 (
        double pRetVal );
    double GetKX1 ( );
    void PutKX1 (
        double pRetVal );
    double GetKY1 ( );
    void PutKY1 (
        double pRetVal );
    double GetRX2 ( );
    void PutRX2 (
        double pRetVal );
    double GetRY2 ( );
    void PutRY2 (
        double pRetVal );
    double GetKX2 ( );
    void PutKX2 (
        double pRetVal );
    double GetKY2 ( );
    void PutKY2 (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RadialHeightCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ThicknessCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RX1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RY1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_KX1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_KY1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RX2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RY2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_KX2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_KY2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadialHeight (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RadialHeight (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_XHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Thickness (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Thickness (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RX1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RX1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RY1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RY1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_KX1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_KX1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_KY1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_KY1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RX2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RX2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RY2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RY2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_KX2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_KX2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_KY2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_KY2 (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("17d4b5ec-75df-4016-8212-7e5dbfb926a7"))
IObjectBiconicSurface : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRadiusXCell))
    IEditorCellPtr RadiusXCell;
    __declspec(property(get=GetRadiusYCell))
    IEditorCellPtr RadiusYCell;
    __declspec(property(get=GetConicXCell))
    IEditorCellPtr ConicXCell;
    __declspec(property(get=GetConicYCell))
    IEditorCellPtr ConicYCell;
    __declspec(property(get=GetMaxXApertureCell))
    IEditorCellPtr MaxXApertureCell;
    __declspec(property(get=GetMaxYApertureCell))
    IEditorCellPtr MaxYApertureCell;
    __declspec(property(get=GetMinXApertureCell))
    IEditorCellPtr MinXApertureCell;
    __declspec(property(get=GetMinYApertureCell))
    IEditorCellPtr MinYApertureCell;
    __declspec(property(get=GetIsRectangleCell))
    IEditorCellPtr IsRectangleCell;
    __declspec(property(get=GetIsTopHyperCell))
    IEditorCellPtr IsTopHyperCell;
    __declspec(property(get=GetIsBottomHyperCell))
    IEditorCellPtr IsBottomHyperCell;
    __declspec(property(get=GetRadiusX,put=PutRadiusX))
    double RadiusX;
    __declspec(property(get=GetRadiusY,put=PutRadiusY))
    double RadiusY;
    __declspec(property(get=GetConicX,put=PutConicX))
    double ConicX;
    __declspec(property(get=GetConicY,put=PutConicY))
    double ConicY;
    __declspec(property(get=GetMaxXAperture,put=PutMaxXAperture))
    double MaxXAperture;
    __declspec(property(get=GetMaxYAperture,put=PutMaxYAperture))
    double MaxYAperture;
    __declspec(property(get=GetMinXAperture,put=PutMinXAperture))
    double MinXAperture;
    __declspec(property(get=GetMinYAperture,put=PutMinYAperture))
    double MinYAperture;
    __declspec(property(get=GetIsRectangle,put=PutIsRectangle))
    VARIANT_BOOL IsRectangle;
    __declspec(property(get=GetIsTopHyper,put=PutIsTopHyper))
    VARIANT_BOOL IsTopHyper;
    __declspec(property(get=GetIsBottomHyper,put=PutIsBottomHyper))
    VARIANT_BOOL IsBottomHyper;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetRadiusXCell ( );
    IEditorCellPtr GetRadiusYCell ( );
    IEditorCellPtr GetConicXCell ( );
    IEditorCellPtr GetConicYCell ( );
    IEditorCellPtr GetMaxXApertureCell ( );
    IEditorCellPtr GetMaxYApertureCell ( );
    IEditorCellPtr GetMinXApertureCell ( );
    IEditorCellPtr GetMinYApertureCell ( );
    IEditorCellPtr GetIsRectangleCell ( );
    IEditorCellPtr GetIsTopHyperCell ( );
    IEditorCellPtr GetIsBottomHyperCell ( );
    double GetRadiusX ( );
    void PutRadiusX (
        double pRetVal );
    double GetRadiusY ( );
    void PutRadiusY (
        double pRetVal );
    double GetConicX ( );
    void PutConicX (
        double pRetVal );
    double GetConicY ( );
    void PutConicY (
        double pRetVal );
    double GetMaxXAperture ( );
    void PutMaxXAperture (
        double pRetVal );
    double GetMaxYAperture ( );
    void PutMaxYAperture (
        double pRetVal );
    double GetMinXAperture ( );
    void PutMinXAperture (
        double pRetVal );
    double GetMinYAperture ( );
    void PutMinYAperture (
        double pRetVal );
    VARIANT_BOOL GetIsRectangle ( );
    void PutIsRectangle (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIsTopHyper ( );
    void PutIsTopHyper (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIsBottomHyper ( );
    void PutIsBottomHyper (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RadiusXCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadiusYCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ConicXCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ConicYCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaxXApertureCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaxYApertureCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinXApertureCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinYApertureCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsRectangleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsTopHyperCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsBottomHyperCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadiusX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RadiusX (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadiusY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RadiusY (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ConicX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ConicX (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ConicY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ConicY (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaxXAperture (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaxXAperture (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaxYAperture (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaxYAperture (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinXAperture (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MinXAperture (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinYAperture (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MinYAperture (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsRectangle (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsRectangle (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsTopHyper (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsTopHyper (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsBottomHyper (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsBottomHyper (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("c0ed5a86-8d05-4656-b4bb-7ca0580d118f"))
IObjectBiconicZernike : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRadialHeightCell))
    IEditorCellPtr RadialHeightCell;
    __declspec(property(get=GetXHalfWidthCell))
    IEditorCellPtr XHalfWidthCell;
    __declspec(property(get=GetThicknessCell))
    IEditorCellPtr ThicknessCell;
    __declspec(property(get=GetFrontRadiusCell))
    IEditorCellPtr FrontRadiusCell;
    __declspec(property(get=GetFrontConicCell))
    IEditorCellPtr FrontConicCell;
    __declspec(property(get=GetRearRadiusXCell))
    IEditorCellPtr RearRadiusXCell;
    __declspec(property(get=GetRearRadiusYCell))
    IEditorCellPtr RearRadiusYCell;
    __declspec(property(get=GetRearConicXCell))
    IEditorCellPtr RearConicXCell;
    __declspec(property(get=GetRearConicYCell))
    IEditorCellPtr RearConicYCell;
    __declspec(property(get=GetNumberZernikeTermsCell))
    IEditorCellPtr NumberZernikeTermsCell;
    __declspec(property(get=GetNormRadiusCell))
    IEditorCellPtr NormRadiusCell;
    __declspec(property(get=GetRadialHeight,put=PutRadialHeight))
    double RadialHeight;
    __declspec(property(get=GetXHalfWidth,put=PutXHalfWidth))
    double XHalfWidth;
    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness;
    __declspec(property(get=GetFrontRadius,put=PutFrontRadius))
    double FrontRadius;
    __declspec(property(get=GetFrontConic,put=PutFrontConic))
    double FrontConic;
    __declspec(property(get=GetRearRadiusX,put=PutRearRadiusX))
    double RearRadiusX;
    __declspec(property(get=GetRearRadiusY,put=PutRearRadiusY))
    double RearRadiusY;
    __declspec(property(get=GetRearConicX,put=PutRearConicX))
    double RearConicX;
    __declspec(property(get=GetRearConicY,put=PutRearConicY))
    double RearConicY;
    __declspec(property(get=GetNumberZernikeTerms,put=PutNumberZernikeTerms))
    long NumberZernikeTerms;
    __declspec(property(get=GetNormRadius,put=PutNormRadius))
    double NormRadius;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetRadialHeightCell ( );
    IEditorCellPtr GetXHalfWidthCell ( );
    IEditorCellPtr GetThicknessCell ( );
    IEditorCellPtr GetFrontRadiusCell ( );
    IEditorCellPtr GetFrontConicCell ( );
    IEditorCellPtr GetRearRadiusXCell ( );
    IEditorCellPtr GetRearRadiusYCell ( );
    IEditorCellPtr GetRearConicXCell ( );
    IEditorCellPtr GetRearConicYCell ( );
    IEditorCellPtr GetNumberZernikeTermsCell ( );
    IEditorCellPtr GetNormRadiusCell ( );
    IEditorCellPtr XPowerICell (
        long i );
    IEditorCellPtr YPowerICell (
        long i );
    IEditorCellPtr ZPowerICell (
        long i );
    double GetRadialHeight ( );
    void PutRadialHeight (
        double pRetVal );
    double GetXHalfWidth ( );
    void PutXHalfWidth (
        double pRetVal );
    double GetThickness ( );
    void PutThickness (
        double pRetVal );
    double GetFrontRadius ( );
    void PutFrontRadius (
        double pRetVal );
    double GetFrontConic ( );
    void PutFrontConic (
        double pRetVal );
    double GetRearRadiusX ( );
    void PutRearRadiusX (
        double pRetVal );
    double GetRearRadiusY ( );
    void PutRearRadiusY (
        double pRetVal );
    double GetRearConicX ( );
    void PutRearConicX (
        double pRetVal );
    double GetRearConicY ( );
    void PutRearConicY (
        double pRetVal );
    long GetNumberZernikeTerms ( );
    void PutNumberZernikeTerms (
        long pRetVal );
    double GetNormRadius ( );
    void PutNormRadius (
        double pRetVal );
    double GetXPowerI (
        long i );
    HRESULT SetXPowerI (
        long i,
        double v );
    double GetYPowerI (
        long i );
    HRESULT SetYPowerI (
        long i,
        double v );
    double GetZPowerI (
        long i );
    HRESULT SetZPowerI (
        long i,
        double v );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RadialHeightCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ThicknessCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontRadiusCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontConicCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRadiusXCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRadiusYCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearConicXCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearConicYCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberZernikeTermsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NormRadiusCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_XPowerICell (
        /*[in]*/ long i,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_YPowerICell (
        /*[in]*/ long i,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ZPowerICell (
        /*[in]*/ long i,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadialHeight (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RadialHeight (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_XHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Thickness (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Thickness (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontRadius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontRadius (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontConic (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontConic (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRadiusX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearRadiusX (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRadiusY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearRadiusY (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearConicX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearConicX (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearConicY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearConicY (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberZernikeTerms (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberZernikeTerms (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_NormRadius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NormRadius (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetXPowerI (
        /*[in]*/ long i,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetXPowerI (
        /*[in]*/ long i,
        /*[in]*/ double v ) = 0;
      virtual HRESULT __stdcall raw_GetYPowerI (
        /*[in]*/ long i,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetYPowerI (
        /*[in]*/ long i,
        /*[in]*/ double v ) = 0;
      virtual HRESULT __stdcall raw_GetZPowerI (
        /*[in]*/ long i,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetZPowerI (
        /*[in]*/ long i,
        /*[in]*/ double v ) = 0;
};

struct __declspec(uuid("1678d195-99bd-4738-b535-487216f91258"))
IObjectBiconicZernikeSurface : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetXHalfWidthCell))
    IEditorCellPtr XHalfWidthCell;
    __declspec(property(get=GetYHalfWidthCell))
    IEditorCellPtr YHalfWidthCell;
    __declspec(property(get=GetRadiusXCell))
    IEditorCellPtr RadiusXCell;
    __declspec(property(get=GetRadiusYCell))
    IEditorCellPtr RadiusYCell;
    __declspec(property(get=GetConicXCell))
    IEditorCellPtr ConicXCell;
    __declspec(property(get=GetConicYCell))
    IEditorCellPtr ConicYCell;
    __declspec(property(get=GetBiconicDecXCell))
    IEditorCellPtr BiconicDecXCell;
    __declspec(property(get=GetBiconicDecYCell))
    IEditorCellPtr BiconicDecYCell;
    __declspec(property(get=GetZernikeDecXCell))
    IEditorCellPtr ZernikeDecXCell;
    __declspec(property(get=GetZernikeDecYCell))
    IEditorCellPtr ZernikeDecYCell;
    __declspec(property(get=GetNumberZernikeTermsCell))
    IEditorCellPtr NumberZernikeTermsCell;
    __declspec(property(get=GetNormRadiusCell))
    IEditorCellPtr NormRadiusCell;
    __declspec(property(get=GetXHalfWidth,put=PutXHalfWidth))
    double XHalfWidth;
    __declspec(property(get=GetYHalfWidth,put=PutYHalfWidth))
    double YHalfWidth;
    __declspec(property(get=GetRadiusX,put=PutRadiusX))
    double RadiusX;
    __declspec(property(get=GetRadiusY,put=PutRadiusY))
    double RadiusY;
    __declspec(property(get=GetConicX,put=PutConicX))
    double ConicX;
    __declspec(property(get=GetConicY,put=PutConicY))
    double ConicY;
    __declspec(property(get=GetBiconicDecX,put=PutBiconicDecX))
    double BiconicDecX;
    __declspec(property(get=GetBiconicDecY,put=PutBiconicDecY))
    double BiconicDecY;
    __declspec(property(get=GetZernikeDecX,put=PutZernikeDecX))
    double ZernikeDecX;
    __declspec(property(get=GetZernikeDecY,put=PutZernikeDecY))
    double ZernikeDecY;
    __declspec(property(get=GetNumberZernikeTerms,put=PutNumberZernikeTerms))
    long NumberZernikeTerms;
    __declspec(property(get=GetNormRadius,put=PutNormRadius))
    double NormRadius;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetXHalfWidthCell ( );
    IEditorCellPtr GetYHalfWidthCell ( );
    IEditorCellPtr GetRadiusXCell ( );
    IEditorCellPtr GetRadiusYCell ( );
    IEditorCellPtr GetConicXCell ( );
    IEditorCellPtr GetConicYCell ( );
    IEditorCellPtr GetBiconicDecXCell ( );
    IEditorCellPtr GetBiconicDecYCell ( );
    IEditorCellPtr GetZernikeDecXCell ( );
    IEditorCellPtr GetZernikeDecYCell ( );
    IEditorCellPtr GetNumberZernikeTermsCell ( );
    IEditorCellPtr GetNormRadiusCell ( );
    IEditorCellPtr XPowerICell (
        long i );
    IEditorCellPtr YPowerICell (
        long i );
    IEditorCellPtr ZPowerICell (
        long i );
    double GetXHalfWidth ( );
    void PutXHalfWidth (
        double pRetVal );
    double GetYHalfWidth ( );
    void PutYHalfWidth (
        double pRetVal );
    double GetRadiusX ( );
    void PutRadiusX (
        double pRetVal );
    double GetRadiusY ( );
    void PutRadiusY (
        double pRetVal );
    double GetConicX ( );
    void PutConicX (
        double pRetVal );
    double GetConicY ( );
    void PutConicY (
        double pRetVal );
    double GetBiconicDecX ( );
    void PutBiconicDecX (
        double pRetVal );
    double GetBiconicDecY ( );
    void PutBiconicDecY (
        double pRetVal );
    double GetZernikeDecX ( );
    void PutZernikeDecX (
        double pRetVal );
    double GetZernikeDecY ( );
    void PutZernikeDecY (
        double pRetVal );
    long GetNumberZernikeTerms ( );
    void PutNumberZernikeTerms (
        long pRetVal );
    double GetNormRadius ( );
    void PutNormRadius (
        double pRetVal );
    double GetXPowerI (
        long i );
    HRESULT SetXPowerI (
        long i,
        double v );
    double GetYPowerI (
        long i );
    HRESULT SetYPowerI (
        long i,
        double v );
    double GetZPowerI (
        long i );
    HRESULT SetZPowerI (
        long i,
        double v );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_XHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadiusXCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadiusYCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ConicXCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ConicYCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_BiconicDecXCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_BiconicDecYCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZernikeDecXCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZernikeDecYCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberZernikeTermsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NormRadiusCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_XPowerICell (
        /*[in]*/ long i,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_YPowerICell (
        /*[in]*/ long i,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ZPowerICell (
        /*[in]*/ long i,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadiusX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RadiusX (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadiusY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RadiusY (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ConicX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ConicX (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ConicY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ConicY (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_BiconicDecX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BiconicDecX (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_BiconicDecY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BiconicDecY (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZernikeDecX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ZernikeDecX (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZernikeDecY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ZernikeDecY (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberZernikeTerms (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberZernikeTerms (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_NormRadius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NormRadius (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetXPowerI (
        /*[in]*/ long i,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetXPowerI (
        /*[in]*/ long i,
        /*[in]*/ double v ) = 0;
      virtual HRESULT __stdcall raw_GetYPowerI (
        /*[in]*/ long i,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetYPowerI (
        /*[in]*/ long i,
        /*[in]*/ double v ) = 0;
      virtual HRESULT __stdcall raw_GetZPowerI (
        /*[in]*/ long i,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetZPowerI (
        /*[in]*/ long i,
        /*[in]*/ double v ) = 0;
};

struct __declspec(uuid("36373754-f021-44c0-8035-46548aa27ba5"))
IObjectXYPolynomial : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetX1Y0Cell))
    IEditorCellPtr X1Y0Cell;
    __declspec(property(get=GetX0Y1Cell))
    IEditorCellPtr X0Y1Cell;
    __declspec(property(get=GetX2Y0Cell))
    IEditorCellPtr X2Y0Cell;
    __declspec(property(get=GetX1Y1Cell))
    IEditorCellPtr X1Y1Cell;
    __declspec(property(get=GetX0Y2Cell))
    IEditorCellPtr X0Y2Cell;
    __declspec(property(get=GetX3Y0Cell))
    IEditorCellPtr X3Y0Cell;
    __declspec(property(get=GetX2Y1Cell))
    IEditorCellPtr X2Y1Cell;
    __declspec(property(get=GetX1Y2Cell))
    IEditorCellPtr X1Y2Cell;
    __declspec(property(get=GetX0Y3Cell))
    IEditorCellPtr X0Y3Cell;
    __declspec(property(get=GetX4Y0Cell))
    IEditorCellPtr X4Y0Cell;
    __declspec(property(get=GetX3Y1Cell))
    IEditorCellPtr X3Y1Cell;
    __declspec(property(get=GetX2Y2Cell))
    IEditorCellPtr X2Y2Cell;
    __declspec(property(get=GetX1Y3Cell))
    IEditorCellPtr X1Y3Cell;
    __declspec(property(get=GetX0Y4Cell))
    IEditorCellPtr X0Y4Cell;
    __declspec(property(get=GetX5Y0Cell))
    IEditorCellPtr X5Y0Cell;
    __declspec(property(get=GetX4Y1Cell))
    IEditorCellPtr X4Y1Cell;
    __declspec(property(get=GetX3Y2Cell))
    IEditorCellPtr X3Y2Cell;
    __declspec(property(get=GetX2Y3Cell))
    IEditorCellPtr X2Y3Cell;
    __declspec(property(get=GetX1Y4Cell))
    IEditorCellPtr X1Y4Cell;
    __declspec(property(get=GetX0Y5Cell))
    IEditorCellPtr X0Y5Cell;
    __declspec(property(get=GetX6Y0Cell))
    IEditorCellPtr X6Y0Cell;
    __declspec(property(get=GetX5Y1Cell))
    IEditorCellPtr X5Y1Cell;
    __declspec(property(get=GetX4Y2Cell))
    IEditorCellPtr X4Y2Cell;
    __declspec(property(get=GetX3Y3Cell))
    IEditorCellPtr X3Y3Cell;
    __declspec(property(get=GetX2Y4Cell))
    IEditorCellPtr X2Y4Cell;
    __declspec(property(get=GetX1Y5Cell))
    IEditorCellPtr X1Y5Cell;
    __declspec(property(get=GetX0Y6Cell))
    IEditorCellPtr X0Y6Cell;
    __declspec(property(get=GetX7Y0Cell))
    IEditorCellPtr X7Y0Cell;
    __declspec(property(get=GetX6Y1Cell))
    IEditorCellPtr X6Y1Cell;
    __declspec(property(get=GetX5Y2Cell))
    IEditorCellPtr X5Y2Cell;
    __declspec(property(get=GetX4Y3Cell))
    IEditorCellPtr X4Y3Cell;
    __declspec(property(get=GetX3Y4Cell))
    IEditorCellPtr X3Y4Cell;
    __declspec(property(get=GetX2Y5Cell))
    IEditorCellPtr X2Y5Cell;
    __declspec(property(get=GetX1Y6Cell))
    IEditorCellPtr X1Y6Cell;
    __declspec(property(get=GetX0Y7Cell))
    IEditorCellPtr X0Y7Cell;
    __declspec(property(get=GetX8Y0Cell))
    IEditorCellPtr X8Y0Cell;
    __declspec(property(get=GetX7Y1Cell))
    IEditorCellPtr X7Y1Cell;
    __declspec(property(get=GetX6Y2Cell))
    IEditorCellPtr X6Y2Cell;
    __declspec(property(get=GetX5Y3Cell))
    IEditorCellPtr X5Y3Cell;
    __declspec(property(get=GetX4Y4Cell))
    IEditorCellPtr X4Y4Cell;
    __declspec(property(get=GetX3Y5Cell))
    IEditorCellPtr X3Y5Cell;
    __declspec(property(get=GetX2Y6Cell))
    IEditorCellPtr X2Y6Cell;
    __declspec(property(get=GetX1Y7Cell))
    IEditorCellPtr X1Y7Cell;
    __declspec(property(get=GetX0Y8Cell))
    IEditorCellPtr X0Y8Cell;
    __declspec(property(get=GetX9Y0Cell))
    IEditorCellPtr X9Y0Cell;
    __declspec(property(get=GetX8Y1Cell))
    IEditorCellPtr X8Y1Cell;
    __declspec(property(get=GetX7Y2Cell))
    IEditorCellPtr X7Y2Cell;
    __declspec(property(get=GetX6Y3Cell))
    IEditorCellPtr X6Y3Cell;
    __declspec(property(get=GetX5Y4Cell))
    IEditorCellPtr X5Y4Cell;
    __declspec(property(get=GetX4Y5Cell))
    IEditorCellPtr X4Y5Cell;
    __declspec(property(get=GetX3Y6Cell))
    IEditorCellPtr X3Y6Cell;
    __declspec(property(get=GetX2Y7Cell))
    IEditorCellPtr X2Y7Cell;
    __declspec(property(get=GetX1Y8Cell))
    IEditorCellPtr X1Y8Cell;
    __declspec(property(get=GetX0Y9Cell))
    IEditorCellPtr X0Y9Cell;
    __declspec(property(get=GetX10Y0Cell))
    IEditorCellPtr X10Y0Cell;
    __declspec(property(get=GetX9Y1Cell))
    IEditorCellPtr X9Y1Cell;
    __declspec(property(get=GetX8Y2Cell))
    IEditorCellPtr X8Y2Cell;
    __declspec(property(get=GetX7Y3Cell))
    IEditorCellPtr X7Y3Cell;
    __declspec(property(get=GetX6Y4Cell))
    IEditorCellPtr X6Y4Cell;
    __declspec(property(get=GetX5Y5Cell))
    IEditorCellPtr X5Y5Cell;
    __declspec(property(get=GetX4Y6Cell))
    IEditorCellPtr X4Y6Cell;
    __declspec(property(get=GetX3Y7Cell))
    IEditorCellPtr X3Y7Cell;
    __declspec(property(get=GetX2Y8Cell))
    IEditorCellPtr X2Y8Cell;
    __declspec(property(get=GetX1Y9Cell))
    IEditorCellPtr X1Y9Cell;
    __declspec(property(get=GetX0Y10Cell))
    IEditorCellPtr X0Y10Cell;
    __declspec(property(get=GetX11Y0Cell))
    IEditorCellPtr X11Y0Cell;
    __declspec(property(get=GetX10Y1Cell))
    IEditorCellPtr X10Y1Cell;
    __declspec(property(get=GetX9Y2Cell))
    IEditorCellPtr X9Y2Cell;
    __declspec(property(get=GetX8Y3Cell))
    IEditorCellPtr X8Y3Cell;
    __declspec(property(get=GetX7Y4Cell))
    IEditorCellPtr X7Y4Cell;
    __declspec(property(get=GetX6Y5Cell))
    IEditorCellPtr X6Y5Cell;
    __declspec(property(get=GetX5Y6Cell))
    IEditorCellPtr X5Y6Cell;
    __declspec(property(get=GetX4Y7Cell))
    IEditorCellPtr X4Y7Cell;
    __declspec(property(get=GetX3Y8Cell))
    IEditorCellPtr X3Y8Cell;
    __declspec(property(get=GetX2Y9Cell))
    IEditorCellPtr X2Y9Cell;
    __declspec(property(get=GetX1Y10Cell))
    IEditorCellPtr X1Y10Cell;
    __declspec(property(get=GetX0Y11Cell))
    IEditorCellPtr X0Y11Cell;
    __declspec(property(get=GetX12Y0Cell))
    IEditorCellPtr X12Y0Cell;
    __declspec(property(get=GetX11Y1Cell))
    IEditorCellPtr X11Y1Cell;
    __declspec(property(get=GetX10Y2Cell))
    IEditorCellPtr X10Y2Cell;
    __declspec(property(get=GetX9Y3Cell))
    IEditorCellPtr X9Y3Cell;
    __declspec(property(get=GetX8Y4Cell))
    IEditorCellPtr X8Y4Cell;
    __declspec(property(get=GetX7Y5Cell))
    IEditorCellPtr X7Y5Cell;
    __declspec(property(get=GetX6Y6Cell))
    IEditorCellPtr X6Y6Cell;
    __declspec(property(get=GetX5Y7Cell))
    IEditorCellPtr X5Y7Cell;
    __declspec(property(get=GetX4Y8Cell))
    IEditorCellPtr X4Y8Cell;
    __declspec(property(get=GetX3Y9Cell))
    IEditorCellPtr X3Y9Cell;
    __declspec(property(get=GetX2Y10Cell))
    IEditorCellPtr X2Y10Cell;
    __declspec(property(get=GetX1Y11Cell))
    IEditorCellPtr X1Y11Cell;
    __declspec(property(get=GetX0Y12Cell))
    IEditorCellPtr X0Y12Cell;
    __declspec(property(get=GetX13Y0Cell))
    IEditorCellPtr X13Y0Cell;
    __declspec(property(get=GetX12Y1Cell))
    IEditorCellPtr X12Y1Cell;
    __declspec(property(get=GetX11Y2Cell))
    IEditorCellPtr X11Y2Cell;
    __declspec(property(get=GetX10Y3Cell))
    IEditorCellPtr X10Y3Cell;
    __declspec(property(get=GetX9Y4Cell))
    IEditorCellPtr X9Y4Cell;
    __declspec(property(get=GetX8Y5Cell))
    IEditorCellPtr X8Y5Cell;
    __declspec(property(get=GetX7Y6Cell))
    IEditorCellPtr X7Y6Cell;
    __declspec(property(get=GetX6Y7Cell))
    IEditorCellPtr X6Y7Cell;
    __declspec(property(get=GetX5Y8Cell))
    IEditorCellPtr X5Y8Cell;
    __declspec(property(get=GetX4Y9Cell))
    IEditorCellPtr X4Y9Cell;
    __declspec(property(get=GetX3Y10Cell))
    IEditorCellPtr X3Y10Cell;
    __declspec(property(get=GetX2Y11Cell))
    IEditorCellPtr X2Y11Cell;
    __declspec(property(get=GetX1Y12Cell))
    IEditorCellPtr X1Y12Cell;
    __declspec(property(get=GetX0Y13Cell))
    IEditorCellPtr X0Y13Cell;
    __declspec(property(get=GetX14Y0Cell))
    IEditorCellPtr X14Y0Cell;
    __declspec(property(get=GetX13Y1Cell))
    IEditorCellPtr X13Y1Cell;
    __declspec(property(get=GetX12Y2Cell))
    IEditorCellPtr X12Y2Cell;
    __declspec(property(get=GetX11Y3Cell))
    IEditorCellPtr X11Y3Cell;
    __declspec(property(get=GetX10Y4Cell))
    IEditorCellPtr X10Y4Cell;
    __declspec(property(get=GetX9Y5Cell))
    IEditorCellPtr X9Y5Cell;
    __declspec(property(get=GetX8Y6Cell))
    IEditorCellPtr X8Y6Cell;
    __declspec(property(get=GetX7Y7Cell))
    IEditorCellPtr X7Y7Cell;
    __declspec(property(get=GetX6Y8Cell))
    IEditorCellPtr X6Y8Cell;
    __declspec(property(get=GetX5Y9Cell))
    IEditorCellPtr X5Y9Cell;
    __declspec(property(get=GetX4Y10Cell))
    IEditorCellPtr X4Y10Cell;
    __declspec(property(get=GetX3Y11Cell))
    IEditorCellPtr X3Y11Cell;
    __declspec(property(get=GetX2Y12Cell))
    IEditorCellPtr X2Y12Cell;
    __declspec(property(get=GetX1Y13Cell))
    IEditorCellPtr X1Y13Cell;
    __declspec(property(get=GetX0Y14Cell))
    IEditorCellPtr X0Y14Cell;
    __declspec(property(get=GetX15Y0Cell))
    IEditorCellPtr X15Y0Cell;
    __declspec(property(get=GetX14Y1Cell))
    IEditorCellPtr X14Y1Cell;
    __declspec(property(get=GetX13Y2Cell))
    IEditorCellPtr X13Y2Cell;
    __declspec(property(get=GetX12Y3Cell))
    IEditorCellPtr X12Y3Cell;
    __declspec(property(get=GetX11Y4Cell))
    IEditorCellPtr X11Y4Cell;
    __declspec(property(get=GetX10Y5Cell))
    IEditorCellPtr X10Y5Cell;
    __declspec(property(get=GetX9Y6Cell))
    IEditorCellPtr X9Y6Cell;
    __declspec(property(get=GetX8Y7Cell))
    IEditorCellPtr X8Y7Cell;
    __declspec(property(get=GetX7Y8Cell))
    IEditorCellPtr X7Y8Cell;
    __declspec(property(get=GetX6Y9Cell))
    IEditorCellPtr X6Y9Cell;
    __declspec(property(get=GetX5Y10Cell))
    IEditorCellPtr X5Y10Cell;
    __declspec(property(get=GetX4Y11Cell))
    IEditorCellPtr X4Y11Cell;
    __declspec(property(get=GetX3Y12Cell))
    IEditorCellPtr X3Y12Cell;
    __declspec(property(get=GetX2Y13Cell))
    IEditorCellPtr X2Y13Cell;
    __declspec(property(get=GetX1Y14Cell))
    IEditorCellPtr X1Y14Cell;
    __declspec(property(get=GetX0Y15Cell))
    IEditorCellPtr X0Y15Cell;
    __declspec(property(get=GetX16Y0Cell))
    IEditorCellPtr X16Y0Cell;
    __declspec(property(get=GetX15Y1Cell))
    IEditorCellPtr X15Y1Cell;
    __declspec(property(get=GetX14Y2Cell))
    IEditorCellPtr X14Y2Cell;
    __declspec(property(get=GetX13Y3Cell))
    IEditorCellPtr X13Y3Cell;
    __declspec(property(get=GetX12Y4Cell))
    IEditorCellPtr X12Y4Cell;
    __declspec(property(get=GetX11Y5Cell))
    IEditorCellPtr X11Y5Cell;
    __declspec(property(get=GetX10Y6Cell))
    IEditorCellPtr X10Y6Cell;
    __declspec(property(get=GetX9Y7Cell))
    IEditorCellPtr X9Y7Cell;
    __declspec(property(get=GetX8Y8Cell))
    IEditorCellPtr X8Y8Cell;
    __declspec(property(get=GetX7Y9Cell))
    IEditorCellPtr X7Y9Cell;
    __declspec(property(get=GetX6Y10Cell))
    IEditorCellPtr X6Y10Cell;
    __declspec(property(get=GetX5Y11Cell))
    IEditorCellPtr X5Y11Cell;
    __declspec(property(get=GetX4Y12Cell))
    IEditorCellPtr X4Y12Cell;
    __declspec(property(get=GetX3Y13Cell))
    IEditorCellPtr X3Y13Cell;
    __declspec(property(get=GetX2Y14Cell))
    IEditorCellPtr X2Y14Cell;
    __declspec(property(get=GetX1Y15Cell))
    IEditorCellPtr X1Y15Cell;
    __declspec(property(get=GetX0Y16Cell))
    IEditorCellPtr X0Y16Cell;
    __declspec(property(get=GetX17Y0Cell))
    IEditorCellPtr X17Y0Cell;
    __declspec(property(get=GetX16Y1Cell))
    IEditorCellPtr X16Y1Cell;
    __declspec(property(get=GetX15Y2Cell))
    IEditorCellPtr X15Y2Cell;
    __declspec(property(get=GetX14Y3Cell))
    IEditorCellPtr X14Y3Cell;
    __declspec(property(get=GetX13Y4Cell))
    IEditorCellPtr X13Y4Cell;
    __declspec(property(get=GetX12Y5Cell))
    IEditorCellPtr X12Y5Cell;
    __declspec(property(get=GetX11Y6Cell))
    IEditorCellPtr X11Y6Cell;
    __declspec(property(get=GetX10Y7Cell))
    IEditorCellPtr X10Y7Cell;
    __declspec(property(get=GetX9Y8Cell))
    IEditorCellPtr X9Y8Cell;
    __declspec(property(get=GetX8Y9Cell))
    IEditorCellPtr X8Y9Cell;
    __declspec(property(get=GetX7Y10Cell))
    IEditorCellPtr X7Y10Cell;
    __declspec(property(get=GetX6Y11Cell))
    IEditorCellPtr X6Y11Cell;
    __declspec(property(get=GetX5Y12Cell))
    IEditorCellPtr X5Y12Cell;
    __declspec(property(get=GetX4Y13Cell))
    IEditorCellPtr X4Y13Cell;
    __declspec(property(get=GetX3Y14Cell))
    IEditorCellPtr X3Y14Cell;
    __declspec(property(get=GetX2Y15Cell))
    IEditorCellPtr X2Y15Cell;
    __declspec(property(get=GetX1Y16Cell))
    IEditorCellPtr X1Y16Cell;
    __declspec(property(get=GetX0Y17Cell))
    IEditorCellPtr X0Y17Cell;
    __declspec(property(get=GetX18Y0Cell))
    IEditorCellPtr X18Y0Cell;
    __declspec(property(get=GetX17Y1Cell))
    IEditorCellPtr X17Y1Cell;
    __declspec(property(get=GetX16Y2Cell))
    IEditorCellPtr X16Y2Cell;
    __declspec(property(get=GetX15Y3Cell))
    IEditorCellPtr X15Y3Cell;
    __declspec(property(get=GetX14Y4Cell))
    IEditorCellPtr X14Y4Cell;
    __declspec(property(get=GetX13Y5Cell))
    IEditorCellPtr X13Y5Cell;
    __declspec(property(get=GetX12Y6Cell))
    IEditorCellPtr X12Y6Cell;
    __declspec(property(get=GetX11Y7Cell))
    IEditorCellPtr X11Y7Cell;
    __declspec(property(get=GetX10Y8Cell))
    IEditorCellPtr X10Y8Cell;
    __declspec(property(get=GetX9Y9Cell))
    IEditorCellPtr X9Y9Cell;
    __declspec(property(get=GetX8Y10Cell))
    IEditorCellPtr X8Y10Cell;
    __declspec(property(get=GetX7Y11Cell))
    IEditorCellPtr X7Y11Cell;
    __declspec(property(get=GetX6Y12Cell))
    IEditorCellPtr X6Y12Cell;
    __declspec(property(get=GetX5Y13Cell))
    IEditorCellPtr X5Y13Cell;
    __declspec(property(get=GetX4Y14Cell))
    IEditorCellPtr X4Y14Cell;
    __declspec(property(get=GetX3Y15Cell))
    IEditorCellPtr X3Y15Cell;
    __declspec(property(get=GetX2Y16Cell))
    IEditorCellPtr X2Y16Cell;
    __declspec(property(get=GetX1Y17Cell))
    IEditorCellPtr X1Y17Cell;
    __declspec(property(get=GetX0Y18Cell))
    IEditorCellPtr X0Y18Cell;
    __declspec(property(get=GetX19Y0Cell))
    IEditorCellPtr X19Y0Cell;
    __declspec(property(get=GetX18Y1Cell))
    IEditorCellPtr X18Y1Cell;
    __declspec(property(get=GetX17Y2Cell))
    IEditorCellPtr X17Y2Cell;
    __declspec(property(get=GetX16Y3Cell))
    IEditorCellPtr X16Y3Cell;
    __declspec(property(get=GetX15Y4Cell))
    IEditorCellPtr X15Y4Cell;
    __declspec(property(get=GetX14Y5Cell))
    IEditorCellPtr X14Y5Cell;
    __declspec(property(get=GetX13Y6Cell))
    IEditorCellPtr X13Y6Cell;
    __declspec(property(get=GetX12Y7Cell))
    IEditorCellPtr X12Y7Cell;
    __declspec(property(get=GetX11Y8Cell))
    IEditorCellPtr X11Y8Cell;
    __declspec(property(get=GetX10Y9Cell))
    IEditorCellPtr X10Y9Cell;
    __declspec(property(get=GetX9Y10Cell))
    IEditorCellPtr X9Y10Cell;
    __declspec(property(get=GetX8Y11Cell))
    IEditorCellPtr X8Y11Cell;
    __declspec(property(get=GetX7Y12Cell))
    IEditorCellPtr X7Y12Cell;
    __declspec(property(get=GetX6Y13Cell))
    IEditorCellPtr X6Y13Cell;
    __declspec(property(get=GetX5Y14Cell))
    IEditorCellPtr X5Y14Cell;
    __declspec(property(get=GetX4Y15Cell))
    IEditorCellPtr X4Y15Cell;
    __declspec(property(get=GetX3Y16Cell))
    IEditorCellPtr X3Y16Cell;
    __declspec(property(get=GetX2Y17Cell))
    IEditorCellPtr X2Y17Cell;
    __declspec(property(get=GetX1Y18Cell))
    IEditorCellPtr X1Y18Cell;
    __declspec(property(get=GetX0Y19Cell))
    IEditorCellPtr X0Y19Cell;
    __declspec(property(get=GetX20Y0Cell))
    IEditorCellPtr X20Y0Cell;
    __declspec(property(get=GetX19Y1Cell))
    IEditorCellPtr X19Y1Cell;
    __declspec(property(get=GetX18Y2Cell))
    IEditorCellPtr X18Y2Cell;
    __declspec(property(get=GetX17Y3Cell))
    IEditorCellPtr X17Y3Cell;
    __declspec(property(get=GetX16Y4Cell))
    IEditorCellPtr X16Y4Cell;
    __declspec(property(get=GetX15Y5Cell))
    IEditorCellPtr X15Y5Cell;
    __declspec(property(get=GetX14Y6Cell))
    IEditorCellPtr X14Y6Cell;
    __declspec(property(get=GetX13Y7Cell))
    IEditorCellPtr X13Y7Cell;
    __declspec(property(get=GetX12Y8Cell))
    IEditorCellPtr X12Y8Cell;
    __declspec(property(get=GetX11Y9Cell))
    IEditorCellPtr X11Y9Cell;
    __declspec(property(get=GetX10Y10Cell))
    IEditorCellPtr X10Y10Cell;
    __declspec(property(get=GetX9Y11Cell))
    IEditorCellPtr X9Y11Cell;
    __declspec(property(get=GetX8Y12Cell))
    IEditorCellPtr X8Y12Cell;
    __declspec(property(get=GetX7Y13Cell))
    IEditorCellPtr X7Y13Cell;
    __declspec(property(get=GetX6Y14Cell))
    IEditorCellPtr X6Y14Cell;
    __declspec(property(get=GetX5Y15Cell))
    IEditorCellPtr X5Y15Cell;
    __declspec(property(get=GetX4Y16Cell))
    IEditorCellPtr X4Y16Cell;
    __declspec(property(get=GetX3Y17Cell))
    IEditorCellPtr X3Y17Cell;
    __declspec(property(get=GetX2Y18Cell))
    IEditorCellPtr X2Y18Cell;
    __declspec(property(get=GetX1Y19Cell))
    IEditorCellPtr X1Y19Cell;
    __declspec(property(get=GetX0Y20Cell))
    IEditorCellPtr X0Y20Cell;
    __declspec(property(get=GetX21Y0Cell))
    IEditorCellPtr X21Y0Cell;
    __declspec(property(get=GetX20Y1Cell))
    IEditorCellPtr X20Y1Cell;
    __declspec(property(get=GetX19Y2Cell))
    IEditorCellPtr X19Y2Cell;
    __declspec(property(get=GetX18Y3Cell))
    IEditorCellPtr X18Y3Cell;
    __declspec(property(get=GetX17Y4Cell))
    IEditorCellPtr X17Y4Cell;
    __declspec(property(get=GetX16Y5Cell))
    IEditorCellPtr X16Y5Cell;
    __declspec(property(get=GetX15Y6Cell))
    IEditorCellPtr X15Y6Cell;
    __declspec(property(get=GetX14Y7Cell))
    IEditorCellPtr X14Y7Cell;
    __declspec(property(get=GetX13Y8Cell))
    IEditorCellPtr X13Y8Cell;
    __declspec(property(get=GetX12Y9Cell))
    IEditorCellPtr X12Y9Cell;
    __declspec(property(get=GetX11Y10Cell))
    IEditorCellPtr X11Y10Cell;
    __declspec(property(get=GetX10Y11Cell))
    IEditorCellPtr X10Y11Cell;
    __declspec(property(get=GetX9Y12Cell))
    IEditorCellPtr X9Y12Cell;
    __declspec(property(get=GetX8Y13Cell))
    IEditorCellPtr X8Y13Cell;
    __declspec(property(get=GetX7Y14Cell))
    IEditorCellPtr X7Y14Cell;
    __declspec(property(get=GetX6Y15Cell))
    IEditorCellPtr X6Y15Cell;
    __declspec(property(get=GetX5Y16Cell))
    IEditorCellPtr X5Y16Cell;
    __declspec(property(get=GetX4Y17Cell))
    IEditorCellPtr X4Y17Cell;
    __declspec(property(get=GetX3Y18Cell))
    IEditorCellPtr X3Y18Cell;
    __declspec(property(get=GetX2Y19Cell))
    IEditorCellPtr X2Y19Cell;
    __declspec(property(get=GetX1Y0,put=PutX1Y0))
    double X1Y0;
    __declspec(property(get=GetX0Y1,put=PutX0Y1))
    double X0Y1;
    __declspec(property(get=GetX2Y0,put=PutX2Y0))
    double X2Y0;
    __declspec(property(get=GetX1Y1,put=PutX1Y1))
    double X1Y1;
    __declspec(property(get=GetX0Y2,put=PutX0Y2))
    double X0Y2;
    __declspec(property(get=GetX3Y0,put=PutX3Y0))
    double X3Y0;
    __declspec(property(get=GetX2Y1,put=PutX2Y1))
    double X2Y1;
    __declspec(property(get=GetX1Y2,put=PutX1Y2))
    double X1Y2;
    __declspec(property(get=GetX0Y3,put=PutX0Y3))
    double X0Y3;
    __declspec(property(get=GetX4Y0,put=PutX4Y0))
    double X4Y0;
    __declspec(property(get=GetX3Y1,put=PutX3Y1))
    double X3Y1;
    __declspec(property(get=GetX2Y2,put=PutX2Y2))
    double X2Y2;
    __declspec(property(get=GetX1Y3,put=PutX1Y3))
    double X1Y3;
    __declspec(property(get=GetX0Y4,put=PutX0Y4))
    double X0Y4;
    __declspec(property(get=GetX5Y0,put=PutX5Y0))
    double X5Y0;
    __declspec(property(get=GetX4Y1,put=PutX4Y1))
    double X4Y1;
    __declspec(property(get=GetX3Y2,put=PutX3Y2))
    double X3Y2;
    __declspec(property(get=GetX2Y3,put=PutX2Y3))
    double X2Y3;
    __declspec(property(get=GetX1Y4,put=PutX1Y4))
    double X1Y4;
    __declspec(property(get=GetX0Y5,put=PutX0Y5))
    double X0Y5;
    __declspec(property(get=GetX6Y0,put=PutX6Y0))
    double X6Y0;
    __declspec(property(get=GetX5Y1,put=PutX5Y1))
    double X5Y1;
    __declspec(property(get=GetX4Y2,put=PutX4Y2))
    double X4Y2;
    __declspec(property(get=GetX3Y3,put=PutX3Y3))
    double X3Y3;
    __declspec(property(get=GetX2Y4,put=PutX2Y4))
    double X2Y4;
    __declspec(property(get=GetX1Y5,put=PutX1Y5))
    double X1Y5;
    __declspec(property(get=GetX0Y6,put=PutX0Y6))
    double X0Y6;
    __declspec(property(get=GetX7Y0,put=PutX7Y0))
    double X7Y0;
    __declspec(property(get=GetX6Y1,put=PutX6Y1))
    double X6Y1;
    __declspec(property(get=GetX5Y2,put=PutX5Y2))
    double X5Y2;
    __declspec(property(get=GetX4Y3,put=PutX4Y3))
    double X4Y3;
    __declspec(property(get=GetX3Y4,put=PutX3Y4))
    double X3Y4;
    __declspec(property(get=GetX2Y5,put=PutX2Y5))
    double X2Y5;
    __declspec(property(get=GetX1Y6,put=PutX1Y6))
    double X1Y6;
    __declspec(property(get=GetX0Y7,put=PutX0Y7))
    double X0Y7;
    __declspec(property(get=GetX8Y0,put=PutX8Y0))
    double X8Y0;
    __declspec(property(get=GetX7Y1,put=PutX7Y1))
    double X7Y1;
    __declspec(property(get=GetX6Y2,put=PutX6Y2))
    double X6Y2;
    __declspec(property(get=GetX5Y3,put=PutX5Y3))
    double X5Y3;
    __declspec(property(get=GetX4Y4,put=PutX4Y4))
    double X4Y4;
    __declspec(property(get=GetX3Y5,put=PutX3Y5))
    double X3Y5;
    __declspec(property(get=GetX2Y6,put=PutX2Y6))
    double X2Y6;
    __declspec(property(get=GetX1Y7,put=PutX1Y7))
    double X1Y7;
    __declspec(property(get=GetX0Y8,put=PutX0Y8))
    double X0Y8;
    __declspec(property(get=GetX9Y0,put=PutX9Y0))
    double X9Y0;
    __declspec(property(get=GetX8Y1,put=PutX8Y1))
    double X8Y1;
    __declspec(property(get=GetX7Y2,put=PutX7Y2))
    double X7Y2;
    __declspec(property(get=GetX6Y3,put=PutX6Y3))
    double X6Y3;
    __declspec(property(get=GetX5Y4,put=PutX5Y4))
    double X5Y4;
    __declspec(property(get=GetX4Y5,put=PutX4Y5))
    double X4Y5;
    __declspec(property(get=GetX3Y6,put=PutX3Y6))
    double X3Y6;
    __declspec(property(get=GetX2Y7,put=PutX2Y7))
    double X2Y7;
    __declspec(property(get=GetX1Y8,put=PutX1Y8))
    double X1Y8;
    __declspec(property(get=GetX0Y9,put=PutX0Y9))
    double X0Y9;
    __declspec(property(get=GetX10Y0,put=PutX10Y0))
    double X10Y0;
    __declspec(property(get=GetX9Y1,put=PutX9Y1))
    double X9Y1;
    __declspec(property(get=GetX8Y2,put=PutX8Y2))
    double X8Y2;
    __declspec(property(get=GetX7Y3,put=PutX7Y3))
    double X7Y3;
    __declspec(property(get=GetX6Y4,put=PutX6Y4))
    double X6Y4;
    __declspec(property(get=GetX5Y5,put=PutX5Y5))
    double X5Y5;
    __declspec(property(get=GetX4Y6,put=PutX4Y6))
    double X4Y6;
    __declspec(property(get=GetX3Y7,put=PutX3Y7))
    double X3Y7;
    __declspec(property(get=GetX2Y8,put=PutX2Y8))
    double X2Y8;
    __declspec(property(get=GetX1Y9,put=PutX1Y9))
    double X1Y9;
    __declspec(property(get=GetX0Y10,put=PutX0Y10))
    double X0Y10;
    __declspec(property(get=GetX11Y0,put=PutX11Y0))
    double X11Y0;
    __declspec(property(get=GetX10Y1,put=PutX10Y1))
    double X10Y1;
    __declspec(property(get=GetX9Y2,put=PutX9Y2))
    double X9Y2;
    __declspec(property(get=GetX8Y3,put=PutX8Y3))
    double X8Y3;
    __declspec(property(get=GetX7Y4,put=PutX7Y4))
    double X7Y4;
    __declspec(property(get=GetX6Y5,put=PutX6Y5))
    double X6Y5;
    __declspec(property(get=GetX5Y6,put=PutX5Y6))
    double X5Y6;
    __declspec(property(get=GetX4Y7,put=PutX4Y7))
    double X4Y7;
    __declspec(property(get=GetX3Y8,put=PutX3Y8))
    double X3Y8;
    __declspec(property(get=GetX2Y9,put=PutX2Y9))
    double X2Y9;
    __declspec(property(get=GetX1Y10,put=PutX1Y10))
    double X1Y10;
    __declspec(property(get=GetX0Y11,put=PutX0Y11))
    double X0Y11;
    __declspec(property(get=GetX12Y0,put=PutX12Y0))
    double X12Y0;
    __declspec(property(get=GetX11Y1,put=PutX11Y1))
    double X11Y1;
    __declspec(property(get=GetX10Y2,put=PutX10Y2))
    double X10Y2;
    __declspec(property(get=GetX9Y3,put=PutX9Y3))
    double X9Y3;
    __declspec(property(get=GetX8Y4,put=PutX8Y4))
    double X8Y4;
    __declspec(property(get=GetX7Y5,put=PutX7Y5))
    double X7Y5;
    __declspec(property(get=GetX6Y6,put=PutX6Y6))
    double X6Y6;
    __declspec(property(get=GetX5Y7,put=PutX5Y7))
    double X5Y7;
    __declspec(property(get=GetX4Y8,put=PutX4Y8))
    double X4Y8;
    __declspec(property(get=GetX3Y9,put=PutX3Y9))
    double X3Y9;
    __declspec(property(get=GetX2Y10,put=PutX2Y10))
    double X2Y10;
    __declspec(property(get=GetX1Y11,put=PutX1Y11))
    double X1Y11;
    __declspec(property(get=GetX0Y12,put=PutX0Y12))
    double X0Y12;
    __declspec(property(get=GetX13Y0,put=PutX13Y0))
    double X13Y0;
    __declspec(property(get=GetX12Y1,put=PutX12Y1))
    double X12Y1;
    __declspec(property(get=GetX11Y2,put=PutX11Y2))
    double X11Y2;
    __declspec(property(get=GetX10Y3,put=PutX10Y3))
    double X10Y3;
    __declspec(property(get=GetX9Y4,put=PutX9Y4))
    double X9Y4;
    __declspec(property(get=GetX8Y5,put=PutX8Y5))
    double X8Y5;
    __declspec(property(get=GetX7Y6,put=PutX7Y6))
    double X7Y6;
    __declspec(property(get=GetX6Y7,put=PutX6Y7))
    double X6Y7;
    __declspec(property(get=GetX5Y8,put=PutX5Y8))
    double X5Y8;
    __declspec(property(get=GetX4Y9,put=PutX4Y9))
    double X4Y9;
    __declspec(property(get=GetX3Y10,put=PutX3Y10))
    double X3Y10;
    __declspec(property(get=GetX2Y11,put=PutX2Y11))
    double X2Y11;
    __declspec(property(get=GetX1Y12,put=PutX1Y12))
    double X1Y12;
    __declspec(property(get=GetX0Y13,put=PutX0Y13))
    double X0Y13;
    __declspec(property(get=GetX14Y0,put=PutX14Y0))
    double X14Y0;
    __declspec(property(get=GetX13Y1,put=PutX13Y1))
    double X13Y1;
    __declspec(property(get=GetX12Y2,put=PutX12Y2))
    double X12Y2;
    __declspec(property(get=GetX11Y3,put=PutX11Y3))
    double X11Y3;
    __declspec(property(get=GetX10Y4,put=PutX10Y4))
    double X10Y4;
    __declspec(property(get=GetX9Y5,put=PutX9Y5))
    double X9Y5;
    __declspec(property(get=GetX8Y6,put=PutX8Y6))
    double X8Y6;
    __declspec(property(get=GetX7Y7,put=PutX7Y7))
    double X7Y7;
    __declspec(property(get=GetX6Y8,put=PutX6Y8))
    double X6Y8;
    __declspec(property(get=GetX5Y9,put=PutX5Y9))
    double X5Y9;
    __declspec(property(get=GetX4Y10,put=PutX4Y10))
    double X4Y10;
    __declspec(property(get=GetX3Y11,put=PutX3Y11))
    double X3Y11;
    __declspec(property(get=GetX2Y12,put=PutX2Y12))
    double X2Y12;
    __declspec(property(get=GetX1Y13,put=PutX1Y13))
    double X1Y13;
    __declspec(property(get=GetX0Y14,put=PutX0Y14))
    double X0Y14;
    __declspec(property(get=GetX15Y0,put=PutX15Y0))
    double X15Y0;
    __declspec(property(get=GetX14Y1,put=PutX14Y1))
    double X14Y1;
    __declspec(property(get=GetX13Y2,put=PutX13Y2))
    double X13Y2;
    __declspec(property(get=GetX12Y3,put=PutX12Y3))
    double X12Y3;
    __declspec(property(get=GetX11Y4,put=PutX11Y4))
    double X11Y4;
    __declspec(property(get=GetX10Y5,put=PutX10Y5))
    double X10Y5;
    __declspec(property(get=GetX9Y6,put=PutX9Y6))
    double X9Y6;
    __declspec(property(get=GetX8Y7,put=PutX8Y7))
    double X8Y7;
    __declspec(property(get=GetX7Y8,put=PutX7Y8))
    double X7Y8;
    __declspec(property(get=GetX6Y9,put=PutX6Y9))
    double X6Y9;
    __declspec(property(get=GetX5Y10,put=PutX5Y10))
    double X5Y10;
    __declspec(property(get=GetX4Y11,put=PutX4Y11))
    double X4Y11;
    __declspec(property(get=GetX3Y12,put=PutX3Y12))
    double X3Y12;
    __declspec(property(get=GetX2Y13,put=PutX2Y13))
    double X2Y13;
    __declspec(property(get=GetX1Y14,put=PutX1Y14))
    double X1Y14;
    __declspec(property(get=GetX0Y15,put=PutX0Y15))
    double X0Y15;
    __declspec(property(get=GetX16Y0,put=PutX16Y0))
    double X16Y0;
    __declspec(property(get=GetX15Y1,put=PutX15Y1))
    double X15Y1;
    __declspec(property(get=GetX14Y2,put=PutX14Y2))
    double X14Y2;
    __declspec(property(get=GetX13Y3,put=PutX13Y3))
    double X13Y3;
    __declspec(property(get=GetX12Y4,put=PutX12Y4))
    double X12Y4;
    __declspec(property(get=GetX11Y5,put=PutX11Y5))
    double X11Y5;
    __declspec(property(get=GetX10Y6,put=PutX10Y6))
    double X10Y6;
    __declspec(property(get=GetX9Y7,put=PutX9Y7))
    double X9Y7;
    __declspec(property(get=GetX8Y8,put=PutX8Y8))
    double X8Y8;
    __declspec(property(get=GetX7Y9,put=PutX7Y9))
    double X7Y9;
    __declspec(property(get=GetX6Y10,put=PutX6Y10))
    double X6Y10;
    __declspec(property(get=GetX5Y11,put=PutX5Y11))
    double X5Y11;
    __declspec(property(get=GetX4Y12,put=PutX4Y12))
    double X4Y12;
    __declspec(property(get=GetX3Y13,put=PutX3Y13))
    double X3Y13;
    __declspec(property(get=GetX2Y14,put=PutX2Y14))
    double X2Y14;
    __declspec(property(get=GetX1Y15,put=PutX1Y15))
    double X1Y15;
    __declspec(property(get=GetX0Y16,put=PutX0Y16))
    double X0Y16;
    __declspec(property(get=GetX17Y0,put=PutX17Y0))
    double X17Y0;
    __declspec(property(get=GetX16Y1,put=PutX16Y1))
    double X16Y1;
    __declspec(property(get=GetX15Y2,put=PutX15Y2))
    double X15Y2;
    __declspec(property(get=GetX14Y3,put=PutX14Y3))
    double X14Y3;
    __declspec(property(get=GetX13Y4,put=PutX13Y4))
    double X13Y4;
    __declspec(property(get=GetX12Y5,put=PutX12Y5))
    double X12Y5;
    __declspec(property(get=GetX11Y6,put=PutX11Y6))
    double X11Y6;
    __declspec(property(get=GetX10Y7,put=PutX10Y7))
    double X10Y7;
    __declspec(property(get=GetX9Y8,put=PutX9Y8))
    double X9Y8;
    __declspec(property(get=GetX8Y9,put=PutX8Y9))
    double X8Y9;
    __declspec(property(get=GetX7Y10,put=PutX7Y10))
    double X7Y10;
    __declspec(property(get=GetX6Y11,put=PutX6Y11))
    double X6Y11;
    __declspec(property(get=GetX5Y12,put=PutX5Y12))
    double X5Y12;
    __declspec(property(get=GetX4Y13,put=PutX4Y13))
    double X4Y13;
    __declspec(property(get=GetX3Y14,put=PutX3Y14))
    double X3Y14;
    __declspec(property(get=GetX2Y15,put=PutX2Y15))
    double X2Y15;
    __declspec(property(get=GetX1Y16,put=PutX1Y16))
    double X1Y16;
    __declspec(property(get=GetX0Y17,put=PutX0Y17))
    double X0Y17;
    __declspec(property(get=GetX18Y0,put=PutX18Y0))
    double X18Y0;
    __declspec(property(get=GetX17Y1,put=PutX17Y1))
    double X17Y1;
    __declspec(property(get=GetX16Y2,put=PutX16Y2))
    double X16Y2;
    __declspec(property(get=GetX15Y3,put=PutX15Y3))
    double X15Y3;
    __declspec(property(get=GetX14Y4,put=PutX14Y4))
    double X14Y4;
    __declspec(property(get=GetX13Y5,put=PutX13Y5))
    double X13Y5;
    __declspec(property(get=GetX12Y6,put=PutX12Y6))
    double X12Y6;
    __declspec(property(get=GetX11Y7,put=PutX11Y7))
    double X11Y7;
    __declspec(property(get=GetX10Y8,put=PutX10Y8))
    double X10Y8;
    __declspec(property(get=GetX9Y9,put=PutX9Y9))
    double X9Y9;
    __declspec(property(get=GetX8Y10,put=PutX8Y10))
    double X8Y10;
    __declspec(property(get=GetX7Y11,put=PutX7Y11))
    double X7Y11;
    __declspec(property(get=GetX6Y12,put=PutX6Y12))
    double X6Y12;
    __declspec(property(get=GetX5Y13,put=PutX5Y13))
    double X5Y13;
    __declspec(property(get=GetX4Y14,put=PutX4Y14))
    double X4Y14;
    __declspec(property(get=GetX3Y15,put=PutX3Y15))
    double X3Y15;
    __declspec(property(get=GetX2Y16,put=PutX2Y16))
    double X2Y16;
    __declspec(property(get=GetX1Y17,put=PutX1Y17))
    double X1Y17;
    __declspec(property(get=GetX0Y18,put=PutX0Y18))
    double X0Y18;
    __declspec(property(get=GetX19Y0,put=PutX19Y0))
    double X19Y0;
    __declspec(property(get=GetX18Y1,put=PutX18Y1))
    double X18Y1;
    __declspec(property(get=GetX17Y2,put=PutX17Y2))
    double X17Y2;
    __declspec(property(get=GetX16Y3,put=PutX16Y3))
    double X16Y3;
    __declspec(property(get=GetX15Y4,put=PutX15Y4))
    double X15Y4;
    __declspec(property(get=GetX14Y5,put=PutX14Y5))
    double X14Y5;
    __declspec(property(get=GetX13Y6,put=PutX13Y6))
    double X13Y6;
    __declspec(property(get=GetX12Y7,put=PutX12Y7))
    double X12Y7;
    __declspec(property(get=GetX11Y8,put=PutX11Y8))
    double X11Y8;
    __declspec(property(get=GetX10Y9,put=PutX10Y9))
    double X10Y9;
    __declspec(property(get=GetX9Y10,put=PutX9Y10))
    double X9Y10;
    __declspec(property(get=GetX8Y11,put=PutX8Y11))
    double X8Y11;
    __declspec(property(get=GetX7Y12,put=PutX7Y12))
    double X7Y12;
    __declspec(property(get=GetX6Y13,put=PutX6Y13))
    double X6Y13;
    __declspec(property(get=GetX5Y14,put=PutX5Y14))
    double X5Y14;
    __declspec(property(get=GetX4Y15,put=PutX4Y15))
    double X4Y15;
    __declspec(property(get=GetX3Y16,put=PutX3Y16))
    double X3Y16;
    __declspec(property(get=GetX2Y17,put=PutX2Y17))
    double X2Y17;
    __declspec(property(get=GetX1Y18,put=PutX1Y18))
    double X1Y18;
    __declspec(property(get=GetX0Y19,put=PutX0Y19))
    double X0Y19;
    __declspec(property(get=GetX20Y0,put=PutX20Y0))
    double X20Y0;
    __declspec(property(get=GetX19Y1,put=PutX19Y1))
    double X19Y1;
    __declspec(property(get=GetX18Y2,put=PutX18Y2))
    double X18Y2;
    __declspec(property(get=GetX17Y3,put=PutX17Y3))
    double X17Y3;
    __declspec(property(get=GetX16Y4,put=PutX16Y4))
    double X16Y4;
    __declspec(property(get=GetX15Y5,put=PutX15Y5))
    double X15Y5;
    __declspec(property(get=GetX14Y6,put=PutX14Y6))
    double X14Y6;
    __declspec(property(get=GetX13Y7,put=PutX13Y7))
    double X13Y7;
    __declspec(property(get=GetX12Y8,put=PutX12Y8))
    double X12Y8;
    __declspec(property(get=GetX11Y9,put=PutX11Y9))
    double X11Y9;
    __declspec(property(get=GetX10Y10,put=PutX10Y10))
    double X10Y10;
    __declspec(property(get=GetX9Y11,put=PutX9Y11))
    double X9Y11;
    __declspec(property(get=GetX8Y12,put=PutX8Y12))
    double X8Y12;
    __declspec(property(get=GetX7Y13,put=PutX7Y13))
    double X7Y13;
    __declspec(property(get=GetX6Y14,put=PutX6Y14))
    double X6Y14;
    __declspec(property(get=GetX5Y15,put=PutX5Y15))
    double X5Y15;
    __declspec(property(get=GetX4Y16,put=PutX4Y16))
    double X4Y16;
    __declspec(property(get=GetX3Y17,put=PutX3Y17))
    double X3Y17;
    __declspec(property(get=GetX2Y18,put=PutX2Y18))
    double X2Y18;
    __declspec(property(get=GetX1Y19,put=PutX1Y19))
    double X1Y19;
    __declspec(property(get=GetX0Y20,put=PutX0Y20))
    double X0Y20;
    __declspec(property(get=GetX21Y0,put=PutX21Y0))
    double X21Y0;
    __declspec(property(get=GetX20Y1,put=PutX20Y1))
    double X20Y1;
    __declspec(property(get=GetX19Y2,put=PutX19Y2))
    double X19Y2;
    __declspec(property(get=GetX18Y3,put=PutX18Y3))
    double X18Y3;
    __declspec(property(get=GetX17Y4,put=PutX17Y4))
    double X17Y4;
    __declspec(property(get=GetX16Y5,put=PutX16Y5))
    double X16Y5;
    __declspec(property(get=GetX15Y6,put=PutX15Y6))
    double X15Y6;
    __declspec(property(get=GetX14Y7,put=PutX14Y7))
    double X14Y7;
    __declspec(property(get=GetX13Y8,put=PutX13Y8))
    double X13Y8;
    __declspec(property(get=GetX12Y9,put=PutX12Y9))
    double X12Y9;
    __declspec(property(get=GetX11Y10,put=PutX11Y10))
    double X11Y10;
    __declspec(property(get=GetX10Y11,put=PutX10Y11))
    double X10Y11;
    __declspec(property(get=GetX9Y12,put=PutX9Y12))
    double X9Y12;
    __declspec(property(get=GetX8Y13,put=PutX8Y13))
    double X8Y13;
    __declspec(property(get=GetX7Y14,put=PutX7Y14))
    double X7Y14;
    __declspec(property(get=GetX6Y15,put=PutX6Y15))
    double X6Y15;
    __declspec(property(get=GetX5Y16,put=PutX5Y16))
    double X5Y16;
    __declspec(property(get=GetX4Y17,put=PutX4Y17))
    double X4Y17;
    __declspec(property(get=GetX3Y18,put=PutX3Y18))
    double X3Y18;
    __declspec(property(get=GetX2Y19,put=PutX2Y19))
    double X2Y19;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetX1Y0Cell ( );
    IEditorCellPtr GetX0Y1Cell ( );
    IEditorCellPtr GetX2Y0Cell ( );
    IEditorCellPtr GetX1Y1Cell ( );
    IEditorCellPtr GetX0Y2Cell ( );
    IEditorCellPtr GetX3Y0Cell ( );
    IEditorCellPtr GetX2Y1Cell ( );
    IEditorCellPtr GetX1Y2Cell ( );
    IEditorCellPtr GetX0Y3Cell ( );
    IEditorCellPtr GetX4Y0Cell ( );
    IEditorCellPtr GetX3Y1Cell ( );
    IEditorCellPtr GetX2Y2Cell ( );
    IEditorCellPtr GetX1Y3Cell ( );
    IEditorCellPtr GetX0Y4Cell ( );
    IEditorCellPtr GetX5Y0Cell ( );
    IEditorCellPtr GetX4Y1Cell ( );
    IEditorCellPtr GetX3Y2Cell ( );
    IEditorCellPtr GetX2Y3Cell ( );
    IEditorCellPtr GetX1Y4Cell ( );
    IEditorCellPtr GetX0Y5Cell ( );
    IEditorCellPtr GetX6Y0Cell ( );
    IEditorCellPtr GetX5Y1Cell ( );
    IEditorCellPtr GetX4Y2Cell ( );
    IEditorCellPtr GetX3Y3Cell ( );
    IEditorCellPtr GetX2Y4Cell ( );
    IEditorCellPtr GetX1Y5Cell ( );
    IEditorCellPtr GetX0Y6Cell ( );
    IEditorCellPtr GetX7Y0Cell ( );
    IEditorCellPtr GetX6Y1Cell ( );
    IEditorCellPtr GetX5Y2Cell ( );
    IEditorCellPtr GetX4Y3Cell ( );
    IEditorCellPtr GetX3Y4Cell ( );
    IEditorCellPtr GetX2Y5Cell ( );
    IEditorCellPtr GetX1Y6Cell ( );
    IEditorCellPtr GetX0Y7Cell ( );
    IEditorCellPtr GetX8Y0Cell ( );
    IEditorCellPtr GetX7Y1Cell ( );
    IEditorCellPtr GetX6Y2Cell ( );
    IEditorCellPtr GetX5Y3Cell ( );
    IEditorCellPtr GetX4Y4Cell ( );
    IEditorCellPtr GetX3Y5Cell ( );
    IEditorCellPtr GetX2Y6Cell ( );
    IEditorCellPtr GetX1Y7Cell ( );
    IEditorCellPtr GetX0Y8Cell ( );
    IEditorCellPtr GetX9Y0Cell ( );
    IEditorCellPtr GetX8Y1Cell ( );
    IEditorCellPtr GetX7Y2Cell ( );
    IEditorCellPtr GetX6Y3Cell ( );
    IEditorCellPtr GetX5Y4Cell ( );
    IEditorCellPtr GetX4Y5Cell ( );
    IEditorCellPtr GetX3Y6Cell ( );
    IEditorCellPtr GetX2Y7Cell ( );
    IEditorCellPtr GetX1Y8Cell ( );
    IEditorCellPtr GetX0Y9Cell ( );
    IEditorCellPtr GetX10Y0Cell ( );
    IEditorCellPtr GetX9Y1Cell ( );
    IEditorCellPtr GetX8Y2Cell ( );
    IEditorCellPtr GetX7Y3Cell ( );
    IEditorCellPtr GetX6Y4Cell ( );
    IEditorCellPtr GetX5Y5Cell ( );
    IEditorCellPtr GetX4Y6Cell ( );
    IEditorCellPtr GetX3Y7Cell ( );
    IEditorCellPtr GetX2Y8Cell ( );
    IEditorCellPtr GetX1Y9Cell ( );
    IEditorCellPtr GetX0Y10Cell ( );
    IEditorCellPtr GetX11Y0Cell ( );
    IEditorCellPtr GetX10Y1Cell ( );
    IEditorCellPtr GetX9Y2Cell ( );
    IEditorCellPtr GetX8Y3Cell ( );
    IEditorCellPtr GetX7Y4Cell ( );
    IEditorCellPtr GetX6Y5Cell ( );
    IEditorCellPtr GetX5Y6Cell ( );
    IEditorCellPtr GetX4Y7Cell ( );
    IEditorCellPtr GetX3Y8Cell ( );
    IEditorCellPtr GetX2Y9Cell ( );
    IEditorCellPtr GetX1Y10Cell ( );
    IEditorCellPtr GetX0Y11Cell ( );
    IEditorCellPtr GetX12Y0Cell ( );
    IEditorCellPtr GetX11Y1Cell ( );
    IEditorCellPtr GetX10Y2Cell ( );
    IEditorCellPtr GetX9Y3Cell ( );
    IEditorCellPtr GetX8Y4Cell ( );
    IEditorCellPtr GetX7Y5Cell ( );
    IEditorCellPtr GetX6Y6Cell ( );
    IEditorCellPtr GetX5Y7Cell ( );
    IEditorCellPtr GetX4Y8Cell ( );
    IEditorCellPtr GetX3Y9Cell ( );
    IEditorCellPtr GetX2Y10Cell ( );
    IEditorCellPtr GetX1Y11Cell ( );
    IEditorCellPtr GetX0Y12Cell ( );
    IEditorCellPtr GetX13Y0Cell ( );
    IEditorCellPtr GetX12Y1Cell ( );
    IEditorCellPtr GetX11Y2Cell ( );
    IEditorCellPtr GetX10Y3Cell ( );
    IEditorCellPtr GetX9Y4Cell ( );
    IEditorCellPtr GetX8Y5Cell ( );
    IEditorCellPtr GetX7Y6Cell ( );
    IEditorCellPtr GetX6Y7Cell ( );
    IEditorCellPtr GetX5Y8Cell ( );
    IEditorCellPtr GetX4Y9Cell ( );
    IEditorCellPtr GetX3Y10Cell ( );
    IEditorCellPtr GetX2Y11Cell ( );
    IEditorCellPtr GetX1Y12Cell ( );
    IEditorCellPtr GetX0Y13Cell ( );
    IEditorCellPtr GetX14Y0Cell ( );
    IEditorCellPtr GetX13Y1Cell ( );
    IEditorCellPtr GetX12Y2Cell ( );
    IEditorCellPtr GetX11Y3Cell ( );
    IEditorCellPtr GetX10Y4Cell ( );
    IEditorCellPtr GetX9Y5Cell ( );
    IEditorCellPtr GetX8Y6Cell ( );
    IEditorCellPtr GetX7Y7Cell ( );
    IEditorCellPtr GetX6Y8Cell ( );
    IEditorCellPtr GetX5Y9Cell ( );
    IEditorCellPtr GetX4Y10Cell ( );
    IEditorCellPtr GetX3Y11Cell ( );
    IEditorCellPtr GetX2Y12Cell ( );
    IEditorCellPtr GetX1Y13Cell ( );
    IEditorCellPtr GetX0Y14Cell ( );
    IEditorCellPtr GetX15Y0Cell ( );
    IEditorCellPtr GetX14Y1Cell ( );
    IEditorCellPtr GetX13Y2Cell ( );
    IEditorCellPtr GetX12Y3Cell ( );
    IEditorCellPtr GetX11Y4Cell ( );
    IEditorCellPtr GetX10Y5Cell ( );
    IEditorCellPtr GetX9Y6Cell ( );
    IEditorCellPtr GetX8Y7Cell ( );
    IEditorCellPtr GetX7Y8Cell ( );
    IEditorCellPtr GetX6Y9Cell ( );
    IEditorCellPtr GetX5Y10Cell ( );
    IEditorCellPtr GetX4Y11Cell ( );
    IEditorCellPtr GetX3Y12Cell ( );
    IEditorCellPtr GetX2Y13Cell ( );
    IEditorCellPtr GetX1Y14Cell ( );
    IEditorCellPtr GetX0Y15Cell ( );
    IEditorCellPtr GetX16Y0Cell ( );
    IEditorCellPtr GetX15Y1Cell ( );
    IEditorCellPtr GetX14Y2Cell ( );
    IEditorCellPtr GetX13Y3Cell ( );
    IEditorCellPtr GetX12Y4Cell ( );
    IEditorCellPtr GetX11Y5Cell ( );
    IEditorCellPtr GetX10Y6Cell ( );
    IEditorCellPtr GetX9Y7Cell ( );
    IEditorCellPtr GetX8Y8Cell ( );
    IEditorCellPtr GetX7Y9Cell ( );
    IEditorCellPtr GetX6Y10Cell ( );
    IEditorCellPtr GetX5Y11Cell ( );
    IEditorCellPtr GetX4Y12Cell ( );
    IEditorCellPtr GetX3Y13Cell ( );
    IEditorCellPtr GetX2Y14Cell ( );
    IEditorCellPtr GetX1Y15Cell ( );
    IEditorCellPtr GetX0Y16Cell ( );
    IEditorCellPtr GetX17Y0Cell ( );
    IEditorCellPtr GetX16Y1Cell ( );
    IEditorCellPtr GetX15Y2Cell ( );
    IEditorCellPtr GetX14Y3Cell ( );
    IEditorCellPtr GetX13Y4Cell ( );
    IEditorCellPtr GetX12Y5Cell ( );
    IEditorCellPtr GetX11Y6Cell ( );
    IEditorCellPtr GetX10Y7Cell ( );
    IEditorCellPtr GetX9Y8Cell ( );
    IEditorCellPtr GetX8Y9Cell ( );
    IEditorCellPtr GetX7Y10Cell ( );
    IEditorCellPtr GetX6Y11Cell ( );
    IEditorCellPtr GetX5Y12Cell ( );
    IEditorCellPtr GetX4Y13Cell ( );
    IEditorCellPtr GetX3Y14Cell ( );
    IEditorCellPtr GetX2Y15Cell ( );
    IEditorCellPtr GetX1Y16Cell ( );
    IEditorCellPtr GetX0Y17Cell ( );
    IEditorCellPtr GetX18Y0Cell ( );
    IEditorCellPtr GetX17Y1Cell ( );
    IEditorCellPtr GetX16Y2Cell ( );
    IEditorCellPtr GetX15Y3Cell ( );
    IEditorCellPtr GetX14Y4Cell ( );
    IEditorCellPtr GetX13Y5Cell ( );
    IEditorCellPtr GetX12Y6Cell ( );
    IEditorCellPtr GetX11Y7Cell ( );
    IEditorCellPtr GetX10Y8Cell ( );
    IEditorCellPtr GetX9Y9Cell ( );
    IEditorCellPtr GetX8Y10Cell ( );
    IEditorCellPtr GetX7Y11Cell ( );
    IEditorCellPtr GetX6Y12Cell ( );
    IEditorCellPtr GetX5Y13Cell ( );
    IEditorCellPtr GetX4Y14Cell ( );
    IEditorCellPtr GetX3Y15Cell ( );
    IEditorCellPtr GetX2Y16Cell ( );
    IEditorCellPtr GetX1Y17Cell ( );
    IEditorCellPtr GetX0Y18Cell ( );
    IEditorCellPtr GetX19Y0Cell ( );
    IEditorCellPtr GetX18Y1Cell ( );
    IEditorCellPtr GetX17Y2Cell ( );
    IEditorCellPtr GetX16Y3Cell ( );
    IEditorCellPtr GetX15Y4Cell ( );
    IEditorCellPtr GetX14Y5Cell ( );
    IEditorCellPtr GetX13Y6Cell ( );
    IEditorCellPtr GetX12Y7Cell ( );
    IEditorCellPtr GetX11Y8Cell ( );
    IEditorCellPtr GetX10Y9Cell ( );
    IEditorCellPtr GetX9Y10Cell ( );
    IEditorCellPtr GetX8Y11Cell ( );
    IEditorCellPtr GetX7Y12Cell ( );
    IEditorCellPtr GetX6Y13Cell ( );
    IEditorCellPtr GetX5Y14Cell ( );
    IEditorCellPtr GetX4Y15Cell ( );
    IEditorCellPtr GetX3Y16Cell ( );
    IEditorCellPtr GetX2Y17Cell ( );
    IEditorCellPtr GetX1Y18Cell ( );
    IEditorCellPtr GetX0Y19Cell ( );
    IEditorCellPtr GetX20Y0Cell ( );
    IEditorCellPtr GetX19Y1Cell ( );
    IEditorCellPtr GetX18Y2Cell ( );
    IEditorCellPtr GetX17Y3Cell ( );
    IEditorCellPtr GetX16Y4Cell ( );
    IEditorCellPtr GetX15Y5Cell ( );
    IEditorCellPtr GetX14Y6Cell ( );
    IEditorCellPtr GetX13Y7Cell ( );
    IEditorCellPtr GetX12Y8Cell ( );
    IEditorCellPtr GetX11Y9Cell ( );
    IEditorCellPtr GetX10Y10Cell ( );
    IEditorCellPtr GetX9Y11Cell ( );
    IEditorCellPtr GetX8Y12Cell ( );
    IEditorCellPtr GetX7Y13Cell ( );
    IEditorCellPtr GetX6Y14Cell ( );
    IEditorCellPtr GetX5Y15Cell ( );
    IEditorCellPtr GetX4Y16Cell ( );
    IEditorCellPtr GetX3Y17Cell ( );
    IEditorCellPtr GetX2Y18Cell ( );
    IEditorCellPtr GetX1Y19Cell ( );
    IEditorCellPtr GetX0Y20Cell ( );
    IEditorCellPtr GetX21Y0Cell ( );
    IEditorCellPtr GetX20Y1Cell ( );
    IEditorCellPtr GetX19Y2Cell ( );
    IEditorCellPtr GetX18Y3Cell ( );
    IEditorCellPtr GetX17Y4Cell ( );
    IEditorCellPtr GetX16Y5Cell ( );
    IEditorCellPtr GetX15Y6Cell ( );
    IEditorCellPtr GetX14Y7Cell ( );
    IEditorCellPtr GetX13Y8Cell ( );
    IEditorCellPtr GetX12Y9Cell ( );
    IEditorCellPtr GetX11Y10Cell ( );
    IEditorCellPtr GetX10Y11Cell ( );
    IEditorCellPtr GetX9Y12Cell ( );
    IEditorCellPtr GetX8Y13Cell ( );
    IEditorCellPtr GetX7Y14Cell ( );
    IEditorCellPtr GetX6Y15Cell ( );
    IEditorCellPtr GetX5Y16Cell ( );
    IEditorCellPtr GetX4Y17Cell ( );
    IEditorCellPtr GetX3Y18Cell ( );
    IEditorCellPtr GetX2Y19Cell ( );
    double GetX1Y0 ( );
    void PutX1Y0 (
        double pRetVal );
    double GetX0Y1 ( );
    void PutX0Y1 (
        double pRetVal );
    double GetX2Y0 ( );
    void PutX2Y0 (
        double pRetVal );
    double GetX1Y1 ( );
    void PutX1Y1 (
        double pRetVal );
    double GetX0Y2 ( );
    void PutX0Y2 (
        double pRetVal );
    double GetX3Y0 ( );
    void PutX3Y0 (
        double pRetVal );
    double GetX2Y1 ( );
    void PutX2Y1 (
        double pRetVal );
    double GetX1Y2 ( );
    void PutX1Y2 (
        double pRetVal );
    double GetX0Y3 ( );
    void PutX0Y3 (
        double pRetVal );
    double GetX4Y0 ( );
    void PutX4Y0 (
        double pRetVal );
    double GetX3Y1 ( );
    void PutX3Y1 (
        double pRetVal );
    double GetX2Y2 ( );
    void PutX2Y2 (
        double pRetVal );
    double GetX1Y3 ( );
    void PutX1Y3 (
        double pRetVal );
    double GetX0Y4 ( );
    void PutX0Y4 (
        double pRetVal );
    double GetX5Y0 ( );
    void PutX5Y0 (
        double pRetVal );
    double GetX4Y1 ( );
    void PutX4Y1 (
        double pRetVal );
    double GetX3Y2 ( );
    void PutX3Y2 (
        double pRetVal );
    double GetX2Y3 ( );
    void PutX2Y3 (
        double pRetVal );
    double GetX1Y4 ( );
    void PutX1Y4 (
        double pRetVal );
    double GetX0Y5 ( );
    void PutX0Y5 (
        double pRetVal );
    double GetX6Y0 ( );
    void PutX6Y0 (
        double pRetVal );
    double GetX5Y1 ( );
    void PutX5Y1 (
        double pRetVal );
    double GetX4Y2 ( );
    void PutX4Y2 (
        double pRetVal );
    double GetX3Y3 ( );
    void PutX3Y3 (
        double pRetVal );
    double GetX2Y4 ( );
    void PutX2Y4 (
        double pRetVal );
    double GetX1Y5 ( );
    void PutX1Y5 (
        double pRetVal );
    double GetX0Y6 ( );
    void PutX0Y6 (
        double pRetVal );
    double GetX7Y0 ( );
    void PutX7Y0 (
        double pRetVal );
    double GetX6Y1 ( );
    void PutX6Y1 (
        double pRetVal );
    double GetX5Y2 ( );
    void PutX5Y2 (
        double pRetVal );
    double GetX4Y3 ( );
    void PutX4Y3 (
        double pRetVal );
    double GetX3Y4 ( );
    void PutX3Y4 (
        double pRetVal );
    double GetX2Y5 ( );
    void PutX2Y5 (
        double pRetVal );
    double GetX1Y6 ( );
    void PutX1Y6 (
        double pRetVal );
    double GetX0Y7 ( );
    void PutX0Y7 (
        double pRetVal );
    double GetX8Y0 ( );
    void PutX8Y0 (
        double pRetVal );
    double GetX7Y1 ( );
    void PutX7Y1 (
        double pRetVal );
    double GetX6Y2 ( );
    void PutX6Y2 (
        double pRetVal );
    double GetX5Y3 ( );
    void PutX5Y3 (
        double pRetVal );
    double GetX4Y4 ( );
    void PutX4Y4 (
        double pRetVal );
    double GetX3Y5 ( );
    void PutX3Y5 (
        double pRetVal );
    double GetX2Y6 ( );
    void PutX2Y6 (
        double pRetVal );
    double GetX1Y7 ( );
    void PutX1Y7 (
        double pRetVal );
    double GetX0Y8 ( );
    void PutX0Y8 (
        double pRetVal );
    double GetX9Y0 ( );
    void PutX9Y0 (
        double pRetVal );
    double GetX8Y1 ( );
    void PutX8Y1 (
        double pRetVal );
    double GetX7Y2 ( );
    void PutX7Y2 (
        double pRetVal );
    double GetX6Y3 ( );
    void PutX6Y3 (
        double pRetVal );
    double GetX5Y4 ( );
    void PutX5Y4 (
        double pRetVal );
    double GetX4Y5 ( );
    void PutX4Y5 (
        double pRetVal );
    double GetX3Y6 ( );
    void PutX3Y6 (
        double pRetVal );
    double GetX2Y7 ( );
    void PutX2Y7 (
        double pRetVal );
    double GetX1Y8 ( );
    void PutX1Y8 (
        double pRetVal );
    double GetX0Y9 ( );
    void PutX0Y9 (
        double pRetVal );
    double GetX10Y0 ( );
    void PutX10Y0 (
        double pRetVal );
    double GetX9Y1 ( );
    void PutX9Y1 (
        double pRetVal );
    double GetX8Y2 ( );
    void PutX8Y2 (
        double pRetVal );
    double GetX7Y3 ( );
    void PutX7Y3 (
        double pRetVal );
    double GetX6Y4 ( );
    void PutX6Y4 (
        double pRetVal );
    double GetX5Y5 ( );
    void PutX5Y5 (
        double pRetVal );
    double GetX4Y6 ( );
    void PutX4Y6 (
        double pRetVal );
    double GetX3Y7 ( );
    void PutX3Y7 (
        double pRetVal );
    double GetX2Y8 ( );
    void PutX2Y8 (
        double pRetVal );
    double GetX1Y9 ( );
    void PutX1Y9 (
        double pRetVal );
    double GetX0Y10 ( );
    void PutX0Y10 (
        double pRetVal );
    double GetX11Y0 ( );
    void PutX11Y0 (
        double pRetVal );
    double GetX10Y1 ( );
    void PutX10Y1 (
        double pRetVal );
    double GetX9Y2 ( );
    void PutX9Y2 (
        double pRetVal );
    double GetX8Y3 ( );
    void PutX8Y3 (
        double pRetVal );
    double GetX7Y4 ( );
    void PutX7Y4 (
        double pRetVal );
    double GetX6Y5 ( );
    void PutX6Y5 (
        double pRetVal );
    double GetX5Y6 ( );
    void PutX5Y6 (
        double pRetVal );
    double GetX4Y7 ( );
    void PutX4Y7 (
        double pRetVal );
    double GetX3Y8 ( );
    void PutX3Y8 (
        double pRetVal );
    double GetX2Y9 ( );
    void PutX2Y9 (
        double pRetVal );
    double GetX1Y10 ( );
    void PutX1Y10 (
        double pRetVal );
    double GetX0Y11 ( );
    void PutX0Y11 (
        double pRetVal );
    double GetX12Y0 ( );
    void PutX12Y0 (
        double pRetVal );
    double GetX11Y1 ( );
    void PutX11Y1 (
        double pRetVal );
    double GetX10Y2 ( );
    void PutX10Y2 (
        double pRetVal );
    double GetX9Y3 ( );
    void PutX9Y3 (
        double pRetVal );
    double GetX8Y4 ( );
    void PutX8Y4 (
        double pRetVal );
    double GetX7Y5 ( );
    void PutX7Y5 (
        double pRetVal );
    double GetX6Y6 ( );
    void PutX6Y6 (
        double pRetVal );
    double GetX5Y7 ( );
    void PutX5Y7 (
        double pRetVal );
    double GetX4Y8 ( );
    void PutX4Y8 (
        double pRetVal );
    double GetX3Y9 ( );
    void PutX3Y9 (
        double pRetVal );
    double GetX2Y10 ( );
    void PutX2Y10 (
        double pRetVal );
    double GetX1Y11 ( );
    void PutX1Y11 (
        double pRetVal );
    double GetX0Y12 ( );
    void PutX0Y12 (
        double pRetVal );
    double GetX13Y0 ( );
    void PutX13Y0 (
        double pRetVal );
    double GetX12Y1 ( );
    void PutX12Y1 (
        double pRetVal );
    double GetX11Y2 ( );
    void PutX11Y2 (
        double pRetVal );
    double GetX10Y3 ( );
    void PutX10Y3 (
        double pRetVal );
    double GetX9Y4 ( );
    void PutX9Y4 (
        double pRetVal );
    double GetX8Y5 ( );
    void PutX8Y5 (
        double pRetVal );
    double GetX7Y6 ( );
    void PutX7Y6 (
        double pRetVal );
    double GetX6Y7 ( );
    void PutX6Y7 (
        double pRetVal );
    double GetX5Y8 ( );
    void PutX5Y8 (
        double pRetVal );
    double GetX4Y9 ( );
    void PutX4Y9 (
        double pRetVal );
    double GetX3Y10 ( );
    void PutX3Y10 (
        double pRetVal );
    double GetX2Y11 ( );
    void PutX2Y11 (
        double pRetVal );
    double GetX1Y12 ( );
    void PutX1Y12 (
        double pRetVal );
    double GetX0Y13 ( );
    void PutX0Y13 (
        double pRetVal );
    double GetX14Y0 ( );
    void PutX14Y0 (
        double pRetVal );
    double GetX13Y1 ( );
    void PutX13Y1 (
        double pRetVal );
    double GetX12Y2 ( );
    void PutX12Y2 (
        double pRetVal );
    double GetX11Y3 ( );
    void PutX11Y3 (
        double pRetVal );
    double GetX10Y4 ( );
    void PutX10Y4 (
        double pRetVal );
    double GetX9Y5 ( );
    void PutX9Y5 (
        double pRetVal );
    double GetX8Y6 ( );
    void PutX8Y6 (
        double pRetVal );
    double GetX7Y7 ( );
    void PutX7Y7 (
        double pRetVal );
    double GetX6Y8 ( );
    void PutX6Y8 (
        double pRetVal );
    double GetX5Y9 ( );
    void PutX5Y9 (
        double pRetVal );
    double GetX4Y10 ( );
    void PutX4Y10 (
        double pRetVal );
    double GetX3Y11 ( );
    void PutX3Y11 (
        double pRetVal );
    double GetX2Y12 ( );
    void PutX2Y12 (
        double pRetVal );
    double GetX1Y13 ( );
    void PutX1Y13 (
        double pRetVal );
    double GetX0Y14 ( );
    void PutX0Y14 (
        double pRetVal );
    double GetX15Y0 ( );
    void PutX15Y0 (
        double pRetVal );
    double GetX14Y1 ( );
    void PutX14Y1 (
        double pRetVal );
    double GetX13Y2 ( );
    void PutX13Y2 (
        double pRetVal );
    double GetX12Y3 ( );
    void PutX12Y3 (
        double pRetVal );
    double GetX11Y4 ( );
    void PutX11Y4 (
        double pRetVal );
    double GetX10Y5 ( );
    void PutX10Y5 (
        double pRetVal );
    double GetX9Y6 ( );
    void PutX9Y6 (
        double pRetVal );
    double GetX8Y7 ( );
    void PutX8Y7 (
        double pRetVal );
    double GetX7Y8 ( );
    void PutX7Y8 (
        double pRetVal );
    double GetX6Y9 ( );
    void PutX6Y9 (
        double pRetVal );
    double GetX5Y10 ( );
    void PutX5Y10 (
        double pRetVal );
    double GetX4Y11 ( );
    void PutX4Y11 (
        double pRetVal );
    double GetX3Y12 ( );
    void PutX3Y12 (
        double pRetVal );
    double GetX2Y13 ( );
    void PutX2Y13 (
        double pRetVal );
    double GetX1Y14 ( );
    void PutX1Y14 (
        double pRetVal );
    double GetX0Y15 ( );
    void PutX0Y15 (
        double pRetVal );
    double GetX16Y0 ( );
    void PutX16Y0 (
        double pRetVal );
    double GetX15Y1 ( );
    void PutX15Y1 (
        double pRetVal );
    double GetX14Y2 ( );
    void PutX14Y2 (
        double pRetVal );
    double GetX13Y3 ( );
    void PutX13Y3 (
        double pRetVal );
    double GetX12Y4 ( );
    void PutX12Y4 (
        double pRetVal );
    double GetX11Y5 ( );
    void PutX11Y5 (
        double pRetVal );
    double GetX10Y6 ( );
    void PutX10Y6 (
        double pRetVal );
    double GetX9Y7 ( );
    void PutX9Y7 (
        double pRetVal );
    double GetX8Y8 ( );
    void PutX8Y8 (
        double pRetVal );
    double GetX7Y9 ( );
    void PutX7Y9 (
        double pRetVal );
    double GetX6Y10 ( );
    void PutX6Y10 (
        double pRetVal );
    double GetX5Y11 ( );
    void PutX5Y11 (
        double pRetVal );
    double GetX4Y12 ( );
    void PutX4Y12 (
        double pRetVal );
    double GetX3Y13 ( );
    void PutX3Y13 (
        double pRetVal );
    double GetX2Y14 ( );
    void PutX2Y14 (
        double pRetVal );
    double GetX1Y15 ( );
    void PutX1Y15 (
        double pRetVal );
    double GetX0Y16 ( );
    void PutX0Y16 (
        double pRetVal );
    double GetX17Y0 ( );
    void PutX17Y0 (
        double pRetVal );
    double GetX16Y1 ( );
    void PutX16Y1 (
        double pRetVal );
    double GetX15Y2 ( );
    void PutX15Y2 (
        double pRetVal );
    double GetX14Y3 ( );
    void PutX14Y3 (
        double pRetVal );
    double GetX13Y4 ( );
    void PutX13Y4 (
        double pRetVal );
    double GetX12Y5 ( );
    void PutX12Y5 (
        double pRetVal );
    double GetX11Y6 ( );
    void PutX11Y6 (
        double pRetVal );
    double GetX10Y7 ( );
    void PutX10Y7 (
        double pRetVal );
    double GetX9Y8 ( );
    void PutX9Y8 (
        double pRetVal );
    double GetX8Y9 ( );
    void PutX8Y9 (
        double pRetVal );
    double GetX7Y10 ( );
    void PutX7Y10 (
        double pRetVal );
    double GetX6Y11 ( );
    void PutX6Y11 (
        double pRetVal );
    double GetX5Y12 ( );
    void PutX5Y12 (
        double pRetVal );
    double GetX4Y13 ( );
    void PutX4Y13 (
        double pRetVal );
    double GetX3Y14 ( );
    void PutX3Y14 (
        double pRetVal );
    double GetX2Y15 ( );
    void PutX2Y15 (
        double pRetVal );
    double GetX1Y16 ( );
    void PutX1Y16 (
        double pRetVal );
    double GetX0Y17 ( );
    void PutX0Y17 (
        double pRetVal );
    double GetX18Y0 ( );
    void PutX18Y0 (
        double pRetVal );
    double GetX17Y1 ( );
    void PutX17Y1 (
        double pRetVal );
    double GetX16Y2 ( );
    void PutX16Y2 (
        double pRetVal );
    double GetX15Y3 ( );
    void PutX15Y3 (
        double pRetVal );
    double GetX14Y4 ( );
    void PutX14Y4 (
        double pRetVal );
    double GetX13Y5 ( );
    void PutX13Y5 (
        double pRetVal );
    double GetX12Y6 ( );
    void PutX12Y6 (
        double pRetVal );
    double GetX11Y7 ( );
    void PutX11Y7 (
        double pRetVal );
    double GetX10Y8 ( );
    void PutX10Y8 (
        double pRetVal );
    double GetX9Y9 ( );
    void PutX9Y9 (
        double pRetVal );
    double GetX8Y10 ( );
    void PutX8Y10 (
        double pRetVal );
    double GetX7Y11 ( );
    void PutX7Y11 (
        double pRetVal );
    double GetX6Y12 ( );
    void PutX6Y12 (
        double pRetVal );
    double GetX5Y13 ( );
    void PutX5Y13 (
        double pRetVal );
    double GetX4Y14 ( );
    void PutX4Y14 (
        double pRetVal );
    double GetX3Y15 ( );
    void PutX3Y15 (
        double pRetVal );
    double GetX2Y16 ( );
    void PutX2Y16 (
        double pRetVal );
    double GetX1Y17 ( );
    void PutX1Y17 (
        double pRetVal );
    double GetX0Y18 ( );
    void PutX0Y18 (
        double pRetVal );
    double GetX19Y0 ( );
    void PutX19Y0 (
        double pRetVal );
    double GetX18Y1 ( );
    void PutX18Y1 (
        double pRetVal );
    double GetX17Y2 ( );
    void PutX17Y2 (
        double pRetVal );
    double GetX16Y3 ( );
    void PutX16Y3 (
        double pRetVal );
    double GetX15Y4 ( );
    void PutX15Y4 (
        double pRetVal );
    double GetX14Y5 ( );
    void PutX14Y5 (
        double pRetVal );
    double GetX13Y6 ( );
    void PutX13Y6 (
        double pRetVal );
    double GetX12Y7 ( );
    void PutX12Y7 (
        double pRetVal );
    double GetX11Y8 ( );
    void PutX11Y8 (
        double pRetVal );
    double GetX10Y9 ( );
    void PutX10Y9 (
        double pRetVal );
    double GetX9Y10 ( );
    void PutX9Y10 (
        double pRetVal );
    double GetX8Y11 ( );
    void PutX8Y11 (
        double pRetVal );
    double GetX7Y12 ( );
    void PutX7Y12 (
        double pRetVal );
    double GetX6Y13 ( );
    void PutX6Y13 (
        double pRetVal );
    double GetX5Y14 ( );
    void PutX5Y14 (
        double pRetVal );
    double GetX4Y15 ( );
    void PutX4Y15 (
        double pRetVal );
    double GetX3Y16 ( );
    void PutX3Y16 (
        double pRetVal );
    double GetX2Y17 ( );
    void PutX2Y17 (
        double pRetVal );
    double GetX1Y18 ( );
    void PutX1Y18 (
        double pRetVal );
    double GetX0Y19 ( );
    void PutX0Y19 (
        double pRetVal );
    double GetX20Y0 ( );
    void PutX20Y0 (
        double pRetVal );
    double GetX19Y1 ( );
    void PutX19Y1 (
        double pRetVal );
    double GetX18Y2 ( );
    void PutX18Y2 (
        double pRetVal );
    double GetX17Y3 ( );
    void PutX17Y3 (
        double pRetVal );
    double GetX16Y4 ( );
    void PutX16Y4 (
        double pRetVal );
    double GetX15Y5 ( );
    void PutX15Y5 (
        double pRetVal );
    double GetX14Y6 ( );
    void PutX14Y6 (
        double pRetVal );
    double GetX13Y7 ( );
    void PutX13Y7 (
        double pRetVal );
    double GetX12Y8 ( );
    void PutX12Y8 (
        double pRetVal );
    double GetX11Y9 ( );
    void PutX11Y9 (
        double pRetVal );
    double GetX10Y10 ( );
    void PutX10Y10 (
        double pRetVal );
    double GetX9Y11 ( );
    void PutX9Y11 (
        double pRetVal );
    double GetX8Y12 ( );
    void PutX8Y12 (
        double pRetVal );
    double GetX7Y13 ( );
    void PutX7Y13 (
        double pRetVal );
    double GetX6Y14 ( );
    void PutX6Y14 (
        double pRetVal );
    double GetX5Y15 ( );
    void PutX5Y15 (
        double pRetVal );
    double GetX4Y16 ( );
    void PutX4Y16 (
        double pRetVal );
    double GetX3Y17 ( );
    void PutX3Y17 (
        double pRetVal );
    double GetX2Y18 ( );
    void PutX2Y18 (
        double pRetVal );
    double GetX1Y19 ( );
    void PutX1Y19 (
        double pRetVal );
    double GetX0Y20 ( );
    void PutX0Y20 (
        double pRetVal );
    double GetX21Y0 ( );
    void PutX21Y0 (
        double pRetVal );
    double GetX20Y1 ( );
    void PutX20Y1 (
        double pRetVal );
    double GetX19Y2 ( );
    void PutX19Y2 (
        double pRetVal );
    double GetX18Y3 ( );
    void PutX18Y3 (
        double pRetVal );
    double GetX17Y4 ( );
    void PutX17Y4 (
        double pRetVal );
    double GetX16Y5 ( );
    void PutX16Y5 (
        double pRetVal );
    double GetX15Y6 ( );
    void PutX15Y6 (
        double pRetVal );
    double GetX14Y7 ( );
    void PutX14Y7 (
        double pRetVal );
    double GetX13Y8 ( );
    void PutX13Y8 (
        double pRetVal );
    double GetX12Y9 ( );
    void PutX12Y9 (
        double pRetVal );
    double GetX11Y10 ( );
    void PutX11Y10 (
        double pRetVal );
    double GetX10Y11 ( );
    void PutX10Y11 (
        double pRetVal );
    double GetX9Y12 ( );
    void PutX9Y12 (
        double pRetVal );
    double GetX8Y13 ( );
    void PutX8Y13 (
        double pRetVal );
    double GetX7Y14 ( );
    void PutX7Y14 (
        double pRetVal );
    double GetX6Y15 ( );
    void PutX6Y15 (
        double pRetVal );
    double GetX5Y16 ( );
    void PutX5Y16 (
        double pRetVal );
    double GetX4Y17 ( );
    void PutX4Y17 (
        double pRetVal );
    double GetX3Y18 ( );
    void PutX3Y18 (
        double pRetVal );
    double GetX2Y19 ( );
    void PutX2Y19 (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X1Y0Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y0Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y0Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y3Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y0Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y3Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y0Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y3Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y5Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y0Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y3Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y5Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y0Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y3Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y5Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y7Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X8Y0Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y3Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y5Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y7Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y8Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X9Y0Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X8Y1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y3Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y5Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y7Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y8Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y9Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X10Y0Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X9Y1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X8Y2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y3Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y5Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y7Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y8Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y9Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y10Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X11Y0Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X10Y1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X9Y2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X8Y3Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y5Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y7Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y8Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y9Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y10Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y11Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X12Y0Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X11Y1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X10Y2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X9Y3Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X8Y4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y5Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y7Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y8Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y9Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y10Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y11Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y12Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X13Y0Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X12Y1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X11Y2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X10Y3Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X9Y4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X8Y5Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y7Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y8Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y9Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y10Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y11Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y12Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y13Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X14Y0Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X13Y1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X12Y2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X11Y3Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X10Y4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X9Y5Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X8Y6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y7Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y8Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y9Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y10Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y11Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y12Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y13Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y14Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X15Y0Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X14Y1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X13Y2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X12Y3Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X11Y4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X10Y5Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X9Y6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X8Y7Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y8Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y9Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y10Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y11Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y12Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y13Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y14Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y15Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X16Y0Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X15Y1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X14Y2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X13Y3Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X12Y4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X11Y5Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X10Y6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X9Y7Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X8Y8Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y9Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y10Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y11Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y12Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y13Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y14Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y15Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y16Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X17Y0Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X16Y1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X15Y2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X14Y3Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X13Y4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X12Y5Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X11Y6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X10Y7Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X9Y8Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X8Y9Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y10Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y11Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y12Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y13Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y14Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y15Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y16Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y17Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X18Y0Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X17Y1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X16Y2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X15Y3Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X14Y4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X13Y5Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X12Y6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X11Y7Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X10Y8Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X9Y9Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X8Y10Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y11Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y12Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y13Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y14Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y15Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y16Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y17Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y18Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X19Y0Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X18Y1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X17Y2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X16Y3Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X15Y4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X14Y5Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X13Y6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X12Y7Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X11Y8Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X10Y9Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X9Y10Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X8Y11Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y12Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y13Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y14Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y15Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y16Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y17Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y18Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y19Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X20Y0Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X19Y1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X18Y2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X17Y3Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X16Y4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X15Y5Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X14Y6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X13Y7Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X12Y8Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X11Y9Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X10Y10Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X9Y11Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X8Y12Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y13Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y14Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y15Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y16Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y17Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y18Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y19Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y20Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X21Y0Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X20Y1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X19Y2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X18Y3Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X17Y4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X16Y5Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X15Y6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X14Y7Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X13Y8Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X12Y9Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X11Y10Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X10Y11Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X9Y12Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X8Y13Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y14Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y15Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y16Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y17Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y18Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y19Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y0 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X1Y0 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X0Y1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y0 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X2Y0 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X1Y1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X0Y2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y0 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X3Y0 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X2Y1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X1Y2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y3 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X0Y3 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y0 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X4Y0 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X3Y1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X2Y2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y3 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X1Y3 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X0Y4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y0 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X5Y0 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X4Y1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X3Y2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y3 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X2Y3 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X1Y4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y5 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X0Y5 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y0 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X6Y0 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X5Y1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X4Y2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y3 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X3Y3 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X2Y4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y5 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X1Y5 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X0Y6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y0 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X7Y0 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X6Y1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X5Y2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y3 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X4Y3 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X3Y4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y5 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X2Y5 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X1Y6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y7 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X0Y7 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X8Y0 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X8Y0 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X7Y1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X6Y2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y3 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X5Y3 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X4Y4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y5 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X3Y5 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X2Y6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y7 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X1Y7 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y8 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X0Y8 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X9Y0 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X9Y0 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X8Y1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X8Y1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X7Y2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y3 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X6Y3 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X5Y4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y5 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X4Y5 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X3Y6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y7 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X2Y7 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y8 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X1Y8 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y9 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X0Y9 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X10Y0 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X10Y0 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X9Y1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X9Y1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X8Y2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X8Y2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y3 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X7Y3 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X6Y4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y5 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X5Y5 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X4Y6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y7 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X3Y7 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y8 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X2Y8 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y9 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X1Y9 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y10 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X0Y10 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X11Y0 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X11Y0 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X10Y1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X10Y1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X9Y2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X9Y2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X8Y3 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X8Y3 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X7Y4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y5 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X6Y5 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X5Y6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y7 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X4Y7 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y8 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X3Y8 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y9 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X2Y9 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y10 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X1Y10 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y11 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X0Y11 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X12Y0 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X12Y0 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X11Y1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X11Y1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X10Y2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X10Y2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X9Y3 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X9Y3 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X8Y4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X8Y4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y5 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X7Y5 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X6Y6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y7 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X5Y7 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y8 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X4Y8 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y9 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X3Y9 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y10 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X2Y10 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y11 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X1Y11 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y12 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X0Y12 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X13Y0 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X13Y0 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X12Y1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X12Y1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X11Y2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X11Y2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X10Y3 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X10Y3 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X9Y4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X9Y4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X8Y5 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X8Y5 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X7Y6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y7 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X6Y7 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y8 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X5Y8 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y9 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X4Y9 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y10 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X3Y10 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y11 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X2Y11 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y12 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X1Y12 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y13 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X0Y13 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X14Y0 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X14Y0 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X13Y1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X13Y1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X12Y2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X12Y2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X11Y3 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X11Y3 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X10Y4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X10Y4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X9Y5 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X9Y5 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X8Y6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X8Y6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y7 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X7Y7 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y8 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X6Y8 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y9 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X5Y9 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y10 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X4Y10 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y11 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X3Y11 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y12 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X2Y12 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y13 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X1Y13 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y14 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X0Y14 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X15Y0 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X15Y0 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X14Y1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X14Y1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X13Y2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X13Y2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X12Y3 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X12Y3 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X11Y4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X11Y4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X10Y5 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X10Y5 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X9Y6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X9Y6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X8Y7 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X8Y7 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y8 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X7Y8 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y9 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X6Y9 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y10 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X5Y10 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y11 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X4Y11 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y12 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X3Y12 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y13 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X2Y13 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y14 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X1Y14 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y15 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X0Y15 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X16Y0 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X16Y0 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X15Y1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X15Y1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X14Y2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X14Y2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X13Y3 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X13Y3 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X12Y4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X12Y4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X11Y5 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X11Y5 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X10Y6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X10Y6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X9Y7 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X9Y7 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X8Y8 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X8Y8 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y9 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X7Y9 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y10 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X6Y10 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y11 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X5Y11 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y12 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X4Y12 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y13 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X3Y13 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y14 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X2Y14 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y15 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X1Y15 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y16 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X0Y16 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X17Y0 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X17Y0 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X16Y1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X16Y1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X15Y2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X15Y2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X14Y3 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X14Y3 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X13Y4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X13Y4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X12Y5 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X12Y5 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X11Y6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X11Y6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X10Y7 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X10Y7 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X9Y8 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X9Y8 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X8Y9 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X8Y9 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y10 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X7Y10 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y11 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X6Y11 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y12 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X5Y12 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y13 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X4Y13 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y14 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X3Y14 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y15 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X2Y15 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y16 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X1Y16 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y17 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X0Y17 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X18Y0 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X18Y0 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X17Y1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X17Y1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X16Y2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X16Y2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X15Y3 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X15Y3 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X14Y4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X14Y4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X13Y5 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X13Y5 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X12Y6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X12Y6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X11Y7 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X11Y7 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X10Y8 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X10Y8 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X9Y9 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X9Y9 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X8Y10 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X8Y10 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y11 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X7Y11 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y12 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X6Y12 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y13 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X5Y13 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y14 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X4Y14 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y15 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X3Y15 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y16 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X2Y16 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y17 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X1Y17 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y18 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X0Y18 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X19Y0 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X19Y0 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X18Y1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X18Y1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X17Y2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X17Y2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X16Y3 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X16Y3 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X15Y4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X15Y4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X14Y5 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X14Y5 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X13Y6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X13Y6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X12Y7 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X12Y7 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X11Y8 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X11Y8 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X10Y9 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X10Y9 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X9Y10 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X9Y10 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X8Y11 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X8Y11 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y12 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X7Y12 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y13 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X6Y13 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y14 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X5Y14 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y15 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X4Y15 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y16 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X3Y16 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y17 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X2Y17 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y18 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X1Y18 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y19 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X0Y19 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X20Y0 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X20Y0 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X19Y1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X19Y1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X18Y2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X18Y2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X17Y3 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X17Y3 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X16Y4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X16Y4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X15Y5 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X15Y5 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X14Y6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X14Y6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X13Y7 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X13Y7 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X12Y8 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X12Y8 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X11Y9 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X11Y9 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X10Y10 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X10Y10 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X9Y11 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X9Y11 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X8Y12 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X8Y12 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y13 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X7Y13 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y14 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X6Y14 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y15 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X5Y15 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y16 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X4Y16 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y17 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X3Y17 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y18 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X2Y18 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y19 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X1Y19 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y20 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X0Y20 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X21Y0 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X21Y0 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X20Y1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X20Y1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X19Y2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X19Y2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X18Y3 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X18Y3 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X17Y4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X17Y4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X16Y5 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X16Y5 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X15Y6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X15Y6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X14Y7 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X14Y7 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X13Y8 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X13Y8 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X12Y9 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X12Y9 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X11Y10 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X11Y10 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X10Y11 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X10Y11 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X9Y12 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X9Y12 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X8Y13 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X8Y13 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y14 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X7Y14 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y15 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X6Y15 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y16 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X5Y16 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y17 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X4Y17 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y18 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X3Y18 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y19 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X2Y19 (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("e022520c-2e8f-45a1-8fc7-a1d8c4842a8e"))
IObjectBinary1 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRadius1Cell))
    IEditorCellPtr Radius1Cell;
    __declspec(property(get=GetConic1Cell))
    IEditorCellPtr Conic1Cell;
    __declspec(property(get=GetClear1Cell))
    IEditorCellPtr Clear1Cell;
    __declspec(property(get=GetEdge1Cell))
    IEditorCellPtr Edge1Cell;
    __declspec(property(get=GetThicknessCell))
    IEditorCellPtr ThicknessCell;
    __declspec(property(get=GetRadius2Cell))
    IEditorCellPtr Radius2Cell;
    __declspec(property(get=GetConic2Cell))
    IEditorCellPtr Conic2Cell;
    __declspec(property(get=GetClear2Cell))
    IEditorCellPtr Clear2Cell;
    __declspec(property(get=GetEdge2Cell))
    IEditorCellPtr Edge2Cell;
    __declspec(property(get=GetOrderCell))
    IEditorCellPtr OrderCell;
    __declspec(property(get=GetNormRadiusCell))
    IEditorCellPtr NormRadiusCell;
    __declspec(property(get=GetMaxTermNumberCell))
    IEditorCellPtr MaxTermNumberCell;
    __declspec(property(get=GetRadius1,put=PutRadius1))
    double Radius1;
    __declspec(property(get=GetConic1,put=PutConic1))
    double Conic1;
    __declspec(property(get=GetClear1,put=PutClear1))
    double Clear1;
    __declspec(property(get=GetEdge1,put=PutEdge1))
    double Edge1;
    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness;
    __declspec(property(get=GetRadius2,put=PutRadius2))
    double Radius2;
    __declspec(property(get=GetConic2,put=PutConic2))
    double Conic2;
    __declspec(property(get=GetClear2,put=PutClear2))
    double Clear2;
    __declspec(property(get=GetEdge2,put=PutEdge2))
    double Edge2;
    __declspec(property(get=GetOrder,put=PutOrder))
    double Order;
    __declspec(property(get=GetNormRadius,put=PutNormRadius))
    double NormRadius;
    __declspec(property(get=GetMaxTermNumber,put=PutMaxTermNumber))
    long MaxTermNumber;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetRadius1Cell ( );
    IEditorCellPtr GetConic1Cell ( );
    IEditorCellPtr GetClear1Cell ( );
    IEditorCellPtr GetEdge1Cell ( );
    IEditorCellPtr GetThicknessCell ( );
    IEditorCellPtr GetRadius2Cell ( );
    IEditorCellPtr GetConic2Cell ( );
    IEditorCellPtr GetClear2Cell ( );
    IEditorCellPtr GetEdge2Cell ( );
    IEditorCellPtr GetOrderCell ( );
    IEditorCellPtr GetNormRadiusCell ( );
    IEditorCellPtr GetMaxTermNumberCell ( );
    double GetRadius1 ( );
    void PutRadius1 (
        double pRetVal );
    double GetConic1 ( );
    void PutConic1 (
        double pRetVal );
    double GetClear1 ( );
    void PutClear1 (
        double pRetVal );
    double GetEdge1 ( );
    void PutEdge1 (
        double pRetVal );
    double GetThickness ( );
    void PutThickness (
        double pRetVal );
    double GetRadius2 ( );
    void PutRadius2 (
        double pRetVal );
    double GetConic2 ( );
    void PutConic2 (
        double pRetVal );
    double GetClear2 ( );
    void PutClear2 (
        double pRetVal );
    double GetEdge2 ( );
    void PutEdge2 (
        double pRetVal );
    double GetOrder ( );
    void PutOrder (
        double pRetVal );
    double GetNormRadius ( );
    void PutNormRadius (
        double pRetVal );
    long GetMaxTermNumber ( );
    void PutMaxTermNumber (
        long pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Radius1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Clear1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Edge1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ThicknessCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Clear2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Edge2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_OrderCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NormRadiusCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaxTermNumberCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Radius1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Conic1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Clear1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Clear1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Edge1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Edge1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Thickness (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Thickness (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Radius2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Conic2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Clear2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Clear2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Edge2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Edge2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Order (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Order (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_NormRadius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NormRadius (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaxTermNumber (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaxTermNumber (
        /*[in]*/ long pRetVal ) = 0;
};

struct __declspec(uuid("edf33258-2da4-47a9-bdc3-0eb4af6f0058"))
IObjectBinary2 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRadius1Cell))
    IEditorCellPtr Radius1Cell;
    __declspec(property(get=GetConic1Cell))
    IEditorCellPtr Conic1Cell;
    __declspec(property(get=GetClear1Cell))
    IEditorCellPtr Clear1Cell;
    __declspec(property(get=GetEdge1Cell))
    IEditorCellPtr Edge1Cell;
    __declspec(property(get=GetThicknessCell))
    IEditorCellPtr ThicknessCell;
    __declspec(property(get=GetRadius2Cell))
    IEditorCellPtr Radius2Cell;
    __declspec(property(get=GetConic2Cell))
    IEditorCellPtr Conic2Cell;
    __declspec(property(get=GetClear2Cell))
    IEditorCellPtr Clear2Cell;
    __declspec(property(get=GetEdge2Cell))
    IEditorCellPtr Edge2Cell;
    __declspec(property(get=GetOrderCell))
    IEditorCellPtr OrderCell;
    __declspec(property(get=GetNormRadiusCell))
    IEditorCellPtr NormRadiusCell;
    __declspec(property(get=GetMaxTermNumberCell))
    IEditorCellPtr MaxTermNumberCell;
    __declspec(property(get=GetCoeffOnPPower2Cell))
    IEditorCellPtr CoeffOnPPower2Cell;
    __declspec(property(get=GetCoeffOnPPower4Cell))
    IEditorCellPtr CoeffOnPPower4Cell;
    __declspec(property(get=GetCoeffOnPPower6Cell))
    IEditorCellPtr CoeffOnPPower6Cell;
    __declspec(property(get=GetCoeffOnPPower8Cell))
    IEditorCellPtr CoeffOnPPower8Cell;
    __declspec(property(get=GetCoeffOnPPower10Cell))
    IEditorCellPtr CoeffOnPPower10Cell;
    __declspec(property(get=GetCoeffOnPPower12Cell))
    IEditorCellPtr CoeffOnPPower12Cell;
    __declspec(property(get=GetCoeffOnPPower14Cell))
    IEditorCellPtr CoeffOnPPower14Cell;
    __declspec(property(get=GetCoeffOnPPower16Cell))
    IEditorCellPtr CoeffOnPPower16Cell;
    __declspec(property(get=GetCoeffOnPPower18Cell))
    IEditorCellPtr CoeffOnPPower18Cell;
    __declspec(property(get=GetCoeffOnPPower20Cell))
    IEditorCellPtr CoeffOnPPower20Cell;
    __declspec(property(get=GetCoeffOnPPower22Cell))
    IEditorCellPtr CoeffOnPPower22Cell;
    __declspec(property(get=GetCoeffOnPPower24Cell))
    IEditorCellPtr CoeffOnPPower24Cell;
    __declspec(property(get=GetCoeffOnPPower26Cell))
    IEditorCellPtr CoeffOnPPower26Cell;
    __declspec(property(get=GetCoeffOnPPower28Cell))
    IEditorCellPtr CoeffOnPPower28Cell;
    __declspec(property(get=GetCoeffOnPPower30Cell))
    IEditorCellPtr CoeffOnPPower30Cell;
    __declspec(property(get=GetCoeffOnPPower32Cell))
    IEditorCellPtr CoeffOnPPower32Cell;
    __declspec(property(get=GetRadius1,put=PutRadius1))
    double Radius1;
    __declspec(property(get=GetConic1,put=PutConic1))
    double Conic1;
    __declspec(property(get=GetClear1,put=PutClear1))
    double Clear1;
    __declspec(property(get=GetEdge1,put=PutEdge1))
    double Edge1;
    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness;
    __declspec(property(get=GetRadius2,put=PutRadius2))
    double Radius2;
    __declspec(property(get=GetConic2,put=PutConic2))
    double Conic2;
    __declspec(property(get=GetClear2,put=PutClear2))
    double Clear2;
    __declspec(property(get=GetEdge2,put=PutEdge2))
    double Edge2;
    __declspec(property(get=GetOrder,put=PutOrder))
    double Order;
    __declspec(property(get=GetNormRadius,put=PutNormRadius))
    double NormRadius;
    __declspec(property(get=GetMaxTermNumber,put=PutMaxTermNumber))
    long MaxTermNumber;
    __declspec(property(get=GetCoeffOnPPower2,put=PutCoeffOnPPower2))
    double CoeffOnPPower2;
    __declspec(property(get=GetCoeffOnPPower4,put=PutCoeffOnPPower4))
    double CoeffOnPPower4;
    __declspec(property(get=GetCoeffOnPPower6,put=PutCoeffOnPPower6))
    double CoeffOnPPower6;
    __declspec(property(get=GetCoeffOnPPower8,put=PutCoeffOnPPower8))
    double CoeffOnPPower8;
    __declspec(property(get=GetCoeffOnPPower10,put=PutCoeffOnPPower10))
    double CoeffOnPPower10;
    __declspec(property(get=GetCoeffOnPPower12,put=PutCoeffOnPPower12))
    double CoeffOnPPower12;
    __declspec(property(get=GetCoeffOnPPower14,put=PutCoeffOnPPower14))
    double CoeffOnPPower14;
    __declspec(property(get=GetCoeffOnPPower16,put=PutCoeffOnPPower16))
    double CoeffOnPPower16;
    __declspec(property(get=GetCoeffOnPPower18,put=PutCoeffOnPPower18))
    double CoeffOnPPower18;
    __declspec(property(get=GetCoeffOnPPower20,put=PutCoeffOnPPower20))
    double CoeffOnPPower20;
    __declspec(property(get=GetCoeffOnPPower22,put=PutCoeffOnPPower22))
    double CoeffOnPPower22;
    __declspec(property(get=GetCoeffOnPPower24,put=PutCoeffOnPPower24))
    double CoeffOnPPower24;
    __declspec(property(get=GetCoeffOnPPower26,put=PutCoeffOnPPower26))
    double CoeffOnPPower26;
    __declspec(property(get=GetCoeffOnPPower28,put=PutCoeffOnPPower28))
    double CoeffOnPPower28;
    __declspec(property(get=GetCoeffOnPPower30,put=PutCoeffOnPPower30))
    double CoeffOnPPower30;
    __declspec(property(get=GetCoeffOnPPower32,put=PutCoeffOnPPower32))
    double CoeffOnPPower32;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetRadius1Cell ( );
    IEditorCellPtr GetConic1Cell ( );
    IEditorCellPtr GetClear1Cell ( );
    IEditorCellPtr GetEdge1Cell ( );
    IEditorCellPtr GetThicknessCell ( );
    IEditorCellPtr GetRadius2Cell ( );
    IEditorCellPtr GetConic2Cell ( );
    IEditorCellPtr GetClear2Cell ( );
    IEditorCellPtr GetEdge2Cell ( );
    IEditorCellPtr GetOrderCell ( );
    IEditorCellPtr GetNormRadiusCell ( );
    IEditorCellPtr GetMaxTermNumberCell ( );
    IEditorCellPtr GetCoeffOnPPower2Cell ( );
    IEditorCellPtr GetCoeffOnPPower4Cell ( );
    IEditorCellPtr GetCoeffOnPPower6Cell ( );
    IEditorCellPtr GetCoeffOnPPower8Cell ( );
    IEditorCellPtr GetCoeffOnPPower10Cell ( );
    IEditorCellPtr GetCoeffOnPPower12Cell ( );
    IEditorCellPtr GetCoeffOnPPower14Cell ( );
    IEditorCellPtr GetCoeffOnPPower16Cell ( );
    IEditorCellPtr GetCoeffOnPPower18Cell ( );
    IEditorCellPtr GetCoeffOnPPower20Cell ( );
    IEditorCellPtr GetCoeffOnPPower22Cell ( );
    IEditorCellPtr GetCoeffOnPPower24Cell ( );
    IEditorCellPtr GetCoeffOnPPower26Cell ( );
    IEditorCellPtr GetCoeffOnPPower28Cell ( );
    IEditorCellPtr GetCoeffOnPPower30Cell ( );
    IEditorCellPtr GetCoeffOnPPower32Cell ( );
    double GetRadius1 ( );
    void PutRadius1 (
        double pRetVal );
    double GetConic1 ( );
    void PutConic1 (
        double pRetVal );
    double GetClear1 ( );
    void PutClear1 (
        double pRetVal );
    double GetEdge1 ( );
    void PutEdge1 (
        double pRetVal );
    double GetThickness ( );
    void PutThickness (
        double pRetVal );
    double GetRadius2 ( );
    void PutRadius2 (
        double pRetVal );
    double GetConic2 ( );
    void PutConic2 (
        double pRetVal );
    double GetClear2 ( );
    void PutClear2 (
        double pRetVal );
    double GetEdge2 ( );
    void PutEdge2 (
        double pRetVal );
    double GetOrder ( );
    void PutOrder (
        double pRetVal );
    double GetNormRadius ( );
    void PutNormRadius (
        double pRetVal );
    long GetMaxTermNumber ( );
    void PutMaxTermNumber (
        long pRetVal );
    double GetCoeffOnPPower2 ( );
    void PutCoeffOnPPower2 (
        double pRetVal );
    double GetCoeffOnPPower4 ( );
    void PutCoeffOnPPower4 (
        double pRetVal );
    double GetCoeffOnPPower6 ( );
    void PutCoeffOnPPower6 (
        double pRetVal );
    double GetCoeffOnPPower8 ( );
    void PutCoeffOnPPower8 (
        double pRetVal );
    double GetCoeffOnPPower10 ( );
    void PutCoeffOnPPower10 (
        double pRetVal );
    double GetCoeffOnPPower12 ( );
    void PutCoeffOnPPower12 (
        double pRetVal );
    double GetCoeffOnPPower14 ( );
    void PutCoeffOnPPower14 (
        double pRetVal );
    double GetCoeffOnPPower16 ( );
    void PutCoeffOnPPower16 (
        double pRetVal );
    double GetCoeffOnPPower18 ( );
    void PutCoeffOnPPower18 (
        double pRetVal );
    double GetCoeffOnPPower20 ( );
    void PutCoeffOnPPower20 (
        double pRetVal );
    double GetCoeffOnPPower22 ( );
    void PutCoeffOnPPower22 (
        double pRetVal );
    double GetCoeffOnPPower24 ( );
    void PutCoeffOnPPower24 (
        double pRetVal );
    double GetCoeffOnPPower26 ( );
    void PutCoeffOnPPower26 (
        double pRetVal );
    double GetCoeffOnPPower28 ( );
    void PutCoeffOnPPower28 (
        double pRetVal );
    double GetCoeffOnPPower30 ( );
    void PutCoeffOnPPower30 (
        double pRetVal );
    double GetCoeffOnPPower32 ( );
    void PutCoeffOnPPower32 (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Radius1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Clear1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Edge1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ThicknessCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Clear2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Edge2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_OrderCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NormRadiusCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaxTermNumberCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnPPower2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnPPower4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnPPower6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnPPower8Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnPPower10Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnPPower12Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnPPower14Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnPPower16Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnPPower18Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnPPower20Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnPPower22Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnPPower24Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnPPower26Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnPPower28Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnPPower30Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnPPower32Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Radius1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Conic1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Clear1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Clear1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Edge1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Edge1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Thickness (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Thickness (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Radius2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Conic2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Clear2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Clear2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Edge2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Edge2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Order (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Order (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_NormRadius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NormRadius (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaxTermNumber (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaxTermNumber (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnPPower2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffOnPPower2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnPPower4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffOnPPower4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnPPower6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffOnPPower6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnPPower8 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffOnPPower8 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnPPower10 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffOnPPower10 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnPPower12 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffOnPPower12 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnPPower14 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffOnPPower14 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnPPower16 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffOnPPower16 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnPPower18 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffOnPPower18 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnPPower20 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffOnPPower20 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnPPower22 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffOnPPower22 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnPPower24 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffOnPPower24 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnPPower26 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffOnPPower26 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnPPower28 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffOnPPower28 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnPPower30 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffOnPPower30 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnPPower32 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffOnPPower32 (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("9e63b73f-4936-4a3f-b3aa-7325506efd50"))
IObjectBinary2A : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRadialApertureCell))
    IEditorCellPtr RadialApertureCell;
    __declspec(property(get=GetThicknessCell))
    IEditorCellPtr ThicknessCell;
    __declspec(property(get=GetRadius1Cell))
    IEditorCellPtr Radius1Cell;
    __declspec(property(get=GetConic1Cell))
    IEditorCellPtr Conic1Cell;
    __declspec(property(get=GetCoeff1OnRPower2Cell))
    IEditorCellPtr Coeff1OnRPower2Cell;
    __declspec(property(get=GetCoeff1OnRPower4Cell))
    IEditorCellPtr Coeff1OnRPower4Cell;
    __declspec(property(get=GetCoeff1OnRPower6Cell))
    IEditorCellPtr Coeff1OnRPower6Cell;
    __declspec(property(get=GetCoeff1OnRPower8Cell))
    IEditorCellPtr Coeff1OnRPower8Cell;
    __declspec(property(get=GetCoeff1OnRPower10Cell))
    IEditorCellPtr Coeff1OnRPower10Cell;
    __declspec(property(get=GetCoeff1OnRPower12Cell))
    IEditorCellPtr Coeff1OnRPower12Cell;
    __declspec(property(get=GetCoeff1OnRPower14Cell))
    IEditorCellPtr Coeff1OnRPower14Cell;
    __declspec(property(get=GetCoeff1OnRPower16Cell))
    IEditorCellPtr Coeff1OnRPower16Cell;
    __declspec(property(get=GetCoeff1OnRPower18Cell))
    IEditorCellPtr Coeff1OnRPower18Cell;
    __declspec(property(get=GetCoeff1OnRPower20Cell))
    IEditorCellPtr Coeff1OnRPower20Cell;
    __declspec(property(get=GetCoeff1OnRPower22Cell))
    IEditorCellPtr Coeff1OnRPower22Cell;
    __declspec(property(get=GetCoeff1OnRPower24Cell))
    IEditorCellPtr Coeff1OnRPower24Cell;
    __declspec(property(get=GetRadius2Cell))
    IEditorCellPtr Radius2Cell;
    __declspec(property(get=GetConic2Cell))
    IEditorCellPtr Conic2Cell;
    __declspec(property(get=GetCoeff2OnRPower2Cell))
    IEditorCellPtr Coeff2OnRPower2Cell;
    __declspec(property(get=GetCoeff2OnRPower4Cell))
    IEditorCellPtr Coeff2OnRPower4Cell;
    __declspec(property(get=GetCoeff2OnRPower6Cell))
    IEditorCellPtr Coeff2OnRPower6Cell;
    __declspec(property(get=GetCoeff2OnRPower8Cell))
    IEditorCellPtr Coeff2OnRPower8Cell;
    __declspec(property(get=GetCoeff2OnRPower10Cell))
    IEditorCellPtr Coeff2OnRPower10Cell;
    __declspec(property(get=GetCoeff2OnRPower12Cell))
    IEditorCellPtr Coeff2OnRPower12Cell;
    __declspec(property(get=GetCoeff2OnRPower14Cell))
    IEditorCellPtr Coeff2OnRPower14Cell;
    __declspec(property(get=GetCoeff2OnRPower16Cell))
    IEditorCellPtr Coeff2OnRPower16Cell;
    __declspec(property(get=GetCoeff2OnRPower18Cell))
    IEditorCellPtr Coeff2OnRPower18Cell;
    __declspec(property(get=GetCoeff2OnRPower20Cell))
    IEditorCellPtr Coeff2OnRPower20Cell;
    __declspec(property(get=GetCoeff2OnRPower22Cell))
    IEditorCellPtr Coeff2OnRPower22Cell;
    __declspec(property(get=GetCoeff2OnRPower24Cell))
    IEditorCellPtr Coeff2OnRPower24Cell;
    __declspec(property(get=GetOrderCell))
    IEditorCellPtr OrderCell;
    __declspec(property(get=GetNormRadiusCell))
    IEditorCellPtr NormRadiusCell;
    __declspec(property(get=GetMaxTermNumberCell))
    IEditorCellPtr MaxTermNumberCell;
    __declspec(property(get=GetCoeffOnPPower2Cell))
    IEditorCellPtr CoeffOnPPower2Cell;
    __declspec(property(get=GetCoeffOnPPower4Cell))
    IEditorCellPtr CoeffOnPPower4Cell;
    __declspec(property(get=GetCoeffOnPPower6Cell))
    IEditorCellPtr CoeffOnPPower6Cell;
    __declspec(property(get=GetCoeffOnPPower8Cell))
    IEditorCellPtr CoeffOnPPower8Cell;
    __declspec(property(get=GetCoeffOnPPower10Cell))
    IEditorCellPtr CoeffOnPPower10Cell;
    __declspec(property(get=GetCoeffOnPPower12Cell))
    IEditorCellPtr CoeffOnPPower12Cell;
    __declspec(property(get=GetCoeffOnPPower14Cell))
    IEditorCellPtr CoeffOnPPower14Cell;
    __declspec(property(get=GetCoeffOnPPower16Cell))
    IEditorCellPtr CoeffOnPPower16Cell;
    __declspec(property(get=GetCoeffOnPPower18Cell))
    IEditorCellPtr CoeffOnPPower18Cell;
    __declspec(property(get=GetCoeffOnPPower20Cell))
    IEditorCellPtr CoeffOnPPower20Cell;
    __declspec(property(get=GetCoeffOnPPower22Cell))
    IEditorCellPtr CoeffOnPPower22Cell;
    __declspec(property(get=GetCoeffOnPPower24Cell))
    IEditorCellPtr CoeffOnPPower24Cell;
    __declspec(property(get=GetRadialAperture,put=PutRadialAperture))
    double RadialAperture;
    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness;
    __declspec(property(get=GetRadius1,put=PutRadius1))
    double Radius1;
    __declspec(property(get=GetConic1,put=PutConic1))
    double Conic1;
    __declspec(property(get=GetCoeff1OnRPower2,put=PutCoeff1OnRPower2))
    double Coeff1OnRPower2;
    __declspec(property(get=GetCoeff1OnRPower4,put=PutCoeff1OnRPower4))
    double Coeff1OnRPower4;
    __declspec(property(get=GetCoeff1OnRPower6,put=PutCoeff1OnRPower6))
    double Coeff1OnRPower6;
    __declspec(property(get=GetCoeff1OnRPower8,put=PutCoeff1OnRPower8))
    double Coeff1OnRPower8;
    __declspec(property(get=GetCoeff1OnRPower10,put=PutCoeff1OnRPower10))
    double Coeff1OnRPower10;
    __declspec(property(get=GetCoeff1OnRPower12,put=PutCoeff1OnRPower12))
    double Coeff1OnRPower12;
    __declspec(property(get=GetCoeff1OnRPower14,put=PutCoeff1OnRPower14))
    double Coeff1OnRPower14;
    __declspec(property(get=GetCoeff1OnRPower16,put=PutCoeff1OnRPower16))
    double Coeff1OnRPower16;
    __declspec(property(get=GetCoeff1OnRPower18,put=PutCoeff1OnRPower18))
    double Coeff1OnRPower18;
    __declspec(property(get=GetCoeff1OnRPower20,put=PutCoeff1OnRPower20))
    double Coeff1OnRPower20;
    __declspec(property(get=GetCoeff1OnRPower22,put=PutCoeff1OnRPower22))
    double Coeff1OnRPower22;
    __declspec(property(get=GetCoeff1OnRPower24,put=PutCoeff1OnRPower24))
    double Coeff1OnRPower24;
    __declspec(property(get=GetRadius2,put=PutRadius2))
    double Radius2;
    __declspec(property(get=GetConic2,put=PutConic2))
    double Conic2;
    __declspec(property(get=GetCoeff2OnRPower2,put=PutCoeff2OnRPower2))
    double Coeff2OnRPower2;
    __declspec(property(get=GetCoeff2OnRPower4,put=PutCoeff2OnRPower4))
    double Coeff2OnRPower4;
    __declspec(property(get=GetCoeff2OnRPower6,put=PutCoeff2OnRPower6))
    double Coeff2OnRPower6;
    __declspec(property(get=GetCoeff2OnRPower8,put=PutCoeff2OnRPower8))
    double Coeff2OnRPower8;
    __declspec(property(get=GetCoeff2OnRPower10,put=PutCoeff2OnRPower10))
    double Coeff2OnRPower10;
    __declspec(property(get=GetCoeff2OnRPower12,put=PutCoeff2OnRPower12))
    double Coeff2OnRPower12;
    __declspec(property(get=GetCoeff2OnRPower14,put=PutCoeff2OnRPower14))
    double Coeff2OnRPower14;
    __declspec(property(get=GetCoeff2OnRPower16,put=PutCoeff2OnRPower16))
    double Coeff2OnRPower16;
    __declspec(property(get=GetCoeff2OnRPower18,put=PutCoeff2OnRPower18))
    double Coeff2OnRPower18;
    __declspec(property(get=GetCoeff2OnRPower20,put=PutCoeff2OnRPower20))
    double Coeff2OnRPower20;
    __declspec(property(get=GetCoeff2OnRPower22,put=PutCoeff2OnRPower22))
    double Coeff2OnRPower22;
    __declspec(property(get=GetCoeff2OnRPower24,put=PutCoeff2OnRPower24))
    double Coeff2OnRPower24;
    __declspec(property(get=GetOrder,put=PutOrder))
    double Order;
    __declspec(property(get=GetNormRadius,put=PutNormRadius))
    double NormRadius;
    __declspec(property(get=GetMaxTermNumber,put=PutMaxTermNumber))
    long MaxTermNumber;
    __declspec(property(get=GetCoeffOnPPower2,put=PutCoeffOnPPower2))
    double CoeffOnPPower2;
    __declspec(property(get=GetCoeffOnPPower4,put=PutCoeffOnPPower4))
    double CoeffOnPPower4;
    __declspec(property(get=GetCoeffOnPPower6,put=PutCoeffOnPPower6))
    double CoeffOnPPower6;
    __declspec(property(get=GetCoeffOnPPower8,put=PutCoeffOnPPower8))
    double CoeffOnPPower8;
    __declspec(property(get=GetCoeffOnPPower10,put=PutCoeffOnPPower10))
    double CoeffOnPPower10;
    __declspec(property(get=GetCoeffOnPPower12,put=PutCoeffOnPPower12))
    double CoeffOnPPower12;
    __declspec(property(get=GetCoeffOnPPower14,put=PutCoeffOnPPower14))
    double CoeffOnPPower14;
    __declspec(property(get=GetCoeffOnPPower16,put=PutCoeffOnPPower16))
    double CoeffOnPPower16;
    __declspec(property(get=GetCoeffOnPPower18,put=PutCoeffOnPPower18))
    double CoeffOnPPower18;
    __declspec(property(get=GetCoeffOnPPower20,put=PutCoeffOnPPower20))
    double CoeffOnPPower20;
    __declspec(property(get=GetCoeffOnPPower22,put=PutCoeffOnPPower22))
    double CoeffOnPPower22;
    __declspec(property(get=GetCoeffOnPPower24,put=PutCoeffOnPPower24))
    double CoeffOnPPower24;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetRadialApertureCell ( );
    IEditorCellPtr GetThicknessCell ( );
    IEditorCellPtr GetRadius1Cell ( );
    IEditorCellPtr GetConic1Cell ( );
    IEditorCellPtr GetCoeff1OnRPower2Cell ( );
    IEditorCellPtr GetCoeff1OnRPower4Cell ( );
    IEditorCellPtr GetCoeff1OnRPower6Cell ( );
    IEditorCellPtr GetCoeff1OnRPower8Cell ( );
    IEditorCellPtr GetCoeff1OnRPower10Cell ( );
    IEditorCellPtr GetCoeff1OnRPower12Cell ( );
    IEditorCellPtr GetCoeff1OnRPower14Cell ( );
    IEditorCellPtr GetCoeff1OnRPower16Cell ( );
    IEditorCellPtr GetCoeff1OnRPower18Cell ( );
    IEditorCellPtr GetCoeff1OnRPower20Cell ( );
    IEditorCellPtr GetCoeff1OnRPower22Cell ( );
    IEditorCellPtr GetCoeff1OnRPower24Cell ( );
    IEditorCellPtr GetRadius2Cell ( );
    IEditorCellPtr GetConic2Cell ( );
    IEditorCellPtr GetCoeff2OnRPower2Cell ( );
    IEditorCellPtr GetCoeff2OnRPower4Cell ( );
    IEditorCellPtr GetCoeff2OnRPower6Cell ( );
    IEditorCellPtr GetCoeff2OnRPower8Cell ( );
    IEditorCellPtr GetCoeff2OnRPower10Cell ( );
    IEditorCellPtr GetCoeff2OnRPower12Cell ( );
    IEditorCellPtr GetCoeff2OnRPower14Cell ( );
    IEditorCellPtr GetCoeff2OnRPower16Cell ( );
    IEditorCellPtr GetCoeff2OnRPower18Cell ( );
    IEditorCellPtr GetCoeff2OnRPower20Cell ( );
    IEditorCellPtr GetCoeff2OnRPower22Cell ( );
    IEditorCellPtr GetCoeff2OnRPower24Cell ( );
    IEditorCellPtr GetOrderCell ( );
    IEditorCellPtr GetNormRadiusCell ( );
    IEditorCellPtr GetMaxTermNumberCell ( );
    IEditorCellPtr GetCoeffOnPPower2Cell ( );
    IEditorCellPtr GetCoeffOnPPower4Cell ( );
    IEditorCellPtr GetCoeffOnPPower6Cell ( );
    IEditorCellPtr GetCoeffOnPPower8Cell ( );
    IEditorCellPtr GetCoeffOnPPower10Cell ( );
    IEditorCellPtr GetCoeffOnPPower12Cell ( );
    IEditorCellPtr GetCoeffOnPPower14Cell ( );
    IEditorCellPtr GetCoeffOnPPower16Cell ( );
    IEditorCellPtr GetCoeffOnPPower18Cell ( );
    IEditorCellPtr GetCoeffOnPPower20Cell ( );
    IEditorCellPtr GetCoeffOnPPower22Cell ( );
    IEditorCellPtr GetCoeffOnPPower24Cell ( );
    double GetRadialAperture ( );
    void PutRadialAperture (
        double pRetVal );
    double GetThickness ( );
    void PutThickness (
        double pRetVal );
    double GetRadius1 ( );
    void PutRadius1 (
        double pRetVal );
    double GetConic1 ( );
    void PutConic1 (
        double pRetVal );
    double GetCoeff1OnRPower2 ( );
    void PutCoeff1OnRPower2 (
        double pRetVal );
    double GetCoeff1OnRPower4 ( );
    void PutCoeff1OnRPower4 (
        double pRetVal );
    double GetCoeff1OnRPower6 ( );
    void PutCoeff1OnRPower6 (
        double pRetVal );
    double GetCoeff1OnRPower8 ( );
    void PutCoeff1OnRPower8 (
        double pRetVal );
    double GetCoeff1OnRPower10 ( );
    void PutCoeff1OnRPower10 (
        double pRetVal );
    double GetCoeff1OnRPower12 ( );
    void PutCoeff1OnRPower12 (
        double pRetVal );
    double GetCoeff1OnRPower14 ( );
    void PutCoeff1OnRPower14 (
        double pRetVal );
    double GetCoeff1OnRPower16 ( );
    void PutCoeff1OnRPower16 (
        double pRetVal );
    double GetCoeff1OnRPower18 ( );
    void PutCoeff1OnRPower18 (
        double pRetVal );
    double GetCoeff1OnRPower20 ( );
    void PutCoeff1OnRPower20 (
        double pRetVal );
    double GetCoeff1OnRPower22 ( );
    void PutCoeff1OnRPower22 (
        double pRetVal );
    double GetCoeff1OnRPower24 ( );
    void PutCoeff1OnRPower24 (
        double pRetVal );
    double GetRadius2 ( );
    void PutRadius2 (
        double pRetVal );
    double GetConic2 ( );
    void PutConic2 (
        double pRetVal );
    double GetCoeff2OnRPower2 ( );
    void PutCoeff2OnRPower2 (
        double pRetVal );
    double GetCoeff2OnRPower4 ( );
    void PutCoeff2OnRPower4 (
        double pRetVal );
    double GetCoeff2OnRPower6 ( );
    void PutCoeff2OnRPower6 (
        double pRetVal );
    double GetCoeff2OnRPower8 ( );
    void PutCoeff2OnRPower8 (
        double pRetVal );
    double GetCoeff2OnRPower10 ( );
    void PutCoeff2OnRPower10 (
        double pRetVal );
    double GetCoeff2OnRPower12 ( );
    void PutCoeff2OnRPower12 (
        double pRetVal );
    double GetCoeff2OnRPower14 ( );
    void PutCoeff2OnRPower14 (
        double pRetVal );
    double GetCoeff2OnRPower16 ( );
    void PutCoeff2OnRPower16 (
        double pRetVal );
    double GetCoeff2OnRPower18 ( );
    void PutCoeff2OnRPower18 (
        double pRetVal );
    double GetCoeff2OnRPower20 ( );
    void PutCoeff2OnRPower20 (
        double pRetVal );
    double GetCoeff2OnRPower22 ( );
    void PutCoeff2OnRPower22 (
        double pRetVal );
    double GetCoeff2OnRPower24 ( );
    void PutCoeff2OnRPower24 (
        double pRetVal );
    double GetOrder ( );
    void PutOrder (
        double pRetVal );
    double GetNormRadius ( );
    void PutNormRadius (
        double pRetVal );
    long GetMaxTermNumber ( );
    void PutMaxTermNumber (
        long pRetVal );
    double GetCoeffOnPPower2 ( );
    void PutCoeffOnPPower2 (
        double pRetVal );
    double GetCoeffOnPPower4 ( );
    void PutCoeffOnPPower4 (
        double pRetVal );
    double GetCoeffOnPPower6 ( );
    void PutCoeffOnPPower6 (
        double pRetVal );
    double GetCoeffOnPPower8 ( );
    void PutCoeffOnPPower8 (
        double pRetVal );
    double GetCoeffOnPPower10 ( );
    void PutCoeffOnPPower10 (
        double pRetVal );
    double GetCoeffOnPPower12 ( );
    void PutCoeffOnPPower12 (
        double pRetVal );
    double GetCoeffOnPPower14 ( );
    void PutCoeffOnPPower14 (
        double pRetVal );
    double GetCoeffOnPPower16 ( );
    void PutCoeffOnPPower16 (
        double pRetVal );
    double GetCoeffOnPPower18 ( );
    void PutCoeffOnPPower18 (
        double pRetVal );
    double GetCoeffOnPPower20 ( );
    void PutCoeffOnPPower20 (
        double pRetVal );
    double GetCoeffOnPPower22 ( );
    void PutCoeffOnPPower22 (
        double pRetVal );
    double GetCoeffOnPPower24 ( );
    void PutCoeffOnPPower24 (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RadialApertureCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ThicknessCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1OnRPower2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1OnRPower4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1OnRPower6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1OnRPower8Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1OnRPower10Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1OnRPower12Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1OnRPower14Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1OnRPower16Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1OnRPower18Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1OnRPower20Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1OnRPower22Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1OnRPower24Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2OnRPower2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2OnRPower4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2OnRPower6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2OnRPower8Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2OnRPower10Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2OnRPower12Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2OnRPower14Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2OnRPower16Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2OnRPower18Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2OnRPower20Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2OnRPower22Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2OnRPower24Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_OrderCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NormRadiusCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaxTermNumberCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnPPower2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnPPower4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnPPower6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnPPower8Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnPPower10Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnPPower12Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnPPower14Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnPPower16Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnPPower18Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnPPower20Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnPPower22Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnPPower24Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadialAperture (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RadialAperture (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Thickness (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Thickness (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Radius1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Conic1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1OnRPower2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff1OnRPower2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1OnRPower4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff1OnRPower4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1OnRPower6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff1OnRPower6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1OnRPower8 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff1OnRPower8 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1OnRPower10 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff1OnRPower10 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1OnRPower12 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff1OnRPower12 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1OnRPower14 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff1OnRPower14 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1OnRPower16 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff1OnRPower16 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1OnRPower18 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff1OnRPower18 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1OnRPower20 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff1OnRPower20 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1OnRPower22 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff1OnRPower22 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1OnRPower24 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff1OnRPower24 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Radius2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Conic2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2OnRPower2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff2OnRPower2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2OnRPower4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff2OnRPower4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2OnRPower6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff2OnRPower6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2OnRPower8 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff2OnRPower8 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2OnRPower10 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff2OnRPower10 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2OnRPower12 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff2OnRPower12 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2OnRPower14 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff2OnRPower14 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2OnRPower16 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff2OnRPower16 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2OnRPower18 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff2OnRPower18 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2OnRPower20 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff2OnRPower20 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2OnRPower22 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff2OnRPower22 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2OnRPower24 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff2OnRPower24 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Order (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Order (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_NormRadius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NormRadius (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaxTermNumber (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaxTermNumber (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnPPower2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffOnPPower2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnPPower4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffOnPPower4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnPPower6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffOnPPower6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnPPower8 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffOnPPower8 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnPPower10 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffOnPPower10 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnPPower12 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffOnPPower12 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnPPower14 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffOnPPower14 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnPPower16 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffOnPPower16 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnPPower18 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffOnPPower18 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnPPower20 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffOnPPower20 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnPPower22 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffOnPPower22 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnPPower24 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffOnPPower24 (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("335fc343-2944-4add-9d3c-a48e629a68c6"))
IObjectBoolean : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSplineCell))
    IEditorCellPtr SplineCell;
    __declspec(property(get=GetModeCell))
    IEditorCellPtr ModeCell;
    __declspec(property(get=GetNumberXminusVoxels_Cell))
    IEditorCellPtr NumberXminusVoxels_Cell;
    __declspec(property(get=GetNumberYminusVoxels_Cell))
    IEditorCellPtr NumberYminusVoxels_Cell;
    __declspec(property(get=GetNumberZminusVoxels_Cell))
    IEditorCellPtr NumberZminusVoxels_Cell;
    __declspec(property(get=GetObjectACell))
    IEditorCellPtr ObjectACell;
    __declspec(property(get=GetObjectBCell))
    IEditorCellPtr ObjectBCell;
    __declspec(property(get=GetObjectCCell))
    IEditorCellPtr ObjectCCell;
    __declspec(property(get=GetObjectDCell))
    IEditorCellPtr ObjectDCell;
    __declspec(property(get=GetObjectECell))
    IEditorCellPtr ObjectECell;
    __declspec(property(get=GetObjectFCell))
    IEditorCellPtr ObjectFCell;
    __declspec(property(get=GetObjectGCell))
    IEditorCellPtr ObjectGCell;
    __declspec(property(get=GetObjectHCell))
    IEditorCellPtr ObjectHCell;
    __declspec(property(get=GetObjectICell))
    IEditorCellPtr ObjectICell;
    __declspec(property(get=GetObjectJCell))
    IEditorCellPtr ObjectJCell;
    __declspec(property(get=GetSpline,put=PutSpline))
    long Spline;
    __declspec(property(get=GetMode,put=PutMode))
    long Mode;
    __declspec(property(get=GetNumberXminusVoxels,put=PutNumberXminusVoxels))
    long NumberXminusVoxels;
    __declspec(property(get=GetNumberYminusVoxels,put=PutNumberYminusVoxels))
    long NumberYminusVoxels;
    __declspec(property(get=GetNumberZminusVoxels,put=PutNumberZminusVoxels))
    long NumberZminusVoxels;
    __declspec(property(get=GetObjectA,put=PutObjectA))
    long ObjectA;
    __declspec(property(get=GetObjectB,put=PutObjectB))
    long ObjectB;
    __declspec(property(get=GetObjectC,put=PutObjectC))
    long ObjectC;
    __declspec(property(get=GetObjectD,put=PutObjectD))
    long ObjectD;
    __declspec(property(get=GetObjectE,put=PutObjectE))
    long ObjectE;
    __declspec(property(get=GetObjectF,put=PutObjectF))
    long ObjectF;
    __declspec(property(get=GetObjectG,put=PutObjectG))
    long ObjectG;
    __declspec(property(get=GetObjectH,put=PutObjectH))
    long ObjectH;
    __declspec(property(get=GetObjectI,put=PutObjectI))
    long ObjectI;
    __declspec(property(get=GetObjectJ,put=PutObjectJ))
    long ObjectJ;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetSplineCell ( );
    IEditorCellPtr GetModeCell ( );
    IEditorCellPtr GetNumberXminusVoxels_Cell ( );
    IEditorCellPtr GetNumberYminusVoxels_Cell ( );
    IEditorCellPtr GetNumberZminusVoxels_Cell ( );
    IEditorCellPtr GetObjectACell ( );
    IEditorCellPtr GetObjectBCell ( );
    IEditorCellPtr GetObjectCCell ( );
    IEditorCellPtr GetObjectDCell ( );
    IEditorCellPtr GetObjectECell ( );
    IEditorCellPtr GetObjectFCell ( );
    IEditorCellPtr GetObjectGCell ( );
    IEditorCellPtr GetObjectHCell ( );
    IEditorCellPtr GetObjectICell ( );
    IEditorCellPtr GetObjectJCell ( );
    long GetSpline ( );
    void PutSpline (
        long pRetVal );
    long GetMode ( );
    void PutMode (
        long pRetVal );
    long GetNumberXminusVoxels ( );
    void PutNumberXminusVoxels (
        long pRetVal );
    long GetNumberYminusVoxels ( );
    void PutNumberYminusVoxels (
        long pRetVal );
    long GetNumberZminusVoxels ( );
    void PutNumberZminusVoxels (
        long pRetVal );
    long GetObjectA ( );
    void PutObjectA (
        long pRetVal );
    long GetObjectB ( );
    void PutObjectB (
        long pRetVal );
    long GetObjectC ( );
    void PutObjectC (
        long pRetVal );
    long GetObjectD ( );
    void PutObjectD (
        long pRetVal );
    long GetObjectE ( );
    void PutObjectE (
        long pRetVal );
    long GetObjectF ( );
    void PutObjectF (
        long pRetVal );
    long GetObjectG ( );
    void PutObjectG (
        long pRetVal );
    long GetObjectH ( );
    void PutObjectH (
        long pRetVal );
    long GetObjectI ( );
    void PutObjectI (
        long pRetVal );
    long GetObjectJ ( );
    void PutObjectJ (
        long pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SplineCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ModeCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberXminusVoxels_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberYminusVoxels_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberZminusVoxels_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectACell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectBCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectCCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectDCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectECell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectFCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectGCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectHCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectICell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectJCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Spline (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Spline (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Mode (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Mode (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberXminusVoxels (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberXminusVoxels (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberYminusVoxels (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberYminusVoxels (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberZminusVoxels (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberZminusVoxels (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectA (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ObjectA (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectB (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ObjectB (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectC (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ObjectC (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectD (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ObjectD (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectE (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ObjectE (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectF (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ObjectF (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectG (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ObjectG (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectH (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ObjectH (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectI (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ObjectI (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectJ (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ObjectJ (
        /*[in]*/ long pRetVal ) = 0;
};

struct __declspec(uuid("c613e3fa-c62d-4467-be48-ad5672f1ace2"))
IObjectCADAssemblyAutodeskInventor : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetExplodeCell))
    IEditorCellPtr ExplodeCell;
    __declspec(property(get=GetExplode,put=PutExplode))
    VARIANT_BOOL Explode;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetExplodeCell ( );
    VARIANT_BOOL GetExplode ( );
    void PutExplode (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ExplodeCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Explode (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Explode (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("df6591e4-c293-4612-a63a-4d163370f78e"))
IObjectCADAssemblyCreoParametric : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetExplodeCell))
    IEditorCellPtr ExplodeCell;
    __declspec(property(get=GetExplode,put=PutExplode))
    VARIANT_BOOL Explode;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetExplodeCell ( );
    VARIANT_BOOL GetExplode ( );
    void PutExplode (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ExplodeCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Explode (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Explode (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("3a0dc198-de8d-4c48-852d-6d55a8a94aab"))
IObjectCADAssemblySolidWorks : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetExplodeCell))
    IEditorCellPtr ExplodeCell;
    __declspec(property(get=GetExplode,put=PutExplode))
    VARIANT_BOOL Explode;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetExplodeCell ( );
    VARIANT_BOOL GetExplode ( );
    void PutExplode (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ExplodeCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Explode (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Explode (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("2740f748-f663-4f25-9b47-3cfac7ef3b3d"))
IObjectCADPartSTEPIGESSAT : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetScaleCell))
    IEditorCellPtr ScaleCell;
    __declspec(property(get=GetModeCell))
    IEditorCellPtr ModeCell;
    __declspec(property(get=GetNumberXMinusVoxelsCell))
    IEditorCellPtr NumberXMinusVoxelsCell;
    __declspec(property(get=GetNumberYMinusVoxelsCell))
    IEditorCellPtr NumberYMinusVoxelsCell;
    __declspec(property(get=GetNumberZMinusVoxelsCell))
    IEditorCellPtr NumberZMinusVoxelsCell;
    __declspec(property(get=GetExplodeCell))
    IEditorCellPtr ExplodeCell;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetMode,put=PutMode))
    long Mode;
    __declspec(property(get=GetNumberXminusVoxels,put=PutNumberXminusVoxels))
    long NumberXminusVoxels;
    __declspec(property(get=GetNumberYminusVoxels,put=PutNumberYminusVoxels))
    long NumberYminusVoxels;
    __declspec(property(get=GetNumberZminusVoxels,put=PutNumberZminusVoxels))
    long NumberZminusVoxels;
    __declspec(property(get=GetExplode,put=PutExplode))
    VARIANT_BOOL Explode;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetScaleCell ( );
    IEditorCellPtr GetModeCell ( );
    IEditorCellPtr GetNumberXMinusVoxelsCell ( );
    IEditorCellPtr GetNumberYMinusVoxelsCell ( );
    IEditorCellPtr GetNumberZMinusVoxelsCell ( );
    IEditorCellPtr GetExplodeCell ( );
    double GetScale ( );
    void PutScale (
        double pRetVal );
    long GetMode ( );
    void PutMode (
        long pRetVal );
    long GetNumberXminusVoxels ( );
    void PutNumberXminusVoxels (
        long pRetVal );
    long GetNumberYminusVoxels ( );
    void PutNumberYminusVoxels (
        long pRetVal );
    long GetNumberZminusVoxels ( );
    void PutNumberZminusVoxels (
        long pRetVal );
    VARIANT_BOOL GetExplode ( );
    void PutExplode (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ScaleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ModeCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberXMinusVoxelsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberYMinusVoxelsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberZMinusVoxelsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ExplodeCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Mode (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Mode (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberXminusVoxels (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberXminusVoxels (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberYminusVoxels (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberYminusVoxels (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberZminusVoxels (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberZminusVoxels (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Explode (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Explode (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("63d00e64-0775-46e5-9933-98ae24d720bc"))
IObjectCADPartSTL : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetScaleCell))
    IEditorCellPtr ScaleCell;
    __declspec(property(get=GetIsVolumeCell))
    IEditorCellPtr IsVolumeCell;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetIsVolume,put=PutIsVolume))
    VARIANT_BOOL IsVolume;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetScaleCell ( );
    IEditorCellPtr GetIsVolumeCell ( );
    double GetScale ( );
    void PutScale (
        double pRetVal );
    VARIANT_BOOL GetIsVolume ( );
    void PutIsVolume (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ScaleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsVolumeCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsVolume (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsVolume (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("9619e0a5-6b7b-4013-a2bb-89d30b9e1053"))
IObjectCone : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetZ1Cell))
    IEditorCellPtr Z1Cell;
    __declspec(property(get=GetRadius1Cell))
    IEditorCellPtr Radius1Cell;
    __declspec(property(get=GetZ2Cell))
    IEditorCellPtr Z2Cell;
    __declspec(property(get=GetRadius2Cell))
    IEditorCellPtr Radius2Cell;
    __declspec(property(get=GetZ1,put=PutZ1))
    double Z1;
    __declspec(property(get=GetRadius1,put=PutRadius1))
    double Radius1;
    __declspec(property(get=GetZ2,put=PutZ2))
    double Z2;
    __declspec(property(get=GetRadius2,put=PutRadius2))
    double Radius2;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetZ1Cell ( );
    IEditorCellPtr GetRadius1Cell ( );
    IEditorCellPtr GetZ2Cell ( );
    IEditorCellPtr GetRadius2Cell ( );
    double GetZ1 ( );
    void PutZ1 (
        double pRetVal );
    double GetRadius1 ( );
    void PutRadius1 (
        double pRetVal );
    double GetZ2 ( );
    void PutZ2 (
        double pRetVal );
    double GetRadius2 ( );
    void PutRadius2 (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Z1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Z2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Z1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Z1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Radius1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Z2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Z2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Radius2 (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("b92c47e6-4fe0-45e5-a40b-8a525601bc06"))
IObjectCPC : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRadialApertureCell))
    IEditorCellPtr RadialApertureCell;
    __declspec(property(get=GetAngleDegreesCell))
    IEditorCellPtr AngleDegreesCell;
    __declspec(property(get=GetLengthCell))
    IEditorCellPtr LengthCell;
    __declspec(property(get=GetIsVolumeCell))
    IEditorCellPtr IsVolumeCell;
    __declspec(property(get=GetVolumeIndexCell))
    IEditorCellPtr VolumeIndexCell;
    __declspec(property(get=GetRadialAperture,put=PutRadialAperture))
    double RadialAperture;
    __declspec(property(get=GetAngleDegrees,put=PutAngleDegrees))
    double AngleDegrees;
    __declspec(property(get=GetLength,put=PutLength))
    double Length;
    __declspec(property(get=GetIsVolume,put=PutIsVolume))
    VARIANT_BOOL IsVolume;
    __declspec(property(get=GetVolumeIndex,put=PutVolumeIndex))
    double VolumeIndex;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetRadialApertureCell ( );
    IEditorCellPtr GetAngleDegreesCell ( );
    IEditorCellPtr GetLengthCell ( );
    IEditorCellPtr GetIsVolumeCell ( );
    IEditorCellPtr GetVolumeIndexCell ( );
    double GetRadialAperture ( );
    void PutRadialAperture (
        double pRetVal );
    double GetAngleDegrees ( );
    void PutAngleDegrees (
        double pRetVal );
    double GetLength ( );
    void PutLength (
        double pRetVal );
    VARIANT_BOOL GetIsVolume ( );
    void PutIsVolume (
        VARIANT_BOOL pRetVal );
    double GetVolumeIndex ( );
    void PutVolumeIndex (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RadialApertureCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AngleDegreesCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LengthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsVolumeCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_VolumeIndexCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadialAperture (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RadialAperture (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_AngleDegrees (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AngleDegrees (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Length (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsVolume (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsVolume (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_VolumeIndex (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_VolumeIndex (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("677d7ba2-73fb-414b-b115-9011b1357dfb"))
IObjectCPCRectangular : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetXApertureCell))
    IEditorCellPtr XApertureCell;
    __declspec(property(get=GetXAngleDegreesCell))
    IEditorCellPtr XAngleDegreesCell;
    __declspec(property(get=GetYApertureCell))
    IEditorCellPtr YApertureCell;
    __declspec(property(get=GetYAngleDegreesCell))
    IEditorCellPtr YAngleDegreesCell;
    __declspec(property(get=GetLengthCell))
    IEditorCellPtr LengthCell;
    __declspec(property(get=GetIsVolumeCell))
    IEditorCellPtr IsVolumeCell;
    __declspec(property(get=GetVolumeIndexCell))
    IEditorCellPtr VolumeIndexCell;
    __declspec(property(get=GetXAperture,put=PutXAperture))
    double XAperture;
    __declspec(property(get=GetXAngleDegrees,put=PutXAngleDegrees))
    double XAngleDegrees;
    __declspec(property(get=GetYAperture,put=PutYAperture))
    double YAperture;
    __declspec(property(get=GetYAngleDegrees,put=PutYAngleDegrees))
    double YAngleDegrees;
    __declspec(property(get=GetLength,put=PutLength))
    double Length;
    __declspec(property(get=GetIsVolume,put=PutIsVolume))
    VARIANT_BOOL IsVolume;
    __declspec(property(get=GetVolumeIndex,put=PutVolumeIndex))
    double VolumeIndex;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetXApertureCell ( );
    IEditorCellPtr GetXAngleDegreesCell ( );
    IEditorCellPtr GetYApertureCell ( );
    IEditorCellPtr GetYAngleDegreesCell ( );
    IEditorCellPtr GetLengthCell ( );
    IEditorCellPtr GetIsVolumeCell ( );
    IEditorCellPtr GetVolumeIndexCell ( );
    double GetXAperture ( );
    void PutXAperture (
        double pRetVal );
    double GetXAngleDegrees ( );
    void PutXAngleDegrees (
        double pRetVal );
    double GetYAperture ( );
    void PutYAperture (
        double pRetVal );
    double GetYAngleDegrees ( );
    void PutYAngleDegrees (
        double pRetVal );
    double GetLength ( );
    void PutLength (
        double pRetVal );
    VARIANT_BOOL GetIsVolume ( );
    void PutIsVolume (
        VARIANT_BOOL pRetVal );
    double GetVolumeIndex ( );
    void PutVolumeIndex (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_XApertureCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XAngleDegreesCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YApertureCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YAngleDegreesCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LengthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsVolumeCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_VolumeIndexCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XAperture (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XAperture (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_XAngleDegrees (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XAngleDegrees (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YAperture (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YAperture (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YAngleDegrees (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YAngleDegrees (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Length (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsVolume (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsVolume (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_VolumeIndex (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_VolumeIndex (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("4e73d6dc-8e80-47fa-a32b-c9c4a5f6f8da"))
IObjectCylinderPipe : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFrontRCell))
    IEditorCellPtr FrontRCell;
    __declspec(property(get=GetZLengthCell))
    IEditorCellPtr ZLengthCell;
    __declspec(property(get=GetBackRCell))
    IEditorCellPtr BackRCell;
    __declspec(property(get=GetFrontR,put=PutFrontR))
    double FrontR;
    __declspec(property(get=GetZLength,put=PutZLength))
    double ZLength;
    __declspec(property(get=GetBackR,put=PutBackR))
    double BackR;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetFrontRCell ( );
    IEditorCellPtr GetZLengthCell ( );
    IEditorCellPtr GetBackRCell ( );
    double GetFrontR ( );
    void PutFrontR (
        double pRetVal );
    double GetZLength ( );
    void PutZLength (
        double pRetVal );
    double GetBackR ( );
    void PutBackR (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FrontRCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZLengthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_BackRCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontR (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontR (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZLength (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ZLength (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_BackR (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BackR (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("399768b6-19ba-46d0-89cc-7700b9c4c6fc"))
IObjectCylinderVolume : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFrontRCell))
    IEditorCellPtr FrontRCell;
    __declspec(property(get=GetZLengthCell))
    IEditorCellPtr ZLengthCell;
    __declspec(property(get=GetBackRCell))
    IEditorCellPtr BackRCell;
    __declspec(property(get=GetFrontR,put=PutFrontR))
    double FrontR;
    __declspec(property(get=GetZLength,put=PutZLength))
    double ZLength;
    __declspec(property(get=GetBackR,put=PutBackR))
    double BackR;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetFrontRCell ( );
    IEditorCellPtr GetZLengthCell ( );
    IEditorCellPtr GetBackRCell ( );
    double GetFrontR ( );
    void PutFrontR (
        double pRetVal );
    double GetZLength ( );
    void PutZLength (
        double pRetVal );
    double GetBackR ( );
    void PutBackR (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FrontRCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZLengthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_BackRCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontR (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontR (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZLength (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ZLength (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_BackR (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BackR (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("bb1b48c6-c69b-4921-8914-77ce978a96cb"))
IObjectCylinder2Pipe : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRadiusACell))
    IEditorCellPtr RadiusACell;
    __declspec(property(get=GetZLengthCell))
    IEditorCellPtr ZLengthCell;
    __declspec(property(get=GetFrontAngleAlongYCell))
    IEditorCellPtr FrontAngleAlongYCell;
    __declspec(property(get=GetBackAngleAlongYCell))
    IEditorCellPtr BackAngleAlongYCell;
    __declspec(property(get=GetFrontAngleAlongXCell))
    IEditorCellPtr FrontAngleAlongXCell;
    __declspec(property(get=GetBackAngleAlongXCell))
    IEditorCellPtr BackAngleAlongXCell;
    __declspec(property(get=GetRadiusA,put=PutRadiusA))
    double RadiusA;
    __declspec(property(get=GetZLength,put=PutZLength))
    double ZLength;
    __declspec(property(get=GetFrontAngleAlongY,put=PutFrontAngleAlongY))
    double FrontAngleAlongY;
    __declspec(property(get=GetBackAngleAlongY,put=PutBackAngleAlongY))
    double BackAngleAlongY;
    __declspec(property(get=GetFrontAngleAlongX,put=PutFrontAngleAlongX))
    double FrontAngleAlongX;
    __declspec(property(get=GetBackAngleAlongX,put=PutBackAngleAlongX))
    double BackAngleAlongX;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetRadiusACell ( );
    IEditorCellPtr GetZLengthCell ( );
    IEditorCellPtr GetFrontAngleAlongYCell ( );
    IEditorCellPtr GetBackAngleAlongYCell ( );
    IEditorCellPtr GetFrontAngleAlongXCell ( );
    IEditorCellPtr GetBackAngleAlongXCell ( );
    double GetRadiusA ( );
    void PutRadiusA (
        double pRetVal );
    double GetZLength ( );
    void PutZLength (
        double pRetVal );
    double GetFrontAngleAlongY ( );
    void PutFrontAngleAlongY (
        double pRetVal );
    double GetBackAngleAlongY ( );
    void PutBackAngleAlongY (
        double pRetVal );
    double GetFrontAngleAlongX ( );
    void PutFrontAngleAlongX (
        double pRetVal );
    double GetBackAngleAlongX ( );
    void PutBackAngleAlongX (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RadiusACell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZLengthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontAngleAlongYCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_BackAngleAlongYCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontAngleAlongXCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_BackAngleAlongXCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadiusA (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RadiusA (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZLength (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ZLength (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontAngleAlongY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontAngleAlongY (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_BackAngleAlongY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BackAngleAlongY (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontAngleAlongX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontAngleAlongX (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_BackAngleAlongX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BackAngleAlongX (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("47bfc03a-0005-4e43-b03b-cb7131b73fba"))
IObjectCylinder2Volume : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRadiusACell))
    IEditorCellPtr RadiusACell;
    __declspec(property(get=GetZLengthCell))
    IEditorCellPtr ZLengthCell;
    __declspec(property(get=GetFrontAngleAlongYCell))
    IEditorCellPtr FrontAngleAlongYCell;
    __declspec(property(get=GetBackAngleAlongYCell))
    IEditorCellPtr BackAngleAlongYCell;
    __declspec(property(get=GetFrontAngleAlongXCell))
    IEditorCellPtr FrontAngleAlongXCell;
    __declspec(property(get=GetBackAngleAlongXCell))
    IEditorCellPtr BackAngleAlongXCell;
    __declspec(property(get=GetRadiusA,put=PutRadiusA))
    double RadiusA;
    __declspec(property(get=GetZLength,put=PutZLength))
    double ZLength;
    __declspec(property(get=GetFrontAngleAlongY,put=PutFrontAngleAlongY))
    double FrontAngleAlongY;
    __declspec(property(get=GetBackAngleAlongY,put=PutBackAngleAlongY))
    double BackAngleAlongY;
    __declspec(property(get=GetFrontAngleAlongX,put=PutFrontAngleAlongX))
    double FrontAngleAlongX;
    __declspec(property(get=GetBackAngleAlongX,put=PutBackAngleAlongX))
    double BackAngleAlongX;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetRadiusACell ( );
    IEditorCellPtr GetZLengthCell ( );
    IEditorCellPtr GetFrontAngleAlongYCell ( );
    IEditorCellPtr GetBackAngleAlongYCell ( );
    IEditorCellPtr GetFrontAngleAlongXCell ( );
    IEditorCellPtr GetBackAngleAlongXCell ( );
    double GetRadiusA ( );
    void PutRadiusA (
        double pRetVal );
    double GetZLength ( );
    void PutZLength (
        double pRetVal );
    double GetFrontAngleAlongY ( );
    void PutFrontAngleAlongY (
        double pRetVal );
    double GetBackAngleAlongY ( );
    void PutBackAngleAlongY (
        double pRetVal );
    double GetFrontAngleAlongX ( );
    void PutFrontAngleAlongX (
        double pRetVal );
    double GetBackAngleAlongX ( );
    void PutBackAngleAlongX (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RadiusACell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZLengthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontAngleAlongYCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_BackAngleAlongYCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontAngleAlongXCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_BackAngleAlongXCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadiusA (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RadiusA (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZLength (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ZLength (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontAngleAlongY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontAngleAlongY (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_BackAngleAlongY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BackAngleAlongY (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontAngleAlongX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontAngleAlongX (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_BackAngleAlongX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BackAngleAlongX (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("bba8560e-48b9-4325-aefd-378ec390d26f"))
IObjectDetectorColor : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetXHalfWidthCell))
    IEditorCellPtr XHalfWidthCell;
    __declspec(property(get=GetYHalfWidthCell))
    IEditorCellPtr YHalfWidthCell;
    __declspec(property(get=GetNumberXPixelsCell))
    IEditorCellPtr NumberXPixelsCell;
    __declspec(property(get=GetNumberYPixelsCell))
    IEditorCellPtr NumberYPixelsCell;
    __declspec(property(get=GetDataTypeCell))
    IEditorCellPtr DataTypeCell;
    __declspec(property(get=GetColorCell))
    IEditorCellPtr ColorCell;
    __declspec(property(get=GetSmoothingCell))
    IEditorCellPtr SmoothingCell;
    __declspec(property(get=GetScaleCell))
    IEditorCellPtr ScaleCell;
    __declspec(property(get=GetPlotScaleCell))
    IEditorCellPtr PlotScaleCell;
    __declspec(property(get=GetFrontOnlyCell))
    IEditorCellPtr FrontOnlyCell;
    __declspec(property(get=GetXAngleMinCell))
    IEditorCellPtr XAngleMinCell;
    __declspec(property(get=GetXAngleMaxCell))
    IEditorCellPtr XAngleMaxCell;
    __declspec(property(get=GetYAngleMinCell))
    IEditorCellPtr YAngleMinCell;
    __declspec(property(get=GetYAngleMaxCell))
    IEditorCellPtr YAngleMaxCell;
    __declspec(property(get=GetPolarizationCell))
    IEditorCellPtr PolarizationCell;
    __declspec(property(get=GetMirroringCell))
    IEditorCellPtr MirroringCell;
    __declspec(property(get=GetXHalfWidth,put=PutXHalfWidth))
    double XHalfWidth;
    __declspec(property(get=GetYHalfWidth,put=PutYHalfWidth))
    double YHalfWidth;
    __declspec(property(get=GetNumberXPixels,put=PutNumberXPixels))
    long NumberXPixels;
    __declspec(property(get=GetNumberYPixels,put=PutNumberYPixels))
    long NumberYPixels;
    __declspec(property(get=GetDataType,put=PutDataType))
    long DataType;
    __declspec(property(get=GetColor,put=PutColor))
    long Color;
    __declspec(property(get=GetSmoothing,put=PutSmoothing))
    long Smoothing;
    __declspec(property(get=GetScale,put=PutScale))
    long Scale;
    __declspec(property(get=GetPlotScale,put=PutPlotScale))
    double PlotScale;
    __declspec(property(get=GetFrontOnly,put=PutFrontOnly))
    long FrontOnly;
    __declspec(property(get=GetXAngleMin,put=PutXAngleMin))
    double XAngleMin;
    __declspec(property(get=GetXAngleMax,put=PutXAngleMax))
    double XAngleMax;
    __declspec(property(get=GetYAngleMin,put=PutYAngleMin))
    double YAngleMin;
    __declspec(property(get=GetYAngleMax,put=PutYAngleMax))
    double YAngleMax;
    __declspec(property(get=GetPolarization,put=PutPolarization))
    long Polarization;
    __declspec(property(get=GetMirroring,put=PutMirroring))
    long Mirroring;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetXHalfWidthCell ( );
    IEditorCellPtr GetYHalfWidthCell ( );
    IEditorCellPtr GetNumberXPixelsCell ( );
    IEditorCellPtr GetNumberYPixelsCell ( );
    IEditorCellPtr GetDataTypeCell ( );
    IEditorCellPtr GetColorCell ( );
    IEditorCellPtr GetSmoothingCell ( );
    IEditorCellPtr GetScaleCell ( );
    IEditorCellPtr GetPlotScaleCell ( );
    IEditorCellPtr GetFrontOnlyCell ( );
    IEditorCellPtr GetXAngleMinCell ( );
    IEditorCellPtr GetXAngleMaxCell ( );
    IEditorCellPtr GetYAngleMinCell ( );
    IEditorCellPtr GetYAngleMaxCell ( );
    IEditorCellPtr GetPolarizationCell ( );
    IEditorCellPtr GetMirroringCell ( );
    double GetXHalfWidth ( );
    void PutXHalfWidth (
        double pRetVal );
    double GetYHalfWidth ( );
    void PutYHalfWidth (
        double pRetVal );
    long GetNumberXPixels ( );
    void PutNumberXPixels (
        long pRetVal );
    long GetNumberYPixels ( );
    void PutNumberYPixels (
        long pRetVal );
    long GetDataType ( );
    void PutDataType (
        long pRetVal );
    long GetColor ( );
    void PutColor (
        long pRetVal );
    long GetSmoothing ( );
    void PutSmoothing (
        long pRetVal );
    long GetScale ( );
    void PutScale (
        long pRetVal );
    double GetPlotScale ( );
    void PutPlotScale (
        double pRetVal );
    long GetFrontOnly ( );
    void PutFrontOnly (
        long pRetVal );
    double GetXAngleMin ( );
    void PutXAngleMin (
        double pRetVal );
    double GetXAngleMax ( );
    void PutXAngleMax (
        double pRetVal );
    double GetYAngleMin ( );
    void PutYAngleMin (
        double pRetVal );
    double GetYAngleMax ( );
    void PutYAngleMax (
        double pRetVal );
    long GetPolarization ( );
    void PutPolarization (
        long pRetVal );
    long GetMirroring ( );
    void PutMirroring (
        long pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_XHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberXPixelsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberYPixelsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DataTypeCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ColorCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SmoothingCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ScaleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_PlotScaleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontOnlyCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XAngleMinCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XAngleMaxCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YAngleMinCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YAngleMaxCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_PolarizationCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MirroringCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberXPixels (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberXPixels (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberYPixels (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberYPixels (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_DataType (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DataType (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Smoothing (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Smoothing (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_PlotScale (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PlotScale (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontOnly (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontOnly (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_XAngleMin (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XAngleMin (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_XAngleMax (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XAngleMax (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YAngleMin (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YAngleMin (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YAngleMax (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YAngleMax (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Polarization (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Polarization (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Mirroring (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Mirroring (
        /*[in]*/ long pRetVal ) = 0;
};

struct __declspec(uuid("b9e767c5-f6e7-4754-8e31-29555be2ce7e"))
IObjectDetectorPolar : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMaxAngleCell))
    IEditorCellPtr MaxAngleCell;
    __declspec(property(get=GetRadialSizeCell))
    IEditorCellPtr RadialSizeCell;
    __declspec(property(get=GetNumberPPixelsCell))
    IEditorCellPtr NumberPPixelsCell;
    __declspec(property(get=GetNumberAPixelsCell))
    IEditorCellPtr NumberAPixelsCell;
    __declspec(property(get=GetMirroringCell))
    IEditorCellPtr MirroringCell;
    __declspec(property(get=GetMaxAngle,put=PutMaxAngle))
    double MaxAngle;
    __declspec(property(get=GetRadialSize,put=PutRadialSize))
    double RadialSize;
    __declspec(property(get=GetNumberPPixels,put=PutNumberPPixels))
    long NumberPPixels;
    __declspec(property(get=GetNumberAPixels,put=PutNumberAPixels))
    long NumberAPixels;
    __declspec(property(get=GetMirroring,put=PutMirroring))
    VARIANT_BOOL Mirroring;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetMaxAngleCell ( );
    IEditorCellPtr GetRadialSizeCell ( );
    IEditorCellPtr GetNumberPPixelsCell ( );
    IEditorCellPtr GetNumberAPixelsCell ( );
    IEditorCellPtr GetMirroringCell ( );
    double GetMaxAngle ( );
    void PutMaxAngle (
        double pRetVal );
    double GetRadialSize ( );
    void PutRadialSize (
        double pRetVal );
    long GetNumberPPixels ( );
    void PutNumberPPixels (
        long pRetVal );
    long GetNumberAPixels ( );
    void PutNumberAPixels (
        long pRetVal );
    VARIANT_BOOL GetMirroring ( );
    void PutMirroring (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MaxAngleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadialSizeCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberPPixelsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberAPixelsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MirroringCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaxAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaxAngle (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadialSize (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RadialSize (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberPPixels (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberPPixels (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberAPixels (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberAPixels (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Mirroring (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Mirroring (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("a249ac0b-7f12-464f-9ff7-5ad0b6a501da"))
IObjectDetectorRectangle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetXHalfWidthCell))
    IEditorCellPtr XHalfWidthCell;
    __declspec(property(get=GetYHalfWidthCell))
    IEditorCellPtr YHalfWidthCell;
    __declspec(property(get=GetNumberXPixelsCell))
    IEditorCellPtr NumberXPixelsCell;
    __declspec(property(get=GetNumberYPixelsCell))
    IEditorCellPtr NumberYPixelsCell;
    __declspec(property(get=GetDataTypeCell))
    IEditorCellPtr DataTypeCell;
    __declspec(property(get=GetColorCell))
    IEditorCellPtr ColorCell;
    __declspec(property(get=GetSmoothingCell))
    IEditorCellPtr SmoothingCell;
    __declspec(property(get=GetScaleCell))
    IEditorCellPtr ScaleCell;
    __declspec(property(get=GetPlotScaleCell))
    IEditorCellPtr PlotScaleCell;
    __declspec(property(get=GetFrontOnlyCell))
    IEditorCellPtr FrontOnlyCell;
    __declspec(property(get=GetPsfWaveNumberCell))
    IEditorCellPtr PsfWaveNumberCell;
    __declspec(property(get=GetXAngleMinCell))
    IEditorCellPtr XAngleMinCell;
    __declspec(property(get=GetXAngleMaxCell))
    IEditorCellPtr XAngleMaxCell;
    __declspec(property(get=GetYAngleMinCell))
    IEditorCellPtr YAngleMinCell;
    __declspec(property(get=GetYAngleMaxCell))
    IEditorCellPtr YAngleMaxCell;
    __declspec(property(get=GetPolarizationCell))
    IEditorCellPtr PolarizationCell;
    __declspec(property(get=GetMirroringCell))
    IEditorCellPtr MirroringCell;
    __declspec(property(get=GetXHalfWidth,put=PutXHalfWidth))
    double XHalfWidth;
    __declspec(property(get=GetYHalfWidth,put=PutYHalfWidth))
    double YHalfWidth;
    __declspec(property(get=GetNumberXPixels,put=PutNumberXPixels))
    long NumberXPixels;
    __declspec(property(get=GetNumberYPixels,put=PutNumberYPixels))
    long NumberYPixels;
    __declspec(property(get=GetDataType,put=PutDataType))
    long DataType;
    __declspec(property(get=GetColor,put=PutColor))
    long Color;
    __declspec(property(get=GetSmoothing,put=PutSmoothing))
    long Smoothing;
    __declspec(property(get=GetScale,put=PutScale))
    long Scale;
    __declspec(property(get=GetPlotScale,put=PutPlotScale))
    double PlotScale;
    __declspec(property(get=GetFrontOnly,put=PutFrontOnly))
    long FrontOnly;
    __declspec(property(get=GetPsfWaveNumber,put=PutPsfWaveNumber))
    long PsfWaveNumber;
    __declspec(property(get=GetXAngleMin,put=PutXAngleMin))
    double XAngleMin;
    __declspec(property(get=GetXAngleMax,put=PutXAngleMax))
    double XAngleMax;
    __declspec(property(get=GetYAngleMin,put=PutYAngleMin))
    double YAngleMin;
    __declspec(property(get=GetYAngleMax,put=PutYAngleMax))
    double YAngleMax;
    __declspec(property(get=GetPolarization,put=PutPolarization))
    long Polarization;
    __declspec(property(get=GetMirroring,put=PutMirroring))
    long Mirroring;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetXHalfWidthCell ( );
    IEditorCellPtr GetYHalfWidthCell ( );
    IEditorCellPtr GetNumberXPixelsCell ( );
    IEditorCellPtr GetNumberYPixelsCell ( );
    IEditorCellPtr GetDataTypeCell ( );
    IEditorCellPtr GetColorCell ( );
    IEditorCellPtr GetSmoothingCell ( );
    IEditorCellPtr GetScaleCell ( );
    IEditorCellPtr GetPlotScaleCell ( );
    IEditorCellPtr GetFrontOnlyCell ( );
    IEditorCellPtr GetPsfWaveNumberCell ( );
    IEditorCellPtr GetXAngleMinCell ( );
    IEditorCellPtr GetXAngleMaxCell ( );
    IEditorCellPtr GetYAngleMinCell ( );
    IEditorCellPtr GetYAngleMaxCell ( );
    IEditorCellPtr GetPolarizationCell ( );
    IEditorCellPtr GetMirroringCell ( );
    double GetXHalfWidth ( );
    void PutXHalfWidth (
        double pRetVal );
    double GetYHalfWidth ( );
    void PutYHalfWidth (
        double pRetVal );
    long GetNumberXPixels ( );
    void PutNumberXPixels (
        long pRetVal );
    long GetNumberYPixels ( );
    void PutNumberYPixels (
        long pRetVal );
    long GetDataType ( );
    void PutDataType (
        long pRetVal );
    long GetColor ( );
    void PutColor (
        long pRetVal );
    long GetSmoothing ( );
    void PutSmoothing (
        long pRetVal );
    long GetScale ( );
    void PutScale (
        long pRetVal );
    double GetPlotScale ( );
    void PutPlotScale (
        double pRetVal );
    long GetFrontOnly ( );
    void PutFrontOnly (
        long pRetVal );
    long GetPsfWaveNumber ( );
    void PutPsfWaveNumber (
        long pRetVal );
    double GetXAngleMin ( );
    void PutXAngleMin (
        double pRetVal );
    double GetXAngleMax ( );
    void PutXAngleMax (
        double pRetVal );
    double GetYAngleMin ( );
    void PutYAngleMin (
        double pRetVal );
    double GetYAngleMax ( );
    void PutYAngleMax (
        double pRetVal );
    long GetPolarization ( );
    void PutPolarization (
        long pRetVal );
    long GetMirroring ( );
    void PutMirroring (
        long pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_XHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberXPixelsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberYPixelsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DataTypeCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ColorCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SmoothingCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ScaleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_PlotScaleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontOnlyCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_PsfWaveNumberCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XAngleMinCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XAngleMaxCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YAngleMinCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YAngleMaxCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_PolarizationCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MirroringCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberXPixels (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberXPixels (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberYPixels (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberYPixels (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_DataType (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DataType (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Smoothing (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Smoothing (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_PlotScale (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PlotScale (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontOnly (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontOnly (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_PsfWaveNumber (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PsfWaveNumber (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_XAngleMin (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XAngleMin (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_XAngleMax (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XAngleMax (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YAngleMin (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YAngleMin (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YAngleMax (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YAngleMax (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Polarization (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Polarization (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Mirroring (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Mirroring (
        /*[in]*/ long pRetVal ) = 0;
};

struct __declspec(uuid("803b4bf3-4764-4025-b58d-2dc854c073d3"))
IObjectDetectorSurface : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRadiusCell))
    IEditorCellPtr RadiusCell;
    __declspec(property(get=GetConicCell))
    IEditorCellPtr ConicCell;
    __declspec(property(get=GetMaxApertureCell))
    IEditorCellPtr MaxApertureCell;
    __declspec(property(get=GetMinApertureCell))
    IEditorCellPtr MinApertureCell;
    __declspec(property(get=GetNumberAZonesCell))
    IEditorCellPtr NumberAZonesCell;
    __declspec(property(get=GetNumberRZonesCell))
    IEditorCellPtr NumberRZonesCell;
    __declspec(property(get=GetDataTypeCell))
    IEditorCellPtr DataTypeCell;
    __declspec(property(get=GetColorCell))
    IEditorCellPtr ColorCell;
    __declspec(property(get=GetScaleCell))
    IEditorCellPtr ScaleCell;
    __declspec(property(get=GetMaxScaleCell))
    IEditorCellPtr MaxScaleCell;
    __declspec(property(get=GetFrontOnlyCell))
    IEditorCellPtr FrontOnlyCell;
    __declspec(property(get=GetNumberOfTermsCell))
    IEditorCellPtr NumberOfTermsCell;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetConic,put=PutConic))
    double Conic;
    __declspec(property(get=GetMaxAperture,put=PutMaxAperture))
    double MaxAperture;
    __declspec(property(get=GetMinAperture,put=PutMinAperture))
    double MinAperture;
    __declspec(property(get=GetNumberAZones,put=PutNumberAZones))
    long NumberAZones;
    __declspec(property(get=GetNumberRZones,put=PutNumberRZones))
    long NumberRZones;
    __declspec(property(get=GetDataType,put=PutDataType))
    long DataType;
    __declspec(property(get=GetColor,put=PutColor))
    long Color;
    __declspec(property(get=GetScale,put=PutScale))
    long Scale;
    __declspec(property(get=GetMaxScale,put=PutMaxScale))
    double MaxScale;
    __declspec(property(get=GetFrontOnly,put=PutFrontOnly))
    VARIANT_BOOL FrontOnly;
    __declspec(property(get=GetNumberOfTerms,put=PutNumberOfTerms))
    long NumberOfTerms;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetRadiusCell ( );
    IEditorCellPtr GetConicCell ( );
    IEditorCellPtr GetMaxApertureCell ( );
    IEditorCellPtr GetMinApertureCell ( );
    IEditorCellPtr GetNumberAZonesCell ( );
    IEditorCellPtr GetNumberRZonesCell ( );
    IEditorCellPtr GetDataTypeCell ( );
    IEditorCellPtr GetColorCell ( );
    IEditorCellPtr GetScaleCell ( );
    IEditorCellPtr GetMaxScaleCell ( );
    IEditorCellPtr GetFrontOnlyCell ( );
    IEditorCellPtr GetNumberOfTermsCell ( );
    IEditorCellPtr RPowerICell (
        long i );
    double GetRadius ( );
    void PutRadius (
        double pRetVal );
    double GetConic ( );
    void PutConic (
        double pRetVal );
    double GetMaxAperture ( );
    void PutMaxAperture (
        double pRetVal );
    double GetMinAperture ( );
    void PutMinAperture (
        double pRetVal );
    long GetNumberAZones ( );
    void PutNumberAZones (
        long pRetVal );
    long GetNumberRZones ( );
    void PutNumberRZones (
        long pRetVal );
    long GetDataType ( );
    void PutDataType (
        long pRetVal );
    long GetColor ( );
    void PutColor (
        long pRetVal );
    long GetScale ( );
    void PutScale (
        long pRetVal );
    double GetMaxScale ( );
    void PutMaxScale (
        double pRetVal );
    VARIANT_BOOL GetFrontOnly ( );
    void PutFrontOnly (
        VARIANT_BOOL pRetVal );
    long GetNumberOfTerms ( );
    void PutNumberOfTerms (
        long pRetVal );
    double GetRPowerI (
        long i );
    HRESULT SetRPowerI (
        long i,
        double v );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RadiusCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ConicCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaxApertureCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinApertureCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberAZonesCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberRZonesCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DataTypeCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ColorCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ScaleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaxScaleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontOnlyCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfTermsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_RPowerICell (
        /*[in]*/ long i,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Conic (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaxAperture (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaxAperture (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinAperture (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MinAperture (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberAZones (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberAZones (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberRZones (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberRZones (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_DataType (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DataType (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaxScale (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaxScale (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontOnly (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfTerms (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfTerms (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetRPowerI (
        /*[in]*/ long i,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetRPowerI (
        /*[in]*/ long i,
        /*[in]*/ double v ) = 0;
};

struct __declspec(uuid("eb6d7dcc-caa2-4445-a811-7498ddcb5396"))
IObjectDetectorVolume : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetXHalfWidthCell))
    IEditorCellPtr XHalfWidthCell;
    __declspec(property(get=GetYHalfWidthCell))
    IEditorCellPtr YHalfWidthCell;
    __declspec(property(get=GetZHalfWidthCell))
    IEditorCellPtr ZHalfWidthCell;
    __declspec(property(get=GetNumberXPixelsCell))
    IEditorCellPtr NumberXPixelsCell;
    __declspec(property(get=GetNumberYPixelsCell))
    IEditorCellPtr NumberYPixelsCell;
    __declspec(property(get=GetNumberZPixelsCell))
    IEditorCellPtr NumberZPixelsCell;
    __declspec(property(get=GetXHalfWidth,put=PutXHalfWidth))
    double XHalfWidth;
    __declspec(property(get=GetYHalfWidth,put=PutYHalfWidth))
    double YHalfWidth;
    __declspec(property(get=GetZHalfWidth,put=PutZHalfWidth))
    double ZHalfWidth;
    __declspec(property(get=GetNumberXPixels,put=PutNumberXPixels))
    long NumberXPixels;
    __declspec(property(get=GetNumberYPixels,put=PutNumberYPixels))
    long NumberYPixels;
    __declspec(property(get=GetNumberZPixels,put=PutNumberZPixels))
    long NumberZPixels;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetXHalfWidthCell ( );
    IEditorCellPtr GetYHalfWidthCell ( );
    IEditorCellPtr GetZHalfWidthCell ( );
    IEditorCellPtr GetNumberXPixelsCell ( );
    IEditorCellPtr GetNumberYPixelsCell ( );
    IEditorCellPtr GetNumberZPixelsCell ( );
    double GetXHalfWidth ( );
    void PutXHalfWidth (
        double pRetVal );
    double GetYHalfWidth ( );
    void PutYHalfWidth (
        double pRetVal );
    double GetZHalfWidth ( );
    void PutZHalfWidth (
        double pRetVal );
    long GetNumberXPixels ( );
    void PutNumberXPixels (
        long pRetVal );
    long GetNumberYPixels ( );
    void PutNumberYPixels (
        long pRetVal );
    long GetNumberZPixels ( );
    void PutNumberZPixels (
        long pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_XHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberXPixelsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberYPixelsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberZPixelsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ZHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberXPixels (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberXPixels (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberYPixels (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberYPixels (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberZPixels (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberZPixels (
        /*[in]*/ long pRetVal ) = 0;
};

struct __declspec(uuid("9cd57dc6-6eb7-4cc5-986c-a3f8ff7fce60"))
IObjectDiffractionGrating : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRadius1Cell))
    IEditorCellPtr Radius1Cell;
    __declspec(property(get=GetConic1Cell))
    IEditorCellPtr Conic1Cell;
    __declspec(property(get=GetClear1Cell))
    IEditorCellPtr Clear1Cell;
    __declspec(property(get=GetEdge1Cell))
    IEditorCellPtr Edge1Cell;
    __declspec(property(get=GetThicknessCell))
    IEditorCellPtr ThicknessCell;
    __declspec(property(get=GetRadius2Cell))
    IEditorCellPtr Radius2Cell;
    __declspec(property(get=GetConic2Cell))
    IEditorCellPtr Conic2Cell;
    __declspec(property(get=GetClear2Cell))
    IEditorCellPtr Clear2Cell;
    __declspec(property(get=GetEdge2Cell))
    IEditorCellPtr Edge2Cell;
    __declspec(property(get=GetLinesPerMicronCell))
    IEditorCellPtr LinesPerMicronCell;
    __declspec(property(get=GetDiffOrderCell))
    IEditorCellPtr DiffOrderCell;
    __declspec(property(get=GetFormulaCell))
    IEditorCellPtr FormulaCell;
    __declspec(property(get=GetCoeffOnYPower1Cell))
    IEditorCellPtr CoeffOnYPower1Cell;
    __declspec(property(get=GetCoeffOnYPower2Cell))
    IEditorCellPtr CoeffOnYPower2Cell;
    __declspec(property(get=GetCoeffOnYPower3Cell))
    IEditorCellPtr CoeffOnYPower3Cell;
    __declspec(property(get=GetCoeffOnYPower4Cell))
    IEditorCellPtr CoeffOnYPower4Cell;
    __declspec(property(get=GetRadius1,put=PutRadius1))
    double Radius1;
    __declspec(property(get=GetConic1,put=PutConic1))
    double Conic1;
    __declspec(property(get=GetClear1,put=PutClear1))
    double Clear1;
    __declspec(property(get=GetEdge1,put=PutEdge1))
    double Edge1;
    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness;
    __declspec(property(get=GetRadius2,put=PutRadius2))
    double Radius2;
    __declspec(property(get=GetConic2,put=PutConic2))
    double Conic2;
    __declspec(property(get=GetClear2,put=PutClear2))
    double Clear2;
    __declspec(property(get=GetEdge2,put=PutEdge2))
    double Edge2;
    __declspec(property(get=GetLinesPerMicron,put=PutLinesPerMicron))
    double LinesPerMicron;
    __declspec(property(get=GetDiffOrder,put=PutDiffOrder))
    double DiffOrder;
    __declspec(property(get=GetFormula,put=PutFormula))
    long Formula;
    __declspec(property(get=GetCoeffOnYPower1,put=PutCoeffOnYPower1))
    double CoeffOnYPower1;
    __declspec(property(get=GetCoeffOnYPower2,put=PutCoeffOnYPower2))
    double CoeffOnYPower2;
    __declspec(property(get=GetCoeffOnYPower3,put=PutCoeffOnYPower3))
    double CoeffOnYPower3;
    __declspec(property(get=GetCoeffOnYPower4,put=PutCoeffOnYPower4))
    double CoeffOnYPower4;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetRadius1Cell ( );
    IEditorCellPtr GetConic1Cell ( );
    IEditorCellPtr GetClear1Cell ( );
    IEditorCellPtr GetEdge1Cell ( );
    IEditorCellPtr GetThicknessCell ( );
    IEditorCellPtr GetRadius2Cell ( );
    IEditorCellPtr GetConic2Cell ( );
    IEditorCellPtr GetClear2Cell ( );
    IEditorCellPtr GetEdge2Cell ( );
    IEditorCellPtr GetLinesPerMicronCell ( );
    IEditorCellPtr GetDiffOrderCell ( );
    IEditorCellPtr GetFormulaCell ( );
    IEditorCellPtr GetCoeffOnYPower1Cell ( );
    IEditorCellPtr GetCoeffOnYPower2Cell ( );
    IEditorCellPtr GetCoeffOnYPower3Cell ( );
    IEditorCellPtr GetCoeffOnYPower4Cell ( );
    double GetRadius1 ( );
    void PutRadius1 (
        double pRetVal );
    double GetConic1 ( );
    void PutConic1 (
        double pRetVal );
    double GetClear1 ( );
    void PutClear1 (
        double pRetVal );
    double GetEdge1 ( );
    void PutEdge1 (
        double pRetVal );
    double GetThickness ( );
    void PutThickness (
        double pRetVal );
    double GetRadius2 ( );
    void PutRadius2 (
        double pRetVal );
    double GetConic2 ( );
    void PutConic2 (
        double pRetVal );
    double GetClear2 ( );
    void PutClear2 (
        double pRetVal );
    double GetEdge2 ( );
    void PutEdge2 (
        double pRetVal );
    double GetLinesPerMicron ( );
    void PutLinesPerMicron (
        double pRetVal );
    double GetDiffOrder ( );
    void PutDiffOrder (
        double pRetVal );
    long GetFormula ( );
    void PutFormula (
        long pRetVal );
    double GetCoeffOnYPower1 ( );
    void PutCoeffOnYPower1 (
        double pRetVal );
    double GetCoeffOnYPower2 ( );
    void PutCoeffOnYPower2 (
        double pRetVal );
    double GetCoeffOnYPower3 ( );
    void PutCoeffOnYPower3 (
        double pRetVal );
    double GetCoeffOnYPower4 ( );
    void PutCoeffOnYPower4 (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Radius1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Clear1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Edge1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ThicknessCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Clear2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Edge2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LinesPerMicronCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DiffOrderCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FormulaCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnYPower1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnYPower2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnYPower3Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnYPower4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Radius1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Conic1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Clear1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Clear1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Edge1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Edge1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Thickness (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Thickness (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Radius2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Conic2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Clear2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Clear2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Edge2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Edge2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_LinesPerMicron (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_LinesPerMicron (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_DiffOrder (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DiffOrder (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnYPower1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffOnYPower1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnYPower2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffOnYPower2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnYPower3 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffOnYPower3 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnYPower4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffOnYPower4 (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("6b3a58b6-8f91-486a-aed5-1ee66bce4683"))
IObjectDualBEFSurface : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetXHalfWidthCell))
    IEditorCellPtr XHalfWidthCell;
    __declspec(property(get=GetYHalfWidthCell))
    IEditorCellPtr YHalfWidthCell;
    __declspec(property(get=GetRXCell))
    IEditorCellPtr RXCell;
    __declspec(property(get=GetRYCell))
    IEditorCellPtr RYCell;
    __declspec(property(get=GetTXCell))
    IEditorCellPtr TXCell;
    __declspec(property(get=GetTYCell))
    IEditorCellPtr TYCell;
    __declspec(property(get=GetXHalfWidth,put=PutXHalfWidth))
    double XHalfWidth;
    __declspec(property(get=GetYHalfWidth,put=PutYHalfWidth))
    double YHalfWidth;
    __declspec(property(get=GetRX,put=PutRX))
    double RX;
    __declspec(property(get=GetRY,put=PutRY))
    double RY;
    __declspec(property(get=GetTX,put=PutTX))
    double TX;
    __declspec(property(get=GetTY,put=PutTY))
    double TY;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetXHalfWidthCell ( );
    IEditorCellPtr GetYHalfWidthCell ( );
    IEditorCellPtr GetRXCell ( );
    IEditorCellPtr GetRYCell ( );
    IEditorCellPtr GetTXCell ( );
    IEditorCellPtr GetTYCell ( );
    double GetXHalfWidth ( );
    void PutXHalfWidth (
        double pRetVal );
    double GetYHalfWidth ( );
    void PutYHalfWidth (
        double pRetVal );
    double GetRX ( );
    void PutRX (
        double pRetVal );
    double GetRY ( );
    void PutRY (
        double pRetVal );
    double GetTX ( );
    void PutTX (
        double pRetVal );
    double GetTY ( );
    void PutTY (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_XHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RXCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RYCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TXCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TYCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RX (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RY (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_TX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TX (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_TY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TY (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("06e6bc8e-3021-48ce-8704-cb2497a5e76f"))
IObjectEllipse : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetXHalfWidthCell))
    IEditorCellPtr XHalfWidthCell;
    __declspec(property(get=GetYHalfWidthCell))
    IEditorCellPtr YHalfWidthCell;
    __declspec(property(get=GetXHalfWidth,put=PutXHalfWidth))
    double XHalfWidth;
    __declspec(property(get=GetYHalfWidth,put=PutYHalfWidth))
    double YHalfWidth;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetXHalfWidthCell ( );
    IEditorCellPtr GetYHalfWidthCell ( );
    double GetXHalfWidth ( );
    void PutXHalfWidth (
        double pRetVal );
    double GetYHalfWidth ( );
    void PutYHalfWidth (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_XHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("a1b6069c-ec7f-4543-aa23-2104fca64fbe"))
IObjectEllipticalVolume : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFrontXHalfWidthCell))
    IEditorCellPtr FrontXHalfWidthCell;
    __declspec(property(get=GetFrontYHalfWidthCell))
    IEditorCellPtr FrontYHalfWidthCell;
    __declspec(property(get=GetBackXHalfWidthCell))
    IEditorCellPtr BackXHalfWidthCell;
    __declspec(property(get=GetBackYHalfWidthCell))
    IEditorCellPtr BackYHalfWidthCell;
    __declspec(property(get=GetLengthCell))
    IEditorCellPtr LengthCell;
    __declspec(property(get=GetIsVolumeCell))
    IEditorCellPtr IsVolumeCell;
    __declspec(property(get=GetFrontXHalfWidth,put=PutFrontXHalfWidth))
    double FrontXHalfWidth;
    __declspec(property(get=GetFrontYHalfWidth,put=PutFrontYHalfWidth))
    double FrontYHalfWidth;
    __declspec(property(get=GetBackXHalfWidth,put=PutBackXHalfWidth))
    double BackXHalfWidth;
    __declspec(property(get=GetBackYHalfWidth,put=PutBackYHalfWidth))
    double BackYHalfWidth;
    __declspec(property(get=GetLength,put=PutLength))
    double Length;
    __declspec(property(get=GetIsVolume,put=PutIsVolume))
    VARIANT_BOOL IsVolume;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetFrontXHalfWidthCell ( );
    IEditorCellPtr GetFrontYHalfWidthCell ( );
    IEditorCellPtr GetBackXHalfWidthCell ( );
    IEditorCellPtr GetBackYHalfWidthCell ( );
    IEditorCellPtr GetLengthCell ( );
    IEditorCellPtr GetIsVolumeCell ( );
    double GetFrontXHalfWidth ( );
    void PutFrontXHalfWidth (
        double pRetVal );
    double GetFrontYHalfWidth ( );
    void PutFrontYHalfWidth (
        double pRetVal );
    double GetBackXHalfWidth ( );
    void PutBackXHalfWidth (
        double pRetVal );
    double GetBackYHalfWidth ( );
    void PutBackYHalfWidth (
        double pRetVal );
    double GetLength ( );
    void PutLength (
        double pRetVal );
    VARIANT_BOOL GetIsVolume ( );
    void PutIsVolume (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FrontXHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontYHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_BackXHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_BackYHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LengthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsVolumeCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontXHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontXHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontYHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontYHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_BackXHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BackXHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_BackYHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BackYHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Length (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsVolume (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsVolume (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("10f36ed3-ff59-4f0a-81ac-e10d57e56993"))
IObjectEvenAsphereLens : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetClear1Cell))
    IEditorCellPtr Clear1Cell;
    __declspec(property(get=GetThicknessCell))
    IEditorCellPtr ThicknessCell;
    __declspec(property(get=GetRadius1Cell))
    IEditorCellPtr Radius1Cell;
    __declspec(property(get=GetConic1Cell))
    IEditorCellPtr Conic1Cell;
    __declspec(property(get=GetCoeff1OnRPower2Cell))
    IEditorCellPtr Coeff1OnRPower2Cell;
    __declspec(property(get=GetCoeff1OnRPower4Cell))
    IEditorCellPtr Coeff1OnRPower4Cell;
    __declspec(property(get=GetCoeff1OnRPower6Cell))
    IEditorCellPtr Coeff1OnRPower6Cell;
    __declspec(property(get=GetCoeff1OnRPower8Cell))
    IEditorCellPtr Coeff1OnRPower8Cell;
    __declspec(property(get=GetCoeff1OnRPower10Cell))
    IEditorCellPtr Coeff1OnRPower10Cell;
    __declspec(property(get=GetCoeff1OnRPower12Cell))
    IEditorCellPtr Coeff1OnRPower12Cell;
    __declspec(property(get=GetCoeff1OnRPower14Cell))
    IEditorCellPtr Coeff1OnRPower14Cell;
    __declspec(property(get=GetCoeff1OnRPower16Cell))
    IEditorCellPtr Coeff1OnRPower16Cell;
    __declspec(property(get=GetRadius2Cell))
    IEditorCellPtr Radius2Cell;
    __declspec(property(get=GetConic2Cell))
    IEditorCellPtr Conic2Cell;
    __declspec(property(get=GetCoeff2OnRPower2Cell))
    IEditorCellPtr Coeff2OnRPower2Cell;
    __declspec(property(get=GetCoeff2OnRPower4Cell))
    IEditorCellPtr Coeff2OnRPower4Cell;
    __declspec(property(get=GetCoeff2OnRPower6Cell))
    IEditorCellPtr Coeff2OnRPower6Cell;
    __declspec(property(get=GetCoeff2OnRPower8Cell))
    IEditorCellPtr Coeff2OnRPower8Cell;
    __declspec(property(get=GetCoeff2OnRPower10Cell))
    IEditorCellPtr Coeff2OnRPower10Cell;
    __declspec(property(get=GetCoeff2OnRPower12Cell))
    IEditorCellPtr Coeff2OnRPower12Cell;
    __declspec(property(get=GetCoeff2OnRPower14Cell))
    IEditorCellPtr Coeff2OnRPower14Cell;
    __declspec(property(get=GetCoeff2OnRPower16Cell))
    IEditorCellPtr Coeff2OnRPower16Cell;
    __declspec(property(get=GetEdge1Cell))
    IEditorCellPtr Edge1Cell;
    __declspec(property(get=GetClear2Cell))
    IEditorCellPtr Clear2Cell;
    __declspec(property(get=GetEdge2Cell))
    IEditorCellPtr Edge2Cell;
    __declspec(property(get=GetClear1,put=PutClear1))
    double Clear1;
    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness;
    __declspec(property(get=GetRadius1,put=PutRadius1))
    double Radius1;
    __declspec(property(get=GetConic1,put=PutConic1))
    double Conic1;
    __declspec(property(get=GetCoeff1OnRPower2,put=PutCoeff1OnRPower2))
    double Coeff1OnRPower2;
    __declspec(property(get=GetCoeff1OnRPower4,put=PutCoeff1OnRPower4))
    double Coeff1OnRPower4;
    __declspec(property(get=GetCoeff1OnRPower6,put=PutCoeff1OnRPower6))
    double Coeff1OnRPower6;
    __declspec(property(get=GetCoeff1OnRPower8,put=PutCoeff1OnRPower8))
    double Coeff1OnRPower8;
    __declspec(property(get=GetCoeff1OnRPower10,put=PutCoeff1OnRPower10))
    double Coeff1OnRPower10;
    __declspec(property(get=GetCoeff1OnRPower12,put=PutCoeff1OnRPower12))
    double Coeff1OnRPower12;
    __declspec(property(get=GetCoeff1OnRPower14,put=PutCoeff1OnRPower14))
    double Coeff1OnRPower14;
    __declspec(property(get=GetCoeff1OnRPower16,put=PutCoeff1OnRPower16))
    double Coeff1OnRPower16;
    __declspec(property(get=GetRadius2,put=PutRadius2))
    double Radius2;
    __declspec(property(get=GetConic2,put=PutConic2))
    double Conic2;
    __declspec(property(get=GetCoeff2OnRPower2,put=PutCoeff2OnRPower2))
    double Coeff2OnRPower2;
    __declspec(property(get=GetCoeff2OnRPower4,put=PutCoeff2OnRPower4))
    double Coeff2OnRPower4;
    __declspec(property(get=GetCoeff2OnRPower6,put=PutCoeff2OnRPower6))
    double Coeff2OnRPower6;
    __declspec(property(get=GetCoeff2OnRPower8,put=PutCoeff2OnRPower8))
    double Coeff2OnRPower8;
    __declspec(property(get=GetCoeff2OnRPower10,put=PutCoeff2OnRPower10))
    double Coeff2OnRPower10;
    __declspec(property(get=GetCoeff2OnRPower12,put=PutCoeff2OnRPower12))
    double Coeff2OnRPower12;
    __declspec(property(get=GetCoeff2OnRPower14,put=PutCoeff2OnRPower14))
    double Coeff2OnRPower14;
    __declspec(property(get=GetCoeff2OnRPower16,put=PutCoeff2OnRPower16))
    double Coeff2OnRPower16;
    __declspec(property(get=GetEdge1,put=PutEdge1))
    double Edge1;
    __declspec(property(get=GetClear2,put=PutClear2))
    double Clear2;
    __declspec(property(get=GetEdge2,put=PutEdge2))
    double Edge2;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetClear1Cell ( );
    IEditorCellPtr GetThicknessCell ( );
    IEditorCellPtr GetRadius1Cell ( );
    IEditorCellPtr GetConic1Cell ( );
    IEditorCellPtr GetCoeff1OnRPower2Cell ( );
    IEditorCellPtr GetCoeff1OnRPower4Cell ( );
    IEditorCellPtr GetCoeff1OnRPower6Cell ( );
    IEditorCellPtr GetCoeff1OnRPower8Cell ( );
    IEditorCellPtr GetCoeff1OnRPower10Cell ( );
    IEditorCellPtr GetCoeff1OnRPower12Cell ( );
    IEditorCellPtr GetCoeff1OnRPower14Cell ( );
    IEditorCellPtr GetCoeff1OnRPower16Cell ( );
    IEditorCellPtr GetRadius2Cell ( );
    IEditorCellPtr GetConic2Cell ( );
    IEditorCellPtr GetCoeff2OnRPower2Cell ( );
    IEditorCellPtr GetCoeff2OnRPower4Cell ( );
    IEditorCellPtr GetCoeff2OnRPower6Cell ( );
    IEditorCellPtr GetCoeff2OnRPower8Cell ( );
    IEditorCellPtr GetCoeff2OnRPower10Cell ( );
    IEditorCellPtr GetCoeff2OnRPower12Cell ( );
    IEditorCellPtr GetCoeff2OnRPower14Cell ( );
    IEditorCellPtr GetCoeff2OnRPower16Cell ( );
    IEditorCellPtr GetEdge1Cell ( );
    IEditorCellPtr GetClear2Cell ( );
    IEditorCellPtr GetEdge2Cell ( );
    double GetClear1 ( );
    void PutClear1 (
        double pRetVal );
    double GetThickness ( );
    void PutThickness (
        double pRetVal );
    double GetRadius1 ( );
    void PutRadius1 (
        double pRetVal );
    double GetConic1 ( );
    void PutConic1 (
        double pRetVal );
    double GetCoeff1OnRPower2 ( );
    void PutCoeff1OnRPower2 (
        double pRetVal );
    double GetCoeff1OnRPower4 ( );
    void PutCoeff1OnRPower4 (
        double pRetVal );
    double GetCoeff1OnRPower6 ( );
    void PutCoeff1OnRPower6 (
        double pRetVal );
    double GetCoeff1OnRPower8 ( );
    void PutCoeff1OnRPower8 (
        double pRetVal );
    double GetCoeff1OnRPower10 ( );
    void PutCoeff1OnRPower10 (
        double pRetVal );
    double GetCoeff1OnRPower12 ( );
    void PutCoeff1OnRPower12 (
        double pRetVal );
    double GetCoeff1OnRPower14 ( );
    void PutCoeff1OnRPower14 (
        double pRetVal );
    double GetCoeff1OnRPower16 ( );
    void PutCoeff1OnRPower16 (
        double pRetVal );
    double GetRadius2 ( );
    void PutRadius2 (
        double pRetVal );
    double GetConic2 ( );
    void PutConic2 (
        double pRetVal );
    double GetCoeff2OnRPower2 ( );
    void PutCoeff2OnRPower2 (
        double pRetVal );
    double GetCoeff2OnRPower4 ( );
    void PutCoeff2OnRPower4 (
        double pRetVal );
    double GetCoeff2OnRPower6 ( );
    void PutCoeff2OnRPower6 (
        double pRetVal );
    double GetCoeff2OnRPower8 ( );
    void PutCoeff2OnRPower8 (
        double pRetVal );
    double GetCoeff2OnRPower10 ( );
    void PutCoeff2OnRPower10 (
        double pRetVal );
    double GetCoeff2OnRPower12 ( );
    void PutCoeff2OnRPower12 (
        double pRetVal );
    double GetCoeff2OnRPower14 ( );
    void PutCoeff2OnRPower14 (
        double pRetVal );
    double GetCoeff2OnRPower16 ( );
    void PutCoeff2OnRPower16 (
        double pRetVal );
    double GetEdge1 ( );
    void PutEdge1 (
        double pRetVal );
    double GetClear2 ( );
    void PutClear2 (
        double pRetVal );
    double GetEdge2 ( );
    void PutEdge2 (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Clear1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ThicknessCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1OnRPower2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1OnRPower4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1OnRPower6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1OnRPower8Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1OnRPower10Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1OnRPower12Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1OnRPower14Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1OnRPower16Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2OnRPower2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2OnRPower4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2OnRPower6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2OnRPower8Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2OnRPower10Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2OnRPower12Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2OnRPower14Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2OnRPower16Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Edge1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Clear2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Edge2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Clear1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Clear1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Thickness (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Thickness (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Radius1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Conic1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1OnRPower2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff1OnRPower2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1OnRPower4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff1OnRPower4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1OnRPower6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff1OnRPower6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1OnRPower8 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff1OnRPower8 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1OnRPower10 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff1OnRPower10 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1OnRPower12 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff1OnRPower12 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1OnRPower14 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff1OnRPower14 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1OnRPower16 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff1OnRPower16 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Radius2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Conic2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2OnRPower2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff2OnRPower2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2OnRPower4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff2OnRPower4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2OnRPower6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff2OnRPower6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2OnRPower8 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff2OnRPower8 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2OnRPower10 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff2OnRPower10 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2OnRPower12 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff2OnRPower12 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2OnRPower14 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff2OnRPower14 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2OnRPower16 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff2OnRPower16 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Edge1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Edge1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Clear2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Clear2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Edge2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Edge2 (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("14fedc57-61f5-463f-ad3a-415bf244f278"))
IObjectExtendedOddAsphereLens : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRadialHeightCell))
    IEditorCellPtr RadialHeightCell;
    __declspec(property(get=GetXHalfWidthCell))
    IEditorCellPtr XHalfWidthCell;
    __declspec(property(get=GetThicknessCell))
    IEditorCellPtr ThicknessCell;
    __declspec(property(get=GetFrontRCell))
    IEditorCellPtr FrontRCell;
    __declspec(property(get=GetFrontKCell))
    IEditorCellPtr FrontKCell;
    __declspec(property(get=GetFrontNormRadCell))
    IEditorCellPtr FrontNormRadCell;
    __declspec(property(get=GetFrontNumTermsCell))
    IEditorCellPtr FrontNumTermsCell;
    __declspec(property(get=GetRearRCell))
    IEditorCellPtr RearRCell;
    __declspec(property(get=GetRearKCell))
    IEditorCellPtr RearKCell;
    __declspec(property(get=GetRearNormRadCell))
    IEditorCellPtr RearNormRadCell;
    __declspec(property(get=GetRearNumTermsCell))
    IEditorCellPtr RearNumTermsCell;
    __declspec(property(get=GetRadialHeight,put=PutRadialHeight))
    double RadialHeight;
    __declspec(property(get=GetXHalfWidth,put=PutXHalfWidth))
    double XHalfWidth;
    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness;
    __declspec(property(get=GetFrontR,put=PutFrontR))
    double FrontR;
    __declspec(property(get=GetFrontK,put=PutFrontK))
    double FrontK;
    __declspec(property(get=GetFrontNormRad,put=PutFrontNormRad))
    double FrontNormRad;
    __declspec(property(get=GetFrontNumTerms,put=PutFrontNumTerms))
    long FrontNumTerms;
    __declspec(property(get=GetRearR,put=PutRearR))
    double RearR;
    __declspec(property(get=GetRearK,put=PutRearK))
    double RearK;
    __declspec(property(get=GetRearNormRad,put=PutRearNormRad))
    double RearNormRad;
    __declspec(property(get=GetRearNumTerms,put=PutRearNumTerms))
    long RearNumTerms;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetRadialHeightCell ( );
    IEditorCellPtr GetXHalfWidthCell ( );
    IEditorCellPtr GetThicknessCell ( );
    IEditorCellPtr GetFrontRCell ( );
    IEditorCellPtr GetFrontKCell ( );
    IEditorCellPtr GetFrontNormRadCell ( );
    IEditorCellPtr GetFrontNumTermsCell ( );
    IEditorCellPtr GetRearRCell ( );
    IEditorCellPtr GetRearKCell ( );
    IEditorCellPtr GetRearNormRadCell ( );
    IEditorCellPtr GetRearNumTermsCell ( );
    IEditorCellPtr GetFrontTermCell (
        long termNumber );
    IEditorCellPtr GetRearTermCell (
        long termNumber );
    double GetRadialHeight ( );
    void PutRadialHeight (
        double pRetVal );
    double GetXHalfWidth ( );
    void PutXHalfWidth (
        double pRetVal );
    double GetThickness ( );
    void PutThickness (
        double pRetVal );
    double GetFrontR ( );
    void PutFrontR (
        double pRetVal );
    double GetFrontK ( );
    void PutFrontK (
        double pRetVal );
    double GetFrontNormRad ( );
    void PutFrontNormRad (
        double pRetVal );
    long GetFrontNumTerms ( );
    void PutFrontNumTerms (
        long pRetVal );
    double GetRearR ( );
    void PutRearR (
        double pRetVal );
    double GetRearK ( );
    void PutRearK (
        double pRetVal );
    double GetRearNormRad ( );
    void PutRearNormRad (
        double pRetVal );
    long GetRearNumTerms ( );
    void PutRearNumTerms (
        long pRetVal );
    double GetFrontTerm (
        long termNumber );
    HRESULT SetFrontTerm (
        long termNumber,
        double Value );
    double GetRearTerm (
        long termNumber );
    HRESULT SetRearTerm (
        long termNumber,
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RadialHeightCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ThicknessCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontRCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontKCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontNormRadCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontNumTermsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearKCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearNormRadCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearNumTermsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetFrontTermCell (
        /*[in]*/ long termNumber,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetRearTermCell (
        /*[in]*/ long termNumber,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadialHeight (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RadialHeight (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_XHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Thickness (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Thickness (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontR (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontR (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontK (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontK (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontNormRad (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontNormRad (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontNumTerms (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontNumTerms (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearR (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearR (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearK (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearK (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearNormRad (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearNormRad (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearNumTerms (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearNumTerms (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetFrontTerm (
        /*[in]*/ long termNumber,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetFrontTerm (
        /*[in]*/ long termNumber,
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall raw_GetRearTerm (
        /*[in]*/ long termNumber,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetRearTerm (
        /*[in]*/ long termNumber,
        /*[in]*/ double Value ) = 0;
};

struct __declspec(uuid("540718ee-fc4a-41d5-a4e9-d736ddfd4320"))
IObjectExtendedPolynomialLens : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRadialHeightCell))
    IEditorCellPtr RadialHeightCell;
    __declspec(property(get=GetXHalfWidthCell))
    IEditorCellPtr XHalfWidthCell;
    __declspec(property(get=GetThicknessCell))
    IEditorCellPtr ThicknessCell;
    __declspec(property(get=GetFrontRCell))
    IEditorCellPtr FrontRCell;
    __declspec(property(get=GetFrontKCell))
    IEditorCellPtr FrontKCell;
    __declspec(property(get=GetFrontNormRadiusCell))
    IEditorCellPtr FrontNormRadiusCell;
    __declspec(property(get=GetFrontNumTermsCell))
    IEditorCellPtr FrontNumTermsCell;
    __declspec(property(get=GetRearRCell))
    IEditorCellPtr RearRCell;
    __declspec(property(get=GetRearKCell))
    IEditorCellPtr RearKCell;
    __declspec(property(get=GetRearNormRadiusCell))
    IEditorCellPtr RearNormRadiusCell;
    __declspec(property(get=GetRearNumTermsCell))
    IEditorCellPtr RearNumTermsCell;
    __declspec(property(get=GetRadialHeight,put=PutRadialHeight))
    double RadialHeight;
    __declspec(property(get=GetXHalfWidth,put=PutXHalfWidth))
    double XHalfWidth;
    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness;
    __declspec(property(get=GetFrontR,put=PutFrontR))
    double FrontR;
    __declspec(property(get=GetFrontK,put=PutFrontK))
    double FrontK;
    __declspec(property(get=GetFrontNormRadius,put=PutFrontNormRadius))
    double FrontNormRadius;
    __declspec(property(get=GetFrontNumTerms,put=PutFrontNumTerms))
    long FrontNumTerms;
    __declspec(property(get=GetRearR,put=PutRearR))
    double RearR;
    __declspec(property(get=GetRearK,put=PutRearK))
    double RearK;
    __declspec(property(get=GetRearNormRadius,put=PutRearNormRadius))
    double RearNormRadius;
    __declspec(property(get=GetRearNumTerms,put=PutRearNumTerms))
    long RearNumTerms;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetRadialHeightCell ( );
    IEditorCellPtr GetXHalfWidthCell ( );
    IEditorCellPtr GetThicknessCell ( );
    IEditorCellPtr GetFrontRCell ( );
    IEditorCellPtr GetFrontKCell ( );
    IEditorCellPtr GetFrontNormRadiusCell ( );
    IEditorCellPtr GetFrontNumTermsCell ( );
    IEditorCellPtr GetRearRCell ( );
    IEditorCellPtr GetRearKCell ( );
    IEditorCellPtr GetRearNormRadiusCell ( );
    IEditorCellPtr GetRearNumTermsCell ( );
    IEditorCellPtr GetFrontTermCell (
        long termNumber );
    IEditorCellPtr GetRearTermCell (
        long termNumber );
    double GetRadialHeight ( );
    void PutRadialHeight (
        double pRetVal );
    double GetXHalfWidth ( );
    void PutXHalfWidth (
        double pRetVal );
    double GetThickness ( );
    void PutThickness (
        double pRetVal );
    double GetFrontR ( );
    void PutFrontR (
        double pRetVal );
    double GetFrontK ( );
    void PutFrontK (
        double pRetVal );
    double GetFrontNormRadius ( );
    void PutFrontNormRadius (
        double pRetVal );
    long GetFrontNumTerms ( );
    void PutFrontNumTerms (
        long pRetVal );
    double GetRearR ( );
    void PutRearR (
        double pRetVal );
    double GetRearK ( );
    void PutRearK (
        double pRetVal );
    double GetRearNormRadius ( );
    void PutRearNormRadius (
        double pRetVal );
    long GetRearNumTerms ( );
    void PutRearNumTerms (
        long pRetVal );
    double GetFrontTerm (
        long termNumber );
    HRESULT SetFrontTerm (
        long termNumber,
        double Value );
    double GetRearTerm (
        long termNumber );
    HRESULT SetRearTerm (
        long termNumber,
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RadialHeightCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ThicknessCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontRCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontKCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontNormRadiusCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontNumTermsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearKCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearNormRadiusCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearNumTermsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetFrontTermCell (
        /*[in]*/ long termNumber,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetRearTermCell (
        /*[in]*/ long termNumber,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadialHeight (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RadialHeight (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_XHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Thickness (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Thickness (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontR (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontR (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontK (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontK (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontNormRadius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontNormRadius (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontNumTerms (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontNumTerms (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearR (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearR (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearK (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearK (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearNormRadius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearNormRadius (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearNumTerms (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearNumTerms (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetFrontTerm (
        /*[in]*/ long termNumber,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetFrontTerm (
        /*[in]*/ long termNumber,
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall raw_GetRearTerm (
        /*[in]*/ long termNumber,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetRearTerm (
        /*[in]*/ long termNumber,
        /*[in]*/ double Value ) = 0;
};

struct __declspec(uuid("db135810-f755-49c6-884d-4c42dd657cad"))
IObjectExtendedPolynomialSurface : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRadialHeightCell))
    IEditorCellPtr RadialHeightCell;
    __declspec(property(get=GetRadiusCell))
    IEditorCellPtr RadiusCell;
    __declspec(property(get=GetConicCell))
    IEditorCellPtr ConicCell;
    __declspec(property(get=GetNormRadCell))
    IEditorCellPtr NormRadCell;
    __declspec(property(get=GetNumberOfTermsCell))
    IEditorCellPtr NumberOfTermsCell;
    __declspec(property(get=GetRadialHeight,put=PutRadialHeight))
    double RadialHeight;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetConic,put=PutConic))
    double Conic;
    __declspec(property(get=GetNormRad,put=PutNormRad))
    double NormRad;
    __declspec(property(get=GetNumberOfTerms,put=PutNumberOfTerms))
    long NumberOfTerms;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetRadialHeightCell ( );
    IEditorCellPtr GetRadiusCell ( );
    IEditorCellPtr GetConicCell ( );
    IEditorCellPtr GetNormRadCell ( );
    IEditorCellPtr GetNumberOfTermsCell ( );
    double GetRadialHeight ( );
    void PutRadialHeight (
        double pRetVal );
    double GetRadius ( );
    void PutRadius (
        double pRetVal );
    double GetConic ( );
    void PutConic (
        double pRetVal );
    double GetNormRad ( );
    void PutNormRad (
        double pRetVal );
    long GetNumberOfTerms ( );
    void PutNumberOfTerms (
        long pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RadialHeightCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadiusCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ConicCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NormRadCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfTermsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadialHeight (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RadialHeight (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Conic (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_NormRad (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NormRad (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfTerms (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfTerms (
        /*[in]*/ long pRetVal ) = 0;
};

struct __declspec(uuid("83cef302-3601-4606-aadd-1b7b1fa7e999"))
IObjectExtruded : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLengthZCell))
    IEditorCellPtr LengthZCell;
    __declspec(property(get=GetFrontXScaleCell))
    IEditorCellPtr FrontXScaleCell;
    __declspec(property(get=GetFrontYScaleCell))
    IEditorCellPtr FrontYScaleCell;
    __declspec(property(get=GetRearXScaleCell))
    IEditorCellPtr RearXScaleCell;
    __declspec(property(get=GetRearYScaleCell))
    IEditorCellPtr RearYScaleCell;
    __declspec(property(get=GetRearXDecenterCell))
    IEditorCellPtr RearXDecenterCell;
    __declspec(property(get=GetRearYDecenterCell))
    IEditorCellPtr RearYDecenterCell;
    __declspec(property(get=GetLengthZ,put=PutLengthZ))
    double LengthZ;
    __declspec(property(get=GetFrontXScale,put=PutFrontXScale))
    double FrontXScale;
    __declspec(property(get=GetFrontYScale,put=PutFrontYScale))
    double FrontYScale;
    __declspec(property(get=GetRearXScale,put=PutRearXScale))
    double RearXScale;
    __declspec(property(get=GetRearYScale,put=PutRearYScale))
    double RearYScale;
    __declspec(property(get=GetRearXDecenter,put=PutRearXDecenter))
    double RearXDecenter;
    __declspec(property(get=GetRearYDecenter,put=PutRearYDecenter))
    double RearYDecenter;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetLengthZCell ( );
    IEditorCellPtr GetFrontXScaleCell ( );
    IEditorCellPtr GetFrontYScaleCell ( );
    IEditorCellPtr GetRearXScaleCell ( );
    IEditorCellPtr GetRearYScaleCell ( );
    IEditorCellPtr GetRearXDecenterCell ( );
    IEditorCellPtr GetRearYDecenterCell ( );
    double GetLengthZ ( );
    void PutLengthZ (
        double pRetVal );
    double GetFrontXScale ( );
    void PutFrontXScale (
        double pRetVal );
    double GetFrontYScale ( );
    void PutFrontYScale (
        double pRetVal );
    double GetRearXScale ( );
    void PutRearXScale (
        double pRetVal );
    double GetRearYScale ( );
    void PutRearYScale (
        double pRetVal );
    double GetRearXDecenter ( );
    void PutRearXDecenter (
        double pRetVal );
    double GetRearYDecenter ( );
    void PutRearYDecenter (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LengthZCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontXScaleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontYScaleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearXScaleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearYScaleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearXDecenterCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearYDecenterCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LengthZ (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_LengthZ (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontXScale (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontXScale (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontYScale (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontYScale (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearXScale (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearXScale (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearYScale (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearYScale (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearXDecenter (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearXDecenter (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearYDecenter (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearYDecenter (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("316982b1-a057-49ba-b851-d754fada16c0"))
IObjectFacetedSurface : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRadiusCell))
    IEditorCellPtr RadiusCell;
    __declspec(property(get=GetConicCell))
    IEditorCellPtr ConicCell;
    __declspec(property(get=GetShapeCell))
    IEditorCellPtr ShapeCell;
    __declspec(property(get=GetMinApertureCell))
    IEditorCellPtr MinApertureCell;
    __declspec(property(get=GetXHalfWidthCell))
    IEditorCellPtr XHalfWidthCell;
    __declspec(property(get=GetMaxApertureCell))
    IEditorCellPtr MaxApertureCell;
    __declspec(property(get=GetYHalfWidthCell))
    IEditorCellPtr YHalfWidthCell;
    __declspec(property(get=GetRadFacetsCell))
    IEditorCellPtr RadFacetsCell;
    __declspec(property(get=GetXFacetsCell))
    IEditorCellPtr XFacetsCell;
    __declspec(property(get=GetAngFacetsCell))
    IEditorCellPtr AngFacetsCell;
    __declspec(property(get=GetYFacetsCell))
    IEditorCellPtr YFacetsCell;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetConic,put=PutConic))
    double Conic;
    __declspec(property(get=GetShape,put=PutShape))
    enum ApertureShapes Shape;
    __declspec(property(get=GetMinAperture,put=PutMinAperture))
    double MinAperture;
    __declspec(property(get=GetXHalfWidth,put=PutXHalfWidth))
    double XHalfWidth;
    __declspec(property(get=GetMaxAperture,put=PutMaxAperture))
    double MaxAperture;
    __declspec(property(get=GetYHalfWidth,put=PutYHalfWidth))
    double YHalfWidth;
    __declspec(property(get=GetRadFacets,put=PutRadFacets))
    long RadFacets;
    __declspec(property(get=GetXFacets,put=PutXFacets))
    long XFacets;
    __declspec(property(get=GetAngFacets,put=PutAngFacets))
    long AngFacets;
    __declspec(property(get=GetYFacets,put=PutYFacets))
    long YFacets;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetRadiusCell ( );
    IEditorCellPtr GetConicCell ( );
    IEditorCellPtr GetShapeCell ( );
    IEditorCellPtr GetMinApertureCell ( );
    IEditorCellPtr GetXHalfWidthCell ( );
    IEditorCellPtr GetMaxApertureCell ( );
    IEditorCellPtr GetYHalfWidthCell ( );
    IEditorCellPtr GetRadFacetsCell ( );
    IEditorCellPtr GetXFacetsCell ( );
    IEditorCellPtr GetAngFacetsCell ( );
    IEditorCellPtr GetYFacetsCell ( );
    double GetRadius ( );
    void PutRadius (
        double pRetVal );
    double GetConic ( );
    void PutConic (
        double pRetVal );
    enum ApertureShapes GetShape ( );
    void PutShape (
        enum ApertureShapes pRetVal );
    double GetMinAperture ( );
    void PutMinAperture (
        double pRetVal );
    double GetXHalfWidth ( );
    void PutXHalfWidth (
        double pRetVal );
    double GetMaxAperture ( );
    void PutMaxAperture (
        double pRetVal );
    double GetYHalfWidth ( );
    void PutYHalfWidth (
        double pRetVal );
    long GetRadFacets ( );
    void PutRadFacets (
        long pRetVal );
    long GetXFacets ( );
    void PutXFacets (
        long pRetVal );
    long GetAngFacets ( );
    void PutAngFacets (
        long pRetVal );
    long GetYFacets ( );
    void PutYFacets (
        long pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RadiusCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ConicCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShapeCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinApertureCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaxApertureCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadFacetsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XFacetsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AngFacetsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YFacetsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Conic (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Shape (
        /*[out,retval]*/ enum ApertureShapes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Shape (
        /*[in]*/ enum ApertureShapes pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinAperture (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MinAperture (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_XHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaxAperture (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaxAperture (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadFacets (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RadFacets (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_XFacets (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XFacets (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_AngFacets (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AngFacets (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_YFacets (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YFacets (
        /*[in]*/ long pRetVal ) = 0;
};

struct __declspec(uuid("4c152ce0-0865-4160-833b-3dcb191de8fd"))
IObjectFreeformZ : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNumberOfPointsCell))
    IEditorCellPtr NumberOfPointsCell;
    __declspec(property(get=GetIsVolumeCell))
    IEditorCellPtr IsVolumeCell;
    __declspec(property(get=GetNumberOfPoints,put=PutNumberOfPoints))
    long NumberOfPoints;
    __declspec(property(get=GetIsVolume,put=PutIsVolume))
    VARIANT_BOOL IsVolume;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetNumberOfPointsCell ( );
    IEditorCellPtr GetIsVolumeCell ( );
    IEditorCellPtr GetYCell (
        long pointN );
    IEditorCellPtr GetZCell (
        long pointN );
    long GetNumberOfPoints ( );
    void PutNumberOfPoints (
        long pRetVal );
    VARIANT_BOOL GetIsVolume ( );
    void PutIsVolume (
        VARIANT_BOOL pRetVal );
    double GetY (
        long pointN );
    HRESULT SetY (
        long pointN,
        double Value );
    double GetZ (
        long pointN );
    HRESULT SetZ (
        long pointN,
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NumberOfPointsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsVolumeCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetYCell (
        /*[in]*/ long pointN,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetZCell (
        /*[in]*/ long pointN,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfPoints (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfPoints (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsVolume (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsVolume (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetY (
        /*[in]*/ long pointN,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetY (
        /*[in]*/ long pointN,
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall raw_GetZ (
        /*[in]*/ long pointN,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetZ (
        /*[in]*/ long pointN,
        /*[in]*/ double Value ) = 0;
};

struct __declspec(uuid("4691bc69-f666-4b7c-8f64-45e5ba91c132"))
IObjectFresnel1 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRadialHeightCell))
    IEditorCellPtr RadialHeightCell;
    __declspec(property(get=GetXHalfWidthCell))
    IEditorCellPtr XHalfWidthCell;
    __declspec(property(get=GetPlusDepthPerMinusFreqCell))
    IEditorCellPtr PlusDepthPerMinusFreqCell;
    __declspec(property(get=GetPitchDegCell))
    IEditorCellPtr PitchDegCell;
    __declspec(property(get=GetThicknessCell))
    IEditorCellPtr ThicknessCell;
    __declspec(property(get=GetRadiusCell))
    IEditorCellPtr RadiusCell;
    __declspec(property(get=GetConicCell))
    IEditorCellPtr ConicCell;
    __declspec(property(get=GetCoeffRPower2Cell))
    IEditorCellPtr CoeffRPower2Cell;
    __declspec(property(get=GetCoeffRPower4Cell))
    IEditorCellPtr CoeffRPower4Cell;
    __declspec(property(get=GetCoeffRPower6Cell))
    IEditorCellPtr CoeffRPower6Cell;
    __declspec(property(get=GetCoeffRPower8Cell))
    IEditorCellPtr CoeffRPower8Cell;
    __declspec(property(get=GetCoeffRPower10Cell))
    IEditorCellPtr CoeffRPower10Cell;
    __declspec(property(get=GetCoeffRPower12Cell))
    IEditorCellPtr CoeffRPower12Cell;
    __declspec(property(get=GetCoeffRPower14Cell))
    IEditorCellPtr CoeffRPower14Cell;
    __declspec(property(get=GetCoeffRPower16Cell))
    IEditorCellPtr CoeffRPower16Cell;
    __declspec(property(get=GetNumberOfSegements16Cell))
    IEditorCellPtr NumberOfSegements16Cell;
    __declspec(property(get=GetRadialHeight,put=PutRadialHeight))
    double RadialHeight;
    __declspec(property(get=GetXHalfWidth,put=PutXHalfWidth))
    double XHalfWidth;
    __declspec(property(get=GetPlusDepthPerMinusFreq,put=PutPlusDepthPerMinusFreq))
    double PlusDepthPerMinusFreq;
    __declspec(property(get=GetPitchDeg,put=PutPitchDeg))
    double PitchDeg;
    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetConic,put=PutConic))
    double Conic;
    __declspec(property(get=GetCoeffRPower2,put=PutCoeffRPower2))
    double CoeffRPower2;
    __declspec(property(get=GetCoeffRPower4,put=PutCoeffRPower4))
    double CoeffRPower4;
    __declspec(property(get=GetCoeffRPower6,put=PutCoeffRPower6))
    double CoeffRPower6;
    __declspec(property(get=GetCoeffRPower8,put=PutCoeffRPower8))
    double CoeffRPower8;
    __declspec(property(get=GetCoeffRPower10,put=PutCoeffRPower10))
    double CoeffRPower10;
    __declspec(property(get=GetCoeffRPower12,put=PutCoeffRPower12))
    double CoeffRPower12;
    __declspec(property(get=GetCoeffRPower14,put=PutCoeffRPower14))
    double CoeffRPower14;
    __declspec(property(get=GetCoeffRPower16,put=PutCoeffRPower16))
    double CoeffRPower16;
    __declspec(property(get=GetNumberOfSegements,put=PutNumberOfSegements))
    long NumberOfSegements;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetRadialHeightCell ( );
    IEditorCellPtr GetXHalfWidthCell ( );
    IEditorCellPtr GetPlusDepthPerMinusFreqCell ( );
    IEditorCellPtr GetPitchDegCell ( );
    IEditorCellPtr GetThicknessCell ( );
    IEditorCellPtr GetRadiusCell ( );
    IEditorCellPtr GetConicCell ( );
    IEditorCellPtr GetCoeffRPower2Cell ( );
    IEditorCellPtr GetCoeffRPower4Cell ( );
    IEditorCellPtr GetCoeffRPower6Cell ( );
    IEditorCellPtr GetCoeffRPower8Cell ( );
    IEditorCellPtr GetCoeffRPower10Cell ( );
    IEditorCellPtr GetCoeffRPower12Cell ( );
    IEditorCellPtr GetCoeffRPower14Cell ( );
    IEditorCellPtr GetCoeffRPower16Cell ( );
    IEditorCellPtr GetNumberOfSegements16Cell ( );
    double GetRadialHeight ( );
    void PutRadialHeight (
        double pRetVal );
    double GetXHalfWidth ( );
    void PutXHalfWidth (
        double pRetVal );
    double GetPlusDepthPerMinusFreq ( );
    void PutPlusDepthPerMinusFreq (
        double pRetVal );
    double GetPitchDeg ( );
    void PutPitchDeg (
        double pRetVal );
    double GetThickness ( );
    void PutThickness (
        double pRetVal );
    double GetRadius ( );
    void PutRadius (
        double pRetVal );
    double GetConic ( );
    void PutConic (
        double pRetVal );
    double GetCoeffRPower2 ( );
    void PutCoeffRPower2 (
        double pRetVal );
    double GetCoeffRPower4 ( );
    void PutCoeffRPower4 (
        double pRetVal );
    double GetCoeffRPower6 ( );
    void PutCoeffRPower6 (
        double pRetVal );
    double GetCoeffRPower8 ( );
    void PutCoeffRPower8 (
        double pRetVal );
    double GetCoeffRPower10 ( );
    void PutCoeffRPower10 (
        double pRetVal );
    double GetCoeffRPower12 ( );
    void PutCoeffRPower12 (
        double pRetVal );
    double GetCoeffRPower14 ( );
    void PutCoeffRPower14 (
        double pRetVal );
    double GetCoeffRPower16 ( );
    void PutCoeffRPower16 (
        double pRetVal );
    long GetNumberOfSegements ( );
    void PutNumberOfSegements (
        long pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RadialHeightCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_PlusDepthPerMinusFreqCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_PitchDegCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ThicknessCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadiusCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ConicCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower8Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower10Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower12Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower14Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower16Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfSegements16Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadialHeight (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RadialHeight (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_XHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_PlusDepthPerMinusFreq (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PlusDepthPerMinusFreq (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_PitchDeg (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PitchDeg (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Thickness (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Thickness (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Conic (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffRPower2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffRPower4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffRPower6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower8 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffRPower8 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower10 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffRPower10 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower12 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffRPower12 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower14 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffRPower14 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower16 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffRPower16 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfSegements (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfSegements (
        /*[in]*/ long pRetVal ) = 0;
};

struct __declspec(uuid("535f26f7-94c3-4310-8f5e-a3c6477d9694"))
IObjectFresnel2 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRadialHeightCell))
    IEditorCellPtr RadialHeightCell;
    __declspec(property(get=GetXHalfWidthCell))
    IEditorCellPtr XHalfWidthCell;
    __declspec(property(get=GetThicknessCell))
    IEditorCellPtr ThicknessCell;
    __declspec(property(get=GetIsCylinderCell))
    IEditorCellPtr IsCylinderCell;
    __declspec(property(get=GetRadiusCell))
    IEditorCellPtr RadiusCell;
    __declspec(property(get=GetConicCell))
    IEditorCellPtr ConicCell;
    __declspec(property(get=GetCoeffRPower2Cell))
    IEditorCellPtr CoeffRPower2Cell;
    __declspec(property(get=GetCoeffRPower4Cell))
    IEditorCellPtr CoeffRPower4Cell;
    __declspec(property(get=GetCoeffRPower6Cell))
    IEditorCellPtr CoeffRPower6Cell;
    __declspec(property(get=GetCoeffRPower8Cell))
    IEditorCellPtr CoeffRPower8Cell;
    __declspec(property(get=GetCoeffRPower10Cell))
    IEditorCellPtr CoeffRPower10Cell;
    __declspec(property(get=GetCoeffRPower12Cell))
    IEditorCellPtr CoeffRPower12Cell;
    __declspec(property(get=GetCoeffRPower14Cell))
    IEditorCellPtr CoeffRPower14Cell;
    __declspec(property(get=GetCoeffRPower16Cell))
    IEditorCellPtr CoeffRPower16Cell;
    __declspec(property(get=GetCoeffYPower2Cell))
    IEditorCellPtr CoeffYPower2Cell;
    __declspec(property(get=GetCoeffYPower4Cell))
    IEditorCellPtr CoeffYPower4Cell;
    __declspec(property(get=GetCoeffYPower6Cell))
    IEditorCellPtr CoeffYPower6Cell;
    __declspec(property(get=GetCoeffYPower8Cell))
    IEditorCellPtr CoeffYPower8Cell;
    __declspec(property(get=GetCoeffYPower10Cell))
    IEditorCellPtr CoeffYPower10Cell;
    __declspec(property(get=GetCoeffYPower12Cell))
    IEditorCellPtr CoeffYPower12Cell;
    __declspec(property(get=GetCoeffYPower14Cell))
    IEditorCellPtr CoeffYPower14Cell;
    __declspec(property(get=GetCoeffYPower16Cell))
    IEditorCellPtr CoeffYPower16Cell;
    __declspec(property(get=GetRadialHeight,put=PutRadialHeight))
    double RadialHeight;
    __declspec(property(get=GetXHalfWidth,put=PutXHalfWidth))
    double XHalfWidth;
    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness;
    __declspec(property(get=GetIsCylinder,put=PutIsCylinder))
    VARIANT_BOOL IsCylinder;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetConic,put=PutConic))
    double Conic;
    __declspec(property(get=GetCoeffRPower2,put=PutCoeffRPower2))
    double CoeffRPower2;
    __declspec(property(get=GetCoeffRPower4,put=PutCoeffRPower4))
    double CoeffRPower4;
    __declspec(property(get=GetCoeffRPower6,put=PutCoeffRPower6))
    double CoeffRPower6;
    __declspec(property(get=GetCoeffRPower8,put=PutCoeffRPower8))
    double CoeffRPower8;
    __declspec(property(get=GetCoeffRPower10,put=PutCoeffRPower10))
    double CoeffRPower10;
    __declspec(property(get=GetCoeffRPower12,put=PutCoeffRPower12))
    double CoeffRPower12;
    __declspec(property(get=GetCoeffRPower14,put=PutCoeffRPower14))
    double CoeffRPower14;
    __declspec(property(get=GetCoeffRPower16,put=PutCoeffRPower16))
    double CoeffRPower16;
    __declspec(property(get=GetCoeffYPower2,put=PutCoeffYPower2))
    double CoeffYPower2;
    __declspec(property(get=GetCoeffYPower4,put=PutCoeffYPower4))
    double CoeffYPower4;
    __declspec(property(get=GetCoeffYPower6,put=PutCoeffYPower6))
    double CoeffYPower6;
    __declspec(property(get=GetCoeffYPower8,put=PutCoeffYPower8))
    double CoeffYPower8;
    __declspec(property(get=GetCoeffYPower10,put=PutCoeffYPower10))
    double CoeffYPower10;
    __declspec(property(get=GetCoeffYPower12,put=PutCoeffYPower12))
    double CoeffYPower12;
    __declspec(property(get=GetCoeffYPower14,put=PutCoeffYPower14))
    double CoeffYPower14;
    __declspec(property(get=GetCoeffYPower16,put=PutCoeffYPower16))
    double CoeffYPower16;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetRadialHeightCell ( );
    IEditorCellPtr GetXHalfWidthCell ( );
    IEditorCellPtr GetThicknessCell ( );
    IEditorCellPtr GetIsCylinderCell ( );
    IEditorCellPtr GetRadiusCell ( );
    IEditorCellPtr GetConicCell ( );
    IEditorCellPtr GetCoeffRPower2Cell ( );
    IEditorCellPtr GetCoeffRPower4Cell ( );
    IEditorCellPtr GetCoeffRPower6Cell ( );
    IEditorCellPtr GetCoeffRPower8Cell ( );
    IEditorCellPtr GetCoeffRPower10Cell ( );
    IEditorCellPtr GetCoeffRPower12Cell ( );
    IEditorCellPtr GetCoeffRPower14Cell ( );
    IEditorCellPtr GetCoeffRPower16Cell ( );
    IEditorCellPtr GetCoeffYPower2Cell ( );
    IEditorCellPtr GetCoeffYPower4Cell ( );
    IEditorCellPtr GetCoeffYPower6Cell ( );
    IEditorCellPtr GetCoeffYPower8Cell ( );
    IEditorCellPtr GetCoeffYPower10Cell ( );
    IEditorCellPtr GetCoeffYPower12Cell ( );
    IEditorCellPtr GetCoeffYPower14Cell ( );
    IEditorCellPtr GetCoeffYPower16Cell ( );
    double GetRadialHeight ( );
    void PutRadialHeight (
        double pRetVal );
    double GetXHalfWidth ( );
    void PutXHalfWidth (
        double pRetVal );
    double GetThickness ( );
    void PutThickness (
        double pRetVal );
    VARIANT_BOOL GetIsCylinder ( );
    void PutIsCylinder (
        VARIANT_BOOL pRetVal );
    double GetRadius ( );
    void PutRadius (
        double pRetVal );
    double GetConic ( );
    void PutConic (
        double pRetVal );
    double GetCoeffRPower2 ( );
    void PutCoeffRPower2 (
        double pRetVal );
    double GetCoeffRPower4 ( );
    void PutCoeffRPower4 (
        double pRetVal );
    double GetCoeffRPower6 ( );
    void PutCoeffRPower6 (
        double pRetVal );
    double GetCoeffRPower8 ( );
    void PutCoeffRPower8 (
        double pRetVal );
    double GetCoeffRPower10 ( );
    void PutCoeffRPower10 (
        double pRetVal );
    double GetCoeffRPower12 ( );
    void PutCoeffRPower12 (
        double pRetVal );
    double GetCoeffRPower14 ( );
    void PutCoeffRPower14 (
        double pRetVal );
    double GetCoeffRPower16 ( );
    void PutCoeffRPower16 (
        double pRetVal );
    double GetCoeffYPower2 ( );
    void PutCoeffYPower2 (
        double pRetVal );
    double GetCoeffYPower4 ( );
    void PutCoeffYPower4 (
        double pRetVal );
    double GetCoeffYPower6 ( );
    void PutCoeffYPower6 (
        double pRetVal );
    double GetCoeffYPower8 ( );
    void PutCoeffYPower8 (
        double pRetVal );
    double GetCoeffYPower10 ( );
    void PutCoeffYPower10 (
        double pRetVal );
    double GetCoeffYPower12 ( );
    void PutCoeffYPower12 (
        double pRetVal );
    double GetCoeffYPower14 ( );
    void PutCoeffYPower14 (
        double pRetVal );
    double GetCoeffYPower16 ( );
    void PutCoeffYPower16 (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RadialHeightCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ThicknessCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsCylinderCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadiusCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ConicCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower8Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower10Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower12Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower14Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower16Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffYPower2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffYPower4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffYPower6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffYPower8Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffYPower10Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffYPower12Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffYPower14Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffYPower16Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadialHeight (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RadialHeight (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_XHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Thickness (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Thickness (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsCylinder (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsCylinder (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Conic (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffRPower2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffRPower4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffRPower6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower8 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffRPower8 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower10 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffRPower10 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower12 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffRPower12 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower14 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffRPower14 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower16 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffRPower16 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffYPower2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffYPower2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffYPower4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffYPower4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffYPower6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffYPower6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffYPower8 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffYPower8 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffYPower10 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffYPower10 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffYPower12 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffYPower12 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffYPower14 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffYPower14 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffYPower16 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffYPower16 (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("4f36d323-a426-471e-8cee-d227fa161384"))
IObjectGridSagLens : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetXHalfWidthCell))
    IEditorCellPtr XHalfWidthCell;
    __declspec(property(get=GetYHalfWidthCell))
    IEditorCellPtr YHalfWidthCell;
    __declspec(property(get=GetFrontRadiusCell))
    IEditorCellPtr FrontRadiusCell;
    __declspec(property(get=GetFrontConicCell))
    IEditorCellPtr FrontConicCell;
    __declspec(property(get=GetThicknessCell))
    IEditorCellPtr ThicknessCell;
    __declspec(property(get=GetInterpolateCell))
    IEditorCellPtr InterpolateCell;
    __declspec(property(get=GetBackRadiusCell))
    IEditorCellPtr BackRadiusCell;
    __declspec(property(get=GetBackConicCell))
    IEditorCellPtr BackConicCell;
    __declspec(property(get=GetCoeffRPower2Cell))
    IEditorCellPtr CoeffRPower2Cell;
    __declspec(property(get=GetCoeffRPower4Cell))
    IEditorCellPtr CoeffRPower4Cell;
    __declspec(property(get=GetCoeffRPower6Cell))
    IEditorCellPtr CoeffRPower6Cell;
    __declspec(property(get=GetCoeffRPower8Cell))
    IEditorCellPtr CoeffRPower8Cell;
    __declspec(property(get=GetCoeffRPower10Cell))
    IEditorCellPtr CoeffRPower10Cell;
    __declspec(property(get=GetCoeffRPower12Cell))
    IEditorCellPtr CoeffRPower12Cell;
    __declspec(property(get=GetCoeffRPower14Cell))
    IEditorCellPtr CoeffRPower14Cell;
    __declspec(property(get=GetCoeffRPower16Cell))
    IEditorCellPtr CoeffRPower16Cell;
    __declspec(property(get=GetDecenterXCell))
    IEditorCellPtr DecenterXCell;
    __declspec(property(get=GetDecenterYCell))
    IEditorCellPtr DecenterYCell;
    __declspec(property(get=GetXHalfWidth,put=PutXHalfWidth))
    double XHalfWidth;
    __declspec(property(get=GetYHalfWidth,put=PutYHalfWidth))
    double YHalfWidth;
    __declspec(property(get=GetFrontRadius,put=PutFrontRadius))
    double FrontRadius;
    __declspec(property(get=GetFrontConic,put=PutFrontConic))
    double FrontConic;
    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness;
    __declspec(property(get=GetInterpolate,put=PutInterpolate))
    enum InterpolateChoices Interpolate;
    __declspec(property(get=GetBackRadius,put=PutBackRadius))
    double BackRadius;
    __declspec(property(get=GetBackConic,put=PutBackConic))
    double BackConic;
    __declspec(property(get=GetCoeffRPower2,put=PutCoeffRPower2))
    double CoeffRPower2;
    __declspec(property(get=GetCoeffRPower4,put=PutCoeffRPower4))
    double CoeffRPower4;
    __declspec(property(get=GetCoeffRPower6,put=PutCoeffRPower6))
    double CoeffRPower6;
    __declspec(property(get=GetCoeffRPower8,put=PutCoeffRPower8))
    double CoeffRPower8;
    __declspec(property(get=GetCoeffRPower10,put=PutCoeffRPower10))
    double CoeffRPower10;
    __declspec(property(get=GetCoeffRPower12,put=PutCoeffRPower12))
    double CoeffRPower12;
    __declspec(property(get=GetCoeffRPower14,put=PutCoeffRPower14))
    double CoeffRPower14;
    __declspec(property(get=GetCoeffRPower16,put=PutCoeffRPower16))
    double CoeffRPower16;
    __declspec(property(get=GetDecenterX,put=PutDecenterX))
    double DecenterX;
    __declspec(property(get=GetDecenterY,put=PutDecenterY))
    double DecenterY;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetXHalfWidthCell ( );
    IEditorCellPtr GetYHalfWidthCell ( );
    IEditorCellPtr GetFrontRadiusCell ( );
    IEditorCellPtr GetFrontConicCell ( );
    IEditorCellPtr GetThicknessCell ( );
    IEditorCellPtr GetInterpolateCell ( );
    IEditorCellPtr GetBackRadiusCell ( );
    IEditorCellPtr GetBackConicCell ( );
    IEditorCellPtr GetCoeffRPower2Cell ( );
    IEditorCellPtr GetCoeffRPower4Cell ( );
    IEditorCellPtr GetCoeffRPower6Cell ( );
    IEditorCellPtr GetCoeffRPower8Cell ( );
    IEditorCellPtr GetCoeffRPower10Cell ( );
    IEditorCellPtr GetCoeffRPower12Cell ( );
    IEditorCellPtr GetCoeffRPower14Cell ( );
    IEditorCellPtr GetCoeffRPower16Cell ( );
    IEditorCellPtr GetDecenterXCell ( );
    IEditorCellPtr GetDecenterYCell ( );
    double GetXHalfWidth ( );
    void PutXHalfWidth (
        double pRetVal );
    double GetYHalfWidth ( );
    void PutYHalfWidth (
        double pRetVal );
    double GetFrontRadius ( );
    void PutFrontRadius (
        double pRetVal );
    double GetFrontConic ( );
    void PutFrontConic (
        double pRetVal );
    double GetThickness ( );
    void PutThickness (
        double pRetVal );
    enum InterpolateChoices GetInterpolate ( );
    void PutInterpolate (
        enum InterpolateChoices pRetVal );
    double GetBackRadius ( );
    void PutBackRadius (
        double pRetVal );
    double GetBackConic ( );
    void PutBackConic (
        double pRetVal );
    double GetCoeffRPower2 ( );
    void PutCoeffRPower2 (
        double pRetVal );
    double GetCoeffRPower4 ( );
    void PutCoeffRPower4 (
        double pRetVal );
    double GetCoeffRPower6 ( );
    void PutCoeffRPower6 (
        double pRetVal );
    double GetCoeffRPower8 ( );
    void PutCoeffRPower8 (
        double pRetVal );
    double GetCoeffRPower10 ( );
    void PutCoeffRPower10 (
        double pRetVal );
    double GetCoeffRPower12 ( );
    void PutCoeffRPower12 (
        double pRetVal );
    double GetCoeffRPower14 ( );
    void PutCoeffRPower14 (
        double pRetVal );
    double GetCoeffRPower16 ( );
    void PutCoeffRPower16 (
        double pRetVal );
    double GetDecenterX ( );
    void PutDecenterX (
        double pRetVal );
    double GetDecenterY ( );
    void PutDecenterY (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_XHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontRadiusCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontConicCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ThicknessCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_InterpolateCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_BackRadiusCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_BackConicCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower8Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower10Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower12Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower14Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower16Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DecenterXCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DecenterYCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontRadius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontRadius (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontConic (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontConic (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Thickness (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Thickness (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Interpolate (
        /*[out,retval]*/ enum InterpolateChoices * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Interpolate (
        /*[in]*/ enum InterpolateChoices pRetVal ) = 0;
      virtual HRESULT __stdcall get_BackRadius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BackRadius (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_BackConic (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BackConic (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffRPower2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffRPower4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffRPower6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower8 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffRPower8 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower10 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffRPower10 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower12 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffRPower12 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower14 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffRPower14 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower16 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffRPower16 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_DecenterX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DecenterX (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_DecenterY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DecenterY (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("6482dd30-1a0d-4553-870c-d70cca2484b9"))
IObjectGridSagFrontBack : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetXHalfWidthCell))
    IEditorCellPtr XHalfWidthCell;
    __declspec(property(get=GetYHalfWidthCell))
    IEditorCellPtr YHalfWidthCell;
    __declspec(property(get=GetFrontRadiusCell))
    IEditorCellPtr FrontRadiusCell;
    __declspec(property(get=GetFrontConicCell))
    IEditorCellPtr FrontConicCell;
    __declspec(property(get=GetFrontRPower2Cell))
    IEditorCellPtr FrontRPower2Cell;
    __declspec(property(get=GetFrontRPower4Cell))
    IEditorCellPtr FrontRPower4Cell;
    __declspec(property(get=GetFrontRPower6Cell))
    IEditorCellPtr FrontRPower6Cell;
    __declspec(property(get=GetFrontRPower8Cell))
    IEditorCellPtr FrontRPower8Cell;
    __declspec(property(get=GetFrontRPower10Cell))
    IEditorCellPtr FrontRPower10Cell;
    __declspec(property(get=GetFrontRPower12Cell))
    IEditorCellPtr FrontRPower12Cell;
    __declspec(property(get=GetFrontRPower14Cell))
    IEditorCellPtr FrontRPower14Cell;
    __declspec(property(get=GetFrontRPower16Cell))
    IEditorCellPtr FrontRPower16Cell;
    __declspec(property(get=GetFrontInterpolateCell))
    IEditorCellPtr FrontInterpolateCell;
    __declspec(property(get=GetFrontXDecenterCell))
    IEditorCellPtr FrontXDecenterCell;
    __declspec(property(get=GetFrontYDecenterCell))
    IEditorCellPtr FrontYDecenterCell;
    __declspec(property(get=GetFrontTiltXCell))
    IEditorCellPtr FrontTiltXCell;
    __declspec(property(get=GetFrontTiltYCell))
    IEditorCellPtr FrontTiltYCell;
    __declspec(property(get=GetFrontTiltZCell))
    IEditorCellPtr FrontTiltZCell;
    __declspec(property(get=GetFrontOrderCell))
    IEditorCellPtr FrontOrderCell;
    __declspec(property(get=GetFrontGridXDecenterCell))
    IEditorCellPtr FrontGridXDecenterCell;
    __declspec(property(get=GetFrontGridYDecenterCell))
    IEditorCellPtr FrontGridYDecenterCell;
    __declspec(property(get=GetThicknessCell))
    IEditorCellPtr ThicknessCell;
    __declspec(property(get=GetRearRadiusCell))
    IEditorCellPtr RearRadiusCell;
    __declspec(property(get=GetRearConicCell))
    IEditorCellPtr RearConicCell;
    __declspec(property(get=GetRearRPower2Cell))
    IEditorCellPtr RearRPower2Cell;
    __declspec(property(get=GetRearRPower4Cell))
    IEditorCellPtr RearRPower4Cell;
    __declspec(property(get=GetRearRPower6Cell))
    IEditorCellPtr RearRPower6Cell;
    __declspec(property(get=GetRearRPower8Cell))
    IEditorCellPtr RearRPower8Cell;
    __declspec(property(get=GetRearRPower10Cell))
    IEditorCellPtr RearRPower10Cell;
    __declspec(property(get=GetRearRPower12Cell))
    IEditorCellPtr RearRPower12Cell;
    __declspec(property(get=GetRearRPower14Cell))
    IEditorCellPtr RearRPower14Cell;
    __declspec(property(get=GetRearRPower16Cell))
    IEditorCellPtr RearRPower16Cell;
    __declspec(property(get=GetRearInterpolateCell))
    IEditorCellPtr RearInterpolateCell;
    __declspec(property(get=GetRearXDecenterCell))
    IEditorCellPtr RearXDecenterCell;
    __declspec(property(get=GetRearYDecenterCell))
    IEditorCellPtr RearYDecenterCell;
    __declspec(property(get=GetRearTiltXCell))
    IEditorCellPtr RearTiltXCell;
    __declspec(property(get=GetRearTiltYCell))
    IEditorCellPtr RearTiltYCell;
    __declspec(property(get=GetRearTiltZCell))
    IEditorCellPtr RearTiltZCell;
    __declspec(property(get=GetRearOrderCell))
    IEditorCellPtr RearOrderCell;
    __declspec(property(get=GetRearGridXDecenterCell))
    IEditorCellPtr RearGridXDecenterCell;
    __declspec(property(get=GetRearGridYDecenterCell))
    IEditorCellPtr RearGridYDecenterCell;
    __declspec(property(get=GetXHalfWidth,put=PutXHalfWidth))
    double XHalfWidth;
    __declspec(property(get=GetYHalfWidth,put=PutYHalfWidth))
    double YHalfWidth;
    __declspec(property(get=GetFrontRadius,put=PutFrontRadius))
    double FrontRadius;
    __declspec(property(get=GetFrontConic,put=PutFrontConic))
    double FrontConic;
    __declspec(property(get=GetFrontRPower2,put=PutFrontRPower2))
    double FrontRPower2;
    __declspec(property(get=GetFrontRPower4,put=PutFrontRPower4))
    double FrontRPower4;
    __declspec(property(get=GetFrontRPower6,put=PutFrontRPower6))
    double FrontRPower6;
    __declspec(property(get=GetFrontRPower8,put=PutFrontRPower8))
    double FrontRPower8;
    __declspec(property(get=GetFrontRPower10,put=PutFrontRPower10))
    double FrontRPower10;
    __declspec(property(get=GetFrontRPower12,put=PutFrontRPower12))
    double FrontRPower12;
    __declspec(property(get=GetFrontRPower14,put=PutFrontRPower14))
    double FrontRPower14;
    __declspec(property(get=GetFrontRPower16,put=PutFrontRPower16))
    double FrontRPower16;
    __declspec(property(get=GetFrontInterpolate,put=PutFrontInterpolate))
    enum InterpolateChoices FrontInterpolate;
    __declspec(property(get=GetFrontXDecenter,put=PutFrontXDecenter))
    double FrontXDecenter;
    __declspec(property(get=GetFrontYDecenter,put=PutFrontYDecenter))
    double FrontYDecenter;
    __declspec(property(get=GetFrontTiltX,put=PutFrontTiltX))
    double FrontTiltX;
    __declspec(property(get=GetFrontTiltY,put=PutFrontTiltY))
    double FrontTiltY;
    __declspec(property(get=GetFrontTiltZ,put=PutFrontTiltZ))
    double FrontTiltZ;
    __declspec(property(get=GetFrontOrder,put=PutFrontOrder))
    enum OrderChoices FrontOrder;
    __declspec(property(get=GetFrontGridXDecenter,put=PutFrontGridXDecenter))
    double FrontGridXDecenter;
    __declspec(property(get=GetFrontGridYDecenter,put=PutFrontGridYDecenter))
    double FrontGridYDecenter;
    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness;
    __declspec(property(get=GetRearRadius,put=PutRearRadius))
    double RearRadius;
    __declspec(property(get=GetRearConic,put=PutRearConic))
    double RearConic;
    __declspec(property(get=GetRearRPower2,put=PutRearRPower2))
    double RearRPower2;
    __declspec(property(get=GetRearRPower4,put=PutRearRPower4))
    double RearRPower4;
    __declspec(property(get=GetRearRPower6,put=PutRearRPower6))
    double RearRPower6;
    __declspec(property(get=GetRearRPower8,put=PutRearRPower8))
    double RearRPower8;
    __declspec(property(get=GetRearRPower10,put=PutRearRPower10))
    double RearRPower10;
    __declspec(property(get=GetRearRPower12,put=PutRearRPower12))
    double RearRPower12;
    __declspec(property(get=GetRearRPower14,put=PutRearRPower14))
    double RearRPower14;
    __declspec(property(get=GetRearRPower16,put=PutRearRPower16))
    double RearRPower16;
    __declspec(property(get=GetRearInterpolate,put=PutRearInterpolate))
    enum InterpolateChoices RearInterpolate;
    __declspec(property(get=GetRearXDecenter,put=PutRearXDecenter))
    double RearXDecenter;
    __declspec(property(get=GetRearYDecenter,put=PutRearYDecenter))
    double RearYDecenter;
    __declspec(property(get=GetRearTiltX,put=PutRearTiltX))
    double RearTiltX;
    __declspec(property(get=GetRearTiltY,put=PutRearTiltY))
    double RearTiltY;
    __declspec(property(get=GetRearTiltZ,put=PutRearTiltZ))
    double RearTiltZ;
    __declspec(property(get=GetRearOrder,put=PutRearOrder))
    enum OrderChoices RearOrder;
    __declspec(property(get=GetRearGridXDecenter,put=PutRearGridXDecenter))
    double RearGridXDecenter;
    __declspec(property(get=GetRearGridYDecenter,put=PutRearGridYDecenter))
    double RearGridYDecenter;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetXHalfWidthCell ( );
    IEditorCellPtr GetYHalfWidthCell ( );
    IEditorCellPtr GetFrontRadiusCell ( );
    IEditorCellPtr GetFrontConicCell ( );
    IEditorCellPtr GetFrontRPower2Cell ( );
    IEditorCellPtr GetFrontRPower4Cell ( );
    IEditorCellPtr GetFrontRPower6Cell ( );
    IEditorCellPtr GetFrontRPower8Cell ( );
    IEditorCellPtr GetFrontRPower10Cell ( );
    IEditorCellPtr GetFrontRPower12Cell ( );
    IEditorCellPtr GetFrontRPower14Cell ( );
    IEditorCellPtr GetFrontRPower16Cell ( );
    IEditorCellPtr GetFrontInterpolateCell ( );
    IEditorCellPtr GetFrontXDecenterCell ( );
    IEditorCellPtr GetFrontYDecenterCell ( );
    IEditorCellPtr GetFrontTiltXCell ( );
    IEditorCellPtr GetFrontTiltYCell ( );
    IEditorCellPtr GetFrontTiltZCell ( );
    IEditorCellPtr GetFrontOrderCell ( );
    IEditorCellPtr GetFrontGridXDecenterCell ( );
    IEditorCellPtr GetFrontGridYDecenterCell ( );
    IEditorCellPtr GetThicknessCell ( );
    IEditorCellPtr GetRearRadiusCell ( );
    IEditorCellPtr GetRearConicCell ( );
    IEditorCellPtr GetRearRPower2Cell ( );
    IEditorCellPtr GetRearRPower4Cell ( );
    IEditorCellPtr GetRearRPower6Cell ( );
    IEditorCellPtr GetRearRPower8Cell ( );
    IEditorCellPtr GetRearRPower10Cell ( );
    IEditorCellPtr GetRearRPower12Cell ( );
    IEditorCellPtr GetRearRPower14Cell ( );
    IEditorCellPtr GetRearRPower16Cell ( );
    IEditorCellPtr GetRearInterpolateCell ( );
    IEditorCellPtr GetRearXDecenterCell ( );
    IEditorCellPtr GetRearYDecenterCell ( );
    IEditorCellPtr GetRearTiltXCell ( );
    IEditorCellPtr GetRearTiltYCell ( );
    IEditorCellPtr GetRearTiltZCell ( );
    IEditorCellPtr GetRearOrderCell ( );
    IEditorCellPtr GetRearGridXDecenterCell ( );
    IEditorCellPtr GetRearGridYDecenterCell ( );
    double GetXHalfWidth ( );
    void PutXHalfWidth (
        double pRetVal );
    double GetYHalfWidth ( );
    void PutYHalfWidth (
        double pRetVal );
    double GetFrontRadius ( );
    void PutFrontRadius (
        double pRetVal );
    double GetFrontConic ( );
    void PutFrontConic (
        double pRetVal );
    double GetFrontRPower2 ( );
    void PutFrontRPower2 (
        double pRetVal );
    double GetFrontRPower4 ( );
    void PutFrontRPower4 (
        double pRetVal );
    double GetFrontRPower6 ( );
    void PutFrontRPower6 (
        double pRetVal );
    double GetFrontRPower8 ( );
    void PutFrontRPower8 (
        double pRetVal );
    double GetFrontRPower10 ( );
    void PutFrontRPower10 (
        double pRetVal );
    double GetFrontRPower12 ( );
    void PutFrontRPower12 (
        double pRetVal );
    double GetFrontRPower14 ( );
    void PutFrontRPower14 (
        double pRetVal );
    double GetFrontRPower16 ( );
    void PutFrontRPower16 (
        double pRetVal );
    enum InterpolateChoices GetFrontInterpolate ( );
    void PutFrontInterpolate (
        enum InterpolateChoices pRetVal );
    double GetFrontXDecenter ( );
    void PutFrontXDecenter (
        double pRetVal );
    double GetFrontYDecenter ( );
    void PutFrontYDecenter (
        double pRetVal );
    double GetFrontTiltX ( );
    void PutFrontTiltX (
        double pRetVal );
    double GetFrontTiltY ( );
    void PutFrontTiltY (
        double pRetVal );
    double GetFrontTiltZ ( );
    void PutFrontTiltZ (
        double pRetVal );
    enum OrderChoices GetFrontOrder ( );
    void PutFrontOrder (
        enum OrderChoices pRetVal );
    double GetFrontGridXDecenter ( );
    void PutFrontGridXDecenter (
        double pRetVal );
    double GetFrontGridYDecenter ( );
    void PutFrontGridYDecenter (
        double pRetVal );
    double GetThickness ( );
    void PutThickness (
        double pRetVal );
    double GetRearRadius ( );
    void PutRearRadius (
        double pRetVal );
    double GetRearConic ( );
    void PutRearConic (
        double pRetVal );
    double GetRearRPower2 ( );
    void PutRearRPower2 (
        double pRetVal );
    double GetRearRPower4 ( );
    void PutRearRPower4 (
        double pRetVal );
    double GetRearRPower6 ( );
    void PutRearRPower6 (
        double pRetVal );
    double GetRearRPower8 ( );
    void PutRearRPower8 (
        double pRetVal );
    double GetRearRPower10 ( );
    void PutRearRPower10 (
        double pRetVal );
    double GetRearRPower12 ( );
    void PutRearRPower12 (
        double pRetVal );
    double GetRearRPower14 ( );
    void PutRearRPower14 (
        double pRetVal );
    double GetRearRPower16 ( );
    void PutRearRPower16 (
        double pRetVal );
    enum InterpolateChoices GetRearInterpolate ( );
    void PutRearInterpolate (
        enum InterpolateChoices pRetVal );
    double GetRearXDecenter ( );
    void PutRearXDecenter (
        double pRetVal );
    double GetRearYDecenter ( );
    void PutRearYDecenter (
        double pRetVal );
    double GetRearTiltX ( );
    void PutRearTiltX (
        double pRetVal );
    double GetRearTiltY ( );
    void PutRearTiltY (
        double pRetVal );
    double GetRearTiltZ ( );
    void PutRearTiltZ (
        double pRetVal );
    enum OrderChoices GetRearOrder ( );
    void PutRearOrder (
        enum OrderChoices pRetVal );
    double GetRearGridXDecenter ( );
    void PutRearGridXDecenter (
        double pRetVal );
    double GetRearGridYDecenter ( );
    void PutRearGridYDecenter (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_XHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontRadiusCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontConicCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontRPower2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontRPower4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontRPower6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontRPower8Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontRPower10Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontRPower12Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontRPower14Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontRPower16Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontInterpolateCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontXDecenterCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontYDecenterCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontTiltXCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontTiltYCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontTiltZCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontOrderCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontGridXDecenterCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontGridYDecenterCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ThicknessCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRadiusCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearConicCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRPower2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRPower4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRPower6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRPower8Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRPower10Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRPower12Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRPower14Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRPower16Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearInterpolateCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearXDecenterCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearYDecenterCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearTiltXCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearTiltYCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearTiltZCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearOrderCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearGridXDecenterCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearGridYDecenterCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontRadius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontRadius (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontConic (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontConic (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontRPower2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontRPower2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontRPower4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontRPower4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontRPower6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontRPower6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontRPower8 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontRPower8 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontRPower10 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontRPower10 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontRPower12 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontRPower12 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontRPower14 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontRPower14 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontRPower16 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontRPower16 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontInterpolate (
        /*[out,retval]*/ enum InterpolateChoices * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontInterpolate (
        /*[in]*/ enum InterpolateChoices pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontXDecenter (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontXDecenter (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontYDecenter (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontYDecenter (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontTiltX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontTiltX (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontTiltY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontTiltY (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontTiltZ (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontTiltZ (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontOrder (
        /*[out,retval]*/ enum OrderChoices * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontOrder (
        /*[in]*/ enum OrderChoices pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontGridXDecenter (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontGridXDecenter (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontGridYDecenter (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontGridYDecenter (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Thickness (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Thickness (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRadius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearRadius (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearConic (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearConic (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRPower2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearRPower2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRPower4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearRPower4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRPower6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearRPower6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRPower8 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearRPower8 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRPower10 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearRPower10 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRPower12 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearRPower12 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRPower14 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearRPower14 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearRPower16 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearRPower16 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearInterpolate (
        /*[out,retval]*/ enum InterpolateChoices * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearInterpolate (
        /*[in]*/ enum InterpolateChoices pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearXDecenter (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearXDecenter (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearYDecenter (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearYDecenter (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearTiltX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearTiltX (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearTiltY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearTiltY (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearTiltZ (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearTiltZ (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearOrder (
        /*[out,retval]*/ enum OrderChoices * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearOrder (
        /*[in]*/ enum OrderChoices pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearGridXDecenter (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearGridXDecenter (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearGridYDecenter (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearGridYDecenter (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("02e2280a-8d82-4dc8-8368-c5c21cdc6e48"))
IObjectGridSagSurface : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInterpolateCell))
    IEditorCellPtr InterpolateCell;
    __declspec(property(get=GetRadiusCell))
    IEditorCellPtr RadiusCell;
    __declspec(property(get=GetConicCell))
    IEditorCellPtr ConicCell;
    __declspec(property(get=GetCoeffRPower2Cell))
    IEditorCellPtr CoeffRPower2Cell;
    __declspec(property(get=GetCoeffRPower4Cell))
    IEditorCellPtr CoeffRPower4Cell;
    __declspec(property(get=GetCoeffRPower6Cell))
    IEditorCellPtr CoeffRPower6Cell;
    __declspec(property(get=GetCoeffRPower8Cell))
    IEditorCellPtr CoeffRPower8Cell;
    __declspec(property(get=GetCoeffRPower10Cell))
    IEditorCellPtr CoeffRPower10Cell;
    __declspec(property(get=GetCoeffRPower12Cell))
    IEditorCellPtr CoeffRPower12Cell;
    __declspec(property(get=GetCoeffRPower14Cell))
    IEditorCellPtr CoeffRPower14Cell;
    __declspec(property(get=GetCoeffRPower16Cell))
    IEditorCellPtr CoeffRPower16Cell;
    __declspec(property(get=GetDecenterXCell))
    IEditorCellPtr DecenterXCell;
    __declspec(property(get=GetDecenterYCell))
    IEditorCellPtr DecenterYCell;
    __declspec(property(get=GetInterpolate,put=PutInterpolate))
    enum InterpolateChoices Interpolate;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetConic,put=PutConic))
    double Conic;
    __declspec(property(get=GetCoeffRPower2,put=PutCoeffRPower2))
    double CoeffRPower2;
    __declspec(property(get=GetCoeffRPower4,put=PutCoeffRPower4))
    double CoeffRPower4;
    __declspec(property(get=GetCoeffRPower6,put=PutCoeffRPower6))
    double CoeffRPower6;
    __declspec(property(get=GetCoeffRPower8,put=PutCoeffRPower8))
    double CoeffRPower8;
    __declspec(property(get=GetCoeffRPower10,put=PutCoeffRPower10))
    double CoeffRPower10;
    __declspec(property(get=GetCoeffRPower12,put=PutCoeffRPower12))
    double CoeffRPower12;
    __declspec(property(get=GetCoeffRPower14,put=PutCoeffRPower14))
    double CoeffRPower14;
    __declspec(property(get=GetCoeffRPower16,put=PutCoeffRPower16))
    double CoeffRPower16;
    __declspec(property(get=GetDecenterX,put=PutDecenterX))
    double DecenterX;
    __declspec(property(get=GetDecenterY,put=PutDecenterY))
    double DecenterY;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetInterpolateCell ( );
    IEditorCellPtr GetRadiusCell ( );
    IEditorCellPtr GetConicCell ( );
    IEditorCellPtr GetCoeffRPower2Cell ( );
    IEditorCellPtr GetCoeffRPower4Cell ( );
    IEditorCellPtr GetCoeffRPower6Cell ( );
    IEditorCellPtr GetCoeffRPower8Cell ( );
    IEditorCellPtr GetCoeffRPower10Cell ( );
    IEditorCellPtr GetCoeffRPower12Cell ( );
    IEditorCellPtr GetCoeffRPower14Cell ( );
    IEditorCellPtr GetCoeffRPower16Cell ( );
    IEditorCellPtr GetDecenterXCell ( );
    IEditorCellPtr GetDecenterYCell ( );
    enum InterpolateChoices GetInterpolate ( );
    void PutInterpolate (
        enum InterpolateChoices pRetVal );
    double GetRadius ( );
    void PutRadius (
        double pRetVal );
    double GetConic ( );
    void PutConic (
        double pRetVal );
    double GetCoeffRPower2 ( );
    void PutCoeffRPower2 (
        double pRetVal );
    double GetCoeffRPower4 ( );
    void PutCoeffRPower4 (
        double pRetVal );
    double GetCoeffRPower6 ( );
    void PutCoeffRPower6 (
        double pRetVal );
    double GetCoeffRPower8 ( );
    void PutCoeffRPower8 (
        double pRetVal );
    double GetCoeffRPower10 ( );
    void PutCoeffRPower10 (
        double pRetVal );
    double GetCoeffRPower12 ( );
    void PutCoeffRPower12 (
        double pRetVal );
    double GetCoeffRPower14 ( );
    void PutCoeffRPower14 (
        double pRetVal );
    double GetCoeffRPower16 ( );
    void PutCoeffRPower16 (
        double pRetVal );
    double GetDecenterX ( );
    void PutDecenterX (
        double pRetVal );
    double GetDecenterY ( );
    void PutDecenterY (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_InterpolateCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadiusCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ConicCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower8Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower10Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower12Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower14Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower16Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DecenterXCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DecenterYCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Interpolate (
        /*[out,retval]*/ enum InterpolateChoices * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Interpolate (
        /*[in]*/ enum InterpolateChoices pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Conic (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffRPower2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffRPower4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffRPower6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower8 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffRPower8 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower10 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffRPower10 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower12 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffRPower12 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower14 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffRPower14 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower16 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffRPower16 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_DecenterX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DecenterX (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_DecenterY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DecenterY (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("1e78b338-0686-4b66-8a3d-810e3dcd9233"))
IObjectHexagonalLensletArray : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNumberOfColumnsCell))
    IEditorCellPtr NumberOfColumnsCell;
    __declspec(property(get=GetNumberOfRowsCell))
    IEditorCellPtr NumberOfRowsCell;
    __declspec(property(get=GetDrawAsFlatCell))
    IEditorCellPtr DrawAsFlatCell;
    __declspec(property(get=GetWidthCell))
    IEditorCellPtr WidthCell;
    __declspec(property(get=GetThicknessCell))
    IEditorCellPtr ThicknessCell;
    __declspec(property(get=GetRadiusCell))
    IEditorCellPtr RadiusCell;
    __declspec(property(get=GetConicCell))
    IEditorCellPtr ConicCell;
    __declspec(property(get=GetCoeffRPower2Cell))
    IEditorCellPtr CoeffRPower2Cell;
    __declspec(property(get=GetCoeffRPower4Cell))
    IEditorCellPtr CoeffRPower4Cell;
    __declspec(property(get=GetCoeffRPower6Cell))
    IEditorCellPtr CoeffRPower6Cell;
    __declspec(property(get=GetCoeffRPower8Cell))
    IEditorCellPtr CoeffRPower8Cell;
    __declspec(property(get=GetCoeffRPower10Cell))
    IEditorCellPtr CoeffRPower10Cell;
    __declspec(property(get=GetCoeffRPower12Cell))
    IEditorCellPtr CoeffRPower12Cell;
    __declspec(property(get=GetCoeffRPower14Cell))
    IEditorCellPtr CoeffRPower14Cell;
    __declspec(property(get=GetCoeffRPower16Cell))
    IEditorCellPtr CoeffRPower16Cell;
    __declspec(property(get=GetNumberOfColumns,put=PutNumberOfColumns))
    long NumberOfColumns;
    __declspec(property(get=GetNumberOfRows,put=PutNumberOfRows))
    long NumberOfRows;
    __declspec(property(get=GetDrawAsFlat,put=PutDrawAsFlat))
    VARIANT_BOOL DrawAsFlat;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetConic,put=PutConic))
    double Conic;
    __declspec(property(get=GetCoeffRPower2,put=PutCoeffRPower2))
    double CoeffRPower2;
    __declspec(property(get=GetCoeffRPower4,put=PutCoeffRPower4))
    double CoeffRPower4;
    __declspec(property(get=GetCoeffRPower6,put=PutCoeffRPower6))
    double CoeffRPower6;
    __declspec(property(get=GetCoeffRPower8,put=PutCoeffRPower8))
    double CoeffRPower8;
    __declspec(property(get=GetCoeffRPower10,put=PutCoeffRPower10))
    double CoeffRPower10;
    __declspec(property(get=GetCoeffRPower12,put=PutCoeffRPower12))
    double CoeffRPower12;
    __declspec(property(get=GetCoeffRPower14,put=PutCoeffRPower14))
    double CoeffRPower14;
    __declspec(property(get=GetCoeffRPower16,put=PutCoeffRPower16))
    double CoeffRPower16;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetNumberOfColumnsCell ( );
    IEditorCellPtr GetNumberOfRowsCell ( );
    IEditorCellPtr GetDrawAsFlatCell ( );
    IEditorCellPtr GetWidthCell ( );
    IEditorCellPtr GetThicknessCell ( );
    IEditorCellPtr GetRadiusCell ( );
    IEditorCellPtr GetConicCell ( );
    IEditorCellPtr GetCoeffRPower2Cell ( );
    IEditorCellPtr GetCoeffRPower4Cell ( );
    IEditorCellPtr GetCoeffRPower6Cell ( );
    IEditorCellPtr GetCoeffRPower8Cell ( );
    IEditorCellPtr GetCoeffRPower10Cell ( );
    IEditorCellPtr GetCoeffRPower12Cell ( );
    IEditorCellPtr GetCoeffRPower14Cell ( );
    IEditorCellPtr GetCoeffRPower16Cell ( );
    long GetNumberOfColumns ( );
    void PutNumberOfColumns (
        long pRetVal );
    long GetNumberOfRows ( );
    void PutNumberOfRows (
        long pRetVal );
    VARIANT_BOOL GetDrawAsFlat ( );
    void PutDrawAsFlat (
        VARIANT_BOOL pRetVal );
    double GetWidth ( );
    void PutWidth (
        double pRetVal );
    double GetThickness ( );
    void PutThickness (
        double pRetVal );
    double GetRadius ( );
    void PutRadius (
        double pRetVal );
    double GetConic ( );
    void PutConic (
        double pRetVal );
    double GetCoeffRPower2 ( );
    void PutCoeffRPower2 (
        double pRetVal );
    double GetCoeffRPower4 ( );
    void PutCoeffRPower4 (
        double pRetVal );
    double GetCoeffRPower6 ( );
    void PutCoeffRPower6 (
        double pRetVal );
    double GetCoeffRPower8 ( );
    void PutCoeffRPower8 (
        double pRetVal );
    double GetCoeffRPower10 ( );
    void PutCoeffRPower10 (
        double pRetVal );
    double GetCoeffRPower12 ( );
    void PutCoeffRPower12 (
        double pRetVal );
    double GetCoeffRPower14 ( );
    void PutCoeffRPower14 (
        double pRetVal );
    double GetCoeffRPower16 ( );
    void PutCoeffRPower16 (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NumberOfColumnsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfRowsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DrawAsFlatCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_WidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ThicknessCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadiusCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ConicCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower8Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower10Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower12Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower14Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower16Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfColumns (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfColumns (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfRows (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfRows (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_DrawAsFlat (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DrawAsFlat (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Thickness (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Thickness (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Conic (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffRPower2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffRPower4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffRPower6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower8 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffRPower8 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower10 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffRPower10 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower12 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffRPower12 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower14 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffRPower14 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower16 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffRPower16 (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("b4a660ae-cd15-4ae3-a830-5b4a879a619c"))
IObjectHologramLens : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRadialHeightCell))
    IEditorCellPtr RadialHeightCell;
    __declspec(property(get=GetXHalfWidthCell))
    IEditorCellPtr XHalfWidthCell;
    __declspec(property(get=GetThicknessCell))
    IEditorCellPtr ThicknessCell;
    __declspec(property(get=GetRadius1Cell))
    IEditorCellPtr Radius1Cell;
    __declspec(property(get=GetConic1Cell))
    IEditorCellPtr Conic1Cell;
    __declspec(property(get=GetRadius2Cell))
    IEditorCellPtr Radius2Cell;
    __declspec(property(get=GetConic2Cell))
    IEditorCellPtr Conic2Cell;
    __declspec(property(get=GetHologramTypeCell))
    IEditorCellPtr HologramTypeCell;
    __declspec(property(get=GetOrderCell))
    IEditorCellPtr OrderCell;
    __declspec(property(get=GetConsWaveCell))
    IEditorCellPtr ConsWaveCell;
    __declspec(property(get=GetX1Cell))
    IEditorCellPtr X1Cell;
    __declspec(property(get=GetY1Cell))
    IEditorCellPtr Y1Cell;
    __declspec(property(get=GetZ1Cell))
    IEditorCellPtr Z1Cell;
    __declspec(property(get=GetX2Cell))
    IEditorCellPtr X2Cell;
    __declspec(property(get=GetY2Cell))
    IEditorCellPtr Y2Cell;
    __declspec(property(get=GetZ2Cell))
    IEditorCellPtr Z2Cell;
    __declspec(property(get=GetRadialHeight,put=PutRadialHeight))
    double RadialHeight;
    __declspec(property(get=GetXHalfWidth,put=PutXHalfWidth))
    double XHalfWidth;
    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness;
    __declspec(property(get=GetRadius1,put=PutRadius1))
    double Radius1;
    __declspec(property(get=GetConic1,put=PutConic1))
    double Conic1;
    __declspec(property(get=GetRadius2,put=PutRadius2))
    double Radius2;
    __declspec(property(get=GetConic2,put=PutConic2))
    double Conic2;
    __declspec(property(get=GetHologramType,put=PutHologramType))
    long HologramType;
    __declspec(property(get=GetOrder,put=PutOrder))
    double Order;
    __declspec(property(get=GetConsWave,put=PutConsWave))
    double ConsWave;
    __declspec(property(get=GetX1,put=PutX1))
    double X1;
    __declspec(property(get=GetY1,put=PutY1))
    double Y1;
    __declspec(property(get=GetZ1,put=PutZ1))
    double Z1;
    __declspec(property(get=GetX2,put=PutX2))
    double X2;
    __declspec(property(get=GetY2,put=PutY2))
    double Y2;
    __declspec(property(get=GetZ2,put=PutZ2))
    double Z2;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetRadialHeightCell ( );
    IEditorCellPtr GetXHalfWidthCell ( );
    IEditorCellPtr GetThicknessCell ( );
    IEditorCellPtr GetRadius1Cell ( );
    IEditorCellPtr GetConic1Cell ( );
    IEditorCellPtr GetRadius2Cell ( );
    IEditorCellPtr GetConic2Cell ( );
    IEditorCellPtr GetHologramTypeCell ( );
    IEditorCellPtr GetOrderCell ( );
    IEditorCellPtr GetConsWaveCell ( );
    IEditorCellPtr GetX1Cell ( );
    IEditorCellPtr GetY1Cell ( );
    IEditorCellPtr GetZ1Cell ( );
    IEditorCellPtr GetX2Cell ( );
    IEditorCellPtr GetY2Cell ( );
    IEditorCellPtr GetZ2Cell ( );
    double GetRadialHeight ( );
    void PutRadialHeight (
        double pRetVal );
    double GetXHalfWidth ( );
    void PutXHalfWidth (
        double pRetVal );
    double GetThickness ( );
    void PutThickness (
        double pRetVal );
    double GetRadius1 ( );
    void PutRadius1 (
        double pRetVal );
    double GetConic1 ( );
    void PutConic1 (
        double pRetVal );
    double GetRadius2 ( );
    void PutRadius2 (
        double pRetVal );
    double GetConic2 ( );
    void PutConic2 (
        double pRetVal );
    long GetHologramType ( );
    void PutHologramType (
        long pRetVal );
    double GetOrder ( );
    void PutOrder (
        double pRetVal );
    double GetConsWave ( );
    void PutConsWave (
        double pRetVal );
    double GetX1 ( );
    void PutX1 (
        double pRetVal );
    double GetY1 ( );
    void PutY1 (
        double pRetVal );
    double GetZ1 ( );
    void PutZ1 (
        double pRetVal );
    double GetX2 ( );
    void PutX2 (
        double pRetVal );
    double GetY2 ( );
    void PutY2 (
        double pRetVal );
    double GetZ2 ( );
    void PutZ2 (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RadialHeightCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ThicknessCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_HologramTypeCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_OrderCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ConsWaveCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Z1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Z2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadialHeight (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RadialHeight (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_XHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Thickness (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Thickness (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Radius1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Conic1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Radius2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Conic2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_HologramType (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_HologramType (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Order (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Order (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ConsWave (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ConsWave (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Y1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Z1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Z1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Y2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Z2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Z2 (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("b75df9fb-85bd-41b4-9f1d-22c463cc2d33"))
IObjectHologramSurface : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRadiusCell))
    IEditorCellPtr RadiusCell;
    __declspec(property(get=GetConicCell))
    IEditorCellPtr ConicCell;
    __declspec(property(get=GetMaxApertureCell))
    IEditorCellPtr MaxApertureCell;
    __declspec(property(get=GetMinApertureCell))
    IEditorCellPtr MinApertureCell;
    __declspec(property(get=GetHologramTypeCell))
    IEditorCellPtr HologramTypeCell;
    __declspec(property(get=GetOrderCell))
    IEditorCellPtr OrderCell;
    __declspec(property(get=GetConsWaveCell))
    IEditorCellPtr ConsWaveCell;
    __declspec(property(get=GetX1Cell))
    IEditorCellPtr X1Cell;
    __declspec(property(get=GetY1Cell))
    IEditorCellPtr Y1Cell;
    __declspec(property(get=GetZ1Cell))
    IEditorCellPtr Z1Cell;
    __declspec(property(get=GetX2Cell))
    IEditorCellPtr X2Cell;
    __declspec(property(get=GetY2Cell))
    IEditorCellPtr Y2Cell;
    __declspec(property(get=GetZ2Cell))
    IEditorCellPtr Z2Cell;
    __declspec(property(get=GetNumberOfTermsCell))
    IEditorCellPtr NumberOfTermsCell;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetConic,put=PutConic))
    double Conic;
    __declspec(property(get=GetMaxAperture,put=PutMaxAperture))
    double MaxAperture;
    __declspec(property(get=GetMinAperture,put=PutMinAperture))
    double MinAperture;
    __declspec(property(get=GetHologramType,put=PutHologramType))
    long HologramType;
    __declspec(property(get=GetOrder,put=PutOrder))
    double Order;
    __declspec(property(get=GetConsWave,put=PutConsWave))
    double ConsWave;
    __declspec(property(get=GetX1,put=PutX1))
    double X1;
    __declspec(property(get=GetY1,put=PutY1))
    double Y1;
    __declspec(property(get=GetZ1,put=PutZ1))
    double Z1;
    __declspec(property(get=GetX2,put=PutX2))
    double X2;
    __declspec(property(get=GetY2,put=PutY2))
    double Y2;
    __declspec(property(get=GetZ2,put=PutZ2))
    double Z2;
    __declspec(property(get=GetNumberOfTerms,put=PutNumberOfTerms))
    long NumberOfTerms;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetRadiusCell ( );
    IEditorCellPtr GetConicCell ( );
    IEditorCellPtr GetMaxApertureCell ( );
    IEditorCellPtr GetMinApertureCell ( );
    IEditorCellPtr GetHologramTypeCell ( );
    IEditorCellPtr GetOrderCell ( );
    IEditorCellPtr GetConsWaveCell ( );
    IEditorCellPtr GetX1Cell ( );
    IEditorCellPtr GetY1Cell ( );
    IEditorCellPtr GetZ1Cell ( );
    IEditorCellPtr GetX2Cell ( );
    IEditorCellPtr GetY2Cell ( );
    IEditorCellPtr GetZ2Cell ( );
    IEditorCellPtr GetNumberOfTermsCell ( );
    IEditorCellPtr RPowerICell (
        long i );
    double GetRadius ( );
    void PutRadius (
        double pRetVal );
    double GetConic ( );
    void PutConic (
        double pRetVal );
    double GetMaxAperture ( );
    void PutMaxAperture (
        double pRetVal );
    double GetMinAperture ( );
    void PutMinAperture (
        double pRetVal );
    long GetHologramType ( );
    void PutHologramType (
        long pRetVal );
    double GetOrder ( );
    void PutOrder (
        double pRetVal );
    double GetConsWave ( );
    void PutConsWave (
        double pRetVal );
    double GetX1 ( );
    void PutX1 (
        double pRetVal );
    double GetY1 ( );
    void PutY1 (
        double pRetVal );
    double GetZ1 ( );
    void PutZ1 (
        double pRetVal );
    double GetX2 ( );
    void PutX2 (
        double pRetVal );
    double GetY2 ( );
    void PutY2 (
        double pRetVal );
    double GetZ2 ( );
    void PutZ2 (
        double pRetVal );
    long GetNumberOfTerms ( );
    void PutNumberOfTerms (
        long pRetVal );
    double GetRPowerI (
        long i );
    HRESULT SetRPowerI (
        long i,
        double v );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RadiusCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ConicCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaxApertureCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinApertureCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_HologramTypeCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_OrderCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ConsWaveCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Z1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Z2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfTermsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_RPowerICell (
        /*[in]*/ long i,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Conic (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaxAperture (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaxAperture (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinAperture (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MinAperture (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_HologramType (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_HologramType (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Order (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Order (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ConsWave (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ConsWave (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Y1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Z1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Z1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Y2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Z2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Z2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfTerms (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfTerms (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetRPowerI (
        /*[in]*/ long i,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetRPowerI (
        /*[in]*/ long i,
        /*[in]*/ double v ) = 0;
};

struct __declspec(uuid("9a7f656d-cc09-4041-ace2-2efff884d3cc"))
IObjectJonesMatrix : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetXHalfWidthCell))
    IEditorCellPtr XHalfWidthCell;
    __declspec(property(get=GetYHalfWidthCell))
    IEditorCellPtr YHalfWidthCell;
    __declspec(property(get=GetARealCell))
    IEditorCellPtr ARealCell;
    __declspec(property(get=GetAImagCell))
    IEditorCellPtr AImagCell;
    __declspec(property(get=GetBRealCell))
    IEditorCellPtr BRealCell;
    __declspec(property(get=GetBImagCell))
    IEditorCellPtr BImagCell;
    __declspec(property(get=GetCRealCell))
    IEditorCellPtr CRealCell;
    __declspec(property(get=GetCImagCell))
    IEditorCellPtr CImagCell;
    __declspec(property(get=GetDRealCell))
    IEditorCellPtr DRealCell;
    __declspec(property(get=GetDImagCell))
    IEditorCellPtr DImagCell;
    __declspec(property(get=GetXHalfWidth,put=PutXHalfWidth))
    double XHalfWidth;
    __declspec(property(get=GetYHalfWidth,put=PutYHalfWidth))
    double YHalfWidth;
    __declspec(property(get=GetAReal,put=PutAReal))
    double AReal;
    __declspec(property(get=GetAImag,put=PutAImag))
    double AImag;
    __declspec(property(get=GetBReal,put=PutBReal))
    double BReal;
    __declspec(property(get=GetBImag,put=PutBImag))
    double BImag;
    __declspec(property(get=GetCReal,put=PutCReal))
    double CReal;
    __declspec(property(get=GetCImag,put=PutCImag))
    double CImag;
    __declspec(property(get=GetDReal,put=PutDReal))
    double DReal;
    __declspec(property(get=GetDImag,put=PutDImag))
    double DImag;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetXHalfWidthCell ( );
    IEditorCellPtr GetYHalfWidthCell ( );
    IEditorCellPtr GetARealCell ( );
    IEditorCellPtr GetAImagCell ( );
    IEditorCellPtr GetBRealCell ( );
    IEditorCellPtr GetBImagCell ( );
    IEditorCellPtr GetCRealCell ( );
    IEditorCellPtr GetCImagCell ( );
    IEditorCellPtr GetDRealCell ( );
    IEditorCellPtr GetDImagCell ( );
    double GetXHalfWidth ( );
    void PutXHalfWidth (
        double pRetVal );
    double GetYHalfWidth ( );
    void PutYHalfWidth (
        double pRetVal );
    double GetAReal ( );
    void PutAReal (
        double pRetVal );
    double GetAImag ( );
    void PutAImag (
        double pRetVal );
    double GetBReal ( );
    void PutBReal (
        double pRetVal );
    double GetBImag ( );
    void PutBImag (
        double pRetVal );
    double GetCReal ( );
    void PutCReal (
        double pRetVal );
    double GetCImag ( );
    void PutCImag (
        double pRetVal );
    double GetDReal ( );
    void PutDReal (
        double pRetVal );
    double GetDImag ( );
    void PutDImag (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_XHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ARealCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AImagCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_BRealCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_BImagCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CRealCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CImagCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DRealCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DImagCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_AReal (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AReal (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_AImag (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AImag (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_BReal (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BReal (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_BImag (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BImag (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CReal (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CReal (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CImag (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CImag (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_DReal (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DReal (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_DImag (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DImag (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("da272a3e-85eb-4523-927c-b5a5b4d8aec7"))
IObjectLensletArray1 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetXHalfWidthCell))
    IEditorCellPtr XHalfWidthCell;
    __declspec(property(get=GetYHalfWidthCell))
    IEditorCellPtr YHalfWidthCell;
    __declspec(property(get=GetThicknessCell))
    IEditorCellPtr ThicknessCell;
    __declspec(property(get=GetRadiusCell))
    IEditorCellPtr RadiusCell;
    __declspec(property(get=GetConicCell))
    IEditorCellPtr ConicCell;
    __declspec(property(get=GetIsToricCell))
    IEditorCellPtr IsToricCell;
    __declspec(property(get=GetToricRCell))
    IEditorCellPtr ToricRCell;
    __declspec(property(get=GetLinesPerUMCell))
    IEditorCellPtr LinesPerUMCell;
    __declspec(property(get=GetDiffOrderCell))
    IEditorCellPtr DiffOrderCell;
    __declspec(property(get=GetCoeffRPower2Cell))
    IEditorCellPtr CoeffRPower2Cell;
    __declspec(property(get=GetCoeffRPower4Cell))
    IEditorCellPtr CoeffRPower4Cell;
    __declspec(property(get=GetCoeffRPower6Cell))
    IEditorCellPtr CoeffRPower6Cell;
    __declspec(property(get=GetCoeffRPower8Cell))
    IEditorCellPtr CoeffRPower8Cell;
    __declspec(property(get=GetCoeffRPower10Cell))
    IEditorCellPtr CoeffRPower10Cell;
    __declspec(property(get=GetCoeffRPower12Cell))
    IEditorCellPtr CoeffRPower12Cell;
    __declspec(property(get=GetCoeffRPower14Cell))
    IEditorCellPtr CoeffRPower14Cell;
    __declspec(property(get=GetCoeffRPower16Cell))
    IEditorCellPtr CoeffRPower16Cell;
    __declspec(property(get=GetCoeffYPower2Cell))
    IEditorCellPtr CoeffYPower2Cell;
    __declspec(property(get=GetCoeffYPower4Cell))
    IEditorCellPtr CoeffYPower4Cell;
    __declspec(property(get=GetCoeffYPower6Cell))
    IEditorCellPtr CoeffYPower6Cell;
    __declspec(property(get=GetCoeffYPower8Cell))
    IEditorCellPtr CoeffYPower8Cell;
    __declspec(property(get=GetCoeffYPower10Cell))
    IEditorCellPtr CoeffYPower10Cell;
    __declspec(property(get=GetCoeffYPower12Cell))
    IEditorCellPtr CoeffYPower12Cell;
    __declspec(property(get=GetCoeffYPower14Cell))
    IEditorCellPtr CoeffYPower14Cell;
    __declspec(property(get=GetCoeffYPower16Cell))
    IEditorCellPtr CoeffYPower16Cell;
    __declspec(property(get=GetDecenterXCell))
    IEditorCellPtr DecenterXCell;
    __declspec(property(get=GetDecenterYCell))
    IEditorCellPtr DecenterYCell;
    __declspec(property(get=GetNumberInXCell))
    IEditorCellPtr NumberInXCell;
    __declspec(property(get=GetNumberInYCell))
    IEditorCellPtr NumberInYCell;
    __declspec(property(get=GetDiffractiveFaceCell))
    IEditorCellPtr DiffractiveFaceCell;
    __declspec(property(get=GetXHalfWidth,put=PutXHalfWidth))
    double XHalfWidth;
    __declspec(property(get=GetYHalfWidth,put=PutYHalfWidth))
    double YHalfWidth;
    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetConic,put=PutConic))
    double Conic;
    __declspec(property(get=GetIsToric,put=PutIsToric))
    VARIANT_BOOL IsToric;
    __declspec(property(get=GetToricR,put=PutToricR))
    double ToricR;
    __declspec(property(get=GetLinesPerUM,put=PutLinesPerUM))
    double LinesPerUM;
    __declspec(property(get=GetDiffOrder,put=PutDiffOrder))
    double DiffOrder;
    __declspec(property(get=GetCoeffRPower2,put=PutCoeffRPower2))
    double CoeffRPower2;
    __declspec(property(get=GetCoeffRPower4,put=PutCoeffRPower4))
    double CoeffRPower4;
    __declspec(property(get=GetCoeffRPower6,put=PutCoeffRPower6))
    double CoeffRPower6;
    __declspec(property(get=GetCoeffRPower8,put=PutCoeffRPower8))
    double CoeffRPower8;
    __declspec(property(get=GetCoeffRPower10,put=PutCoeffRPower10))
    double CoeffRPower10;
    __declspec(property(get=GetCoeffRPower12,put=PutCoeffRPower12))
    double CoeffRPower12;
    __declspec(property(get=GetCoeffRPower14,put=PutCoeffRPower14))
    double CoeffRPower14;
    __declspec(property(get=GetCoeffRPower16,put=PutCoeffRPower16))
    double CoeffRPower16;
    __declspec(property(get=GetCoeffYPower2,put=PutCoeffYPower2))
    double CoeffYPower2;
    __declspec(property(get=GetCoeffYPower4,put=PutCoeffYPower4))
    double CoeffYPower4;
    __declspec(property(get=GetCoeffYPower6,put=PutCoeffYPower6))
    double CoeffYPower6;
    __declspec(property(get=GetCoeffYPower8,put=PutCoeffYPower8))
    double CoeffYPower8;
    __declspec(property(get=GetCoeffYPower10,put=PutCoeffYPower10))
    double CoeffYPower10;
    __declspec(property(get=GetCoeffYPower12,put=PutCoeffYPower12))
    double CoeffYPower12;
    __declspec(property(get=GetCoeffYPower14,put=PutCoeffYPower14))
    double CoeffYPower14;
    __declspec(property(get=GetCoeffYPower16,put=PutCoeffYPower16))
    double CoeffYPower16;
    __declspec(property(get=GetDecenterX,put=PutDecenterX))
    double DecenterX;
    __declspec(property(get=GetDecenterY,put=PutDecenterY))
    double DecenterY;
    __declspec(property(get=GetNumberInX,put=PutNumberInX))
    long NumberInX;
    __declspec(property(get=GetNumberInY,put=PutNumberInY))
    long NumberInY;
    __declspec(property(get=GetDiffractiveFace,put=PutDiffractiveFace))
    enum DiffractiveFaceChoices DiffractiveFace;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetXHalfWidthCell ( );
    IEditorCellPtr GetYHalfWidthCell ( );
    IEditorCellPtr GetThicknessCell ( );
    IEditorCellPtr GetRadiusCell ( );
    IEditorCellPtr GetConicCell ( );
    IEditorCellPtr GetIsToricCell ( );
    IEditorCellPtr GetToricRCell ( );
    IEditorCellPtr GetLinesPerUMCell ( );
    IEditorCellPtr GetDiffOrderCell ( );
    IEditorCellPtr GetCoeffRPower2Cell ( );
    IEditorCellPtr GetCoeffRPower4Cell ( );
    IEditorCellPtr GetCoeffRPower6Cell ( );
    IEditorCellPtr GetCoeffRPower8Cell ( );
    IEditorCellPtr GetCoeffRPower10Cell ( );
    IEditorCellPtr GetCoeffRPower12Cell ( );
    IEditorCellPtr GetCoeffRPower14Cell ( );
    IEditorCellPtr GetCoeffRPower16Cell ( );
    IEditorCellPtr GetCoeffYPower2Cell ( );
    IEditorCellPtr GetCoeffYPower4Cell ( );
    IEditorCellPtr GetCoeffYPower6Cell ( );
    IEditorCellPtr GetCoeffYPower8Cell ( );
    IEditorCellPtr GetCoeffYPower10Cell ( );
    IEditorCellPtr GetCoeffYPower12Cell ( );
    IEditorCellPtr GetCoeffYPower14Cell ( );
    IEditorCellPtr GetCoeffYPower16Cell ( );
    IEditorCellPtr GetDecenterXCell ( );
    IEditorCellPtr GetDecenterYCell ( );
    IEditorCellPtr GetNumberInXCell ( );
    IEditorCellPtr GetNumberInYCell ( );
    IEditorCellPtr GetDiffractiveFaceCell ( );
    double GetXHalfWidth ( );
    void PutXHalfWidth (
        double pRetVal );
    double GetYHalfWidth ( );
    void PutYHalfWidth (
        double pRetVal );
    double GetThickness ( );
    void PutThickness (
        double pRetVal );
    double GetRadius ( );
    void PutRadius (
        double pRetVal );
    double GetConic ( );
    void PutConic (
        double pRetVal );
    VARIANT_BOOL GetIsToric ( );
    void PutIsToric (
        VARIANT_BOOL pRetVal );
    double GetToricR ( );
    void PutToricR (
        double pRetVal );
    double GetLinesPerUM ( );
    void PutLinesPerUM (
        double pRetVal );
    double GetDiffOrder ( );
    void PutDiffOrder (
        double pRetVal );
    double GetCoeffRPower2 ( );
    void PutCoeffRPower2 (
        double pRetVal );
    double GetCoeffRPower4 ( );
    void PutCoeffRPower4 (
        double pRetVal );
    double GetCoeffRPower6 ( );
    void PutCoeffRPower6 (
        double pRetVal );
    double GetCoeffRPower8 ( );
    void PutCoeffRPower8 (
        double pRetVal );
    double GetCoeffRPower10 ( );
    void PutCoeffRPower10 (
        double pRetVal );
    double GetCoeffRPower12 ( );
    void PutCoeffRPower12 (
        double pRetVal );
    double GetCoeffRPower14 ( );
    void PutCoeffRPower14 (
        double pRetVal );
    double GetCoeffRPower16 ( );
    void PutCoeffRPower16 (
        double pRetVal );
    double GetCoeffYPower2 ( );
    void PutCoeffYPower2 (
        double pRetVal );
    double GetCoeffYPower4 ( );
    void PutCoeffYPower4 (
        double pRetVal );
    double GetCoeffYPower6 ( );
    void PutCoeffYPower6 (
        double pRetVal );
    double GetCoeffYPower8 ( );
    void PutCoeffYPower8 (
        double pRetVal );
    double GetCoeffYPower10 ( );
    void PutCoeffYPower10 (
        double pRetVal );
    double GetCoeffYPower12 ( );
    void PutCoeffYPower12 (
        double pRetVal );
    double GetCoeffYPower14 ( );
    void PutCoeffYPower14 (
        double pRetVal );
    double GetCoeffYPower16 ( );
    void PutCoeffYPower16 (
        double pRetVal );
    double GetDecenterX ( );
    void PutDecenterX (
        double pRetVal );
    double GetDecenterY ( );
    void PutDecenterY (
        double pRetVal );
    long GetNumberInX ( );
    void PutNumberInX (
        long pRetVal );
    long GetNumberInY ( );
    void PutNumberInY (
        long pRetVal );
    enum DiffractiveFaceChoices GetDiffractiveFace ( );
    void PutDiffractiveFace (
        enum DiffractiveFaceChoices pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_XHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ThicknessCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadiusCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ConicCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsToricCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ToricRCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LinesPerUMCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DiffOrderCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower8Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower10Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower12Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower14Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower16Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffYPower2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffYPower4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffYPower6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffYPower8Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffYPower10Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffYPower12Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffYPower14Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffYPower16Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DecenterXCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DecenterYCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberInXCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberInYCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DiffractiveFaceCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Thickness (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Thickness (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Conic (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsToric (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsToric (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ToricR (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ToricR (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_LinesPerUM (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_LinesPerUM (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_DiffOrder (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DiffOrder (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffRPower2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffRPower4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffRPower6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower8 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffRPower8 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower10 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffRPower10 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower12 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffRPower12 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower14 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffRPower14 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower16 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffRPower16 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffYPower2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffYPower2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffYPower4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffYPower4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffYPower6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffYPower6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffYPower8 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffYPower8 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffYPower10 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffYPower10 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffYPower12 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffYPower12 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffYPower14 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffYPower14 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffYPower16 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffYPower16 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_DecenterX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DecenterX (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_DecenterY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DecenterY (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberInX (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberInX (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberInY (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberInY (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_DiffractiveFace (
        /*[out,retval]*/ enum DiffractiveFaceChoices * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DiffractiveFace (
        /*[in]*/ enum DiffractiveFaceChoices pRetVal ) = 0;
};

struct __declspec(uuid("53e73223-7faf-4a93-816d-26e82ac28d4a"))
IObjectLensletArray2 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetXHalfWidthCell))
    IEditorCellPtr XHalfWidthCell;
    __declspec(property(get=GetYHalfWidthCell))
    IEditorCellPtr YHalfWidthCell;
    __declspec(property(get=GetThicknessCell))
    IEditorCellPtr ThicknessCell;
    __declspec(property(get=GetRadius1Cell))
    IEditorCellPtr Radius1Cell;
    __declspec(property(get=GetConic1Cell))
    IEditorCellPtr Conic1Cell;
    __declspec(property(get=GetRadius2Cell))
    IEditorCellPtr Radius2Cell;
    __declspec(property(get=GetConic2Cell))
    IEditorCellPtr Conic2Cell;
    __declspec(property(get=GetNumberInXCell))
    IEditorCellPtr NumberInXCell;
    __declspec(property(get=GetNumberInYCell))
    IEditorCellPtr NumberInYCell;
    __declspec(property(get=GetXHalfWidth,put=PutXHalfWidth))
    double XHalfWidth;
    __declspec(property(get=GetYHalfWidth,put=PutYHalfWidth))
    double YHalfWidth;
    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness;
    __declspec(property(get=GetRadius1,put=PutRadius1))
    double Radius1;
    __declspec(property(get=GetConic1,put=PutConic1))
    double Conic1;
    __declspec(property(get=GetRadius2,put=PutRadius2))
    double Radius2;
    __declspec(property(get=GetConic2,put=PutConic2))
    double Conic2;
    __declspec(property(get=GetNumberInX,put=PutNumberInX))
    long NumberInX;
    __declspec(property(get=GetNumberInY,put=PutNumberInY))
    long NumberInY;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetXHalfWidthCell ( );
    IEditorCellPtr GetYHalfWidthCell ( );
    IEditorCellPtr GetThicknessCell ( );
    IEditorCellPtr GetRadius1Cell ( );
    IEditorCellPtr GetConic1Cell ( );
    IEditorCellPtr GetRadius2Cell ( );
    IEditorCellPtr GetConic2Cell ( );
    IEditorCellPtr GetNumberInXCell ( );
    IEditorCellPtr GetNumberInYCell ( );
    double GetXHalfWidth ( );
    void PutXHalfWidth (
        double pRetVal );
    double GetYHalfWidth ( );
    void PutYHalfWidth (
        double pRetVal );
    double GetThickness ( );
    void PutThickness (
        double pRetVal );
    double GetRadius1 ( );
    void PutRadius1 (
        double pRetVal );
    double GetConic1 ( );
    void PutConic1 (
        double pRetVal );
    double GetRadius2 ( );
    void PutRadius2 (
        double pRetVal );
    double GetConic2 ( );
    void PutConic2 (
        double pRetVal );
    long GetNumberInX ( );
    void PutNumberInX (
        long pRetVal );
    long GetNumberInY ( );
    void PutNumberInY (
        long pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_XHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ThicknessCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberInXCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberInYCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Thickness (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Thickness (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Radius1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Conic1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Radius2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Conic2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberInX (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberInX (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberInY (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberInY (
        /*[in]*/ long pRetVal ) = 0;
};

struct __declspec(uuid("06604887-b8ac-4337-9c48-bac64ec4bae7"))
IObjectMEMS : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNumberOfXPixelsCell))
    IEditorCellPtr NumberOfXPixelsCell;
    __declspec(property(get=GetNumberOfYPixelsCell))
    IEditorCellPtr NumberOfYPixelsCell;
    __declspec(property(get=GetXMinusWidthCell))
    IEditorCellPtr XMinusWidthCell;
    __declspec(property(get=GetYMinusWidthCell))
    IEditorCellPtr YMinusWidthCell;
    __declspec(property(get=GetAngle0Cell))
    IEditorCellPtr Angle0Cell;
    __declspec(property(get=GetAngle1Cell))
    IEditorCellPtr Angle1Cell;
    __declspec(property(get=GetAngle2Cell))
    IEditorCellPtr Angle2Cell;
    __declspec(property(get=GetRotationAngleCell))
    IEditorCellPtr RotationAngleCell;
    __declspec(property(get=GetPFlagCell))
    IEditorCellPtr PFlagCell;
    __declspec(property(get=GetNumberOfXPixels,put=PutNumberOfXPixels))
    long NumberOfXPixels;
    __declspec(property(get=GetNumberOfYPixels,put=PutNumberOfYPixels))
    long NumberOfYPixels;
    __declspec(property(get=GetXMinusWidth,put=PutXMinusWidth))
    double XMinusWidth;
    __declspec(property(get=GetYMinusWidth,put=PutYMinusWidth))
    double YMinusWidth;
    __declspec(property(get=GetAngle0,put=PutAngle0))
    double Angle0;
    __declspec(property(get=GetAngle1,put=PutAngle1))
    double Angle1;
    __declspec(property(get=GetAngle2,put=PutAngle2))
    double Angle2;
    __declspec(property(get=GetRotationAngle,put=PutRotationAngle))
    double RotationAngle;
    __declspec(property(get=GetPFlag,put=PutPFlag))
    enum PixelAddressing PFlag;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetNumberOfXPixelsCell ( );
    IEditorCellPtr GetNumberOfYPixelsCell ( );
    IEditorCellPtr GetXMinusWidthCell ( );
    IEditorCellPtr GetYMinusWidthCell ( );
    IEditorCellPtr GetAngle0Cell ( );
    IEditorCellPtr GetAngle1Cell ( );
    IEditorCellPtr GetAngle2Cell ( );
    IEditorCellPtr GetRotationAngleCell ( );
    IEditorCellPtr GetPFlagCell ( );
    long GetNumberOfXPixels ( );
    void PutNumberOfXPixels (
        long pRetVal );
    long GetNumberOfYPixels ( );
    void PutNumberOfYPixels (
        long pRetVal );
    double GetXMinusWidth ( );
    void PutXMinusWidth (
        double pRetVal );
    double GetYMinusWidth ( );
    void PutYMinusWidth (
        double pRetVal );
    double GetAngle0 ( );
    void PutAngle0 (
        double pRetVal );
    double GetAngle1 ( );
    void PutAngle1 (
        double pRetVal );
    double GetAngle2 ( );
    void PutAngle2 (
        double pRetVal );
    double GetRotationAngle ( );
    void PutRotationAngle (
        double pRetVal );
    enum PixelAddressing GetPFlag ( );
    void PutPFlag (
        enum PixelAddressing pRetVal );
    IEditorCellPtr PixelAddressGroupNCell (
        long N );
    long GetPixelAddressGroupN (
        long N );
    HRESULT SetPixelAddressGroupN (
        long N,
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NumberOfXPixelsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfYPixelsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XMinusWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YMinusWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Angle0Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Angle1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Angle2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RotationAngleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_PFlagCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfXPixels (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfXPixels (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfYPixels (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfYPixels (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_XMinusWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XMinusWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YMinusWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YMinusWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Angle0 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Angle0 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Angle1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Angle1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Angle2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Angle2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RotationAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RotationAngle (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_PFlag (
        /*[out,retval]*/ enum PixelAddressing * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PFlag (
        /*[in]*/ enum PixelAddressing pRetVal ) = 0;
      virtual HRESULT __stdcall raw_PixelAddressGroupNCell (
        /*[in]*/ long N,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetPixelAddressGroupN (
        /*[in]*/ long N,
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetPixelAddressGroupN (
        /*[in]*/ long N,
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("fe577194-fb8a-4f4b-b087-042464b9c0fd"))
IObjectOddAsphereLens : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRadialApertureCell))
    IEditorCellPtr RadialApertureCell;
    __declspec(property(get=GetThicknessCell))
    IEditorCellPtr ThicknessCell;
    __declspec(property(get=GetRadius1Cell))
    IEditorCellPtr Radius1Cell;
    __declspec(property(get=GetConic1Cell))
    IEditorCellPtr Conic1Cell;
    __declspec(property(get=GetCoeff1RPower1Cell))
    IEditorCellPtr Coeff1RPower1Cell;
    __declspec(property(get=GetCoeff2RPower1Cell))
    IEditorCellPtr Coeff2RPower1Cell;
    __declspec(property(get=GetCoeff3RPower1Cell))
    IEditorCellPtr Coeff3RPower1Cell;
    __declspec(property(get=GetCoeff4RPower1Cell))
    IEditorCellPtr Coeff4RPower1Cell;
    __declspec(property(get=GetCoeff5RPower1Cell))
    IEditorCellPtr Coeff5RPower1Cell;
    __declspec(property(get=GetCoeff6RPower1Cell))
    IEditorCellPtr Coeff6RPower1Cell;
    __declspec(property(get=GetCoeff7RPower1Cell))
    IEditorCellPtr Coeff7RPower1Cell;
    __declspec(property(get=GetCoeff8RPower1Cell))
    IEditorCellPtr Coeff8RPower1Cell;
    __declspec(property(get=GetCoeff9RPower1Cell))
    IEditorCellPtr Coeff9RPower1Cell;
    __declspec(property(get=GetCoeff10RPower1Cell))
    IEditorCellPtr Coeff10RPower1Cell;
    __declspec(property(get=GetCoeff11RPower1Cell))
    IEditorCellPtr Coeff11RPower1Cell;
    __declspec(property(get=GetCoeff12RPower1Cell))
    IEditorCellPtr Coeff12RPower1Cell;
    __declspec(property(get=GetRadius2Cell))
    IEditorCellPtr Radius2Cell;
    __declspec(property(get=GetConic2Cell))
    IEditorCellPtr Conic2Cell;
    __declspec(property(get=GetCoeff1RPower2Cell))
    IEditorCellPtr Coeff1RPower2Cell;
    __declspec(property(get=GetCoeff2RPower2Cell))
    IEditorCellPtr Coeff2RPower2Cell;
    __declspec(property(get=GetCoeff3RPower2Cell))
    IEditorCellPtr Coeff3RPower2Cell;
    __declspec(property(get=GetCoeff4RPower2Cell))
    IEditorCellPtr Coeff4RPower2Cell;
    __declspec(property(get=GetCoeff5RPower2Cell))
    IEditorCellPtr Coeff5RPower2Cell;
    __declspec(property(get=GetCoeff6RPower2Cell))
    IEditorCellPtr Coeff6RPower2Cell;
    __declspec(property(get=GetCoeff7RPower2Cell))
    IEditorCellPtr Coeff7RPower2Cell;
    __declspec(property(get=GetCoeff8RPower2Cell))
    IEditorCellPtr Coeff8RPower2Cell;
    __declspec(property(get=GetCoeff9RPower2Cell))
    IEditorCellPtr Coeff9RPower2Cell;
    __declspec(property(get=GetCoeff10RPower2Cell))
    IEditorCellPtr Coeff10RPower2Cell;
    __declspec(property(get=GetCoeff11RPower2Cell))
    IEditorCellPtr Coeff11RPower2Cell;
    __declspec(property(get=GetCoeff12RPower2Cell))
    IEditorCellPtr Coeff12RPower2Cell;
    __declspec(property(get=GetRadialAperture,put=PutRadialAperture))
    double RadialAperture;
    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness;
    __declspec(property(get=GetRadius1,put=PutRadius1))
    double Radius1;
    __declspec(property(get=GetConic1,put=PutConic1))
    double Conic1;
    __declspec(property(get=GetCoeff1RPower1,put=PutCoeff1RPower1))
    double Coeff1RPower1;
    __declspec(property(get=GetCoeff2RPower1,put=PutCoeff2RPower1))
    double Coeff2RPower1;
    __declspec(property(get=GetCoeff3RPower1,put=PutCoeff3RPower1))
    double Coeff3RPower1;
    __declspec(property(get=GetCoeff4RPower1,put=PutCoeff4RPower1))
    double Coeff4RPower1;
    __declspec(property(get=GetCoeff5RPower1,put=PutCoeff5RPower1))
    double Coeff5RPower1;
    __declspec(property(get=GetCoeff6RPower1,put=PutCoeff6RPower1))
    double Coeff6RPower1;
    __declspec(property(get=GetCoeff7RPower1,put=PutCoeff7RPower1))
    double Coeff7RPower1;
    __declspec(property(get=GetCoeff8RPower1,put=PutCoeff8RPower1))
    double Coeff8RPower1;
    __declspec(property(get=GetCoeff9RPower1,put=PutCoeff9RPower1))
    double Coeff9RPower1;
    __declspec(property(get=GetCoeff10RPower1,put=PutCoeff10RPower1))
    double Coeff10RPower1;
    __declspec(property(get=GetCoeff11RPower1,put=PutCoeff11RPower1))
    double Coeff11RPower1;
    __declspec(property(get=GetCoeff12RPower1,put=PutCoeff12RPower1))
    double Coeff12RPower1;
    __declspec(property(get=GetRadius2,put=PutRadius2))
    double Radius2;
    __declspec(property(get=GetConic2,put=PutConic2))
    double Conic2;
    __declspec(property(get=GetCoeff1RPower2,put=PutCoeff1RPower2))
    double Coeff1RPower2;
    __declspec(property(get=GetCoeff2RPower2,put=PutCoeff2RPower2))
    double Coeff2RPower2;
    __declspec(property(get=GetCoeff3RPower2,put=PutCoeff3RPower2))
    double Coeff3RPower2;
    __declspec(property(get=GetCoeff4RPower2,put=PutCoeff4RPower2))
    double Coeff4RPower2;
    __declspec(property(get=GetCoeff5RPower2,put=PutCoeff5RPower2))
    double Coeff5RPower2;
    __declspec(property(get=GetCoeff6RPower2,put=PutCoeff6RPower2))
    double Coeff6RPower2;
    __declspec(property(get=GetCoeff7RPower2,put=PutCoeff7RPower2))
    double Coeff7RPower2;
    __declspec(property(get=GetCoeff8RPower2,put=PutCoeff8RPower2))
    double Coeff8RPower2;
    __declspec(property(get=GetCoeff9RPower2,put=PutCoeff9RPower2))
    double Coeff9RPower2;
    __declspec(property(get=GetCoeff10RPower2,put=PutCoeff10RPower2))
    double Coeff10RPower2;
    __declspec(property(get=GetCoeff11RPower2,put=PutCoeff11RPower2))
    double Coeff11RPower2;
    __declspec(property(get=GetCoeff12RPower2,put=PutCoeff12RPower2))
    double Coeff12RPower2;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetRadialApertureCell ( );
    IEditorCellPtr GetThicknessCell ( );
    IEditorCellPtr GetRadius1Cell ( );
    IEditorCellPtr GetConic1Cell ( );
    IEditorCellPtr GetCoeff1RPower1Cell ( );
    IEditorCellPtr GetCoeff2RPower1Cell ( );
    IEditorCellPtr GetCoeff3RPower1Cell ( );
    IEditorCellPtr GetCoeff4RPower1Cell ( );
    IEditorCellPtr GetCoeff5RPower1Cell ( );
    IEditorCellPtr GetCoeff6RPower1Cell ( );
    IEditorCellPtr GetCoeff7RPower1Cell ( );
    IEditorCellPtr GetCoeff8RPower1Cell ( );
    IEditorCellPtr GetCoeff9RPower1Cell ( );
    IEditorCellPtr GetCoeff10RPower1Cell ( );
    IEditorCellPtr GetCoeff11RPower1Cell ( );
    IEditorCellPtr GetCoeff12RPower1Cell ( );
    IEditorCellPtr GetRadius2Cell ( );
    IEditorCellPtr GetConic2Cell ( );
    IEditorCellPtr GetCoeff1RPower2Cell ( );
    IEditorCellPtr GetCoeff2RPower2Cell ( );
    IEditorCellPtr GetCoeff3RPower2Cell ( );
    IEditorCellPtr GetCoeff4RPower2Cell ( );
    IEditorCellPtr GetCoeff5RPower2Cell ( );
    IEditorCellPtr GetCoeff6RPower2Cell ( );
    IEditorCellPtr GetCoeff7RPower2Cell ( );
    IEditorCellPtr GetCoeff8RPower2Cell ( );
    IEditorCellPtr GetCoeff9RPower2Cell ( );
    IEditorCellPtr GetCoeff10RPower2Cell ( );
    IEditorCellPtr GetCoeff11RPower2Cell ( );
    IEditorCellPtr GetCoeff12RPower2Cell ( );
    double GetRadialAperture ( );
    void PutRadialAperture (
        double pRetVal );
    double GetThickness ( );
    void PutThickness (
        double pRetVal );
    double GetRadius1 ( );
    void PutRadius1 (
        double pRetVal );
    double GetConic1 ( );
    void PutConic1 (
        double pRetVal );
    double GetCoeff1RPower1 ( );
    void PutCoeff1RPower1 (
        double pRetVal );
    double GetCoeff2RPower1 ( );
    void PutCoeff2RPower1 (
        double pRetVal );
    double GetCoeff3RPower1 ( );
    void PutCoeff3RPower1 (
        double pRetVal );
    double GetCoeff4RPower1 ( );
    void PutCoeff4RPower1 (
        double pRetVal );
    double GetCoeff5RPower1 ( );
    void PutCoeff5RPower1 (
        double pRetVal );
    double GetCoeff6RPower1 ( );
    void PutCoeff6RPower1 (
        double pRetVal );
    double GetCoeff7RPower1 ( );
    void PutCoeff7RPower1 (
        double pRetVal );
    double GetCoeff8RPower1 ( );
    void PutCoeff8RPower1 (
        double pRetVal );
    double GetCoeff9RPower1 ( );
    void PutCoeff9RPower1 (
        double pRetVal );
    double GetCoeff10RPower1 ( );
    void PutCoeff10RPower1 (
        double pRetVal );
    double GetCoeff11RPower1 ( );
    void PutCoeff11RPower1 (
        double pRetVal );
    double GetCoeff12RPower1 ( );
    void PutCoeff12RPower1 (
        double pRetVal );
    double GetRadius2 ( );
    void PutRadius2 (
        double pRetVal );
    double GetConic2 ( );
    void PutConic2 (
        double pRetVal );
    double GetCoeff1RPower2 ( );
    void PutCoeff1RPower2 (
        double pRetVal );
    double GetCoeff2RPower2 ( );
    void PutCoeff2RPower2 (
        double pRetVal );
    double GetCoeff3RPower2 ( );
    void PutCoeff3RPower2 (
        double pRetVal );
    double GetCoeff4RPower2 ( );
    void PutCoeff4RPower2 (
        double pRetVal );
    double GetCoeff5RPower2 ( );
    void PutCoeff5RPower2 (
        double pRetVal );
    double GetCoeff6RPower2 ( );
    void PutCoeff6RPower2 (
        double pRetVal );
    double GetCoeff7RPower2 ( );
    void PutCoeff7RPower2 (
        double pRetVal );
    double GetCoeff8RPower2 ( );
    void PutCoeff8RPower2 (
        double pRetVal );
    double GetCoeff9RPower2 ( );
    void PutCoeff9RPower2 (
        double pRetVal );
    double GetCoeff10RPower2 ( );
    void PutCoeff10RPower2 (
        double pRetVal );
    double GetCoeff11RPower2 ( );
    void PutCoeff11RPower2 (
        double pRetVal );
    double GetCoeff12RPower2 ( );
    void PutCoeff12RPower2 (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RadialApertureCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ThicknessCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1RPower1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2RPower1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff3RPower1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff4RPower1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff5RPower1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff6RPower1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff7RPower1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff8RPower1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff9RPower1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff10RPower1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff11RPower1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff12RPower1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1RPower2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2RPower2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff3RPower2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff4RPower2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff5RPower2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff6RPower2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff7RPower2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff8RPower2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff9RPower2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff10RPower2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff11RPower2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff12RPower2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadialAperture (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RadialAperture (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Thickness (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Thickness (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Radius1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Conic1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1RPower1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff1RPower1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2RPower1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff2RPower1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff3RPower1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff3RPower1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff4RPower1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff4RPower1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff5RPower1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff5RPower1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff6RPower1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff6RPower1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff7RPower1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff7RPower1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff8RPower1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff8RPower1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff9RPower1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff9RPower1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff10RPower1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff10RPower1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff11RPower1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff11RPower1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff12RPower1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff12RPower1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Radius2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Conic2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1RPower2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff1RPower2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2RPower2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff2RPower2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff3RPower2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff3RPower2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff4RPower2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff4RPower2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff5RPower2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff5RPower2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff6RPower2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff6RPower2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff7RPower2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff7RPower2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff8RPower2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff8RPower2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff9RPower2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff9RPower2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff10RPower2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff10RPower2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff11RPower2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff11RPower2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff12RPower2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff12RPower2 (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("883d0904-48c1-4e87-b34f-7983a3240693"))
IObjectParaxialLens : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetXHalfWidthCell))
    IEditorCellPtr XHalfWidthCell;
    __declspec(property(get=GetYHalfWidthCell))
    IEditorCellPtr YHalfWidthCell;
    __declspec(property(get=GetXFocalLengthCell))
    IEditorCellPtr XFocalLengthCell;
    __declspec(property(get=GetYFocalLengthCell))
    IEditorCellPtr YFocalLengthCell;
    __declspec(property(get=GetXHalfWidth,put=PutXHalfWidth))
    double XHalfWidth;
    __declspec(property(get=GetYHalfWidth,put=PutYHalfWidth))
    double YHalfWidth;
    __declspec(property(get=GetXFocalLength,put=PutXFocalLength))
    double XFocalLength;
    __declspec(property(get=GetYFocalLength,put=PutYFocalLength))
    double YFocalLength;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetXHalfWidthCell ( );
    IEditorCellPtr GetYHalfWidthCell ( );
    IEditorCellPtr GetXFocalLengthCell ( );
    IEditorCellPtr GetYFocalLengthCell ( );
    double GetXHalfWidth ( );
    void PutXHalfWidth (
        double pRetVal );
    double GetYHalfWidth ( );
    void PutYHalfWidth (
        double pRetVal );
    double GetXFocalLength ( );
    void PutXFocalLength (
        double pRetVal );
    double GetYFocalLength ( );
    void PutYFocalLength (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_XHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XFocalLengthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YFocalLengthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_XFocalLength (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XFocalLength (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YFocalLength (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YFocalLength (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("28ea36c2-799d-4a05-9f57-1a16b9bc78ea"))
IObjectPolygon : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetScaleCell))
    IEditorCellPtr ScaleCell;
    __declspec(property(get=GetIsVolumeCell))
    IEditorCellPtr IsVolumeCell;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetIsVolume,put=PutIsVolume))
    VARIANT_BOOL IsVolume;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetScaleCell ( );
    IEditorCellPtr GetIsVolumeCell ( );
    double GetScale ( );
    void PutScale (
        double pRetVal );
    VARIANT_BOOL GetIsVolume ( );
    void PutIsVolume (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ScaleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsVolumeCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsVolume (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsVolume (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("35cbdaaf-3e6f-401c-841d-4607fd22c774"))
IObjectRayRotator : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetXHalfWidthCell))
    IEditorCellPtr XHalfWidthCell;
    __declspec(property(get=GetYHalfWidthCell))
    IEditorCellPtr YHalfWidthCell;
    __declspec(property(get=GetRotateZCell))
    IEditorCellPtr RotateZCell;
    __declspec(property(get=GetRotateYCell))
    IEditorCellPtr RotateYCell;
    __declspec(property(get=GetXHalfWidth,put=PutXHalfWidth))
    double XHalfWidth;
    __declspec(property(get=GetYHalfWidth,put=PutYHalfWidth))
    double YHalfWidth;
    __declspec(property(get=GetRotateZ,put=PutRotateZ))
    double RotateZ;
    __declspec(property(get=GetRotateY,put=PutRotateY))
    double RotateY;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetXHalfWidthCell ( );
    IEditorCellPtr GetYHalfWidthCell ( );
    IEditorCellPtr GetRotateZCell ( );
    IEditorCellPtr GetRotateYCell ( );
    double GetXHalfWidth ( );
    void PutXHalfWidth (
        double pRetVal );
    double GetYHalfWidth ( );
    void PutYHalfWidth (
        double pRetVal );
    double GetRotateZ ( );
    void PutRotateZ (
        double pRetVal );
    double GetRotateY ( );
    void PutRotateY (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_XHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RotateZCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RotateYCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RotateZ (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RotateZ (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RotateY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RotateY (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("e957786b-0e7a-4241-9a8b-d917261f1606"))
IObjectRectangularCorner : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLengthCell))
    IEditorCellPtr LengthCell;
    __declspec(property(get=GetLength,put=PutLength))
    double Length;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetLengthCell ( );
    double GetLength ( );
    void PutLength (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LengthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Length (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("c456c957-2a2d-4104-b9f9-99f2e8a10a22"))
IObjectRectangle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetXHalfWidthCell))
    IEditorCellPtr XHalfWidthCell;
    __declspec(property(get=GetYHalfWidthCell))
    IEditorCellPtr YHalfWidthCell;
    __declspec(property(get=GetXHalfWidth,put=PutXHalfWidth))
    double XHalfWidth;
    __declspec(property(get=GetYHalfWidth,put=PutYHalfWidth))
    double YHalfWidth;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetXHalfWidthCell ( );
    IEditorCellPtr GetYHalfWidthCell ( );
    double GetXHalfWidth ( );
    void PutXHalfWidth (
        double pRetVal );
    double GetYHalfWidth ( );
    void PutYHalfWidth (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_XHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("934c37c2-f5f4-4c2c-87d0-755549b8bba9"))
IObjectRectangularPipe : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetX1HalfWidthCell))
    IEditorCellPtr X1HalfWidthCell;
    __declspec(property(get=GetY1HalfWidthCell))
    IEditorCellPtr Y1HalfWidthCell;
    __declspec(property(get=GetZLengthCell))
    IEditorCellPtr ZLengthCell;
    __declspec(property(get=GetX2HalfWidthCell))
    IEditorCellPtr X2HalfWidthCell;
    __declspec(property(get=GetY2HalfWidthCell))
    IEditorCellPtr Y2HalfWidthCell;
    __declspec(property(get=GetFrontXAngleCell))
    IEditorCellPtr FrontXAngleCell;
    __declspec(property(get=GetFrontYAngleCell))
    IEditorCellPtr FrontYAngleCell;
    __declspec(property(get=GetRearXAngleCell))
    IEditorCellPtr RearXAngleCell;
    __declspec(property(get=GetRearYAngleCell))
    IEditorCellPtr RearYAngleCell;
    __declspec(property(get=GetX1HalfWidth,put=PutX1HalfWidth))
    double X1HalfWidth;
    __declspec(property(get=GetY1HalfWidth,put=PutY1HalfWidth))
    double Y1HalfWidth;
    __declspec(property(get=GetZLength,put=PutZLength))
    double ZLength;
    __declspec(property(get=GetX2HalfWidth,put=PutX2HalfWidth))
    double X2HalfWidth;
    __declspec(property(get=GetY2HalfWidth,put=PutY2HalfWidth))
    double Y2HalfWidth;
    __declspec(property(get=GetFrontXAngle,put=PutFrontXAngle))
    double FrontXAngle;
    __declspec(property(get=GetFrontYAngle,put=PutFrontYAngle))
    double FrontYAngle;
    __declspec(property(get=GetRearXAngle,put=PutRearXAngle))
    double RearXAngle;
    __declspec(property(get=GetRearYAngle,put=PutRearYAngle))
    double RearYAngle;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetX1HalfWidthCell ( );
    IEditorCellPtr GetY1HalfWidthCell ( );
    IEditorCellPtr GetZLengthCell ( );
    IEditorCellPtr GetX2HalfWidthCell ( );
    IEditorCellPtr GetY2HalfWidthCell ( );
    IEditorCellPtr GetFrontXAngleCell ( );
    IEditorCellPtr GetFrontYAngleCell ( );
    IEditorCellPtr GetRearXAngleCell ( );
    IEditorCellPtr GetRearYAngleCell ( );
    double GetX1HalfWidth ( );
    void PutX1HalfWidth (
        double pRetVal );
    double GetY1HalfWidth ( );
    void PutY1HalfWidth (
        double pRetVal );
    double GetZLength ( );
    void PutZLength (
        double pRetVal );
    double GetX2HalfWidth ( );
    void PutX2HalfWidth (
        double pRetVal );
    double GetY2HalfWidth ( );
    void PutY2HalfWidth (
        double pRetVal );
    double GetFrontXAngle ( );
    void PutFrontXAngle (
        double pRetVal );
    double GetFrontYAngle ( );
    void PutFrontYAngle (
        double pRetVal );
    double GetRearXAngle ( );
    void PutRearXAngle (
        double pRetVal );
    double GetRearYAngle ( );
    void PutRearYAngle (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X1HalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y1HalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZLengthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2HalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y2HalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontXAngleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontYAngleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearXAngleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearYAngleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1HalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X1HalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y1HalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Y1HalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZLength (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ZLength (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2HalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X2HalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y2HalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Y2HalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontXAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontXAngle (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontYAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontYAngle (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearXAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearXAngle (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearYAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearYAngle (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("3c05ae4c-d93f-4cdc-b29f-850735b5d7d1"))
IObjectRectangularPipeGrating : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetX1HalfWidthCell))
    IEditorCellPtr X1HalfWidthCell;
    __declspec(property(get=GetY1HalfWidthCell))
    IEditorCellPtr Y1HalfWidthCell;
    __declspec(property(get=GetZLengthCell))
    IEditorCellPtr ZLengthCell;
    __declspec(property(get=GetX2HalfWidthCell))
    IEditorCellPtr X2HalfWidthCell;
    __declspec(property(get=GetY2HalfWidthCell))
    IEditorCellPtr Y2HalfWidthCell;
    __declspec(property(get=GetFrontXAngleCell))
    IEditorCellPtr FrontXAngleCell;
    __declspec(property(get=GetFrontYAngleCell))
    IEditorCellPtr FrontYAngleCell;
    __declspec(property(get=GetRearXAngleCell))
    IEditorCellPtr RearXAngleCell;
    __declspec(property(get=GetRearYAngleCell))
    IEditorCellPtr RearYAngleCell;
    __declspec(property(get=GetLinesPerUMCell))
    IEditorCellPtr LinesPerUMCell;
    __declspec(property(get=GetDiffOrderCell))
    IEditorCellPtr DiffOrderCell;
    __declspec(property(get=GetX1HalfWidth,put=PutX1HalfWidth))
    double X1HalfWidth;
    __declspec(property(get=GetY1HalfWidth,put=PutY1HalfWidth))
    double Y1HalfWidth;
    __declspec(property(get=GetZLength,put=PutZLength))
    double ZLength;
    __declspec(property(get=GetX2HalfWidth,put=PutX2HalfWidth))
    double X2HalfWidth;
    __declspec(property(get=GetY2HalfWidth,put=PutY2HalfWidth))
    double Y2HalfWidth;
    __declspec(property(get=GetFrontXAngle,put=PutFrontXAngle))
    double FrontXAngle;
    __declspec(property(get=GetFrontYAngle,put=PutFrontYAngle))
    double FrontYAngle;
    __declspec(property(get=GetRearXAngle,put=PutRearXAngle))
    double RearXAngle;
    __declspec(property(get=GetRearYAngle,put=PutRearYAngle))
    double RearYAngle;
    __declspec(property(get=GetLinesPerUM,put=PutLinesPerUM))
    double LinesPerUM;
    __declspec(property(get=GetDiffOrder,put=PutDiffOrder))
    double DiffOrder;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetX1HalfWidthCell ( );
    IEditorCellPtr GetY1HalfWidthCell ( );
    IEditorCellPtr GetZLengthCell ( );
    IEditorCellPtr GetX2HalfWidthCell ( );
    IEditorCellPtr GetY2HalfWidthCell ( );
    IEditorCellPtr GetFrontXAngleCell ( );
    IEditorCellPtr GetFrontYAngleCell ( );
    IEditorCellPtr GetRearXAngleCell ( );
    IEditorCellPtr GetRearYAngleCell ( );
    IEditorCellPtr GetLinesPerUMCell ( );
    IEditorCellPtr GetDiffOrderCell ( );
    double GetX1HalfWidth ( );
    void PutX1HalfWidth (
        double pRetVal );
    double GetY1HalfWidth ( );
    void PutY1HalfWidth (
        double pRetVal );
    double GetZLength ( );
    void PutZLength (
        double pRetVal );
    double GetX2HalfWidth ( );
    void PutX2HalfWidth (
        double pRetVal );
    double GetY2HalfWidth ( );
    void PutY2HalfWidth (
        double pRetVal );
    double GetFrontXAngle ( );
    void PutFrontXAngle (
        double pRetVal );
    double GetFrontYAngle ( );
    void PutFrontYAngle (
        double pRetVal );
    double GetRearXAngle ( );
    void PutRearXAngle (
        double pRetVal );
    double GetRearYAngle ( );
    void PutRearYAngle (
        double pRetVal );
    double GetLinesPerUM ( );
    void PutLinesPerUM (
        double pRetVal );
    double GetDiffOrder ( );
    void PutDiffOrder (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X1HalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y1HalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZLengthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2HalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y2HalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontXAngleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontYAngleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearXAngleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearYAngleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LinesPerUMCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DiffOrderCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1HalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X1HalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y1HalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Y1HalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZLength (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ZLength (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2HalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X2HalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y2HalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Y2HalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontXAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontXAngle (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontYAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontYAngle (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearXAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearXAngle (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearYAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearYAngle (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_LinesPerUM (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_LinesPerUM (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_DiffOrder (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DiffOrder (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("8e621ffa-9c58-4ae6-9d20-139a6afa844e"))
IObjectRectangularRoof : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetXHalfWidthCell))
    IEditorCellPtr XHalfWidthCell;
    __declspec(property(get=GetYHalfWidthCell))
    IEditorCellPtr YHalfWidthCell;
    __declspec(property(get=GetAngleCell))
    IEditorCellPtr AngleCell;
    __declspec(property(get=GetXHalfWidth,put=PutXHalfWidth))
    double XHalfWidth;
    __declspec(property(get=GetYHalfWidth,put=PutYHalfWidth))
    double YHalfWidth;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetXHalfWidthCell ( );
    IEditorCellPtr GetYHalfWidthCell ( );
    IEditorCellPtr GetAngleCell ( );
    double GetXHalfWidth ( );
    void PutXHalfWidth (
        double pRetVal );
    double GetYHalfWidth ( );
    void PutYHalfWidth (
        double pRetVal );
    double GetAngle ( );
    void PutAngle (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_XHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AngleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("30383e41-43a8-4fe7-917f-693b634fd552"))
IObjectRectangularTorusSurface : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetOuterRCell))
    IEditorCellPtr OuterRCell;
    __declspec(property(get=GetInnerRCell))
    IEditorCellPtr InnerRCell;
    __declspec(property(get=GetStartAngleCell))
    IEditorCellPtr StartAngleCell;
    __declspec(property(get=GetStopAngleCell))
    IEditorCellPtr StopAngleCell;
    __declspec(property(get=GetThicknessCell))
    IEditorCellPtr ThicknessCell;
    __declspec(property(get=GetOuterR,put=PutOuterR))
    double OuterR;
    __declspec(property(get=GetInnerR,put=PutInnerR))
    double InnerR;
    __declspec(property(get=GetStartAngle,put=PutStartAngle))
    double StartAngle;
    __declspec(property(get=GetStopAngle,put=PutStopAngle))
    double StopAngle;
    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetOuterRCell ( );
    IEditorCellPtr GetInnerRCell ( );
    IEditorCellPtr GetStartAngleCell ( );
    IEditorCellPtr GetStopAngleCell ( );
    IEditorCellPtr GetThicknessCell ( );
    double GetOuterR ( );
    void PutOuterR (
        double pRetVal );
    double GetInnerR ( );
    void PutInnerR (
        double pRetVal );
    double GetStartAngle ( );
    void PutStartAngle (
        double pRetVal );
    double GetStopAngle ( );
    void PutStopAngle (
        double pRetVal );
    double GetThickness ( );
    void PutThickness (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_OuterRCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_InnerRCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_StartAngleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_StopAngleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ThicknessCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_OuterR (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OuterR (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_InnerR (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_InnerR (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_StartAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_StartAngle (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_StopAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_StopAngle (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Thickness (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Thickness (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("973d5acf-4113-4c4e-836a-7895ffed9faf"))
IObjectRectangularTorusVolume : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetOuterRCell))
    IEditorCellPtr OuterRCell;
    __declspec(property(get=GetInnerRCell))
    IEditorCellPtr InnerRCell;
    __declspec(property(get=GetStartAngleCell))
    IEditorCellPtr StartAngleCell;
    __declspec(property(get=GetStopAngleCell))
    IEditorCellPtr StopAngleCell;
    __declspec(property(get=GetThicknessCell))
    IEditorCellPtr ThicknessCell;
    __declspec(property(get=GetOuterR,put=PutOuterR))
    double OuterR;
    __declspec(property(get=GetInnerR,put=PutInnerR))
    double InnerR;
    __declspec(property(get=GetStartAngle,put=PutStartAngle))
    double StartAngle;
    __declspec(property(get=GetStopAngle,put=PutStopAngle))
    double StopAngle;
    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetOuterRCell ( );
    IEditorCellPtr GetInnerRCell ( );
    IEditorCellPtr GetStartAngleCell ( );
    IEditorCellPtr GetStopAngleCell ( );
    IEditorCellPtr GetThicknessCell ( );
    double GetOuterR ( );
    void PutOuterR (
        double pRetVal );
    double GetInnerR ( );
    void PutInnerR (
        double pRetVal );
    double GetStartAngle ( );
    void PutStartAngle (
        double pRetVal );
    double GetStopAngle ( );
    void PutStopAngle (
        double pRetVal );
    double GetThickness ( );
    void PutThickness (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_OuterRCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_InnerRCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_StartAngleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_StopAngleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ThicknessCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_OuterR (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OuterR (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_InnerR (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_InnerR (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_StartAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_StartAngle (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_StopAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_StopAngle (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Thickness (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Thickness (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("46ba1c70-4a75-472a-9466-86b4d84766ef"))
IObjectRectangularVolume : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetX1HalfWidthCell))
    IEditorCellPtr X1HalfWidthCell;
    __declspec(property(get=GetY1HalfWidthCell))
    IEditorCellPtr Y1HalfWidthCell;
    __declspec(property(get=GetZLengthCell))
    IEditorCellPtr ZLengthCell;
    __declspec(property(get=GetX2HalfWidthCell))
    IEditorCellPtr X2HalfWidthCell;
    __declspec(property(get=GetY2HalfWidthCell))
    IEditorCellPtr Y2HalfWidthCell;
    __declspec(property(get=GetFrontXAngleCell))
    IEditorCellPtr FrontXAngleCell;
    __declspec(property(get=GetFrontYAngleCell))
    IEditorCellPtr FrontYAngleCell;
    __declspec(property(get=GetRearXAngleCell))
    IEditorCellPtr RearXAngleCell;
    __declspec(property(get=GetRearYAngleCell))
    IEditorCellPtr RearYAngleCell;
    __declspec(property(get=GetX1HalfWidth,put=PutX1HalfWidth))
    double X1HalfWidth;
    __declspec(property(get=GetY1HalfWidth,put=PutY1HalfWidth))
    double Y1HalfWidth;
    __declspec(property(get=GetZLength,put=PutZLength))
    double ZLength;
    __declspec(property(get=GetX2HalfWidth,put=PutX2HalfWidth))
    double X2HalfWidth;
    __declspec(property(get=GetY2HalfWidth,put=PutY2HalfWidth))
    double Y2HalfWidth;
    __declspec(property(get=GetFrontXAngle,put=PutFrontXAngle))
    double FrontXAngle;
    __declspec(property(get=GetFrontYAngle,put=PutFrontYAngle))
    double FrontYAngle;
    __declspec(property(get=GetRearXAngle,put=PutRearXAngle))
    double RearXAngle;
    __declspec(property(get=GetRearYAngle,put=PutRearYAngle))
    double RearYAngle;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetX1HalfWidthCell ( );
    IEditorCellPtr GetY1HalfWidthCell ( );
    IEditorCellPtr GetZLengthCell ( );
    IEditorCellPtr GetX2HalfWidthCell ( );
    IEditorCellPtr GetY2HalfWidthCell ( );
    IEditorCellPtr GetFrontXAngleCell ( );
    IEditorCellPtr GetFrontYAngleCell ( );
    IEditorCellPtr GetRearXAngleCell ( );
    IEditorCellPtr GetRearYAngleCell ( );
    double GetX1HalfWidth ( );
    void PutX1HalfWidth (
        double pRetVal );
    double GetY1HalfWidth ( );
    void PutY1HalfWidth (
        double pRetVal );
    double GetZLength ( );
    void PutZLength (
        double pRetVal );
    double GetX2HalfWidth ( );
    void PutX2HalfWidth (
        double pRetVal );
    double GetY2HalfWidth ( );
    void PutY2HalfWidth (
        double pRetVal );
    double GetFrontXAngle ( );
    void PutFrontXAngle (
        double pRetVal );
    double GetFrontYAngle ( );
    void PutFrontYAngle (
        double pRetVal );
    double GetRearXAngle ( );
    void PutRearXAngle (
        double pRetVal );
    double GetRearYAngle ( );
    void PutRearYAngle (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X1HalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y1HalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZLengthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2HalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y2HalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontXAngleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontYAngleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearXAngleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearYAngleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1HalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X1HalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y1HalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Y1HalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZLength (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ZLength (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2HalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X2HalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y2HalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Y2HalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontXAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontXAngle (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontYAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontYAngle (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearXAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearXAngle (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearYAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearYAngle (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("6b8d2679-5761-42b9-9a01-9748bf087f18"))
IObjectRectangularVolumeGrating : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetX1HalfWidthCell))
    IEditorCellPtr X1HalfWidthCell;
    __declspec(property(get=GetY1HalfWidthCell))
    IEditorCellPtr Y1HalfWidthCell;
    __declspec(property(get=GetZLengthCell))
    IEditorCellPtr ZLengthCell;
    __declspec(property(get=GetX2HalfWidthCell))
    IEditorCellPtr X2HalfWidthCell;
    __declspec(property(get=GetY2HalfWidthCell))
    IEditorCellPtr Y2HalfWidthCell;
    __declspec(property(get=GetFrontXAngleCell))
    IEditorCellPtr FrontXAngleCell;
    __declspec(property(get=GetFrontYAngleCell))
    IEditorCellPtr FrontYAngleCell;
    __declspec(property(get=GetRearXAngleCell))
    IEditorCellPtr RearXAngleCell;
    __declspec(property(get=GetRearYAngleCell))
    IEditorCellPtr RearYAngleCell;
    __declspec(property(get=GetLinesPerUMCell))
    IEditorCellPtr LinesPerUMCell;
    __declspec(property(get=GetDiffOrderCell))
    IEditorCellPtr DiffOrderCell;
    __declspec(property(get=GetX1HalfWidth,put=PutX1HalfWidth))
    double X1HalfWidth;
    __declspec(property(get=GetY1HalfWidth,put=PutY1HalfWidth))
    double Y1HalfWidth;
    __declspec(property(get=GetZLength,put=PutZLength))
    double ZLength;
    __declspec(property(get=GetX2HalfWidth,put=PutX2HalfWidth))
    double X2HalfWidth;
    __declspec(property(get=GetY2HalfWidth,put=PutY2HalfWidth))
    double Y2HalfWidth;
    __declspec(property(get=GetFrontXAngle,put=PutFrontXAngle))
    double FrontXAngle;
    __declspec(property(get=GetFrontYAngle,put=PutFrontYAngle))
    double FrontYAngle;
    __declspec(property(get=GetRearXAngle,put=PutRearXAngle))
    double RearXAngle;
    __declspec(property(get=GetRearYAngle,put=PutRearYAngle))
    double RearYAngle;
    __declspec(property(get=GetLinesPerUM,put=PutLinesPerUM))
    double LinesPerUM;
    __declspec(property(get=GetDiffOrder,put=PutDiffOrder))
    double DiffOrder;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetX1HalfWidthCell ( );
    IEditorCellPtr GetY1HalfWidthCell ( );
    IEditorCellPtr GetZLengthCell ( );
    IEditorCellPtr GetX2HalfWidthCell ( );
    IEditorCellPtr GetY2HalfWidthCell ( );
    IEditorCellPtr GetFrontXAngleCell ( );
    IEditorCellPtr GetFrontYAngleCell ( );
    IEditorCellPtr GetRearXAngleCell ( );
    IEditorCellPtr GetRearYAngleCell ( );
    IEditorCellPtr GetLinesPerUMCell ( );
    IEditorCellPtr GetDiffOrderCell ( );
    double GetX1HalfWidth ( );
    void PutX1HalfWidth (
        double pRetVal );
    double GetY1HalfWidth ( );
    void PutY1HalfWidth (
        double pRetVal );
    double GetZLength ( );
    void PutZLength (
        double pRetVal );
    double GetX2HalfWidth ( );
    void PutX2HalfWidth (
        double pRetVal );
    double GetY2HalfWidth ( );
    void PutY2HalfWidth (
        double pRetVal );
    double GetFrontXAngle ( );
    void PutFrontXAngle (
        double pRetVal );
    double GetFrontYAngle ( );
    void PutFrontYAngle (
        double pRetVal );
    double GetRearXAngle ( );
    void PutRearXAngle (
        double pRetVal );
    double GetRearYAngle ( );
    void PutRearYAngle (
        double pRetVal );
    double GetLinesPerUM ( );
    void PutLinesPerUM (
        double pRetVal );
    double GetDiffOrder ( );
    void PutDiffOrder (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X1HalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y1HalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZLengthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2HalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y2HalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontXAngleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontYAngleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearXAngleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearYAngleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LinesPerUMCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DiffOrderCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1HalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X1HalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y1HalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Y1HalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZLength (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ZLength (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2HalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X2HalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y2HalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Y2HalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontXAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontXAngle (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FrontYAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FrontYAngle (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearXAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearXAngle (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RearYAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RearYAngle (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_LinesPerUM (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_LinesPerUM (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_DiffOrder (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DiffOrder (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("e1293b52-cf67-4c1b-8be5-6126ce251dcf"))
IObjectReverseRadianceDetector : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetShapeCell))
    IEditorCellPtr ShapeCell;
    __declspec(property(get=GetXHalfWidthCell))
    IEditorCellPtr XHalfWidthCell;
    __declspec(property(get=GetYHalfWidthCell))
    IEditorCellPtr YHalfWidthCell;
    __declspec(property(get=GetNumberOfXPixelsCell))
    IEditorCellPtr NumberOfXPixelsCell;
    __declspec(property(get=GetNumberOfYPixelsCell))
    IEditorCellPtr NumberOfYPixelsCell;
    __declspec(property(get=GetNumberOfPPixelsCell))
    IEditorCellPtr NumberOfPPixelsCell;
    __declspec(property(get=GetNumberOfAPixelsCell))
    IEditorCellPtr NumberOfAPixelsCell;
    __declspec(property(get=GetSourceObjectCell))
    IEditorCellPtr SourceObjectCell;
    __declspec(property(get=GetTargetObjectCell))
    IEditorCellPtr TargetObjectCell;
    __declspec(property(get=GetBoundaryObjectCell))
    IEditorCellPtr BoundaryObjectCell;
    __declspec(property(get=GetReverseRayColorCell))
    IEditorCellPtr ReverseRayColorCell;
    __declspec(property(get=GetShape,put=PutShape))
    enum ShapeChoices Shape;
    __declspec(property(get=GetXHalfWidth,put=PutXHalfWidth))
    double XHalfWidth;
    __declspec(property(get=GetYHalfWidth,put=PutYHalfWidth))
    double YHalfWidth;
    __declspec(property(get=GetNumberOfXPixels,put=PutNumberOfXPixels))
    long NumberOfXPixels;
    __declspec(property(get=GetNumberOfYPixels,put=PutNumberOfYPixels))
    long NumberOfYPixels;
    __declspec(property(get=GetNumberOfPPixels,put=PutNumberOfPPixels))
    long NumberOfPPixels;
    __declspec(property(get=GetNumberOfAPixels,put=PutNumberOfAPixels))
    long NumberOfAPixels;
    __declspec(property(get=GetSourceObject,put=PutSourceObject))
    long SourceObject;
    __declspec(property(get=GetTargetObject,put=PutTargetObject))
    long TargetObject;
    __declspec(property(get=GetBoundaryObject,put=PutBoundaryObject))
    long BoundaryObject;
    __declspec(property(get=GetReverseRayColor,put=PutReverseRayColor))
    long ReverseRayColor;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetShapeCell ( );
    IEditorCellPtr GetXHalfWidthCell ( );
    IEditorCellPtr GetYHalfWidthCell ( );
    IEditorCellPtr GetNumberOfXPixelsCell ( );
    IEditorCellPtr GetNumberOfYPixelsCell ( );
    IEditorCellPtr GetNumberOfPPixelsCell ( );
    IEditorCellPtr GetNumberOfAPixelsCell ( );
    IEditorCellPtr GetSourceObjectCell ( );
    IEditorCellPtr GetTargetObjectCell ( );
    IEditorCellPtr GetBoundaryObjectCell ( );
    IEditorCellPtr GetReverseRayColorCell ( );
    enum ShapeChoices GetShape ( );
    void PutShape (
        enum ShapeChoices pRetVal );
    double GetXHalfWidth ( );
    void PutXHalfWidth (
        double pRetVal );
    double GetYHalfWidth ( );
    void PutYHalfWidth (
        double pRetVal );
    long GetNumberOfXPixels ( );
    void PutNumberOfXPixels (
        long pRetVal );
    long GetNumberOfYPixels ( );
    void PutNumberOfYPixels (
        long pRetVal );
    long GetNumberOfPPixels ( );
    void PutNumberOfPPixels (
        long pRetVal );
    long GetNumberOfAPixels ( );
    void PutNumberOfAPixels (
        long pRetVal );
    long GetSourceObject ( );
    void PutSourceObject (
        long pRetVal );
    long GetTargetObject ( );
    void PutTargetObject (
        long pRetVal );
    long GetBoundaryObject ( );
    void PutBoundaryObject (
        long pRetVal );
    long GetReverseRayColor ( );
    void PutReverseRayColor (
        long pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ShapeCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfXPixelsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfYPixelsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfPPixelsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfAPixelsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SourceObjectCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TargetObjectCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_BoundaryObjectCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ReverseRayColorCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Shape (
        /*[out,retval]*/ enum ShapeChoices * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Shape (
        /*[in]*/ enum ShapeChoices pRetVal ) = 0;
      virtual HRESULT __stdcall get_XHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfXPixels (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfXPixels (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfYPixels (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfYPixels (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfPPixels (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfPPixels (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfAPixels (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfAPixels (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_SourceObject (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SourceObject (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_TargetObject (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TargetObject (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_BoundaryObject (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BoundaryObject (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_ReverseRayColor (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ReverseRayColor (
        /*[in]*/ long pRetVal ) = 0;
};

struct __declspec(uuid("987425ff-127c-4307-8bc9-c4c70b7a349e"))
IObjectReverseRadianceTarget : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetShapeCell))
    IEditorCellPtr ShapeCell;
    __declspec(property(get=GetXHalfWidthCell))
    IEditorCellPtr XHalfWidthCell;
    __declspec(property(get=GetYHalfWidthCell))
    IEditorCellPtr YHalfWidthCell;
    __declspec(property(get=GetNumberOfXPixelsCell))
    IEditorCellPtr NumberOfXPixelsCell;
    __declspec(property(get=GetNumberOfYPixelsCell))
    IEditorCellPtr NumberOfYPixelsCell;
    __declspec(property(get=GetNumberOfPPixelsCell))
    IEditorCellPtr NumberOfPPixelsCell;
    __declspec(property(get=GetNumberOfAPixelsCell))
    IEditorCellPtr NumberOfAPixelsCell;
    __declspec(property(get=GetShape,put=PutShape))
    enum ShapeChoices Shape;
    __declspec(property(get=GetXHalfWidth,put=PutXHalfWidth))
    double XHalfWidth;
    __declspec(property(get=GetYHalfWidth,put=PutYHalfWidth))
    double YHalfWidth;
    __declspec(property(get=GetNumberOfXPixels,put=PutNumberOfXPixels))
    long NumberOfXPixels;
    __declspec(property(get=GetNumberOfYPixels,put=PutNumberOfYPixels))
    long NumberOfYPixels;
    __declspec(property(get=GetNumberOfPPixels,put=PutNumberOfPPixels))
    long NumberOfPPixels;
    __declspec(property(get=GetNumberOfAPixels,put=PutNumberOfAPixels))
    long NumberOfAPixels;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetShapeCell ( );
    IEditorCellPtr GetXHalfWidthCell ( );
    IEditorCellPtr GetYHalfWidthCell ( );
    IEditorCellPtr GetNumberOfXPixelsCell ( );
    IEditorCellPtr GetNumberOfYPixelsCell ( );
    IEditorCellPtr GetNumberOfPPixelsCell ( );
    IEditorCellPtr GetNumberOfAPixelsCell ( );
    enum ShapeChoices GetShape ( );
    void PutShape (
        enum ShapeChoices pRetVal );
    double GetXHalfWidth ( );
    void PutXHalfWidth (
        double pRetVal );
    double GetYHalfWidth ( );
    void PutYHalfWidth (
        double pRetVal );
    long GetNumberOfXPixels ( );
    void PutNumberOfXPixels (
        long pRetVal );
    long GetNumberOfYPixels ( );
    void PutNumberOfYPixels (
        long pRetVal );
    long GetNumberOfPPixels ( );
    void PutNumberOfPPixels (
        long pRetVal );
    long GetNumberOfAPixels ( );
    void PutNumberOfAPixels (
        long pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ShapeCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfXPixelsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfYPixelsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfPPixelsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfAPixelsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Shape (
        /*[out,retval]*/ enum ShapeChoices * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Shape (
        /*[in]*/ enum ShapeChoices pRetVal ) = 0;
      virtual HRESULT __stdcall get_XHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfXPixels (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfXPixels (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfYPixels (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfYPixels (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfPPixels (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfPPixels (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfAPixels (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfAPixels (
        /*[in]*/ long pRetVal ) = 0;
};

struct __declspec(uuid("4d155209-af86-4313-a601-dd8aba50f9fd"))
IObjectSlide : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetXFullWidthCell))
    IEditorCellPtr XFullWidthCell;
    __declspec(property(get=GetAspectRatioCell))
    IEditorCellPtr AspectRatioCell;
    __declspec(property(get=GetXFullWidth,put=PutXFullWidth))
    double XFullWidth;
    __declspec(property(get=GetAspectRatio,put=PutAspectRatio))
    double AspectRatio;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetXFullWidthCell ( );
    IEditorCellPtr GetAspectRatioCell ( );
    double GetXFullWidth ( );
    void PutXFullWidth (
        double pRetVal );
    double GetAspectRatio ( );
    void PutAspectRatio (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_XFullWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AspectRatioCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XFullWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XFullWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_AspectRatio (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AspectRatio (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("d4af8c1f-8096-4485-8a28-8f6b98840073"))
IObjectSources : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNumberOfLayoutRaysCell))
    IEditorCellPtr NumberOfLayoutRaysCell;
    __declspec(property(get=GetNumberOfAnalysisRaysCell))
    IEditorCellPtr NumberOfAnalysisRaysCell;
    __declspec(property(get=GetPowerCell))
    IEditorCellPtr PowerCell;
    __declspec(property(get=GetWaveNumberCell))
    IEditorCellPtr WaveNumberCell;
    __declspec(property(get=GetColorNumberCell))
    IEditorCellPtr ColorNumberCell;
    __declspec(property(get=GetNumberOfLayoutRays,put=PutNumberOfLayoutRays))
    long NumberOfLayoutRays;
    __declspec(property(get=GetNumberOfAnalysisRays,put=PutNumberOfAnalysisRays))
    long NumberOfAnalysisRays;
    __declspec(property(get=GetPower,put=PutPower))
    double Power;
    __declspec(property(get=GetwaveNumber,put=PutwaveNumber))
    long waveNumber;
    __declspec(property(get=GetColorNumber,put=PutColorNumber))
    long ColorNumber;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetNumberOfLayoutRaysCell ( );
    IEditorCellPtr GetNumberOfAnalysisRaysCell ( );
    IEditorCellPtr GetPowerCell ( );
    IEditorCellPtr GetWaveNumberCell ( );
    IEditorCellPtr GetColorNumberCell ( );
    long GetNumberOfLayoutRays ( );
    void PutNumberOfLayoutRays (
        long pRetVal );
    long GetNumberOfAnalysisRays ( );
    void PutNumberOfAnalysisRays (
        long pRetVal );
    double GetPower ( );
    void PutPower (
        double pRetVal );
    long GetwaveNumber ( );
    void PutwaveNumber (
        long pRetVal );
    long GetColorNumber ( );
    void PutColorNumber (
        long pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NumberOfLayoutRaysCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfAnalysisRaysCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_PowerCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_WaveNumberCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ColorNumberCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfLayoutRays (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfLayoutRays (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfAnalysisRays (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfAnalysisRays (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Power (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Power (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_waveNumber (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_waveNumber (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_ColorNumber (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ColorNumber (
        /*[in]*/ long pRetVal ) = 0;
};

struct __declspec(uuid("d7ee325c-43f7-4252-86ed-1320a91df952"))
IObjectSourceDiffractive : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSamplingCell))
    IEditorCellPtr SamplingCell;
    __declspec(property(get=GetSampling,put=PutSampling))
    enum SampleSizes Sampling;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetSamplingCell ( );
    enum SampleSizes GetSampling ( );
    void PutSampling (
        enum SampleSizes pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SamplingCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Sampling (
        /*[out,retval]*/ enum SampleSizes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Sampling (
        /*[in]*/ enum SampleSizes pRetVal ) = 0;
};

struct __declspec(uuid("147e5301-cb17-4603-b701-cb0613c77a7d"))
IObjectSourceDiode : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAstigmatismCell))
    IEditorCellPtr AstigmatismCell;
    __declspec(property(get=GetXMinusDivergenceCell))
    IEditorCellPtr XMinusDivergenceCell;
    __declspec(property(get=GetXMinusSuperGaussCell))
    IEditorCellPtr XMinusSuperGaussCell;
    __declspec(property(get=GetYMinusDivergenceCell))
    IEditorCellPtr YMinusDivergenceCell;
    __declspec(property(get=GetYMinusSuperGaussCell))
    IEditorCellPtr YMinusSuperGaussCell;
    __declspec(property(get=GetNumberXCell))
    IEditorCellPtr NumberXCell;
    __declspec(property(get=GetNumberYCell))
    IEditorCellPtr NumberYCell;
    __declspec(property(get=GetDeltaXCell))
    IEditorCellPtr DeltaXCell;
    __declspec(property(get=GetDeltaYCell))
    IEditorCellPtr DeltaYCell;
    __declspec(property(get=GetXMinusWidthCell))
    IEditorCellPtr XMinusWidthCell;
    __declspec(property(get=GetXMinusSigmaCell))
    IEditorCellPtr XMinusSigmaCell;
    __declspec(property(get=GetXMinusWidthHXCell))
    IEditorCellPtr XMinusWidthHXCell;
    __declspec(property(get=GetYMinusWidthCell))
    IEditorCellPtr YMinusWidthCell;
    __declspec(property(get=GetYMinusSigmaCell))
    IEditorCellPtr YMinusSigmaCell;
    __declspec(property(get=GetYMinusWidthHYCell))
    IEditorCellPtr YMinusWidthHYCell;
    __declspec(property(get=GetAstigmatism,put=PutAstigmatism))
    double Astigmatism;
    __declspec(property(get=GetXMinusDivergence,put=PutXMinusDivergence))
    double XMinusDivergence;
    __declspec(property(get=GetXMinusSuperGauss,put=PutXMinusSuperGauss))
    double XMinusSuperGauss;
    __declspec(property(get=GetYMinusDivergence,put=PutYMinusDivergence))
    double YMinusDivergence;
    __declspec(property(get=GetYMinusSuperGauss,put=PutYMinusSuperGauss))
    double YMinusSuperGauss;
    __declspec(property(get=GetNumberX,put=PutNumberX))
    long NumberX;
    __declspec(property(get=GetNumberY,put=PutNumberY))
    long NumberY;
    __declspec(property(get=GetDeltaX,put=PutDeltaX))
    double DeltaX;
    __declspec(property(get=GetDeltaY,put=PutDeltaY))
    double DeltaY;
    __declspec(property(get=GetXMinusWidth,put=PutXMinusWidth))
    double XMinusWidth;
    __declspec(property(get=GetXMinusSigma,put=PutXMinusSigma))
    double XMinusSigma;
    __declspec(property(get=GetXMinusWidthHX,put=PutXMinusWidthHX))
    double XMinusWidthHX;
    __declspec(property(get=GetYMinusWidth,put=PutYMinusWidth))
    double YMinusWidth;
    __declspec(property(get=GetYMinusSigma,put=PutYMinusSigma))
    double YMinusSigma;
    __declspec(property(get=GetYMinusWidthHY,put=PutYMinusWidthHY))
    double YMinusWidthHY;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetAstigmatismCell ( );
    IEditorCellPtr GetXMinusDivergenceCell ( );
    IEditorCellPtr GetXMinusSuperGaussCell ( );
    IEditorCellPtr GetYMinusDivergenceCell ( );
    IEditorCellPtr GetYMinusSuperGaussCell ( );
    IEditorCellPtr GetNumberXCell ( );
    IEditorCellPtr GetNumberYCell ( );
    IEditorCellPtr GetDeltaXCell ( );
    IEditorCellPtr GetDeltaYCell ( );
    IEditorCellPtr GetXMinusWidthCell ( );
    IEditorCellPtr GetXMinusSigmaCell ( );
    IEditorCellPtr GetXMinusWidthHXCell ( );
    IEditorCellPtr GetYMinusWidthCell ( );
    IEditorCellPtr GetYMinusSigmaCell ( );
    IEditorCellPtr GetYMinusWidthHYCell ( );
    double GetAstigmatism ( );
    void PutAstigmatism (
        double pRetVal );
    double GetXMinusDivergence ( );
    void PutXMinusDivergence (
        double pRetVal );
    double GetXMinusSuperGauss ( );
    void PutXMinusSuperGauss (
        double pRetVal );
    double GetYMinusDivergence ( );
    void PutYMinusDivergence (
        double pRetVal );
    double GetYMinusSuperGauss ( );
    void PutYMinusSuperGauss (
        double pRetVal );
    long GetNumberX ( );
    void PutNumberX (
        long pRetVal );
    long GetNumberY ( );
    void PutNumberY (
        long pRetVal );
    double GetDeltaX ( );
    void PutDeltaX (
        double pRetVal );
    double GetDeltaY ( );
    void PutDeltaY (
        double pRetVal );
    double GetXMinusWidth ( );
    void PutXMinusWidth (
        double pRetVal );
    double GetXMinusSigma ( );
    void PutXMinusSigma (
        double pRetVal );
    double GetXMinusWidthHX ( );
    void PutXMinusWidthHX (
        double pRetVal );
    double GetYMinusWidth ( );
    void PutYMinusWidth (
        double pRetVal );
    double GetYMinusSigma ( );
    void PutYMinusSigma (
        double pRetVal );
    double GetYMinusWidthHY ( );
    void PutYMinusWidthHY (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AstigmatismCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XMinusDivergenceCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XMinusSuperGaussCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YMinusDivergenceCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YMinusSuperGaussCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberXCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberYCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DeltaXCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DeltaYCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XMinusWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XMinusSigmaCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XMinusWidthHXCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YMinusWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YMinusSigmaCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YMinusWidthHYCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Astigmatism (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Astigmatism (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_XMinusDivergence (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XMinusDivergence (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_XMinusSuperGauss (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XMinusSuperGauss (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YMinusDivergence (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YMinusDivergence (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YMinusSuperGauss (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YMinusSuperGauss (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberX (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberX (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberY (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberY (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_DeltaX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DeltaX (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_DeltaY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DeltaY (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_XMinusWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XMinusWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_XMinusSigma (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XMinusSigma (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_XMinusWidthHX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XMinusWidthHX (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YMinusWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YMinusWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YMinusSigma (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YMinusSigma (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YMinusWidthHY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YMinusWidthHY (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("86d2086c-0b12-41a9-a961-1b4d249da8db"))
IObjectSourceEllipse : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetXHalfWidthCell))
    IEditorCellPtr XHalfWidthCell;
    __declspec(property(get=GetYHalfWidthCell))
    IEditorCellPtr YHalfWidthCell;
    __declspec(property(get=GetSourceDistanceCell))
    IEditorCellPtr SourceDistanceCell;
    __declspec(property(get=GetCosineExponentCell))
    IEditorCellPtr CosineExponentCell;
    __declspec(property(get=GetGaussGXCell))
    IEditorCellPtr GaussGXCell;
    __declspec(property(get=GetGaussGYCell))
    IEditorCellPtr GaussGYCell;
    __declspec(property(get=GetSourceXCell))
    IEditorCellPtr SourceXCell;
    __declspec(property(get=GetSourceYCell))
    IEditorCellPtr SourceYCell;
    __declspec(property(get=GetMinXHalfWidthCell))
    IEditorCellPtr MinXHalfWidthCell;
    __declspec(property(get=GetMinYHalfWidthCell))
    IEditorCellPtr MinYHalfWidthCell;
    __declspec(property(get=GetXHalfWidth,put=PutXHalfWidth))
    double XHalfWidth;
    __declspec(property(get=GetYHalfWidth,put=PutYHalfWidth))
    double YHalfWidth;
    __declspec(property(get=GetSourceDistance,put=PutSourceDistance))
    double SourceDistance;
    __declspec(property(get=GetCosineExponent,put=PutCosineExponent))
    double CosineExponent;
    __declspec(property(get=GetGaussGX,put=PutGaussGX))
    double GaussGX;
    __declspec(property(get=GetGaussGY,put=PutGaussGY))
    double GaussGY;
    __declspec(property(get=GetSourceX,put=PutSourceX))
    double SourceX;
    __declspec(property(get=GetSourceY,put=PutSourceY))
    double SourceY;
    __declspec(property(get=GetMinXHalfWidth,put=PutMinXHalfWidth))
    double MinXHalfWidth;
    __declspec(property(get=GetMinYHalfWidth,put=PutMinYHalfWidth))
    double MinYHalfWidth;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetXHalfWidthCell ( );
    IEditorCellPtr GetYHalfWidthCell ( );
    IEditorCellPtr GetSourceDistanceCell ( );
    IEditorCellPtr GetCosineExponentCell ( );
    IEditorCellPtr GetGaussGXCell ( );
    IEditorCellPtr GetGaussGYCell ( );
    IEditorCellPtr GetSourceXCell ( );
    IEditorCellPtr GetSourceYCell ( );
    IEditorCellPtr GetMinXHalfWidthCell ( );
    IEditorCellPtr GetMinYHalfWidthCell ( );
    double GetXHalfWidth ( );
    void PutXHalfWidth (
        double pRetVal );
    double GetYHalfWidth ( );
    void PutYHalfWidth (
        double pRetVal );
    double GetSourceDistance ( );
    void PutSourceDistance (
        double pRetVal );
    double GetCosineExponent ( );
    void PutCosineExponent (
        double pRetVal );
    double GetGaussGX ( );
    void PutGaussGX (
        double pRetVal );
    double GetGaussGY ( );
    void PutGaussGY (
        double pRetVal );
    double GetSourceX ( );
    void PutSourceX (
        double pRetVal );
    double GetSourceY ( );
    void PutSourceY (
        double pRetVal );
    double GetMinXHalfWidth ( );
    void PutMinXHalfWidth (
        double pRetVal );
    double GetMinYHalfWidth ( );
    void PutMinYHalfWidth (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_XHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SourceDistanceCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CosineExponentCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_GaussGXCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_GaussGYCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SourceXCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SourceYCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinXHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinYHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_SourceDistance (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SourceDistance (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CosineExponent (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CosineExponent (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_GaussGX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_GaussGX (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_GaussGY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_GaussGY (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_SourceX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SourceX (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_SourceY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SourceY (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinXHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MinXHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinYHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MinYHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("9045ceef-1e8a-4cc2-81c9-44402d6ac522"))
IObjectSourceEULUMDATFile : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLumensInFileCell))
    IEditorCellPtr LumensInFileCell;
    __declspec(property(get=GetLumensInFile,put=PutLumensInFile))
    double LumensInFile;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetLumensInFileCell ( );
    double GetLumensInFile ( );
    void PutLumensInFile (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LumensInFileCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LumensInFile (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_LumensInFile (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("af9feb1a-eeaf-43cf-8701-38a968c0deb8"))
IObjectSourceFilament : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLengthCell))
    IEditorCellPtr LengthCell;
    __declspec(property(get=GetRadiusACell))
    IEditorCellPtr RadiusACell;
    __declspec(property(get=GetTurnsCell))
    IEditorCellPtr TurnsCell;
    __declspec(property(get=GetLength,put=PutLength))
    double Length;
    __declspec(property(get=GetRadiusA,put=PutRadiusA))
    double RadiusA;
    __declspec(property(get=GetTurns,put=PutTurns))
    double Turns;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetLengthCell ( );
    IEditorCellPtr GetRadiusACell ( );
    IEditorCellPtr GetTurnsCell ( );
    double GetLength ( );
    void PutLength (
        double pRetVal );
    double GetRadiusA ( );
    void PutRadiusA (
        double pRetVal );
    double GetTurns ( );
    void PutTurns (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LengthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadiusACell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TurnsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Length (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadiusA (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RadiusA (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Turns (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Turns (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("34e6bfd3-e92d-4abf-8ea2-295c1e2082c2"))
IObjectSourceFile : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRandomizeCell))
    IEditorCellPtr RandomizeCell;
    __declspec(property(get=GetRandomize,put=PutRandomize))
    VARIANT_BOOL Randomize;
    __declspec(property(get=GetSourceUnits))
    double SourceUnits;
    __declspec(property(get=GetminWave))
    double minWave;
    __declspec(property(get=GetmaxWave))
    double maxWave;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetRandomizeCell ( );
    VARIANT_BOOL GetRandomize ( );
    void PutRandomize (
        VARIANT_BOOL pRetVal );
    double GetSourceUnits ( );
    double GetminWave ( );
    double GetmaxWave ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RandomizeCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Randomize (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Randomize (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_SourceUnits (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_minWave (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_maxWave (
        /*[out,retval]*/ double * pRetVal ) = 0;
};

struct __declspec(uuid("60ac7ed2-27d5-47c8-94f8-71ee885509eb"))
IObjectSourceGaussian : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBeamSizeCell))
    IEditorCellPtr BeamSizeCell;
    __declspec(property(get=GetPositionCell))
    IEditorCellPtr PositionCell;
    __declspec(property(get=GetBeamSize,put=PutBeamSize))
    double BeamSize;
    __declspec(property(get=Getposition,put=Putposition))
    double position;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetBeamSizeCell ( );
    IEditorCellPtr GetPositionCell ( );
    double GetBeamSize ( );
    void PutBeamSize (
        double pRetVal );
    double Getposition ( );
    void Putposition (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BeamSizeCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_PositionCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_BeamSize (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BeamSize (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_position (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_position (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("7effea2c-fdf9-46b1-b651-3743e235116b"))
IObjectSourceIESNAFile : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLumensInFileCell))
    IEditorCellPtr LumensInFileCell;
    __declspec(property(get=GetLumensInFile,put=PutLumensInFile))
    double LumensInFile;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetLumensInFileCell ( );
    double GetLumensInFile ( );
    void PutLumensInFile (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LumensInFileCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LumensInFile (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_LumensInFile (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("cf07cf78-4348-4d06-8517-388bf36c18ad"))
IObjectSourceImported : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetScaleCell))
    IEditorCellPtr ScaleCell;
    __declspec(property(get=GetCosFactorCell))
    IEditorCellPtr CosFactorCell;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetCosFactor,put=PutCosFactor))
    double CosFactor;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetScaleCell ( );
    IEditorCellPtr GetCosFactorCell ( );
    double GetScale ( );
    void PutScale (
        double pRetVal );
    double GetCosFactor ( );
    void PutCosFactor (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ScaleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CosFactorCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CosFactor (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CosFactor (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("d410de95-a9e9-4205-8fdf-dcd8d713e4e8"))
IObjectSourceObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParentObjectNumberCell))
    IEditorCellPtr ParentObjectNumberCell;
    __declspec(property(get=GetChordTolCell))
    IEditorCellPtr ChordTolCell;
    __declspec(property(get=GetCosFactorCell))
    IEditorCellPtr CosFactorCell;
    __declspec(property(get=GetParentObjectNumber,put=PutParentObjectNumber))
    long ParentObjectNumber;
    __declspec(property(get=GetChordTol,put=PutChordTol))
    double ChordTol;
    __declspec(property(get=GetCosFactor,put=PutCosFactor))
    double CosFactor;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetParentObjectNumberCell ( );
    IEditorCellPtr GetChordTolCell ( );
    IEditorCellPtr GetCosFactorCell ( );
    long GetParentObjectNumber ( );
    void PutParentObjectNumber (
        long pRetVal );
    double GetChordTol ( );
    void PutChordTol (
        double pRetVal );
    double GetCosFactor ( );
    void PutCosFactor (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ParentObjectNumberCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ChordTolCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CosFactorCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ParentObjectNumber (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ParentObjectNumber (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_ChordTol (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ChordTol (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CosFactor (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CosFactor (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("85ee2509-82c1-4a53-9509-ec3e3b71b300"))
IObjectSourcePoint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetConeAngleCell))
    IEditorCellPtr ConeAngleCell;
    __declspec(property(get=GetConeAngle,put=PutConeAngle))
    double ConeAngle;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetConeAngleCell ( );
    double GetConeAngle ( );
    void PutConeAngle (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ConeAngleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ConeAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ConeAngle (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("a1d9f217-bc39-450b-babc-49c7283f74b3"))
IObjectSourceRadial : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetXHalfWidthCell))
    IEditorCellPtr XHalfWidthCell;
    __declspec(property(get=GetYHalfWidthCell))
    IEditorCellPtr YHalfWidthCell;
    __declspec(property(get=GetMinAngleCell))
    IEditorCellPtr MinAngleCell;
    __declspec(property(get=GetMaxAngleCell))
    IEditorCellPtr MaxAngleCell;
    __declspec(property(get=GetNumberOfPointsCell))
    IEditorCellPtr NumberOfPointsCell;
    __declspec(property(get=GetXHalfWidth,put=PutXHalfWidth))
    double XHalfWidth;
    __declspec(property(get=GetYHalfWidth,put=PutYHalfWidth))
    double YHalfWidth;
    __declspec(property(get=GetMinAngle,put=PutMinAngle))
    double MinAngle;
    __declspec(property(get=GetMaxAngle,put=PutMaxAngle))
    double MaxAngle;
    __declspec(property(get=GetNumberOfPoints,put=PutNumberOfPoints))
    long NumberOfPoints;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetXHalfWidthCell ( );
    IEditorCellPtr GetYHalfWidthCell ( );
    IEditorCellPtr GetMinAngleCell ( );
    IEditorCellPtr GetMaxAngleCell ( );
    IEditorCellPtr GetNumberOfPointsCell ( );
    IEditorCellPtr SubAngleICell (
        long i );
    double GetXHalfWidth ( );
    void PutXHalfWidth (
        double pRetVal );
    double GetYHalfWidth ( );
    void PutYHalfWidth (
        double pRetVal );
    double GetMinAngle ( );
    void PutMinAngle (
        double pRetVal );
    double GetMaxAngle ( );
    void PutMaxAngle (
        double pRetVal );
    long GetNumberOfPoints ( );
    void PutNumberOfPoints (
        long pRetVal );
    double GetSubAngleI (
        long i );
    HRESULT SetSubAngleI (
        long i,
        double v );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_XHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinAngleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaxAngleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfPointsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SubAngleICell (
        /*[in]*/ long i,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MinAngle (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaxAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaxAngle (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfPoints (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfPoints (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetSubAngleI (
        /*[in]*/ long i,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetSubAngleI (
        /*[in]*/ long i,
        /*[in]*/ double v ) = 0;
};

struct __declspec(uuid("a3e72872-934b-4247-9fb7-2084efe387f6"))
IObjectSourceRay : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetXCosineCell))
    IEditorCellPtr XCosineCell;
    __declspec(property(get=GetYCosineCell))
    IEditorCellPtr YCosineCell;
    __declspec(property(get=GetZCosineCell))
    IEditorCellPtr ZCosineCell;
    __declspec(property(get=GetRandomSeedCell))
    IEditorCellPtr RandomSeedCell;
    __declspec(property(get=GetXCosine,put=PutXCosine))
    double XCosine;
    __declspec(property(get=GetYCosine,put=PutYCosine))
    double YCosine;
    __declspec(property(get=GetZCosine,put=PutZCosine))
    double ZCosine;
    __declspec(property(get=GetRandomSeed,put=PutRandomSeed))
    VARIANT_BOOL RandomSeed;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetXCosineCell ( );
    IEditorCellPtr GetYCosineCell ( );
    IEditorCellPtr GetZCosineCell ( );
    IEditorCellPtr GetRandomSeedCell ( );
    double GetXCosine ( );
    void PutXCosine (
        double pRetVal );
    double GetYCosine ( );
    void PutYCosine (
        double pRetVal );
    double GetZCosine ( );
    void PutZCosine (
        double pRetVal );
    VARIANT_BOOL GetRandomSeed ( );
    void PutRandomSeed (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_XCosineCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YCosineCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZCosineCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RandomSeedCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XCosine (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XCosine (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YCosine (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YCosine (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZCosine (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ZCosine (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RandomSeed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RandomSeed (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("a6d76811-318f-4f84-be0e-3e4dc52be748"))
IObjectSourceRectangle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetXHalfWidthCell))
    IEditorCellPtr XHalfWidthCell;
    __declspec(property(get=GetYHalfWidthCell))
    IEditorCellPtr YHalfWidthCell;
    __declspec(property(get=GetSourceDistanceCell))
    IEditorCellPtr SourceDistanceCell;
    __declspec(property(get=GetCosineExponentCell))
    IEditorCellPtr CosineExponentCell;
    __declspec(property(get=GetGaussGXCell))
    IEditorCellPtr GaussGXCell;
    __declspec(property(get=GetGaussGYCell))
    IEditorCellPtr GaussGYCell;
    __declspec(property(get=GetSourceXCell))
    IEditorCellPtr SourceXCell;
    __declspec(property(get=GetSourceYCell))
    IEditorCellPtr SourceYCell;
    __declspec(property(get=GetXHalfWidth,put=PutXHalfWidth))
    double XHalfWidth;
    __declspec(property(get=GetYHalfWidth,put=PutYHalfWidth))
    double YHalfWidth;
    __declspec(property(get=GetSourceDistance,put=PutSourceDistance))
    double SourceDistance;
    __declspec(property(get=GetCosineExponent,put=PutCosineExponent))
    double CosineExponent;
    __declspec(property(get=GetGaussGX,put=PutGaussGX))
    double GaussGX;
    __declspec(property(get=GetGaussGY,put=PutGaussGY))
    double GaussGY;
    __declspec(property(get=GetSourceX,put=PutSourceX))
    double SourceX;
    __declspec(property(get=GetSourceY,put=PutSourceY))
    double SourceY;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetXHalfWidthCell ( );
    IEditorCellPtr GetYHalfWidthCell ( );
    IEditorCellPtr GetSourceDistanceCell ( );
    IEditorCellPtr GetCosineExponentCell ( );
    IEditorCellPtr GetGaussGXCell ( );
    IEditorCellPtr GetGaussGYCell ( );
    IEditorCellPtr GetSourceXCell ( );
    IEditorCellPtr GetSourceYCell ( );
    double GetXHalfWidth ( );
    void PutXHalfWidth (
        double pRetVal );
    double GetYHalfWidth ( );
    void PutYHalfWidth (
        double pRetVal );
    double GetSourceDistance ( );
    void PutSourceDistance (
        double pRetVal );
    double GetCosineExponent ( );
    void PutCosineExponent (
        double pRetVal );
    double GetGaussGX ( );
    void PutGaussGX (
        double pRetVal );
    double GetGaussGY ( );
    void PutGaussGY (
        double pRetVal );
    double GetSourceX ( );
    void PutSourceX (
        double pRetVal );
    double GetSourceY ( );
    void PutSourceY (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_XHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SourceDistanceCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CosineExponentCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_GaussGXCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_GaussGYCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SourceXCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SourceYCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_SourceDistance (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SourceDistance (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CosineExponent (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CosineExponent (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_GaussGX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_GaussGX (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_GaussGY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_GaussGY (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_SourceX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SourceX (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_SourceY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SourceY (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("20dbcd39-a76f-4952-bca3-df98d05a747a"))
IObjectSourceTube : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLengthCell))
    IEditorCellPtr LengthCell;
    __declspec(property(get=GetRadiusACell))
    IEditorCellPtr RadiusACell;
    __declspec(property(get=GetLength,put=PutLength))
    double Length;
    __declspec(property(get=GetRadiusA,put=PutRadiusA))
    double RadiusA;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetLengthCell ( );
    IEditorCellPtr GetRadiusACell ( );
    double GetLength ( );
    void PutLength (
        double pRetVal );
    double GetRadiusA ( );
    void PutRadiusA (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LengthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadiusACell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Length (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadiusA (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RadiusA (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("d63a5d2d-4c53-4c79-b18e-91538e3b306d"))
IObjectSourceTwoAngle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetXHalfWidthCell))
    IEditorCellPtr XHalfWidthCell;
    __declspec(property(get=GetYHalfWidthCell))
    IEditorCellPtr YHalfWidthCell;
    __declspec(property(get=GetXHalfAngleDegreeCell))
    IEditorCellPtr XHalfAngleDegreeCell;
    __declspec(property(get=GetYHalfAngleDegreeCell))
    IEditorCellPtr YHalfAngleDegreeCell;
    __declspec(property(get=GetSpatialShapeCell))
    IEditorCellPtr SpatialShapeCell;
    __declspec(property(get=GetAngularShapeCell))
    IEditorCellPtr AngularShapeCell;
    __declspec(property(get=GetUniformAngleCell))
    IEditorCellPtr UniformAngleCell;
    __declspec(property(get=GetXHalfWidth,put=PutXHalfWidth))
    double XHalfWidth;
    __declspec(property(get=GetYHalfWidth,put=PutYHalfWidth))
    double YHalfWidth;
    __declspec(property(get=GetXHalfAngleDegree,put=PutXHalfAngleDegree))
    double XHalfAngleDegree;
    __declspec(property(get=GetYHalfAngleDegree,put=PutYHalfAngleDegree))
    double YHalfAngleDegree;
    __declspec(property(get=GetSpatialShape,put=PutSpatialShape))
    enum ShapeChoices SpatialShape;
    __declspec(property(get=GetAngularShape,put=PutAngularShape))
    enum ShapeChoices AngularShape;
    __declspec(property(get=GetUniformAngle,put=PutUniformAngle))
    enum UniformAngleChoices UniformAngle;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetXHalfWidthCell ( );
    IEditorCellPtr GetYHalfWidthCell ( );
    IEditorCellPtr GetXHalfAngleDegreeCell ( );
    IEditorCellPtr GetYHalfAngleDegreeCell ( );
    IEditorCellPtr GetSpatialShapeCell ( );
    IEditorCellPtr GetAngularShapeCell ( );
    IEditorCellPtr GetUniformAngleCell ( );
    double GetXHalfWidth ( );
    void PutXHalfWidth (
        double pRetVal );
    double GetYHalfWidth ( );
    void PutYHalfWidth (
        double pRetVal );
    double GetXHalfAngleDegree ( );
    void PutXHalfAngleDegree (
        double pRetVal );
    double GetYHalfAngleDegree ( );
    void PutYHalfAngleDegree (
        double pRetVal );
    enum ShapeChoices GetSpatialShape ( );
    void PutSpatialShape (
        enum ShapeChoices pRetVal );
    enum ShapeChoices GetAngularShape ( );
    void PutAngularShape (
        enum ShapeChoices pRetVal );
    enum UniformAngleChoices GetUniformAngle ( );
    void PutUniformAngle (
        enum UniformAngleChoices pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_XHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XHalfAngleDegreeCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YHalfAngleDegreeCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SpatialShapeCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AngularShapeCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_UniformAngleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_XHalfAngleDegree (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XHalfAngleDegree (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YHalfAngleDegree (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YHalfAngleDegree (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_SpatialShape (
        /*[out,retval]*/ enum ShapeChoices * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SpatialShape (
        /*[in]*/ enum ShapeChoices pRetVal ) = 0;
      virtual HRESULT __stdcall get_AngularShape (
        /*[out,retval]*/ enum ShapeChoices * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AngularShape (
        /*[in]*/ enum ShapeChoices pRetVal ) = 0;
      virtual HRESULT __stdcall get_UniformAngle (
        /*[out,retval]*/ enum UniformAngleChoices * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UniformAngle (
        /*[in]*/ enum UniformAngleChoices pRetVal ) = 0;
};

struct __declspec(uuid("5401b936-c6ac-4f58-9b4b-346632c47ef1"))
IObjectSourceVolumeCylindrical : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetXHalfWidthCell))
    IEditorCellPtr XHalfWidthCell;
    __declspec(property(get=GetYHalfWidthCell))
    IEditorCellPtr YHalfWidthCell;
    __declspec(property(get=GetZHalfWidthCell))
    IEditorCellPtr ZHalfWidthCell;
    __declspec(property(get=GetXHalfWidth,put=PutXHalfWidth))
    double XHalfWidth;
    __declspec(property(get=GetYHalfWidth,put=PutYHalfWidth))
    double YHalfWidth;
    __declspec(property(get=GetZHalfWidth,put=PutZHalfWidth))
    double ZHalfWidth;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetXHalfWidthCell ( );
    IEditorCellPtr GetYHalfWidthCell ( );
    IEditorCellPtr GetZHalfWidthCell ( );
    double GetXHalfWidth ( );
    void PutXHalfWidth (
        double pRetVal );
    double GetYHalfWidth ( );
    void PutYHalfWidth (
        double pRetVal );
    double GetZHalfWidth ( );
    void PutZHalfWidth (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_XHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ZHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("d70afca7-b975-4508-9911-32848e1ec43c"))
IObjectSourceVolumeElliptical : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetXHalfWidthCell))
    IEditorCellPtr XHalfWidthCell;
    __declspec(property(get=GetYHalfWidthCell))
    IEditorCellPtr YHalfWidthCell;
    __declspec(property(get=GetZHalfWidthCell))
    IEditorCellPtr ZHalfWidthCell;
    __declspec(property(get=GetXHalfWidth,put=PutXHalfWidth))
    double XHalfWidth;
    __declspec(property(get=GetYHalfWidth,put=PutYHalfWidth))
    double YHalfWidth;
    __declspec(property(get=GetZHalfWidth,put=PutZHalfWidth))
    double ZHalfWidth;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetXHalfWidthCell ( );
    IEditorCellPtr GetYHalfWidthCell ( );
    IEditorCellPtr GetZHalfWidthCell ( );
    double GetXHalfWidth ( );
    void PutXHalfWidth (
        double pRetVal );
    double GetYHalfWidth ( );
    void PutYHalfWidth (
        double pRetVal );
    double GetZHalfWidth ( );
    void PutZHalfWidth (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_XHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ZHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("8063d292-d7e5-4b3c-bb64-e9e2c0a1d45f"))
IObjectSourceVolumeRectangular : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetXHalfWidthCell))
    IEditorCellPtr XHalfWidthCell;
    __declspec(property(get=GetYHalfWidthCell))
    IEditorCellPtr YHalfWidthCell;
    __declspec(property(get=GetZHalfWidthCell))
    IEditorCellPtr ZHalfWidthCell;
    __declspec(property(get=GetXHalfWidth,put=PutXHalfWidth))
    double XHalfWidth;
    __declspec(property(get=GetYHalfWidth,put=PutYHalfWidth))
    double YHalfWidth;
    __declspec(property(get=GetZHalfWidth,put=PutZHalfWidth))
    double ZHalfWidth;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetXHalfWidthCell ( );
    IEditorCellPtr GetYHalfWidthCell ( );
    IEditorCellPtr GetZHalfWidthCell ( );
    double GetXHalfWidth ( );
    void PutXHalfWidth (
        double pRetVal );
    double GetYHalfWidth ( );
    void PutYHalfWidth (
        double pRetVal );
    double GetZHalfWidth ( );
    void PutZHalfWidth (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_XHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ZHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("2d5817f9-5fc2-4444-a9c9-8b081141b515"))
IObjectSphere : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRadiusCell))
    IEditorCellPtr RadiusCell;
    __declspec(property(get=GetIsVolumeCell))
    IEditorCellPtr IsVolumeCell;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetIsVolume,put=PutIsVolume))
    VARIANT_BOOL IsVolume;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetRadiusCell ( );
    IEditorCellPtr GetIsVolumeCell ( );
    double GetRadius ( );
    void PutRadius (
        double pRetVal );
    VARIANT_BOOL GetIsVolume ( );
    void PutIsVolume (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RadiusCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsVolumeCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsVolume (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsVolume (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("28e5d9fd-5ae4-42f9-9295-85c044d16018"))
IObjectStandardLens : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRadius1Cell))
    IEditorCellPtr Radius1Cell;
    __declspec(property(get=GetConic1Cell))
    IEditorCellPtr Conic1Cell;
    __declspec(property(get=GetClear1Cell))
    IEditorCellPtr Clear1Cell;
    __declspec(property(get=GetEdge1Cell))
    IEditorCellPtr Edge1Cell;
    __declspec(property(get=GetThicknessCell))
    IEditorCellPtr ThicknessCell;
    __declspec(property(get=GetRadius2Cell))
    IEditorCellPtr Radius2Cell;
    __declspec(property(get=GetConic2Cell))
    IEditorCellPtr Conic2Cell;
    __declspec(property(get=GetClear2Cell))
    IEditorCellPtr Clear2Cell;
    __declspec(property(get=GetEdge2Cell))
    IEditorCellPtr Edge2Cell;
    __declspec(property(get=GetRadius1,put=PutRadius1))
    double Radius1;
    __declspec(property(get=GetConic1,put=PutConic1))
    double Conic1;
    __declspec(property(get=GetClear1,put=PutClear1))
    double Clear1;
    __declspec(property(get=GetEdge1,put=PutEdge1))
    double Edge1;
    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness;
    __declspec(property(get=GetRadius2,put=PutRadius2))
    double Radius2;
    __declspec(property(get=GetConic2,put=PutConic2))
    double Conic2;
    __declspec(property(get=GetClear2,put=PutClear2))
    double Clear2;
    __declspec(property(get=GetEdge2,put=PutEdge2))
    double Edge2;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetRadius1Cell ( );
    IEditorCellPtr GetConic1Cell ( );
    IEditorCellPtr GetClear1Cell ( );
    IEditorCellPtr GetEdge1Cell ( );
    IEditorCellPtr GetThicknessCell ( );
    IEditorCellPtr GetRadius2Cell ( );
    IEditorCellPtr GetConic2Cell ( );
    IEditorCellPtr GetClear2Cell ( );
    IEditorCellPtr GetEdge2Cell ( );
    double GetRadius1 ( );
    void PutRadius1 (
        double pRetVal );
    double GetConic1 ( );
    void PutConic1 (
        double pRetVal );
    double GetClear1 ( );
    void PutClear1 (
        double pRetVal );
    double GetEdge1 ( );
    void PutEdge1 (
        double pRetVal );
    double GetThickness ( );
    void PutThickness (
        double pRetVal );
    double GetRadius2 ( );
    void PutRadius2 (
        double pRetVal );
    double GetConic2 ( );
    void PutConic2 (
        double pRetVal );
    double GetClear2 ( );
    void PutClear2 (
        double pRetVal );
    double GetEdge2 ( );
    void PutEdge2 (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Radius1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Clear1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Edge1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ThicknessCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Clear2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Edge2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Radius1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Conic1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Clear1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Clear1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Edge1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Edge1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Thickness (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Thickness (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Radius2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Conic2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Clear2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Clear2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Edge2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Edge2 (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("9b823eb9-d594-4bd4-8f4a-9b8b610a281d"))
IObjectStandardSurface : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRadiusCell))
    IEditorCellPtr RadiusCell;
    __declspec(property(get=GetConicCell))
    IEditorCellPtr ConicCell;
    __declspec(property(get=GetMaxApertureCell))
    IEditorCellPtr MaxApertureCell;
    __declspec(property(get=GetMinApertureCell))
    IEditorCellPtr MinApertureCell;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetConic,put=PutConic))
    double Conic;
    __declspec(property(get=GetMaxAperture,put=PutMaxAperture))
    double MaxAperture;
    __declspec(property(get=GetMinAperture,put=PutMinAperture))
    double MinAperture;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetRadiusCell ( );
    IEditorCellPtr GetConicCell ( );
    IEditorCellPtr GetMaxApertureCell ( );
    IEditorCellPtr GetMinApertureCell ( );
    double GetRadius ( );
    void PutRadius (
        double pRetVal );
    double GetConic ( );
    void PutConic (
        double pRetVal );
    double GetMaxAperture ( );
    void PutMaxAperture (
        double pRetVal );
    double GetMinAperture ( );
    void PutMinAperture (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RadiusCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ConicCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaxApertureCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinApertureCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Conic (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaxAperture (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaxAperture (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinAperture (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MinAperture (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("7af8b68a-3a0d-48b8-9221-0bc69bc579d1"))
IObjectSwept : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParentObjectNumberCell))
    IEditorCellPtr ParentObjectNumberCell;
    __declspec(property(get=GetCenterXCell))
    IEditorCellPtr CenterXCell;
    __declspec(property(get=GetCenterYCell))
    IEditorCellPtr CenterYCell;
    __declspec(property(get=GetCenterZCell))
    IEditorCellPtr CenterZCell;
    __declspec(property(get=GetAxisXCell))
    IEditorCellPtr AxisXCell;
    __declspec(property(get=GetAxisYCell))
    IEditorCellPtr AxisYCell;
    __declspec(property(get=GetAxisZCell))
    IEditorCellPtr AxisZCell;
    __declspec(property(get=GetPlaneXCell))
    IEditorCellPtr PlaneXCell;
    __declspec(property(get=GetPlaneYCell))
    IEditorCellPtr PlaneYCell;
    __declspec(property(get=GetPlaneZCell))
    IEditorCellPtr PlaneZCell;
    __declspec(property(get=GetAngleCell))
    IEditorCellPtr AngleCell;
    __declspec(property(get=GetEndCapsCell))
    IEditorCellPtr EndCapsCell;
    __declspec(property(get=GetIsVolumeCell))
    IEditorCellPtr IsVolumeCell;
    __declspec(property(get=GetParentObjectNumber,put=PutParentObjectNumber))
    long ParentObjectNumber;
    __declspec(property(get=GetCenterX,put=PutCenterX))
    double CenterX;
    __declspec(property(get=GetCenterY,put=PutCenterY))
    double CenterY;
    __declspec(property(get=GetCenterZ,put=PutCenterZ))
    double CenterZ;
    __declspec(property(get=GetAxisX,put=PutAxisX))
    double AxisX;
    __declspec(property(get=GetAxisY,put=PutAxisY))
    double AxisY;
    __declspec(property(get=GetAxisZ,put=PutAxisZ))
    double AxisZ;
    __declspec(property(get=GetPlaneX,put=PutPlaneX))
    double PlaneX;
    __declspec(property(get=GetPlaneY,put=PutPlaneY))
    double PlaneY;
    __declspec(property(get=GetPlaneZ,put=PutPlaneZ))
    double PlaneZ;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;
    __declspec(property(get=GetEndCaps,put=PutEndCaps))
    enum EndCapOptions EndCaps;
    __declspec(property(get=GetIsVolume,put=PutIsVolume))
    VARIANT_BOOL IsVolume;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetParentObjectNumberCell ( );
    IEditorCellPtr GetCenterXCell ( );
    IEditorCellPtr GetCenterYCell ( );
    IEditorCellPtr GetCenterZCell ( );
    IEditorCellPtr GetAxisXCell ( );
    IEditorCellPtr GetAxisYCell ( );
    IEditorCellPtr GetAxisZCell ( );
    IEditorCellPtr GetPlaneXCell ( );
    IEditorCellPtr GetPlaneYCell ( );
    IEditorCellPtr GetPlaneZCell ( );
    IEditorCellPtr GetAngleCell ( );
    IEditorCellPtr GetEndCapsCell ( );
    IEditorCellPtr GetIsVolumeCell ( );
    long GetParentObjectNumber ( );
    void PutParentObjectNumber (
        long pRetVal );
    double GetCenterX ( );
    void PutCenterX (
        double pRetVal );
    double GetCenterY ( );
    void PutCenterY (
        double pRetVal );
    double GetCenterZ ( );
    void PutCenterZ (
        double pRetVal );
    double GetAxisX ( );
    void PutAxisX (
        double pRetVal );
    double GetAxisY ( );
    void PutAxisY (
        double pRetVal );
    double GetAxisZ ( );
    void PutAxisZ (
        double pRetVal );
    double GetPlaneX ( );
    void PutPlaneX (
        double pRetVal );
    double GetPlaneY ( );
    void PutPlaneY (
        double pRetVal );
    double GetPlaneZ ( );
    void PutPlaneZ (
        double pRetVal );
    double GetAngle ( );
    void PutAngle (
        double pRetVal );
    enum EndCapOptions GetEndCaps ( );
    void PutEndCaps (
        enum EndCapOptions pRetVal );
    VARIANT_BOOL GetIsVolume ( );
    void PutIsVolume (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ParentObjectNumberCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CenterXCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CenterYCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CenterZCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AxisXCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AxisYCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AxisZCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_PlaneXCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_PlaneYCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_PlaneZCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AngleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EndCapsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsVolumeCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ParentObjectNumber (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ParentObjectNumber (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_CenterX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CenterX (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CenterY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CenterY (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CenterZ (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CenterZ (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_AxisX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AxisX (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_AxisY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AxisY (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_AxisZ (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AxisZ (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_PlaneX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PlaneX (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_PlaneY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PlaneY (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_PlaneZ (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PlaneZ (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_EndCaps (
        /*[out,retval]*/ enum EndCapOptions * pRetVal ) = 0;
      virtual HRESULT __stdcall put_EndCaps (
        /*[in]*/ enum EndCapOptions pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsVolume (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsVolume (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("b3a1ff25-9792-41a9-bd05-ee14fdd91e56"))
IObjectTabulatedFactedRadial : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetScaleCell))
    IEditorCellPtr ScaleCell;
    __declspec(property(get=GetIsVolumeCell))
    IEditorCellPtr IsVolumeCell;
    __declspec(property(get=GetStartAngleCell))
    IEditorCellPtr StartAngleCell;
    __declspec(property(get=GetStopAngleCell))
    IEditorCellPtr StopAngleCell;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetIsVolume,put=PutIsVolume))
    VARIANT_BOOL IsVolume;
    __declspec(property(get=GetStartAngle,put=PutStartAngle))
    double StartAngle;
    __declspec(property(get=GetStopAngle,put=PutStopAngle))
    double StopAngle;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetScaleCell ( );
    IEditorCellPtr GetIsVolumeCell ( );
    IEditorCellPtr GetStartAngleCell ( );
    IEditorCellPtr GetStopAngleCell ( );
    IEditorCellPtr ZoneIFacetsCell (
        long i );
    double GetScale ( );
    void PutScale (
        double pRetVal );
    VARIANT_BOOL GetIsVolume ( );
    void PutIsVolume (
        VARIANT_BOOL pRetVal );
    double GetStartAngle ( );
    void PutStartAngle (
        double pRetVal );
    double GetStopAngle ( );
    void PutStopAngle (
        double pRetVal );
    long GetZoneIFacets (
        long i );
    HRESULT SetZoneIFacets (
        long i,
        long v );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ScaleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsVolumeCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_StartAngleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_StopAngleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ZoneIFacetsCell (
        /*[in]*/ long i,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsVolume (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsVolume (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_StartAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_StartAngle (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_StopAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_StopAngle (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetZoneIFacets (
        /*[in]*/ long i,
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetZoneIFacets (
        /*[in]*/ long i,
        /*[in]*/ long v ) = 0;
};

struct __declspec(uuid("58d19c07-4bcd-454f-9b6d-3bfd2bdcb69a"))
IObjectTabulatedFactedToroid : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetScaleCell))
    IEditorCellPtr ScaleCell;
    __declspec(property(get=GetRadiusCell))
    IEditorCellPtr RadiusCell;
    __declspec(property(get=GetStartAngleCell))
    IEditorCellPtr StartAngleCell;
    __declspec(property(get=GetStopAngleCell))
    IEditorCellPtr StopAngleCell;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetStartAngle,put=PutStartAngle))
    double StartAngle;
    __declspec(property(get=GetStopAngle,put=PutStopAngle))
    double StopAngle;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetScaleCell ( );
    IEditorCellPtr GetRadiusCell ( );
    IEditorCellPtr GetStartAngleCell ( );
    IEditorCellPtr GetStopAngleCell ( );
    IEditorCellPtr ZoneIFacetsCell (
        long i );
    double GetScale ( );
    void PutScale (
        double pRetVal );
    double GetRadius ( );
    void PutRadius (
        double pRetVal );
    double GetStartAngle ( );
    void PutStartAngle (
        double pRetVal );
    double GetStopAngle ( );
    void PutStopAngle (
        double pRetVal );
    long GetZoneIFacets (
        long i );
    HRESULT SetZoneIFacets (
        long i,
        long v );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ScaleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadiusCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_StartAngleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_StopAngleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ZoneIFacetsCell (
        /*[in]*/ long i,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_StartAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_StartAngle (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_StopAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_StopAngle (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetZoneIFacets (
        /*[in]*/ long i,
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetZoneIFacets (
        /*[in]*/ long i,
        /*[in]*/ long v ) = 0;
};

struct __declspec(uuid("b863a269-f995-45f2-9e86-27edaf0c2e19"))
IObjectTabulatedFrenselRadial : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetScaleCell))
    IEditorCellPtr ScaleCell;
    __declspec(property(get=GetIsVolumeCell))
    IEditorCellPtr IsVolumeCell;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetIsVolume,put=PutIsVolume))
    VARIANT_BOOL IsVolume;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetScaleCell ( );
    IEditorCellPtr GetIsVolumeCell ( );
    double GetScale ( );
    void PutScale (
        double pRetVal );
    VARIANT_BOOL GetIsVolume ( );
    void PutIsVolume (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ScaleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsVolumeCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsVolume (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsVolume (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("42809cc8-2a4f-47a6-be2f-536a1fbf2a73"))
IObjectToroidalHologram : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRadialHeightCell))
    IEditorCellPtr RadialHeightCell;
    __declspec(property(get=GetXHalfWidthCell))
    IEditorCellPtr XHalfWidthCell;
    __declspec(property(get=GetThicknessCell))
    IEditorCellPtr ThicknessCell;
    __declspec(property(get=GetRotationR1Cell))
    IEditorCellPtr RotationR1Cell;
    __declspec(property(get=GetRadius1Cell))
    IEditorCellPtr Radius1Cell;
    __declspec(property(get=GetConic1Cell))
    IEditorCellPtr Conic1Cell;
    __declspec(property(get=GetCoeff1YPower2Cell))
    IEditorCellPtr Coeff1YPower2Cell;
    __declspec(property(get=GetCoeff1YPower4Cell))
    IEditorCellPtr Coeff1YPower4Cell;
    __declspec(property(get=GetCoeff1YPower6Cell))
    IEditorCellPtr Coeff1YPower6Cell;
    __declspec(property(get=GetCoeff1YPower8Cell))
    IEditorCellPtr Coeff1YPower8Cell;
    __declspec(property(get=GetCoeff1YPower10Cell))
    IEditorCellPtr Coeff1YPower10Cell;
    __declspec(property(get=GetCoeff1YPower12Cell))
    IEditorCellPtr Coeff1YPower12Cell;
    __declspec(property(get=GetRotationR2Cell))
    IEditorCellPtr RotationR2Cell;
    __declspec(property(get=GetRadius2Cell))
    IEditorCellPtr Radius2Cell;
    __declspec(property(get=GetConic2Cell))
    IEditorCellPtr Conic2Cell;
    __declspec(property(get=GetCoeff2YPower2Cell))
    IEditorCellPtr Coeff2YPower2Cell;
    __declspec(property(get=GetCoeff2YPower4Cell))
    IEditorCellPtr Coeff2YPower4Cell;
    __declspec(property(get=GetCoeff2YPower6Cell))
    IEditorCellPtr Coeff2YPower6Cell;
    __declspec(property(get=GetCoeff2YPower8Cell))
    IEditorCellPtr Coeff2YPower8Cell;
    __declspec(property(get=GetCoeff2YPower10Cell))
    IEditorCellPtr Coeff2YPower10Cell;
    __declspec(property(get=GetCoeff2YPower12Cell))
    IEditorCellPtr Coeff2YPower12Cell;
    __declspec(property(get=GetHoloTypeCell))
    IEditorCellPtr HoloTypeCell;
    __declspec(property(get=GetOrderCell))
    IEditorCellPtr OrderCell;
    __declspec(property(get=GetX1Cell))
    IEditorCellPtr X1Cell;
    __declspec(property(get=GetY1Cell))
    IEditorCellPtr Y1Cell;
    __declspec(property(get=GetZ1Cell))
    IEditorCellPtr Z1Cell;
    __declspec(property(get=GetX2Cell))
    IEditorCellPtr X2Cell;
    __declspec(property(get=GetY2Cell))
    IEditorCellPtr Y2Cell;
    __declspec(property(get=GetZ2Cell))
    IEditorCellPtr Z2Cell;
    __declspec(property(get=GetRadialHeight,put=PutRadialHeight))
    double RadialHeight;
    __declspec(property(get=GetXHalfWidth,put=PutXHalfWidth))
    double XHalfWidth;
    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness;
    __declspec(property(get=GetRotationR1,put=PutRotationR1))
    double RotationR1;
    __declspec(property(get=GetRadius1,put=PutRadius1))
    double Radius1;
    __declspec(property(get=GetConic1,put=PutConic1))
    double Conic1;
    __declspec(property(get=GetCoeff1YPower2,put=PutCoeff1YPower2))
    double Coeff1YPower2;
    __declspec(property(get=GetCoeff1YPower4,put=PutCoeff1YPower4))
    double Coeff1YPower4;
    __declspec(property(get=GetCoeff1YPower6,put=PutCoeff1YPower6))
    double Coeff1YPower6;
    __declspec(property(get=GetCoeff1YPower8,put=PutCoeff1YPower8))
    double Coeff1YPower8;
    __declspec(property(get=GetCoeff1YPower10,put=PutCoeff1YPower10))
    double Coeff1YPower10;
    __declspec(property(get=GetCoeff1YPower12,put=PutCoeff1YPower12))
    double Coeff1YPower12;
    __declspec(property(get=GetRotationR2,put=PutRotationR2))
    double RotationR2;
    __declspec(property(get=GetRadius2,put=PutRadius2))
    double Radius2;
    __declspec(property(get=GetConic2,put=PutConic2))
    double Conic2;
    __declspec(property(get=GetCoeff2YPower2,put=PutCoeff2YPower2))
    double Coeff2YPower2;
    __declspec(property(get=GetCoeff2YPower4,put=PutCoeff2YPower4))
    double Coeff2YPower4;
    __declspec(property(get=GetCoeff2YPower6,put=PutCoeff2YPower6))
    double Coeff2YPower6;
    __declspec(property(get=GetCoeff2YPower8,put=PutCoeff2YPower8))
    double Coeff2YPower8;
    __declspec(property(get=GetCoeff2YPower10,put=PutCoeff2YPower10))
    double Coeff2YPower10;
    __declspec(property(get=GetCoeff2YPower12,put=PutCoeff2YPower12))
    double Coeff2YPower12;
    __declspec(property(get=GetHologramType,put=PutHologramType))
    long HologramType;
    __declspec(property(get=GetOrder,put=PutOrder))
    double Order;
    __declspec(property(get=GetX1,put=PutX1))
    double X1;
    __declspec(property(get=GetY1,put=PutY1))
    double Y1;
    __declspec(property(get=GetZ1,put=PutZ1))
    double Z1;
    __declspec(property(get=GetX2,put=PutX2))
    double X2;
    __declspec(property(get=GetY2,put=PutY2))
    double Y2;
    __declspec(property(get=GetZ2,put=PutZ2))
    double Z2;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetRadialHeightCell ( );
    IEditorCellPtr GetXHalfWidthCell ( );
    IEditorCellPtr GetThicknessCell ( );
    IEditorCellPtr GetRotationR1Cell ( );
    IEditorCellPtr GetRadius1Cell ( );
    IEditorCellPtr GetConic1Cell ( );
    IEditorCellPtr GetCoeff1YPower2Cell ( );
    IEditorCellPtr GetCoeff1YPower4Cell ( );
    IEditorCellPtr GetCoeff1YPower6Cell ( );
    IEditorCellPtr GetCoeff1YPower8Cell ( );
    IEditorCellPtr GetCoeff1YPower10Cell ( );
    IEditorCellPtr GetCoeff1YPower12Cell ( );
    IEditorCellPtr GetRotationR2Cell ( );
    IEditorCellPtr GetRadius2Cell ( );
    IEditorCellPtr GetConic2Cell ( );
    IEditorCellPtr GetCoeff2YPower2Cell ( );
    IEditorCellPtr GetCoeff2YPower4Cell ( );
    IEditorCellPtr GetCoeff2YPower6Cell ( );
    IEditorCellPtr GetCoeff2YPower8Cell ( );
    IEditorCellPtr GetCoeff2YPower10Cell ( );
    IEditorCellPtr GetCoeff2YPower12Cell ( );
    IEditorCellPtr GetHoloTypeCell ( );
    IEditorCellPtr GetOrderCell ( );
    IEditorCellPtr GetX1Cell ( );
    IEditorCellPtr GetY1Cell ( );
    IEditorCellPtr GetZ1Cell ( );
    IEditorCellPtr GetX2Cell ( );
    IEditorCellPtr GetY2Cell ( );
    IEditorCellPtr GetZ2Cell ( );
    double GetRadialHeight ( );
    void PutRadialHeight (
        double pRetVal );
    double GetXHalfWidth ( );
    void PutXHalfWidth (
        double pRetVal );
    double GetThickness ( );
    void PutThickness (
        double pRetVal );
    double GetRotationR1 ( );
    void PutRotationR1 (
        double pRetVal );
    double GetRadius1 ( );
    void PutRadius1 (
        double pRetVal );
    double GetConic1 ( );
    void PutConic1 (
        double pRetVal );
    double GetCoeff1YPower2 ( );
    void PutCoeff1YPower2 (
        double pRetVal );
    double GetCoeff1YPower4 ( );
    void PutCoeff1YPower4 (
        double pRetVal );
    double GetCoeff1YPower6 ( );
    void PutCoeff1YPower6 (
        double pRetVal );
    double GetCoeff1YPower8 ( );
    void PutCoeff1YPower8 (
        double pRetVal );
    double GetCoeff1YPower10 ( );
    void PutCoeff1YPower10 (
        double pRetVal );
    double GetCoeff1YPower12 ( );
    void PutCoeff1YPower12 (
        double pRetVal );
    double GetRotationR2 ( );
    void PutRotationR2 (
        double pRetVal );
    double GetRadius2 ( );
    void PutRadius2 (
        double pRetVal );
    double GetConic2 ( );
    void PutConic2 (
        double pRetVal );
    double GetCoeff2YPower2 ( );
    void PutCoeff2YPower2 (
        double pRetVal );
    double GetCoeff2YPower4 ( );
    void PutCoeff2YPower4 (
        double pRetVal );
    double GetCoeff2YPower6 ( );
    void PutCoeff2YPower6 (
        double pRetVal );
    double GetCoeff2YPower8 ( );
    void PutCoeff2YPower8 (
        double pRetVal );
    double GetCoeff2YPower10 ( );
    void PutCoeff2YPower10 (
        double pRetVal );
    double GetCoeff2YPower12 ( );
    void PutCoeff2YPower12 (
        double pRetVal );
    long GetHologramType ( );
    void PutHologramType (
        long pRetVal );
    double GetOrder ( );
    void PutOrder (
        double pRetVal );
    double GetX1 ( );
    void PutX1 (
        double pRetVal );
    double GetY1 ( );
    void PutY1 (
        double pRetVal );
    double GetZ1 ( );
    void PutZ1 (
        double pRetVal );
    double GetX2 ( );
    void PutX2 (
        double pRetVal );
    double GetY2 ( );
    void PutY2 (
        double pRetVal );
    double GetZ2 ( );
    void PutZ2 (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RadialHeightCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ThicknessCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RotationR1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1YPower2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1YPower4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1YPower6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1YPower8Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1YPower10Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1YPower12Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RotationR2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2YPower2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2YPower4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2YPower6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2YPower8Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2YPower10Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2YPower12Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_HoloTypeCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_OrderCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Z1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Z2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadialHeight (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RadialHeight (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_XHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Thickness (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Thickness (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RotationR1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RotationR1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Radius1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Conic1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1YPower2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff1YPower2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1YPower4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff1YPower4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1YPower6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff1YPower6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1YPower8 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff1YPower8 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1YPower10 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff1YPower10 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1YPower12 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff1YPower12 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RotationR2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RotationR2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Radius2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Conic2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2YPower2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff2YPower2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2YPower4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff2YPower4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2YPower6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff2YPower6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2YPower8 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff2YPower8 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2YPower10 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff2YPower10 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2YPower12 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff2YPower12 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_HologramType (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_HologramType (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Order (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Order (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Y1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Z1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Z1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Y2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Z2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Z2 (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("9fd97b21-e3fa-420c-a2aa-f4c334e335a1"))
IObjectToroidalLens : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRadialHeightCell))
    IEditorCellPtr RadialHeightCell;
    __declspec(property(get=GetXHalfWidthCell))
    IEditorCellPtr XHalfWidthCell;
    __declspec(property(get=GetThicknessCell))
    IEditorCellPtr ThicknessCell;
    __declspec(property(get=GetRotationR1Cell))
    IEditorCellPtr RotationR1Cell;
    __declspec(property(get=GetRadius1Cell))
    IEditorCellPtr Radius1Cell;
    __declspec(property(get=GetConic1Cell))
    IEditorCellPtr Conic1Cell;
    __declspec(property(get=GetCoeff1YPower2Cell))
    IEditorCellPtr Coeff1YPower2Cell;
    __declspec(property(get=GetCoeff1YPower4Cell))
    IEditorCellPtr Coeff1YPower4Cell;
    __declspec(property(get=GetCoeff1YPower6Cell))
    IEditorCellPtr Coeff1YPower6Cell;
    __declspec(property(get=GetCoeff1YPower8Cell))
    IEditorCellPtr Coeff1YPower8Cell;
    __declspec(property(get=GetCoeff1YPower10Cell))
    IEditorCellPtr Coeff1YPower10Cell;
    __declspec(property(get=GetCoeff1YPower12Cell))
    IEditorCellPtr Coeff1YPower12Cell;
    __declspec(property(get=GetRotationR2Cell))
    IEditorCellPtr RotationR2Cell;
    __declspec(property(get=GetRadius2Cell))
    IEditorCellPtr Radius2Cell;
    __declspec(property(get=GetConic2Cell))
    IEditorCellPtr Conic2Cell;
    __declspec(property(get=GetCoeff2YPower2Cell))
    IEditorCellPtr Coeff2YPower2Cell;
    __declspec(property(get=GetCoeff2YPower4Cell))
    IEditorCellPtr Coeff2YPower4Cell;
    __declspec(property(get=GetCoeff2YPower6Cell))
    IEditorCellPtr Coeff2YPower6Cell;
    __declspec(property(get=GetCoeff2YPower8Cell))
    IEditorCellPtr Coeff2YPower8Cell;
    __declspec(property(get=GetCoeff2YPower10Cell))
    IEditorCellPtr Coeff2YPower10Cell;
    __declspec(property(get=GetCoeff2YPower12Cell))
    IEditorCellPtr Coeff2YPower12Cell;
    __declspec(property(get=GetCoeff1YPower14Cell))
    IEditorCellPtr Coeff1YPower14Cell;
    __declspec(property(get=GetCoeff2YPower14Cell))
    IEditorCellPtr Coeff2YPower14Cell;
    __declspec(property(get=GetRadialHeight,put=PutRadialHeight))
    double RadialHeight;
    __declspec(property(get=GetXHalfWidth,put=PutXHalfWidth))
    double XHalfWidth;
    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness;
    __declspec(property(get=GetRotationR1,put=PutRotationR1))
    double RotationR1;
    __declspec(property(get=GetRadius1,put=PutRadius1))
    double Radius1;
    __declspec(property(get=GetConic1,put=PutConic1))
    double Conic1;
    __declspec(property(get=GetCoeff1YPower2,put=PutCoeff1YPower2))
    double Coeff1YPower2;
    __declspec(property(get=GetCoeff1YPower4,put=PutCoeff1YPower4))
    double Coeff1YPower4;
    __declspec(property(get=GetCoeff1YPower6,put=PutCoeff1YPower6))
    double Coeff1YPower6;
    __declspec(property(get=GetCoeff1YPower8,put=PutCoeff1YPower8))
    double Coeff1YPower8;
    __declspec(property(get=GetCoeff1YPower10,put=PutCoeff1YPower10))
    double Coeff1YPower10;
    __declspec(property(get=GetCoeff1YPower12,put=PutCoeff1YPower12))
    double Coeff1YPower12;
    __declspec(property(get=GetRotationR2,put=PutRotationR2))
    double RotationR2;
    __declspec(property(get=GetRadius2,put=PutRadius2))
    double Radius2;
    __declspec(property(get=GetConic2,put=PutConic2))
    double Conic2;
    __declspec(property(get=GetCoeff2YPower2,put=PutCoeff2YPower2))
    double Coeff2YPower2;
    __declspec(property(get=GetCoeff2YPower4,put=PutCoeff2YPower4))
    double Coeff2YPower4;
    __declspec(property(get=GetCoeff2YPower6,put=PutCoeff2YPower6))
    double Coeff2YPower6;
    __declspec(property(get=GetCoeff2YPower8,put=PutCoeff2YPower8))
    double Coeff2YPower8;
    __declspec(property(get=GetCoeff2YPower10,put=PutCoeff2YPower10))
    double Coeff2YPower10;
    __declspec(property(get=GetCoeff2YPower12,put=PutCoeff2YPower12))
    double Coeff2YPower12;
    __declspec(property(get=GetCoeff1YPower14,put=PutCoeff1YPower14))
    double Coeff1YPower14;
    __declspec(property(get=GetCoeff2YPower14,put=PutCoeff2YPower14))
    double Coeff2YPower14;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetRadialHeightCell ( );
    IEditorCellPtr GetXHalfWidthCell ( );
    IEditorCellPtr GetThicknessCell ( );
    IEditorCellPtr GetRotationR1Cell ( );
    IEditorCellPtr GetRadius1Cell ( );
    IEditorCellPtr GetConic1Cell ( );
    IEditorCellPtr GetCoeff1YPower2Cell ( );
    IEditorCellPtr GetCoeff1YPower4Cell ( );
    IEditorCellPtr GetCoeff1YPower6Cell ( );
    IEditorCellPtr GetCoeff1YPower8Cell ( );
    IEditorCellPtr GetCoeff1YPower10Cell ( );
    IEditorCellPtr GetCoeff1YPower12Cell ( );
    IEditorCellPtr GetRotationR2Cell ( );
    IEditorCellPtr GetRadius2Cell ( );
    IEditorCellPtr GetConic2Cell ( );
    IEditorCellPtr GetCoeff2YPower2Cell ( );
    IEditorCellPtr GetCoeff2YPower4Cell ( );
    IEditorCellPtr GetCoeff2YPower6Cell ( );
    IEditorCellPtr GetCoeff2YPower8Cell ( );
    IEditorCellPtr GetCoeff2YPower10Cell ( );
    IEditorCellPtr GetCoeff2YPower12Cell ( );
    IEditorCellPtr GetCoeff1YPower14Cell ( );
    IEditorCellPtr GetCoeff2YPower14Cell ( );
    double GetRadialHeight ( );
    void PutRadialHeight (
        double pRetVal );
    double GetXHalfWidth ( );
    void PutXHalfWidth (
        double pRetVal );
    double GetThickness ( );
    void PutThickness (
        double pRetVal );
    double GetRotationR1 ( );
    void PutRotationR1 (
        double pRetVal );
    double GetRadius1 ( );
    void PutRadius1 (
        double pRetVal );
    double GetConic1 ( );
    void PutConic1 (
        double pRetVal );
    double GetCoeff1YPower2 ( );
    void PutCoeff1YPower2 (
        double pRetVal );
    double GetCoeff1YPower4 ( );
    void PutCoeff1YPower4 (
        double pRetVal );
    double GetCoeff1YPower6 ( );
    void PutCoeff1YPower6 (
        double pRetVal );
    double GetCoeff1YPower8 ( );
    void PutCoeff1YPower8 (
        double pRetVal );
    double GetCoeff1YPower10 ( );
    void PutCoeff1YPower10 (
        double pRetVal );
    double GetCoeff1YPower12 ( );
    void PutCoeff1YPower12 (
        double pRetVal );
    double GetRotationR2 ( );
    void PutRotationR2 (
        double pRetVal );
    double GetRadius2 ( );
    void PutRadius2 (
        double pRetVal );
    double GetConic2 ( );
    void PutConic2 (
        double pRetVal );
    double GetCoeff2YPower2 ( );
    void PutCoeff2YPower2 (
        double pRetVal );
    double GetCoeff2YPower4 ( );
    void PutCoeff2YPower4 (
        double pRetVal );
    double GetCoeff2YPower6 ( );
    void PutCoeff2YPower6 (
        double pRetVal );
    double GetCoeff2YPower8 ( );
    void PutCoeff2YPower8 (
        double pRetVal );
    double GetCoeff2YPower10 ( );
    void PutCoeff2YPower10 (
        double pRetVal );
    double GetCoeff2YPower12 ( );
    void PutCoeff2YPower12 (
        double pRetVal );
    double GetCoeff1YPower14 ( );
    void PutCoeff1YPower14 (
        double pRetVal );
    double GetCoeff2YPower14 ( );
    void PutCoeff2YPower14 (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RadialHeightCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ThicknessCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RotationR1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1YPower2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1YPower4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1YPower6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1YPower8Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1YPower10Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1YPower12Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RotationR2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2YPower2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2YPower4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2YPower6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2YPower8Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2YPower10Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2YPower12Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1YPower14Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2YPower14Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadialHeight (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RadialHeight (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_XHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Thickness (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Thickness (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RotationR1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RotationR1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Radius1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Conic1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1YPower2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff1YPower2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1YPower4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff1YPower4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1YPower6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff1YPower6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1YPower8 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff1YPower8 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1YPower10 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff1YPower10 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1YPower12 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff1YPower12 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RotationR2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RotationR2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Radius2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Conic2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2YPower2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff2YPower2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2YPower4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff2YPower4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2YPower6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff2YPower6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2YPower8 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff2YPower8 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2YPower10 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff2YPower10 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2YPower12 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff2YPower12 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff1YPower14 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff1YPower14 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coeff2YPower14 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coeff2YPower14 (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("6be73df2-eef7-4ea3-bf3d-31c94a9256cc"))
IObjectToroidalSurface : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetXHalfWidthCell))
    IEditorCellPtr XHalfWidthCell;
    __declspec(property(get=GetYHalfWidthCell))
    IEditorCellPtr YHalfWidthCell;
    __declspec(property(get=GetRotationRCell))
    IEditorCellPtr RotationRCell;
    __declspec(property(get=GetRadiusCell))
    IEditorCellPtr RadiusCell;
    __declspec(property(get=GetConicCell))
    IEditorCellPtr ConicCell;
    __declspec(property(get=GetCoeffYPower2Cell))
    IEditorCellPtr CoeffYPower2Cell;
    __declspec(property(get=GetCoeffYPower4Cell))
    IEditorCellPtr CoeffYPower4Cell;
    __declspec(property(get=GetCoeffYPower6Cell))
    IEditorCellPtr CoeffYPower6Cell;
    __declspec(property(get=GetCoeffYPower8Cell))
    IEditorCellPtr CoeffYPower8Cell;
    __declspec(property(get=GetCoeffYPower10Cell))
    IEditorCellPtr CoeffYPower10Cell;
    __declspec(property(get=GetCoeffYPower12Cell))
    IEditorCellPtr CoeffYPower12Cell;
    __declspec(property(get=GetCoeffYPower14Cell))
    IEditorCellPtr CoeffYPower14Cell;
    __declspec(property(get=GetXHalfWidth,put=PutXHalfWidth))
    double XHalfWidth;
    __declspec(property(get=GetYHalfWidth,put=PutYHalfWidth))
    double YHalfWidth;
    __declspec(property(get=GetRotationR,put=PutRotationR))
    double RotationR;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetConic,put=PutConic))
    double Conic;
    __declspec(property(get=GetCoeffYPower2,put=PutCoeffYPower2))
    double CoeffYPower2;
    __declspec(property(get=GetCoeffYPower4,put=PutCoeffYPower4))
    double CoeffYPower4;
    __declspec(property(get=GetCoeffYPower6,put=PutCoeffYPower6))
    double CoeffYPower6;
    __declspec(property(get=GetCoeffYPower8,put=PutCoeffYPower8))
    double CoeffYPower8;
    __declspec(property(get=GetCoeffYPower10,put=PutCoeffYPower10))
    double CoeffYPower10;
    __declspec(property(get=GetCoeffYPower12,put=PutCoeffYPower12))
    double CoeffYPower12;
    __declspec(property(get=GetCoeffYPower14,put=PutCoeffYPower14))
    double CoeffYPower14;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetXHalfWidthCell ( );
    IEditorCellPtr GetYHalfWidthCell ( );
    IEditorCellPtr GetRotationRCell ( );
    IEditorCellPtr GetRadiusCell ( );
    IEditorCellPtr GetConicCell ( );
    IEditorCellPtr GetCoeffYPower2Cell ( );
    IEditorCellPtr GetCoeffYPower4Cell ( );
    IEditorCellPtr GetCoeffYPower6Cell ( );
    IEditorCellPtr GetCoeffYPower8Cell ( );
    IEditorCellPtr GetCoeffYPower10Cell ( );
    IEditorCellPtr GetCoeffYPower12Cell ( );
    IEditorCellPtr GetCoeffYPower14Cell ( );
    double GetXHalfWidth ( );
    void PutXHalfWidth (
        double pRetVal );
    double GetYHalfWidth ( );
    void PutYHalfWidth (
        double pRetVal );
    double GetRotationR ( );
    void PutRotationR (
        double pRetVal );
    double GetRadius ( );
    void PutRadius (
        double pRetVal );
    double GetConic ( );
    void PutConic (
        double pRetVal );
    double GetCoeffYPower2 ( );
    void PutCoeffYPower2 (
        double pRetVal );
    double GetCoeffYPower4 ( );
    void PutCoeffYPower4 (
        double pRetVal );
    double GetCoeffYPower6 ( );
    void PutCoeffYPower6 (
        double pRetVal );
    double GetCoeffYPower8 ( );
    void PutCoeffYPower8 (
        double pRetVal );
    double GetCoeffYPower10 ( );
    void PutCoeffYPower10 (
        double pRetVal );
    double GetCoeffYPower12 ( );
    void PutCoeffYPower12 (
        double pRetVal );
    double GetCoeffYPower14 ( );
    void PutCoeffYPower14 (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_XHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RotationRCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadiusCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ConicCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffYPower2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffYPower4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffYPower6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffYPower8Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffYPower10Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffYPower12Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffYPower14Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RotationR (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RotationR (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Conic (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffYPower2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffYPower2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffYPower4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffYPower4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffYPower6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffYPower6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffYPower8 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffYPower8 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffYPower10 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffYPower10 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffYPower12 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffYPower12 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffYPower14 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffYPower14 (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("a99d9e88-002c-4e03-9309-f7fa4c8df644"))
IObjectToroidalSurfaceOddASphere : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetXHalfWidthCell))
    IEditorCellPtr XHalfWidthCell;
    __declspec(property(get=GetYHalfWidthCell))
    IEditorCellPtr YHalfWidthCell;
    __declspec(property(get=GetRotationRCell))
    IEditorCellPtr RotationRCell;
    __declspec(property(get=GetRadiusCell))
    IEditorCellPtr RadiusCell;
    __declspec(property(get=GetConicCell))
    IEditorCellPtr ConicCell;
    __declspec(property(get=GetCoeffOnYPower1Cell))
    IEditorCellPtr CoeffOnYPower1Cell;
    __declspec(property(get=GetCoeffOnYPower2Cell))
    IEditorCellPtr CoeffOnYPower2Cell;
    __declspec(property(get=GetCoeffOnYPower3Cell))
    IEditorCellPtr CoeffOnYPower3Cell;
    __declspec(property(get=GetCoeffOnYPower4Cell))
    IEditorCellPtr CoeffOnYPower4Cell;
    __declspec(property(get=GetCoeffOnYPower5Cell))
    IEditorCellPtr CoeffOnYPower5Cell;
    __declspec(property(get=GetCoeffOnYPower6Cell))
    IEditorCellPtr CoeffOnYPower6Cell;
    __declspec(property(get=GetCoeffOnYPower7Cell))
    IEditorCellPtr CoeffOnYPower7Cell;
    __declspec(property(get=GetCoeffOnYPower8Cell))
    IEditorCellPtr CoeffOnYPower8Cell;
    __declspec(property(get=GetXHalfWidth,put=PutXHalfWidth))
    double XHalfWidth;
    __declspec(property(get=GetYHalfWidth,put=PutYHalfWidth))
    double YHalfWidth;
    __declspec(property(get=GetRotationR,put=PutRotationR))
    double RotationR;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetConic,put=PutConic))
    double Conic;
    __declspec(property(get=GetCoeffOnYPower1,put=PutCoeffOnYPower1))
    double CoeffOnYPower1;
    __declspec(property(get=GetCoeffOnYPower2,put=PutCoeffOnYPower2))
    double CoeffOnYPower2;
    __declspec(property(get=GetCoeffOnYPower3,put=PutCoeffOnYPower3))
    double CoeffOnYPower3;
    __declspec(property(get=GetCoeffOnYPower4,put=PutCoeffOnYPower4))
    double CoeffOnYPower4;
    __declspec(property(get=GetCoeffOnYPower5,put=PutCoeffOnYPower5))
    double CoeffOnYPower5;
    __declspec(property(get=GetCoeffOnYPower6,put=PutCoeffOnYPower6))
    double CoeffOnYPower6;
    __declspec(property(get=GetCoeffOnYPower7,put=PutCoeffOnYPower7))
    double CoeffOnYPower7;
    __declspec(property(get=GetCoeffOnYPower8,put=PutCoeffOnYPower8))
    double CoeffOnYPower8;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetXHalfWidthCell ( );
    IEditorCellPtr GetYHalfWidthCell ( );
    IEditorCellPtr GetRotationRCell ( );
    IEditorCellPtr GetRadiusCell ( );
    IEditorCellPtr GetConicCell ( );
    IEditorCellPtr GetCoeffOnYPower1Cell ( );
    IEditorCellPtr GetCoeffOnYPower2Cell ( );
    IEditorCellPtr GetCoeffOnYPower3Cell ( );
    IEditorCellPtr GetCoeffOnYPower4Cell ( );
    IEditorCellPtr GetCoeffOnYPower5Cell ( );
    IEditorCellPtr GetCoeffOnYPower6Cell ( );
    IEditorCellPtr GetCoeffOnYPower7Cell ( );
    IEditorCellPtr GetCoeffOnYPower8Cell ( );
    double GetXHalfWidth ( );
    void PutXHalfWidth (
        double pRetVal );
    double GetYHalfWidth ( );
    void PutYHalfWidth (
        double pRetVal );
    double GetRotationR ( );
    void PutRotationR (
        double pRetVal );
    double GetRadius ( );
    void PutRadius (
        double pRetVal );
    double GetConic ( );
    void PutConic (
        double pRetVal );
    double GetCoeffOnYPower1 ( );
    void PutCoeffOnYPower1 (
        double pRetVal );
    double GetCoeffOnYPower2 ( );
    void PutCoeffOnYPower2 (
        double pRetVal );
    double GetCoeffOnYPower3 ( );
    void PutCoeffOnYPower3 (
        double pRetVal );
    double GetCoeffOnYPower4 ( );
    void PutCoeffOnYPower4 (
        double pRetVal );
    double GetCoeffOnYPower5 ( );
    void PutCoeffOnYPower5 (
        double pRetVal );
    double GetCoeffOnYPower6 ( );
    void PutCoeffOnYPower6 (
        double pRetVal );
    double GetCoeffOnYPower7 ( );
    void PutCoeffOnYPower7 (
        double pRetVal );
    double GetCoeffOnYPower8 ( );
    void PutCoeffOnYPower8 (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_XHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YHalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RotationRCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadiusCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ConicCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnYPower1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnYPower2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnYPower3Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnYPower4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnYPower5Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnYPower6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnYPower7Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnYPower8Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YHalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YHalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RotationR (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RotationR (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Conic (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnYPower1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffOnYPower1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnYPower2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffOnYPower2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnYPower3 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffOnYPower3 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnYPower4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffOnYPower4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnYPower5 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffOnYPower5 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnYPower6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffOnYPower6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnYPower7 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffOnYPower7 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffOnYPower8 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffOnYPower8 (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("2af24471-07c3-43b5-ad4f-f83eff96e05f"))
IObjectTorusSurface : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRotationRCell))
    IEditorCellPtr RotationRCell;
    __declspec(property(get=GetRadiusRCell))
    IEditorCellPtr RadiusRCell;
    __declspec(property(get=GetStartAngleCell))
    IEditorCellPtr StartAngleCell;
    __declspec(property(get=GetStopAngleCell))
    IEditorCellPtr StopAngleCell;
    __declspec(property(get=GetRotationR,put=PutRotationR))
    double RotationR;
    __declspec(property(get=GetRadiusR,put=PutRadiusR))
    double RadiusR;
    __declspec(property(get=GetStartAngle,put=PutStartAngle))
    double StartAngle;
    __declspec(property(get=GetStopAngle,put=PutStopAngle))
    double StopAngle;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetRotationRCell ( );
    IEditorCellPtr GetRadiusRCell ( );
    IEditorCellPtr GetStartAngleCell ( );
    IEditorCellPtr GetStopAngleCell ( );
    double GetRotationR ( );
    void PutRotationR (
        double pRetVal );
    double GetRadiusR ( );
    void PutRadiusR (
        double pRetVal );
    double GetStartAngle ( );
    void PutStartAngle (
        double pRetVal );
    double GetStopAngle ( );
    void PutStopAngle (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RotationRCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadiusRCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_StartAngleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_StopAngleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RotationR (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RotationR (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadiusR (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RadiusR (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_StartAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_StartAngle (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_StopAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_StopAngle (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("3554ff4c-bd49-4c99-b2d9-5ee4ad3eeeae"))
IObjectTorusVolume : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRotationRCell))
    IEditorCellPtr RotationRCell;
    __declspec(property(get=GetRadiusRCell))
    IEditorCellPtr RadiusRCell;
    __declspec(property(get=GetStartAngleCell))
    IEditorCellPtr StartAngleCell;
    __declspec(property(get=GetStopAngleCell))
    IEditorCellPtr StopAngleCell;
    __declspec(property(get=GetRotationR,put=PutRotationR))
    double RotationR;
    __declspec(property(get=GetRadiusR,put=PutRadiusR))
    double RadiusR;
    __declspec(property(get=GetStartAngle,put=PutStartAngle))
    double StartAngle;
    __declspec(property(get=GetStopAngle,put=PutStopAngle))
    double StopAngle;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetRotationRCell ( );
    IEditorCellPtr GetRadiusRCell ( );
    IEditorCellPtr GetStartAngleCell ( );
    IEditorCellPtr GetStopAngleCell ( );
    double GetRotationR ( );
    void PutRotationR (
        double pRetVal );
    double GetRadiusR ( );
    void PutRadiusR (
        double pRetVal );
    double GetStartAngle ( );
    void PutStartAngle (
        double pRetVal );
    double GetStopAngle ( );
    void PutStopAngle (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RotationRCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadiusRCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_StartAngleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_StopAngleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RotationR (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RotationR (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadiusR (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RadiusR (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_StartAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_StartAngle (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_StopAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_StopAngle (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("9b484983-5e50-436b-92a9-3c85ae00adf2"))
IObjectTriangularCorner : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetWidthCell))
    IEditorCellPtr WidthCell;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetWidthCell ( );
    double GetWidth ( );
    void PutWidth (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_WidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("ab6278ce-59d9-427e-901d-e1aac0f5e79d"))
IObjectTriangle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetX1Cell))
    IEditorCellPtr X1Cell;
    __declspec(property(get=GetY1Cell))
    IEditorCellPtr Y1Cell;
    __declspec(property(get=GetX2Cell))
    IEditorCellPtr X2Cell;
    __declspec(property(get=GetY2Cell))
    IEditorCellPtr Y2Cell;
    __declspec(property(get=GetX3Cell))
    IEditorCellPtr X3Cell;
    __declspec(property(get=GetY3Cell))
    IEditorCellPtr Y3Cell;
    __declspec(property(get=GetX1,put=PutX1))
    double X1;
    __declspec(property(get=GetY1,put=PutY1))
    double Y1;
    __declspec(property(get=GetX2,put=PutX2))
    double X2;
    __declspec(property(get=GetY2,put=PutY2))
    double Y2;
    __declspec(property(get=GetX3,put=PutX3))
    double X3;
    __declspec(property(get=GetY3,put=PutY3))
    double Y3;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetX1Cell ( );
    IEditorCellPtr GetY1Cell ( );
    IEditorCellPtr GetX2Cell ( );
    IEditorCellPtr GetY2Cell ( );
    IEditorCellPtr GetX3Cell ( );
    IEditorCellPtr GetY3Cell ( );
    double GetX1 ( );
    void PutX1 (
        double pRetVal );
    double GetY1 ( );
    void PutY1 (
        double pRetVal );
    double GetX2 ( );
    void PutX2 (
        double pRetVal );
    double GetY2 ( );
    void PutY2 (
        double pRetVal );
    double GetX3 ( );
    void PutX3 (
        double pRetVal );
    double GetY3 ( );
    void PutY3 (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y3Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Y1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Y2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X3 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y3 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Y3 (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("889aaec4-940f-4dc8-bd64-916fc95bad36"))
IObjectWolterSurface : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetZLengthCell))
    IEditorCellPtr ZLengthCell;
    __declspec(property(get=GetR0Cell))
    IEditorCellPtr R0Cell;
    __declspec(property(get=GetAngleCell))
    IEditorCellPtr AngleCell;
    __declspec(property(get=GetCoeffZPower2Cell))
    IEditorCellPtr CoeffZPower2Cell;
    __declspec(property(get=GetCoeffZPower3Cell))
    IEditorCellPtr CoeffZPower3Cell;
    __declspec(property(get=GetCoeffZPower4Cell))
    IEditorCellPtr CoeffZPower4Cell;
    __declspec(property(get=GetCoeffZPower5Cell))
    IEditorCellPtr CoeffZPower5Cell;
    __declspec(property(get=GetZLength,put=PutZLength))
    double ZLength;
    __declspec(property(get=GetR0,put=PutR0))
    double R0;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;
    __declspec(property(get=GetCoeffZPower2,put=PutCoeffZPower2))
    double CoeffZPower2;
    __declspec(property(get=GetCoeffZPower3,put=PutCoeffZPower3))
    double CoeffZPower3;
    __declspec(property(get=GetCoeffZPower4,put=PutCoeffZPower4))
    double CoeffZPower4;
    __declspec(property(get=GetCoeffZPower5,put=PutCoeffZPower5))
    double CoeffZPower5;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetZLengthCell ( );
    IEditorCellPtr GetR0Cell ( );
    IEditorCellPtr GetAngleCell ( );
    IEditorCellPtr GetCoeffZPower2Cell ( );
    IEditorCellPtr GetCoeffZPower3Cell ( );
    IEditorCellPtr GetCoeffZPower4Cell ( );
    IEditorCellPtr GetCoeffZPower5Cell ( );
    double GetZLength ( );
    void PutZLength (
        double pRetVal );
    double GetR0 ( );
    void PutR0 (
        double pRetVal );
    double GetAngle ( );
    void PutAngle (
        double pRetVal );
    double GetCoeffZPower2 ( );
    void PutCoeffZPower2 (
        double pRetVal );
    double GetCoeffZPower3 ( );
    void PutCoeffZPower3 (
        double pRetVal );
    double GetCoeffZPower4 ( );
    void PutCoeffZPower4 (
        double pRetVal );
    double GetCoeffZPower5 ( );
    void PutCoeffZPower5 (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ZLengthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_R0Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AngleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffZPower2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffZPower3Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffZPower4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffZPower5Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZLength (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ZLength (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_R0 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_R0 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffZPower2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffZPower2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffZPower3 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffZPower3 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffZPower4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffZPower4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffZPower5 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffZPower5 (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("59f1acde-da78-48ad-88f1-f07aff3ea892"))
IObjectZernikeSurface : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRadiusCell))
    IEditorCellPtr RadiusCell;
    __declspec(property(get=GetConicCell))
    IEditorCellPtr ConicCell;
    __declspec(property(get=GetMaxApertureCell))
    IEditorCellPtr MaxApertureCell;
    __declspec(property(get=GetNormRadCell))
    IEditorCellPtr NormRadCell;
    __declspec(property(get=GetXDecenterCell))
    IEditorCellPtr XDecenterCell;
    __declspec(property(get=GetYDecenterCellCell))
    IEditorCellPtr YDecenterCellCell;
    __declspec(property(get=GetCoeffRPower2Cell))
    IEditorCellPtr CoeffRPower2Cell;
    __declspec(property(get=GetCoeffRPower4Cell))
    IEditorCellPtr CoeffRPower4Cell;
    __declspec(property(get=GetCoeffRPower6Cell))
    IEditorCellPtr CoeffRPower6Cell;
    __declspec(property(get=GetCoeffRPower8Cell))
    IEditorCellPtr CoeffRPower8Cell;
    __declspec(property(get=GetCoeffRPower10Cell))
    IEditorCellPtr CoeffRPower10Cell;
    __declspec(property(get=GetCoeffRPower12Cell))
    IEditorCellPtr CoeffRPower12Cell;
    __declspec(property(get=GetCoeffRPower14Cell))
    IEditorCellPtr CoeffRPower14Cell;
    __declspec(property(get=GetCoeffRPower16Cell))
    IEditorCellPtr CoeffRPower16Cell;
    __declspec(property(get=GetNumberOfZTermsCell))
    IEditorCellPtr NumberOfZTermsCell;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetConic,put=PutConic))
    double Conic;
    __declspec(property(get=GetMaxAperture,put=PutMaxAperture))
    double MaxAperture;
    __declspec(property(get=GetNormRad,put=PutNormRad))
    double NormRad;
    __declspec(property(get=GetXDecenter,put=PutXDecenter))
    double XDecenter;
    __declspec(property(get=GetYDecenter,put=PutYDecenter))
    double YDecenter;
    __declspec(property(get=GetCoeffRPower2,put=PutCoeffRPower2))
    double CoeffRPower2;
    __declspec(property(get=GetCoeffRPower4,put=PutCoeffRPower4))
    double CoeffRPower4;
    __declspec(property(get=GetCoeffRPower6,put=PutCoeffRPower6))
    double CoeffRPower6;
    __declspec(property(get=GetCoeffRPower8,put=PutCoeffRPower8))
    double CoeffRPower8;
    __declspec(property(get=GetCoeffRPower10,put=PutCoeffRPower10))
    double CoeffRPower10;
    __declspec(property(get=GetCoeffRPower12,put=PutCoeffRPower12))
    double CoeffRPower12;
    __declspec(property(get=GetCoeffRPower14,put=PutCoeffRPower14))
    double CoeffRPower14;
    __declspec(property(get=GetCoeffRPower16,put=PutCoeffRPower16))
    double CoeffRPower16;
    __declspec(property(get=GetNumberOfZTerms,put=PutNumberOfZTerms))
    long NumberOfZTerms;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetRadiusCell ( );
    IEditorCellPtr GetConicCell ( );
    IEditorCellPtr GetMaxApertureCell ( );
    IEditorCellPtr GetNormRadCell ( );
    IEditorCellPtr GetXDecenterCell ( );
    IEditorCellPtr GetYDecenterCellCell ( );
    IEditorCellPtr GetCoeffRPower2Cell ( );
    IEditorCellPtr GetCoeffRPower4Cell ( );
    IEditorCellPtr GetCoeffRPower6Cell ( );
    IEditorCellPtr GetCoeffRPower8Cell ( );
    IEditorCellPtr GetCoeffRPower10Cell ( );
    IEditorCellPtr GetCoeffRPower12Cell ( );
    IEditorCellPtr GetCoeffRPower14Cell ( );
    IEditorCellPtr GetCoeffRPower16Cell ( );
    IEditorCellPtr GetNumberOfZTermsCell ( );
    IEditorCellPtr GetZICell (
        long i );
    double GetRadius ( );
    void PutRadius (
        double pRetVal );
    double GetConic ( );
    void PutConic (
        double pRetVal );
    double GetMaxAperture ( );
    void PutMaxAperture (
        double pRetVal );
    double GetNormRad ( );
    void PutNormRad (
        double pRetVal );
    double GetXDecenter ( );
    void PutXDecenter (
        double pRetVal );
    double GetYDecenter ( );
    void PutYDecenter (
        double pRetVal );
    double GetCoeffRPower2 ( );
    void PutCoeffRPower2 (
        double pRetVal );
    double GetCoeffRPower4 ( );
    void PutCoeffRPower4 (
        double pRetVal );
    double GetCoeffRPower6 ( );
    void PutCoeffRPower6 (
        double pRetVal );
    double GetCoeffRPower8 ( );
    void PutCoeffRPower8 (
        double pRetVal );
    double GetCoeffRPower10 ( );
    void PutCoeffRPower10 (
        double pRetVal );
    double GetCoeffRPower12 ( );
    void PutCoeffRPower12 (
        double pRetVal );
    double GetCoeffRPower14 ( );
    void PutCoeffRPower14 (
        double pRetVal );
    double GetCoeffRPower16 ( );
    void PutCoeffRPower16 (
        double pRetVal );
    long GetNumberOfZTerms ( );
    void PutNumberOfZTerms (
        long pRetVal );
    double GetFrontTerm (
        long i );
    HRESULT SetFrontTerm (
        long i,
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RadiusCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ConicCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaxApertureCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NormRadCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XDecenterCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YDecenterCellCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower8Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower10Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower12Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower14Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower16Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfZTermsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetZICell (
        /*[in]*/ long i,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Conic (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaxAperture (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaxAperture (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_NormRad (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NormRad (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_XDecenter (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XDecenter (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YDecenter (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YDecenter (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffRPower2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffRPower4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffRPower6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower8 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffRPower8 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower10 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffRPower10 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower12 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffRPower12 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower14 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffRPower14 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoeffRPower16 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CoeffRPower16 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfZTerms (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfZTerms (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetFrontTerm (
        /*[in]*/ long i,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetFrontTerm (
        /*[in]*/ long i,
        /*[in]*/ double Value ) = 0;
};

struct __declspec(uuid("3716860f-4817-4480-b79e-a16ebdfa6e6f"))
ISurfaceXYPolynomial : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNumberOfTermsCell))
    IEditorCellPtr NumberOfTermsCell;
    __declspec(property(get=GetNumberOfTerms,put=PutNumberOfTerms))
    long NumberOfTerms;
    __declspec(property(get=GetX1Y0Cell))
    IEditorCellPtr X1Y0Cell;
    __declspec(property(get=GetX0Y1Cell))
    IEditorCellPtr X0Y1Cell;
    __declspec(property(get=GetX2Y0Cell))
    IEditorCellPtr X2Y0Cell;
    __declspec(property(get=GetX1Y1Cell))
    IEditorCellPtr X1Y1Cell;
    __declspec(property(get=GetX0Y2Cell))
    IEditorCellPtr X0Y2Cell;
    __declspec(property(get=GetX3Y0Cell))
    IEditorCellPtr X3Y0Cell;
    __declspec(property(get=GetX2Y1Cell))
    IEditorCellPtr X2Y1Cell;
    __declspec(property(get=GetX1Y2Cell))
    IEditorCellPtr X1Y2Cell;
    __declspec(property(get=GetX0Y3Cell))
    IEditorCellPtr X0Y3Cell;
    __declspec(property(get=GetX4Y0Cell))
    IEditorCellPtr X4Y0Cell;
    __declspec(property(get=GetX3Y1Cell))
    IEditorCellPtr X3Y1Cell;
    __declspec(property(get=GetX2Y2Cell))
    IEditorCellPtr X2Y2Cell;
    __declspec(property(get=GetX1Y3Cell))
    IEditorCellPtr X1Y3Cell;
    __declspec(property(get=GetX0Y4Cell))
    IEditorCellPtr X0Y4Cell;
    __declspec(property(get=GetX5Y0Cell))
    IEditorCellPtr X5Y0Cell;
    __declspec(property(get=GetX4Y1Cell))
    IEditorCellPtr X4Y1Cell;
    __declspec(property(get=GetX3Y2Cell))
    IEditorCellPtr X3Y2Cell;
    __declspec(property(get=GetX2Y3Cell))
    IEditorCellPtr X2Y3Cell;
    __declspec(property(get=GetX1Y4Cell))
    IEditorCellPtr X1Y4Cell;
    __declspec(property(get=GetX0Y5Cell))
    IEditorCellPtr X0Y5Cell;
    __declspec(property(get=GetX6Y0Cell))
    IEditorCellPtr X6Y0Cell;
    __declspec(property(get=GetX5Y1Cell))
    IEditorCellPtr X5Y1Cell;
    __declspec(property(get=GetX4Y2Cell))
    IEditorCellPtr X4Y2Cell;
    __declspec(property(get=GetX3Y3Cell))
    IEditorCellPtr X3Y3Cell;
    __declspec(property(get=GetX2Y4Cell))
    IEditorCellPtr X2Y4Cell;
    __declspec(property(get=GetX1Y5Cell))
    IEditorCellPtr X1Y5Cell;
    __declspec(property(get=GetX0Y6Cell))
    IEditorCellPtr X0Y6Cell;
    __declspec(property(get=GetX7Y0Cell))
    IEditorCellPtr X7Y0Cell;
    __declspec(property(get=GetX6Y1Cell))
    IEditorCellPtr X6Y1Cell;
    __declspec(property(get=GetX5Y2Cell))
    IEditorCellPtr X5Y2Cell;
    __declspec(property(get=GetX4Y3Cell))
    IEditorCellPtr X4Y3Cell;
    __declspec(property(get=GetX3Y4Cell))
    IEditorCellPtr X3Y4Cell;
    __declspec(property(get=GetX2Y5Cell))
    IEditorCellPtr X2Y5Cell;
    __declspec(property(get=GetX1Y6Cell))
    IEditorCellPtr X1Y6Cell;
    __declspec(property(get=GetX0Y7Cell))
    IEditorCellPtr X0Y7Cell;
    __declspec(property(get=GetX8Y0Cell))
    IEditorCellPtr X8Y0Cell;
    __declspec(property(get=GetX7Y1Cell))
    IEditorCellPtr X7Y1Cell;
    __declspec(property(get=GetX6Y2Cell))
    IEditorCellPtr X6Y2Cell;
    __declspec(property(get=GetX5Y3Cell))
    IEditorCellPtr X5Y3Cell;
    __declspec(property(get=GetX4Y4Cell))
    IEditorCellPtr X4Y4Cell;
    __declspec(property(get=GetX3Y5Cell))
    IEditorCellPtr X3Y5Cell;
    __declspec(property(get=GetX2Y6Cell))
    IEditorCellPtr X2Y6Cell;
    __declspec(property(get=GetX1Y7Cell))
    IEditorCellPtr X1Y7Cell;
    __declspec(property(get=GetX0Y8Cell))
    IEditorCellPtr X0Y8Cell;
    __declspec(property(get=GetX9Y0Cell))
    IEditorCellPtr X9Y0Cell;
    __declspec(property(get=GetX8Y1Cell))
    IEditorCellPtr X8Y1Cell;
    __declspec(property(get=GetX7Y2Cell))
    IEditorCellPtr X7Y2Cell;
    __declspec(property(get=GetX6Y3Cell))
    IEditorCellPtr X6Y3Cell;
    __declspec(property(get=GetX5Y4Cell))
    IEditorCellPtr X5Y4Cell;
    __declspec(property(get=GetX4Y5Cell))
    IEditorCellPtr X4Y5Cell;
    __declspec(property(get=GetX3Y6Cell))
    IEditorCellPtr X3Y6Cell;
    __declspec(property(get=GetX2Y7Cell))
    IEditorCellPtr X2Y7Cell;
    __declspec(property(get=GetX1Y8Cell))
    IEditorCellPtr X1Y8Cell;
    __declspec(property(get=GetX0Y9Cell))
    IEditorCellPtr X0Y9Cell;
    __declspec(property(get=GetX10Y0Cell))
    IEditorCellPtr X10Y0Cell;
    __declspec(property(get=GetX9Y1Cell))
    IEditorCellPtr X9Y1Cell;
    __declspec(property(get=GetX8Y2Cell))
    IEditorCellPtr X8Y2Cell;
    __declspec(property(get=GetX7Y3Cell))
    IEditorCellPtr X7Y3Cell;
    __declspec(property(get=GetX6Y4Cell))
    IEditorCellPtr X6Y4Cell;
    __declspec(property(get=GetX5Y5Cell))
    IEditorCellPtr X5Y5Cell;
    __declspec(property(get=GetX4Y6Cell))
    IEditorCellPtr X4Y6Cell;
    __declspec(property(get=GetX3Y7Cell))
    IEditorCellPtr X3Y7Cell;
    __declspec(property(get=GetX2Y8Cell))
    IEditorCellPtr X2Y8Cell;
    __declspec(property(get=GetX1Y9Cell))
    IEditorCellPtr X1Y9Cell;
    __declspec(property(get=GetX0Y10Cell))
    IEditorCellPtr X0Y10Cell;
    __declspec(property(get=GetX11Y0Cell))
    IEditorCellPtr X11Y0Cell;
    __declspec(property(get=GetX10Y1Cell))
    IEditorCellPtr X10Y1Cell;
    __declspec(property(get=GetX9Y2Cell))
    IEditorCellPtr X9Y2Cell;
    __declspec(property(get=GetX8Y3Cell))
    IEditorCellPtr X8Y3Cell;
    __declspec(property(get=GetX7Y4Cell))
    IEditorCellPtr X7Y4Cell;
    __declspec(property(get=GetX6Y5Cell))
    IEditorCellPtr X6Y5Cell;
    __declspec(property(get=GetX5Y6Cell))
    IEditorCellPtr X5Y6Cell;
    __declspec(property(get=GetX4Y7Cell))
    IEditorCellPtr X4Y7Cell;
    __declspec(property(get=GetX3Y8Cell))
    IEditorCellPtr X3Y8Cell;
    __declspec(property(get=GetX2Y9Cell))
    IEditorCellPtr X2Y9Cell;
    __declspec(property(get=GetX1Y10Cell))
    IEditorCellPtr X1Y10Cell;
    __declspec(property(get=GetX0Y11Cell))
    IEditorCellPtr X0Y11Cell;
    __declspec(property(get=GetX12Y0Cell))
    IEditorCellPtr X12Y0Cell;
    __declspec(property(get=GetX11Y1Cell))
    IEditorCellPtr X11Y1Cell;
    __declspec(property(get=GetX10Y2Cell))
    IEditorCellPtr X10Y2Cell;
    __declspec(property(get=GetX9Y3Cell))
    IEditorCellPtr X9Y3Cell;
    __declspec(property(get=GetX8Y4Cell))
    IEditorCellPtr X8Y4Cell;
    __declspec(property(get=GetX7Y5Cell))
    IEditorCellPtr X7Y5Cell;
    __declspec(property(get=GetX6Y6Cell))
    IEditorCellPtr X6Y6Cell;
    __declspec(property(get=GetX5Y7Cell))
    IEditorCellPtr X5Y7Cell;
    __declspec(property(get=GetX4Y8Cell))
    IEditorCellPtr X4Y8Cell;
    __declspec(property(get=GetX3Y9Cell))
    IEditorCellPtr X3Y9Cell;
    __declspec(property(get=GetX2Y10Cell))
    IEditorCellPtr X2Y10Cell;
    __declspec(property(get=GetX1Y11Cell))
    IEditorCellPtr X1Y11Cell;
    __declspec(property(get=GetX0Y12Cell))
    IEditorCellPtr X0Y12Cell;
    __declspec(property(get=GetX13Y0Cell))
    IEditorCellPtr X13Y0Cell;
    __declspec(property(get=GetX12Y1Cell))
    IEditorCellPtr X12Y1Cell;
    __declspec(property(get=GetX11Y2Cell))
    IEditorCellPtr X11Y2Cell;
    __declspec(property(get=GetX10Y3Cell))
    IEditorCellPtr X10Y3Cell;
    __declspec(property(get=GetX9Y4Cell))
    IEditorCellPtr X9Y4Cell;
    __declspec(property(get=GetX8Y5Cell))
    IEditorCellPtr X8Y5Cell;
    __declspec(property(get=GetX7Y6Cell))
    IEditorCellPtr X7Y6Cell;
    __declspec(property(get=GetX6Y7Cell))
    IEditorCellPtr X6Y7Cell;
    __declspec(property(get=GetX5Y8Cell))
    IEditorCellPtr X5Y8Cell;
    __declspec(property(get=GetX4Y9Cell))
    IEditorCellPtr X4Y9Cell;
    __declspec(property(get=GetX3Y10Cell))
    IEditorCellPtr X3Y10Cell;
    __declspec(property(get=GetX2Y11Cell))
    IEditorCellPtr X2Y11Cell;
    __declspec(property(get=GetX1Y12Cell))
    IEditorCellPtr X1Y12Cell;
    __declspec(property(get=GetX0Y13Cell))
    IEditorCellPtr X0Y13Cell;
    __declspec(property(get=GetX14Y0Cell))
    IEditorCellPtr X14Y0Cell;
    __declspec(property(get=GetX13Y1Cell))
    IEditorCellPtr X13Y1Cell;
    __declspec(property(get=GetX12Y2Cell))
    IEditorCellPtr X12Y2Cell;
    __declspec(property(get=GetX11Y3Cell))
    IEditorCellPtr X11Y3Cell;
    __declspec(property(get=GetX10Y4Cell))
    IEditorCellPtr X10Y4Cell;
    __declspec(property(get=GetX9Y5Cell))
    IEditorCellPtr X9Y5Cell;
    __declspec(property(get=GetX8Y6Cell))
    IEditorCellPtr X8Y6Cell;
    __declspec(property(get=GetX7Y7Cell))
    IEditorCellPtr X7Y7Cell;
    __declspec(property(get=GetX6Y8Cell))
    IEditorCellPtr X6Y8Cell;
    __declspec(property(get=GetX5Y9Cell))
    IEditorCellPtr X5Y9Cell;
    __declspec(property(get=GetX4Y10Cell))
    IEditorCellPtr X4Y10Cell;
    __declspec(property(get=GetX3Y11Cell))
    IEditorCellPtr X3Y11Cell;
    __declspec(property(get=GetX2Y12Cell))
    IEditorCellPtr X2Y12Cell;
    __declspec(property(get=GetX1Y13Cell))
    IEditorCellPtr X1Y13Cell;
    __declspec(property(get=GetX0Y14Cell))
    IEditorCellPtr X0Y14Cell;
    __declspec(property(get=GetX15Y0Cell))
    IEditorCellPtr X15Y0Cell;
    __declspec(property(get=GetX14Y1Cell))
    IEditorCellPtr X14Y1Cell;
    __declspec(property(get=GetX13Y2Cell))
    IEditorCellPtr X13Y2Cell;
    __declspec(property(get=GetX12Y3Cell))
    IEditorCellPtr X12Y3Cell;
    __declspec(property(get=GetX11Y4Cell))
    IEditorCellPtr X11Y4Cell;
    __declspec(property(get=GetX10Y5Cell))
    IEditorCellPtr X10Y5Cell;
    __declspec(property(get=GetX9Y6Cell))
    IEditorCellPtr X9Y6Cell;
    __declspec(property(get=GetX8Y7Cell))
    IEditorCellPtr X8Y7Cell;
    __declspec(property(get=GetX7Y8Cell))
    IEditorCellPtr X7Y8Cell;
    __declspec(property(get=GetX6Y9Cell))
    IEditorCellPtr X6Y9Cell;
    __declspec(property(get=GetX5Y10Cell))
    IEditorCellPtr X5Y10Cell;
    __declspec(property(get=GetX4Y11Cell))
    IEditorCellPtr X4Y11Cell;
    __declspec(property(get=GetX3Y12Cell))
    IEditorCellPtr X3Y12Cell;
    __declspec(property(get=GetX2Y13Cell))
    IEditorCellPtr X2Y13Cell;
    __declspec(property(get=GetX1Y14Cell))
    IEditorCellPtr X1Y14Cell;
    __declspec(property(get=GetX0Y15Cell))
    IEditorCellPtr X0Y15Cell;
    __declspec(property(get=GetX16Y0Cell))
    IEditorCellPtr X16Y0Cell;
    __declspec(property(get=GetX15Y1Cell))
    IEditorCellPtr X15Y1Cell;
    __declspec(property(get=GetX14Y2Cell))
    IEditorCellPtr X14Y2Cell;
    __declspec(property(get=GetX13Y3Cell))
    IEditorCellPtr X13Y3Cell;
    __declspec(property(get=GetX12Y4Cell))
    IEditorCellPtr X12Y4Cell;
    __declspec(property(get=GetX11Y5Cell))
    IEditorCellPtr X11Y5Cell;
    __declspec(property(get=GetX10Y6Cell))
    IEditorCellPtr X10Y6Cell;
    __declspec(property(get=GetX9Y7Cell))
    IEditorCellPtr X9Y7Cell;
    __declspec(property(get=GetX8Y8Cell))
    IEditorCellPtr X8Y8Cell;
    __declspec(property(get=GetX7Y9Cell))
    IEditorCellPtr X7Y9Cell;
    __declspec(property(get=GetX6Y10Cell))
    IEditorCellPtr X6Y10Cell;
    __declspec(property(get=GetX5Y11Cell))
    IEditorCellPtr X5Y11Cell;
    __declspec(property(get=GetX4Y12Cell))
    IEditorCellPtr X4Y12Cell;
    __declspec(property(get=GetX3Y13Cell))
    IEditorCellPtr X3Y13Cell;
    __declspec(property(get=GetX2Y14Cell))
    IEditorCellPtr X2Y14Cell;
    __declspec(property(get=GetX1Y15Cell))
    IEditorCellPtr X1Y15Cell;
    __declspec(property(get=GetX0Y16Cell))
    IEditorCellPtr X0Y16Cell;
    __declspec(property(get=GetX17Y0Cell))
    IEditorCellPtr X17Y0Cell;
    __declspec(property(get=GetX16Y1Cell))
    IEditorCellPtr X16Y1Cell;
    __declspec(property(get=GetX15Y2Cell))
    IEditorCellPtr X15Y2Cell;
    __declspec(property(get=GetX14Y3Cell))
    IEditorCellPtr X14Y3Cell;
    __declspec(property(get=GetX13Y4Cell))
    IEditorCellPtr X13Y4Cell;
    __declspec(property(get=GetX12Y5Cell))
    IEditorCellPtr X12Y5Cell;
    __declspec(property(get=GetX11Y6Cell))
    IEditorCellPtr X11Y6Cell;
    __declspec(property(get=GetX10Y7Cell))
    IEditorCellPtr X10Y7Cell;
    __declspec(property(get=GetX9Y8Cell))
    IEditorCellPtr X9Y8Cell;
    __declspec(property(get=GetX8Y9Cell))
    IEditorCellPtr X8Y9Cell;
    __declspec(property(get=GetX7Y10Cell))
    IEditorCellPtr X7Y10Cell;
    __declspec(property(get=GetX6Y11Cell))
    IEditorCellPtr X6Y11Cell;
    __declspec(property(get=GetX5Y12Cell))
    IEditorCellPtr X5Y12Cell;
    __declspec(property(get=GetX4Y13Cell))
    IEditorCellPtr X4Y13Cell;
    __declspec(property(get=GetX3Y14Cell))
    IEditorCellPtr X3Y14Cell;
    __declspec(property(get=GetX2Y15Cell))
    IEditorCellPtr X2Y15Cell;
    __declspec(property(get=GetX1Y16Cell))
    IEditorCellPtr X1Y16Cell;
    __declspec(property(get=GetX0Y17Cell))
    IEditorCellPtr X0Y17Cell;
    __declspec(property(get=GetX18Y0Cell))
    IEditorCellPtr X18Y0Cell;
    __declspec(property(get=GetX17Y1Cell))
    IEditorCellPtr X17Y1Cell;
    __declspec(property(get=GetX16Y2Cell))
    IEditorCellPtr X16Y2Cell;
    __declspec(property(get=GetX15Y3Cell))
    IEditorCellPtr X15Y3Cell;
    __declspec(property(get=GetX14Y4Cell))
    IEditorCellPtr X14Y4Cell;
    __declspec(property(get=GetX13Y5Cell))
    IEditorCellPtr X13Y5Cell;
    __declspec(property(get=GetX12Y6Cell))
    IEditorCellPtr X12Y6Cell;
    __declspec(property(get=GetX11Y7Cell))
    IEditorCellPtr X11Y7Cell;
    __declspec(property(get=GetX10Y8Cell))
    IEditorCellPtr X10Y8Cell;
    __declspec(property(get=GetX9Y9Cell))
    IEditorCellPtr X9Y9Cell;
    __declspec(property(get=GetX8Y10Cell))
    IEditorCellPtr X8Y10Cell;
    __declspec(property(get=GetX7Y11Cell))
    IEditorCellPtr X7Y11Cell;
    __declspec(property(get=GetX6Y12Cell))
    IEditorCellPtr X6Y12Cell;
    __declspec(property(get=GetX5Y13Cell))
    IEditorCellPtr X5Y13Cell;
    __declspec(property(get=GetX4Y14Cell))
    IEditorCellPtr X4Y14Cell;
    __declspec(property(get=GetX3Y15Cell))
    IEditorCellPtr X3Y15Cell;
    __declspec(property(get=GetX2Y16Cell))
    IEditorCellPtr X2Y16Cell;
    __declspec(property(get=GetX1Y17Cell))
    IEditorCellPtr X1Y17Cell;
    __declspec(property(get=GetX0Y18Cell))
    IEditorCellPtr X0Y18Cell;
    __declspec(property(get=GetX19Y0Cell))
    IEditorCellPtr X19Y0Cell;
    __declspec(property(get=GetX18Y1Cell))
    IEditorCellPtr X18Y1Cell;
    __declspec(property(get=GetX17Y2Cell))
    IEditorCellPtr X17Y2Cell;
    __declspec(property(get=GetX16Y3Cell))
    IEditorCellPtr X16Y3Cell;
    __declspec(property(get=GetX15Y4Cell))
    IEditorCellPtr X15Y4Cell;
    __declspec(property(get=GetX14Y5Cell))
    IEditorCellPtr X14Y5Cell;
    __declspec(property(get=GetX13Y6Cell))
    IEditorCellPtr X13Y6Cell;
    __declspec(property(get=GetX12Y7Cell))
    IEditorCellPtr X12Y7Cell;
    __declspec(property(get=GetX11Y8Cell))
    IEditorCellPtr X11Y8Cell;
    __declspec(property(get=GetX10Y9Cell))
    IEditorCellPtr X10Y9Cell;
    __declspec(property(get=GetX9Y10Cell))
    IEditorCellPtr X9Y10Cell;
    __declspec(property(get=GetX8Y11Cell))
    IEditorCellPtr X8Y11Cell;
    __declspec(property(get=GetX7Y12Cell))
    IEditorCellPtr X7Y12Cell;
    __declspec(property(get=GetX6Y13Cell))
    IEditorCellPtr X6Y13Cell;
    __declspec(property(get=GetX5Y14Cell))
    IEditorCellPtr X5Y14Cell;
    __declspec(property(get=GetX4Y15Cell))
    IEditorCellPtr X4Y15Cell;
    __declspec(property(get=GetX3Y16Cell))
    IEditorCellPtr X3Y16Cell;
    __declspec(property(get=GetX2Y17Cell))
    IEditorCellPtr X2Y17Cell;
    __declspec(property(get=GetX1Y18Cell))
    IEditorCellPtr X1Y18Cell;
    __declspec(property(get=GetX0Y19Cell))
    IEditorCellPtr X0Y19Cell;
    __declspec(property(get=GetX20Y0Cell))
    IEditorCellPtr X20Y0Cell;
    __declspec(property(get=GetX19Y1Cell))
    IEditorCellPtr X19Y1Cell;
    __declspec(property(get=GetX18Y2Cell))
    IEditorCellPtr X18Y2Cell;
    __declspec(property(get=GetX17Y3Cell))
    IEditorCellPtr X17Y3Cell;
    __declspec(property(get=GetX16Y4Cell))
    IEditorCellPtr X16Y4Cell;
    __declspec(property(get=GetX15Y5Cell))
    IEditorCellPtr X15Y5Cell;
    __declspec(property(get=GetX14Y6Cell))
    IEditorCellPtr X14Y6Cell;
    __declspec(property(get=GetX13Y7Cell))
    IEditorCellPtr X13Y7Cell;
    __declspec(property(get=GetX12Y8Cell))
    IEditorCellPtr X12Y8Cell;
    __declspec(property(get=GetX11Y9Cell))
    IEditorCellPtr X11Y9Cell;
    __declspec(property(get=GetX10Y10Cell))
    IEditorCellPtr X10Y10Cell;
    __declspec(property(get=GetX9Y11Cell))
    IEditorCellPtr X9Y11Cell;
    __declspec(property(get=GetX8Y12Cell))
    IEditorCellPtr X8Y12Cell;
    __declspec(property(get=GetX7Y13Cell))
    IEditorCellPtr X7Y13Cell;
    __declspec(property(get=GetX6Y14Cell))
    IEditorCellPtr X6Y14Cell;
    __declspec(property(get=GetX5Y15Cell))
    IEditorCellPtr X5Y15Cell;
    __declspec(property(get=GetX4Y16Cell))
    IEditorCellPtr X4Y16Cell;
    __declspec(property(get=GetX3Y17Cell))
    IEditorCellPtr X3Y17Cell;
    __declspec(property(get=GetX2Y18Cell))
    IEditorCellPtr X2Y18Cell;
    __declspec(property(get=GetX1Y19Cell))
    IEditorCellPtr X1Y19Cell;
    __declspec(property(get=GetX0Y20Cell))
    IEditorCellPtr X0Y20Cell;
    __declspec(property(get=GetX21Y0Cell))
    IEditorCellPtr X21Y0Cell;
    __declspec(property(get=GetX20Y1Cell))
    IEditorCellPtr X20Y1Cell;
    __declspec(property(get=GetX19Y2Cell))
    IEditorCellPtr X19Y2Cell;
    __declspec(property(get=GetX18Y3Cell))
    IEditorCellPtr X18Y3Cell;
    __declspec(property(get=GetX17Y4Cell))
    IEditorCellPtr X17Y4Cell;
    __declspec(property(get=GetX16Y5Cell))
    IEditorCellPtr X16Y5Cell;
    __declspec(property(get=GetX15Y6Cell))
    IEditorCellPtr X15Y6Cell;
    __declspec(property(get=GetX14Y7Cell))
    IEditorCellPtr X14Y7Cell;
    __declspec(property(get=GetX13Y8Cell))
    IEditorCellPtr X13Y8Cell;
    __declspec(property(get=GetX12Y9Cell))
    IEditorCellPtr X12Y9Cell;
    __declspec(property(get=GetX11Y10Cell))
    IEditorCellPtr X11Y10Cell;
    __declspec(property(get=GetX10Y11Cell))
    IEditorCellPtr X10Y11Cell;
    __declspec(property(get=GetX9Y12Cell))
    IEditorCellPtr X9Y12Cell;
    __declspec(property(get=GetX8Y13Cell))
    IEditorCellPtr X8Y13Cell;
    __declspec(property(get=GetX7Y14Cell))
    IEditorCellPtr X7Y14Cell;
    __declspec(property(get=GetX6Y15Cell))
    IEditorCellPtr X6Y15Cell;
    __declspec(property(get=GetX5Y16Cell))
    IEditorCellPtr X5Y16Cell;
    __declspec(property(get=GetX4Y17Cell))
    IEditorCellPtr X4Y17Cell;
    __declspec(property(get=GetX3Y18Cell))
    IEditorCellPtr X3Y18Cell;
    __declspec(property(get=GetX2Y19Cell))
    IEditorCellPtr X2Y19Cell;
    __declspec(property(get=GetX1Y0,put=PutX1Y0))
    double X1Y0;
    __declspec(property(get=GetX0Y1,put=PutX0Y1))
    double X0Y1;
    __declspec(property(get=GetX2Y0,put=PutX2Y0))
    double X2Y0;
    __declspec(property(get=GetX1Y1,put=PutX1Y1))
    double X1Y1;
    __declspec(property(get=GetX0Y2,put=PutX0Y2))
    double X0Y2;
    __declspec(property(get=GetX3Y0,put=PutX3Y0))
    double X3Y0;
    __declspec(property(get=GetX2Y1,put=PutX2Y1))
    double X2Y1;
    __declspec(property(get=GetX1Y2,put=PutX1Y2))
    double X1Y2;
    __declspec(property(get=GetX0Y3,put=PutX0Y3))
    double X0Y3;
    __declspec(property(get=GetX4Y0,put=PutX4Y0))
    double X4Y0;
    __declspec(property(get=GetX3Y1,put=PutX3Y1))
    double X3Y1;
    __declspec(property(get=GetX2Y2,put=PutX2Y2))
    double X2Y2;
    __declspec(property(get=GetX1Y3,put=PutX1Y3))
    double X1Y3;
    __declspec(property(get=GetX0Y4,put=PutX0Y4))
    double X0Y4;
    __declspec(property(get=GetX5Y0,put=PutX5Y0))
    double X5Y0;
    __declspec(property(get=GetX4Y1,put=PutX4Y1))
    double X4Y1;
    __declspec(property(get=GetX3Y2,put=PutX3Y2))
    double X3Y2;
    __declspec(property(get=GetX2Y3,put=PutX2Y3))
    double X2Y3;
    __declspec(property(get=GetX1Y4,put=PutX1Y4))
    double X1Y4;
    __declspec(property(get=GetX0Y5,put=PutX0Y5))
    double X0Y5;
    __declspec(property(get=GetX6Y0,put=PutX6Y0))
    double X6Y0;
    __declspec(property(get=GetX5Y1,put=PutX5Y1))
    double X5Y1;
    __declspec(property(get=GetX4Y2,put=PutX4Y2))
    double X4Y2;
    __declspec(property(get=GetX3Y3,put=PutX3Y3))
    double X3Y3;
    __declspec(property(get=GetX2Y4,put=PutX2Y4))
    double X2Y4;
    __declspec(property(get=GetX1Y5,put=PutX1Y5))
    double X1Y5;
    __declspec(property(get=GetX0Y6,put=PutX0Y6))
    double X0Y6;
    __declspec(property(get=GetX7Y0,put=PutX7Y0))
    double X7Y0;
    __declspec(property(get=GetX6Y1,put=PutX6Y1))
    double X6Y1;
    __declspec(property(get=GetX5Y2,put=PutX5Y2))
    double X5Y2;
    __declspec(property(get=GetX4Y3,put=PutX4Y3))
    double X4Y3;
    __declspec(property(get=GetX3Y4,put=PutX3Y4))
    double X3Y4;
    __declspec(property(get=GetX2Y5,put=PutX2Y5))
    double X2Y5;
    __declspec(property(get=GetX1Y6,put=PutX1Y6))
    double X1Y6;
    __declspec(property(get=GetX0Y7,put=PutX0Y7))
    double X0Y7;
    __declspec(property(get=GetX8Y0,put=PutX8Y0))
    double X8Y0;
    __declspec(property(get=GetX7Y1,put=PutX7Y1))
    double X7Y1;
    __declspec(property(get=GetX6Y2,put=PutX6Y2))
    double X6Y2;
    __declspec(property(get=GetX5Y3,put=PutX5Y3))
    double X5Y3;
    __declspec(property(get=GetX4Y4,put=PutX4Y4))
    double X4Y4;
    __declspec(property(get=GetX3Y5,put=PutX3Y5))
    double X3Y5;
    __declspec(property(get=GetX2Y6,put=PutX2Y6))
    double X2Y6;
    __declspec(property(get=GetX1Y7,put=PutX1Y7))
    double X1Y7;
    __declspec(property(get=GetX0Y8,put=PutX0Y8))
    double X0Y8;
    __declspec(property(get=GetX9Y0,put=PutX9Y0))
    double X9Y0;
    __declspec(property(get=GetX8Y1,put=PutX8Y1))
    double X8Y1;
    __declspec(property(get=GetX7Y2,put=PutX7Y2))
    double X7Y2;
    __declspec(property(get=GetX6Y3,put=PutX6Y3))
    double X6Y3;
    __declspec(property(get=GetX5Y4,put=PutX5Y4))
    double X5Y4;
    __declspec(property(get=GetX4Y5,put=PutX4Y5))
    double X4Y5;
    __declspec(property(get=GetX3Y6,put=PutX3Y6))
    double X3Y6;
    __declspec(property(get=GetX2Y7,put=PutX2Y7))
    double X2Y7;
    __declspec(property(get=GetX1Y8,put=PutX1Y8))
    double X1Y8;
    __declspec(property(get=GetX0Y9,put=PutX0Y9))
    double X0Y9;
    __declspec(property(get=GetX10Y0,put=PutX10Y0))
    double X10Y0;
    __declspec(property(get=GetX9Y1,put=PutX9Y1))
    double X9Y1;
    __declspec(property(get=GetX8Y2,put=PutX8Y2))
    double X8Y2;
    __declspec(property(get=GetX7Y3,put=PutX7Y3))
    double X7Y3;
    __declspec(property(get=GetX6Y4,put=PutX6Y4))
    double X6Y4;
    __declspec(property(get=GetX5Y5,put=PutX5Y5))
    double X5Y5;
    __declspec(property(get=GetX4Y6,put=PutX4Y6))
    double X4Y6;
    __declspec(property(get=GetX3Y7,put=PutX3Y7))
    double X3Y7;
    __declspec(property(get=GetX2Y8,put=PutX2Y8))
    double X2Y8;
    __declspec(property(get=GetX1Y9,put=PutX1Y9))
    double X1Y9;
    __declspec(property(get=GetX0Y10,put=PutX0Y10))
    double X0Y10;
    __declspec(property(get=GetX11Y0,put=PutX11Y0))
    double X11Y0;
    __declspec(property(get=GetX10Y1,put=PutX10Y1))
    double X10Y1;
    __declspec(property(get=GetX9Y2,put=PutX9Y2))
    double X9Y2;
    __declspec(property(get=GetX8Y3,put=PutX8Y3))
    double X8Y3;
    __declspec(property(get=GetX7Y4,put=PutX7Y4))
    double X7Y4;
    __declspec(property(get=GetX6Y5,put=PutX6Y5))
    double X6Y5;
    __declspec(property(get=GetX5Y6,put=PutX5Y6))
    double X5Y6;
    __declspec(property(get=GetX4Y7,put=PutX4Y7))
    double X4Y7;
    __declspec(property(get=GetX3Y8,put=PutX3Y8))
    double X3Y8;
    __declspec(property(get=GetX2Y9,put=PutX2Y9))
    double X2Y9;
    __declspec(property(get=GetX1Y10,put=PutX1Y10))
    double X1Y10;
    __declspec(property(get=GetX0Y11,put=PutX0Y11))
    double X0Y11;
    __declspec(property(get=GetX12Y0,put=PutX12Y0))
    double X12Y0;
    __declspec(property(get=GetX11Y1,put=PutX11Y1))
    double X11Y1;
    __declspec(property(get=GetX10Y2,put=PutX10Y2))
    double X10Y2;
    __declspec(property(get=GetX9Y3,put=PutX9Y3))
    double X9Y3;
    __declspec(property(get=GetX8Y4,put=PutX8Y4))
    double X8Y4;
    __declspec(property(get=GetX7Y5,put=PutX7Y5))
    double X7Y5;
    __declspec(property(get=GetX6Y6,put=PutX6Y6))
    double X6Y6;
    __declspec(property(get=GetX5Y7,put=PutX5Y7))
    double X5Y7;
    __declspec(property(get=GetX4Y8,put=PutX4Y8))
    double X4Y8;
    __declspec(property(get=GetX3Y9,put=PutX3Y9))
    double X3Y9;
    __declspec(property(get=GetX2Y10,put=PutX2Y10))
    double X2Y10;
    __declspec(property(get=GetX1Y11,put=PutX1Y11))
    double X1Y11;
    __declspec(property(get=GetX0Y12,put=PutX0Y12))
    double X0Y12;
    __declspec(property(get=GetX13Y0,put=PutX13Y0))
    double X13Y0;
    __declspec(property(get=GetX12Y1,put=PutX12Y1))
    double X12Y1;
    __declspec(property(get=GetX11Y2,put=PutX11Y2))
    double X11Y2;
    __declspec(property(get=GetX10Y3,put=PutX10Y3))
    double X10Y3;
    __declspec(property(get=GetX9Y4,put=PutX9Y4))
    double X9Y4;
    __declspec(property(get=GetX8Y5,put=PutX8Y5))
    double X8Y5;
    __declspec(property(get=GetX7Y6,put=PutX7Y6))
    double X7Y6;
    __declspec(property(get=GetX6Y7,put=PutX6Y7))
    double X6Y7;
    __declspec(property(get=GetX5Y8,put=PutX5Y8))
    double X5Y8;
    __declspec(property(get=GetX4Y9,put=PutX4Y9))
    double X4Y9;
    __declspec(property(get=GetX3Y10,put=PutX3Y10))
    double X3Y10;
    __declspec(property(get=GetX2Y11,put=PutX2Y11))
    double X2Y11;
    __declspec(property(get=GetX1Y12,put=PutX1Y12))
    double X1Y12;
    __declspec(property(get=GetX0Y13,put=PutX0Y13))
    double X0Y13;
    __declspec(property(get=GetX14Y0,put=PutX14Y0))
    double X14Y0;
    __declspec(property(get=GetX13Y1,put=PutX13Y1))
    double X13Y1;
    __declspec(property(get=GetX12Y2,put=PutX12Y2))
    double X12Y2;
    __declspec(property(get=GetX11Y3,put=PutX11Y3))
    double X11Y3;
    __declspec(property(get=GetX10Y4,put=PutX10Y4))
    double X10Y4;
    __declspec(property(get=GetX9Y5,put=PutX9Y5))
    double X9Y5;
    __declspec(property(get=GetX8Y6,put=PutX8Y6))
    double X8Y6;
    __declspec(property(get=GetX7Y7,put=PutX7Y7))
    double X7Y7;
    __declspec(property(get=GetX6Y8,put=PutX6Y8))
    double X6Y8;
    __declspec(property(get=GetX5Y9,put=PutX5Y9))
    double X5Y9;
    __declspec(property(get=GetX4Y10,put=PutX4Y10))
    double X4Y10;
    __declspec(property(get=GetX3Y11,put=PutX3Y11))
    double X3Y11;
    __declspec(property(get=GetX2Y12,put=PutX2Y12))
    double X2Y12;
    __declspec(property(get=GetX1Y13,put=PutX1Y13))
    double X1Y13;
    __declspec(property(get=GetX0Y14,put=PutX0Y14))
    double X0Y14;
    __declspec(property(get=GetX15Y0,put=PutX15Y0))
    double X15Y0;
    __declspec(property(get=GetX14Y1,put=PutX14Y1))
    double X14Y1;
    __declspec(property(get=GetX13Y2,put=PutX13Y2))
    double X13Y2;
    __declspec(property(get=GetX12Y3,put=PutX12Y3))
    double X12Y3;
    __declspec(property(get=GetX11Y4,put=PutX11Y4))
    double X11Y4;
    __declspec(property(get=GetX10Y5,put=PutX10Y5))
    double X10Y5;
    __declspec(property(get=GetX9Y6,put=PutX9Y6))
    double X9Y6;
    __declspec(property(get=GetX8Y7,put=PutX8Y7))
    double X8Y7;
    __declspec(property(get=GetX7Y8,put=PutX7Y8))
    double X7Y8;
    __declspec(property(get=GetX6Y9,put=PutX6Y9))
    double X6Y9;
    __declspec(property(get=GetX5Y10,put=PutX5Y10))
    double X5Y10;
    __declspec(property(get=GetX4Y11,put=PutX4Y11))
    double X4Y11;
    __declspec(property(get=GetX3Y12,put=PutX3Y12))
    double X3Y12;
    __declspec(property(get=GetX2Y13,put=PutX2Y13))
    double X2Y13;
    __declspec(property(get=GetX1Y14,put=PutX1Y14))
    double X1Y14;
    __declspec(property(get=GetX0Y15,put=PutX0Y15))
    double X0Y15;
    __declspec(property(get=GetX16Y0,put=PutX16Y0))
    double X16Y0;
    __declspec(property(get=GetX15Y1,put=PutX15Y1))
    double X15Y1;
    __declspec(property(get=GetX14Y2,put=PutX14Y2))
    double X14Y2;
    __declspec(property(get=GetX13Y3,put=PutX13Y3))
    double X13Y3;
    __declspec(property(get=GetX12Y4,put=PutX12Y4))
    double X12Y4;
    __declspec(property(get=GetX11Y5,put=PutX11Y5))
    double X11Y5;
    __declspec(property(get=GetX10Y6,put=PutX10Y6))
    double X10Y6;
    __declspec(property(get=GetX9Y7,put=PutX9Y7))
    double X9Y7;
    __declspec(property(get=GetX8Y8,put=PutX8Y8))
    double X8Y8;
    __declspec(property(get=GetX7Y9,put=PutX7Y9))
    double X7Y9;
    __declspec(property(get=GetX6Y10,put=PutX6Y10))
    double X6Y10;
    __declspec(property(get=GetX5Y11,put=PutX5Y11))
    double X5Y11;
    __declspec(property(get=GetX4Y12,put=PutX4Y12))
    double X4Y12;
    __declspec(property(get=GetX3Y13,put=PutX3Y13))
    double X3Y13;
    __declspec(property(get=GetX2Y14,put=PutX2Y14))
    double X2Y14;
    __declspec(property(get=GetX1Y15,put=PutX1Y15))
    double X1Y15;
    __declspec(property(get=GetX0Y16,put=PutX0Y16))
    double X0Y16;
    __declspec(property(get=GetX17Y0,put=PutX17Y0))
    double X17Y0;
    __declspec(property(get=GetX16Y1,put=PutX16Y1))
    double X16Y1;
    __declspec(property(get=GetX15Y2,put=PutX15Y2))
    double X15Y2;
    __declspec(property(get=GetX14Y3,put=PutX14Y3))
    double X14Y3;
    __declspec(property(get=GetX13Y4,put=PutX13Y4))
    double X13Y4;
    __declspec(property(get=GetX12Y5,put=PutX12Y5))
    double X12Y5;
    __declspec(property(get=GetX11Y6,put=PutX11Y6))
    double X11Y6;
    __declspec(property(get=GetX10Y7,put=PutX10Y7))
    double X10Y7;
    __declspec(property(get=GetX9Y8,put=PutX9Y8))
    double X9Y8;
    __declspec(property(get=GetX8Y9,put=PutX8Y9))
    double X8Y9;
    __declspec(property(get=GetX7Y10,put=PutX7Y10))
    double X7Y10;
    __declspec(property(get=GetX6Y11,put=PutX6Y11))
    double X6Y11;
    __declspec(property(get=GetX5Y12,put=PutX5Y12))
    double X5Y12;
    __declspec(property(get=GetX4Y13,put=PutX4Y13))
    double X4Y13;
    __declspec(property(get=GetX3Y14,put=PutX3Y14))
    double X3Y14;
    __declspec(property(get=GetX2Y15,put=PutX2Y15))
    double X2Y15;
    __declspec(property(get=GetX1Y16,put=PutX1Y16))
    double X1Y16;
    __declspec(property(get=GetX0Y17,put=PutX0Y17))
    double X0Y17;
    __declspec(property(get=GetX18Y0,put=PutX18Y0))
    double X18Y0;
    __declspec(property(get=GetX17Y1,put=PutX17Y1))
    double X17Y1;
    __declspec(property(get=GetX16Y2,put=PutX16Y2))
    double X16Y2;
    __declspec(property(get=GetX15Y3,put=PutX15Y3))
    double X15Y3;
    __declspec(property(get=GetX14Y4,put=PutX14Y4))
    double X14Y4;
    __declspec(property(get=GetX13Y5,put=PutX13Y5))
    double X13Y5;
    __declspec(property(get=GetX12Y6,put=PutX12Y6))
    double X12Y6;
    __declspec(property(get=GetX11Y7,put=PutX11Y7))
    double X11Y7;
    __declspec(property(get=GetX10Y8,put=PutX10Y8))
    double X10Y8;
    __declspec(property(get=GetX9Y9,put=PutX9Y9))
    double X9Y9;
    __declspec(property(get=GetX8Y10,put=PutX8Y10))
    double X8Y10;
    __declspec(property(get=GetX7Y11,put=PutX7Y11))
    double X7Y11;
    __declspec(property(get=GetX6Y12,put=PutX6Y12))
    double X6Y12;
    __declspec(property(get=GetX5Y13,put=PutX5Y13))
    double X5Y13;
    __declspec(property(get=GetX4Y14,put=PutX4Y14))
    double X4Y14;
    __declspec(property(get=GetX3Y15,put=PutX3Y15))
    double X3Y15;
    __declspec(property(get=GetX2Y16,put=PutX2Y16))
    double X2Y16;
    __declspec(property(get=GetX1Y17,put=PutX1Y17))
    double X1Y17;
    __declspec(property(get=GetX0Y18,put=PutX0Y18))
    double X0Y18;
    __declspec(property(get=GetX19Y0,put=PutX19Y0))
    double X19Y0;
    __declspec(property(get=GetX18Y1,put=PutX18Y1))
    double X18Y1;
    __declspec(property(get=GetX17Y2,put=PutX17Y2))
    double X17Y2;
    __declspec(property(get=GetX16Y3,put=PutX16Y3))
    double X16Y3;
    __declspec(property(get=GetX15Y4,put=PutX15Y4))
    double X15Y4;
    __declspec(property(get=GetX14Y5,put=PutX14Y5))
    double X14Y5;
    __declspec(property(get=GetX13Y6,put=PutX13Y6))
    double X13Y6;
    __declspec(property(get=GetX12Y7,put=PutX12Y7))
    double X12Y7;
    __declspec(property(get=GetX11Y8,put=PutX11Y8))
    double X11Y8;
    __declspec(property(get=GetX10Y9,put=PutX10Y9))
    double X10Y9;
    __declspec(property(get=GetX9Y10,put=PutX9Y10))
    double X9Y10;
    __declspec(property(get=GetX8Y11,put=PutX8Y11))
    double X8Y11;
    __declspec(property(get=GetX7Y12,put=PutX7Y12))
    double X7Y12;
    __declspec(property(get=GetX6Y13,put=PutX6Y13))
    double X6Y13;
    __declspec(property(get=GetX5Y14,put=PutX5Y14))
    double X5Y14;
    __declspec(property(get=GetX4Y15,put=PutX4Y15))
    double X4Y15;
    __declspec(property(get=GetX3Y16,put=PutX3Y16))
    double X3Y16;
    __declspec(property(get=GetX2Y17,put=PutX2Y17))
    double X2Y17;
    __declspec(property(get=GetX1Y18,put=PutX1Y18))
    double X1Y18;
    __declspec(property(get=GetX0Y19,put=PutX0Y19))
    double X0Y19;
    __declspec(property(get=GetX20Y0,put=PutX20Y0))
    double X20Y0;
    __declspec(property(get=GetX19Y1,put=PutX19Y1))
    double X19Y1;
    __declspec(property(get=GetX18Y2,put=PutX18Y2))
    double X18Y2;
    __declspec(property(get=GetX17Y3,put=PutX17Y3))
    double X17Y3;
    __declspec(property(get=GetX16Y4,put=PutX16Y4))
    double X16Y4;
    __declspec(property(get=GetX15Y5,put=PutX15Y5))
    double X15Y5;
    __declspec(property(get=GetX14Y6,put=PutX14Y6))
    double X14Y6;
    __declspec(property(get=GetX13Y7,put=PutX13Y7))
    double X13Y7;
    __declspec(property(get=GetX12Y8,put=PutX12Y8))
    double X12Y8;
    __declspec(property(get=GetX11Y9,put=PutX11Y9))
    double X11Y9;
    __declspec(property(get=GetX10Y10,put=PutX10Y10))
    double X10Y10;
    __declspec(property(get=GetX9Y11,put=PutX9Y11))
    double X9Y11;
    __declspec(property(get=GetX8Y12,put=PutX8Y12))
    double X8Y12;
    __declspec(property(get=GetX7Y13,put=PutX7Y13))
    double X7Y13;
    __declspec(property(get=GetX6Y14,put=PutX6Y14))
    double X6Y14;
    __declspec(property(get=GetX5Y15,put=PutX5Y15))
    double X5Y15;
    __declspec(property(get=GetX4Y16,put=PutX4Y16))
    double X4Y16;
    __declspec(property(get=GetX3Y17,put=PutX3Y17))
    double X3Y17;
    __declspec(property(get=GetX2Y18,put=PutX2Y18))
    double X2Y18;
    __declspec(property(get=GetX1Y19,put=PutX1Y19))
    double X1Y19;
    __declspec(property(get=GetX0Y20,put=PutX0Y20))
    double X0Y20;
    __declspec(property(get=GetX21Y0,put=PutX21Y0))
    double X21Y0;
    __declspec(property(get=GetX20Y1,put=PutX20Y1))
    double X20Y1;
    __declspec(property(get=GetX19Y2,put=PutX19Y2))
    double X19Y2;
    __declspec(property(get=GetX18Y3,put=PutX18Y3))
    double X18Y3;
    __declspec(property(get=GetX17Y4,put=PutX17Y4))
    double X17Y4;
    __declspec(property(get=GetX16Y5,put=PutX16Y5))
    double X16Y5;
    __declspec(property(get=GetX15Y6,put=PutX15Y6))
    double X15Y6;
    __declspec(property(get=GetX14Y7,put=PutX14Y7))
    double X14Y7;
    __declspec(property(get=GetX13Y8,put=PutX13Y8))
    double X13Y8;
    __declspec(property(get=GetX12Y9,put=PutX12Y9))
    double X12Y9;
    __declspec(property(get=GetX11Y10,put=PutX11Y10))
    double X11Y10;
    __declspec(property(get=GetX10Y11,put=PutX10Y11))
    double X10Y11;
    __declspec(property(get=GetX9Y12,put=PutX9Y12))
    double X9Y12;
    __declspec(property(get=GetX8Y13,put=PutX8Y13))
    double X8Y13;
    __declspec(property(get=GetX7Y14,put=PutX7Y14))
    double X7Y14;
    __declspec(property(get=GetX6Y15,put=PutX6Y15))
    double X6Y15;
    __declspec(property(get=GetX5Y16,put=PutX5Y16))
    double X5Y16;
    __declspec(property(get=GetX4Y17,put=PutX4Y17))
    double X4Y17;
    __declspec(property(get=GetX3Y18,put=PutX3Y18))
    double X3Y18;
    __declspec(property(get=GetX2Y19,put=PutX2Y19))
    double X2Y19;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetNumberOfTermsCell ( );
    long GetNumberOfTerms ( );
    void PutNumberOfTerms (
        long pRetVal );
    IEditorCellPtr GetX1Y0Cell ( );
    IEditorCellPtr GetX0Y1Cell ( );
    IEditorCellPtr GetX2Y0Cell ( );
    IEditorCellPtr GetX1Y1Cell ( );
    IEditorCellPtr GetX0Y2Cell ( );
    IEditorCellPtr GetX3Y0Cell ( );
    IEditorCellPtr GetX2Y1Cell ( );
    IEditorCellPtr GetX1Y2Cell ( );
    IEditorCellPtr GetX0Y3Cell ( );
    IEditorCellPtr GetX4Y0Cell ( );
    IEditorCellPtr GetX3Y1Cell ( );
    IEditorCellPtr GetX2Y2Cell ( );
    IEditorCellPtr GetX1Y3Cell ( );
    IEditorCellPtr GetX0Y4Cell ( );
    IEditorCellPtr GetX5Y0Cell ( );
    IEditorCellPtr GetX4Y1Cell ( );
    IEditorCellPtr GetX3Y2Cell ( );
    IEditorCellPtr GetX2Y3Cell ( );
    IEditorCellPtr GetX1Y4Cell ( );
    IEditorCellPtr GetX0Y5Cell ( );
    IEditorCellPtr GetX6Y0Cell ( );
    IEditorCellPtr GetX5Y1Cell ( );
    IEditorCellPtr GetX4Y2Cell ( );
    IEditorCellPtr GetX3Y3Cell ( );
    IEditorCellPtr GetX2Y4Cell ( );
    IEditorCellPtr GetX1Y5Cell ( );
    IEditorCellPtr GetX0Y6Cell ( );
    IEditorCellPtr GetX7Y0Cell ( );
    IEditorCellPtr GetX6Y1Cell ( );
    IEditorCellPtr GetX5Y2Cell ( );
    IEditorCellPtr GetX4Y3Cell ( );
    IEditorCellPtr GetX3Y4Cell ( );
    IEditorCellPtr GetX2Y5Cell ( );
    IEditorCellPtr GetX1Y6Cell ( );
    IEditorCellPtr GetX0Y7Cell ( );
    IEditorCellPtr GetX8Y0Cell ( );
    IEditorCellPtr GetX7Y1Cell ( );
    IEditorCellPtr GetX6Y2Cell ( );
    IEditorCellPtr GetX5Y3Cell ( );
    IEditorCellPtr GetX4Y4Cell ( );
    IEditorCellPtr GetX3Y5Cell ( );
    IEditorCellPtr GetX2Y6Cell ( );
    IEditorCellPtr GetX1Y7Cell ( );
    IEditorCellPtr GetX0Y8Cell ( );
    IEditorCellPtr GetX9Y0Cell ( );
    IEditorCellPtr GetX8Y1Cell ( );
    IEditorCellPtr GetX7Y2Cell ( );
    IEditorCellPtr GetX6Y3Cell ( );
    IEditorCellPtr GetX5Y4Cell ( );
    IEditorCellPtr GetX4Y5Cell ( );
    IEditorCellPtr GetX3Y6Cell ( );
    IEditorCellPtr GetX2Y7Cell ( );
    IEditorCellPtr GetX1Y8Cell ( );
    IEditorCellPtr GetX0Y9Cell ( );
    IEditorCellPtr GetX10Y0Cell ( );
    IEditorCellPtr GetX9Y1Cell ( );
    IEditorCellPtr GetX8Y2Cell ( );
    IEditorCellPtr GetX7Y3Cell ( );
    IEditorCellPtr GetX6Y4Cell ( );
    IEditorCellPtr GetX5Y5Cell ( );
    IEditorCellPtr GetX4Y6Cell ( );
    IEditorCellPtr GetX3Y7Cell ( );
    IEditorCellPtr GetX2Y8Cell ( );
    IEditorCellPtr GetX1Y9Cell ( );
    IEditorCellPtr GetX0Y10Cell ( );
    IEditorCellPtr GetX11Y0Cell ( );
    IEditorCellPtr GetX10Y1Cell ( );
    IEditorCellPtr GetX9Y2Cell ( );
    IEditorCellPtr GetX8Y3Cell ( );
    IEditorCellPtr GetX7Y4Cell ( );
    IEditorCellPtr GetX6Y5Cell ( );
    IEditorCellPtr GetX5Y6Cell ( );
    IEditorCellPtr GetX4Y7Cell ( );
    IEditorCellPtr GetX3Y8Cell ( );
    IEditorCellPtr GetX2Y9Cell ( );
    IEditorCellPtr GetX1Y10Cell ( );
    IEditorCellPtr GetX0Y11Cell ( );
    IEditorCellPtr GetX12Y0Cell ( );
    IEditorCellPtr GetX11Y1Cell ( );
    IEditorCellPtr GetX10Y2Cell ( );
    IEditorCellPtr GetX9Y3Cell ( );
    IEditorCellPtr GetX8Y4Cell ( );
    IEditorCellPtr GetX7Y5Cell ( );
    IEditorCellPtr GetX6Y6Cell ( );
    IEditorCellPtr GetX5Y7Cell ( );
    IEditorCellPtr GetX4Y8Cell ( );
    IEditorCellPtr GetX3Y9Cell ( );
    IEditorCellPtr GetX2Y10Cell ( );
    IEditorCellPtr GetX1Y11Cell ( );
    IEditorCellPtr GetX0Y12Cell ( );
    IEditorCellPtr GetX13Y0Cell ( );
    IEditorCellPtr GetX12Y1Cell ( );
    IEditorCellPtr GetX11Y2Cell ( );
    IEditorCellPtr GetX10Y3Cell ( );
    IEditorCellPtr GetX9Y4Cell ( );
    IEditorCellPtr GetX8Y5Cell ( );
    IEditorCellPtr GetX7Y6Cell ( );
    IEditorCellPtr GetX6Y7Cell ( );
    IEditorCellPtr GetX5Y8Cell ( );
    IEditorCellPtr GetX4Y9Cell ( );
    IEditorCellPtr GetX3Y10Cell ( );
    IEditorCellPtr GetX2Y11Cell ( );
    IEditorCellPtr GetX1Y12Cell ( );
    IEditorCellPtr GetX0Y13Cell ( );
    IEditorCellPtr GetX14Y0Cell ( );
    IEditorCellPtr GetX13Y1Cell ( );
    IEditorCellPtr GetX12Y2Cell ( );
    IEditorCellPtr GetX11Y3Cell ( );
    IEditorCellPtr GetX10Y4Cell ( );
    IEditorCellPtr GetX9Y5Cell ( );
    IEditorCellPtr GetX8Y6Cell ( );
    IEditorCellPtr GetX7Y7Cell ( );
    IEditorCellPtr GetX6Y8Cell ( );
    IEditorCellPtr GetX5Y9Cell ( );
    IEditorCellPtr GetX4Y10Cell ( );
    IEditorCellPtr GetX3Y11Cell ( );
    IEditorCellPtr GetX2Y12Cell ( );
    IEditorCellPtr GetX1Y13Cell ( );
    IEditorCellPtr GetX0Y14Cell ( );
    IEditorCellPtr GetX15Y0Cell ( );
    IEditorCellPtr GetX14Y1Cell ( );
    IEditorCellPtr GetX13Y2Cell ( );
    IEditorCellPtr GetX12Y3Cell ( );
    IEditorCellPtr GetX11Y4Cell ( );
    IEditorCellPtr GetX10Y5Cell ( );
    IEditorCellPtr GetX9Y6Cell ( );
    IEditorCellPtr GetX8Y7Cell ( );
    IEditorCellPtr GetX7Y8Cell ( );
    IEditorCellPtr GetX6Y9Cell ( );
    IEditorCellPtr GetX5Y10Cell ( );
    IEditorCellPtr GetX4Y11Cell ( );
    IEditorCellPtr GetX3Y12Cell ( );
    IEditorCellPtr GetX2Y13Cell ( );
    IEditorCellPtr GetX1Y14Cell ( );
    IEditorCellPtr GetX0Y15Cell ( );
    IEditorCellPtr GetX16Y0Cell ( );
    IEditorCellPtr GetX15Y1Cell ( );
    IEditorCellPtr GetX14Y2Cell ( );
    IEditorCellPtr GetX13Y3Cell ( );
    IEditorCellPtr GetX12Y4Cell ( );
    IEditorCellPtr GetX11Y5Cell ( );
    IEditorCellPtr GetX10Y6Cell ( );
    IEditorCellPtr GetX9Y7Cell ( );
    IEditorCellPtr GetX8Y8Cell ( );
    IEditorCellPtr GetX7Y9Cell ( );
    IEditorCellPtr GetX6Y10Cell ( );
    IEditorCellPtr GetX5Y11Cell ( );
    IEditorCellPtr GetX4Y12Cell ( );
    IEditorCellPtr GetX3Y13Cell ( );
    IEditorCellPtr GetX2Y14Cell ( );
    IEditorCellPtr GetX1Y15Cell ( );
    IEditorCellPtr GetX0Y16Cell ( );
    IEditorCellPtr GetX17Y0Cell ( );
    IEditorCellPtr GetX16Y1Cell ( );
    IEditorCellPtr GetX15Y2Cell ( );
    IEditorCellPtr GetX14Y3Cell ( );
    IEditorCellPtr GetX13Y4Cell ( );
    IEditorCellPtr GetX12Y5Cell ( );
    IEditorCellPtr GetX11Y6Cell ( );
    IEditorCellPtr GetX10Y7Cell ( );
    IEditorCellPtr GetX9Y8Cell ( );
    IEditorCellPtr GetX8Y9Cell ( );
    IEditorCellPtr GetX7Y10Cell ( );
    IEditorCellPtr GetX6Y11Cell ( );
    IEditorCellPtr GetX5Y12Cell ( );
    IEditorCellPtr GetX4Y13Cell ( );
    IEditorCellPtr GetX3Y14Cell ( );
    IEditorCellPtr GetX2Y15Cell ( );
    IEditorCellPtr GetX1Y16Cell ( );
    IEditorCellPtr GetX0Y17Cell ( );
    IEditorCellPtr GetX18Y0Cell ( );
    IEditorCellPtr GetX17Y1Cell ( );
    IEditorCellPtr GetX16Y2Cell ( );
    IEditorCellPtr GetX15Y3Cell ( );
    IEditorCellPtr GetX14Y4Cell ( );
    IEditorCellPtr GetX13Y5Cell ( );
    IEditorCellPtr GetX12Y6Cell ( );
    IEditorCellPtr GetX11Y7Cell ( );
    IEditorCellPtr GetX10Y8Cell ( );
    IEditorCellPtr GetX9Y9Cell ( );
    IEditorCellPtr GetX8Y10Cell ( );
    IEditorCellPtr GetX7Y11Cell ( );
    IEditorCellPtr GetX6Y12Cell ( );
    IEditorCellPtr GetX5Y13Cell ( );
    IEditorCellPtr GetX4Y14Cell ( );
    IEditorCellPtr GetX3Y15Cell ( );
    IEditorCellPtr GetX2Y16Cell ( );
    IEditorCellPtr GetX1Y17Cell ( );
    IEditorCellPtr GetX0Y18Cell ( );
    IEditorCellPtr GetX19Y0Cell ( );
    IEditorCellPtr GetX18Y1Cell ( );
    IEditorCellPtr GetX17Y2Cell ( );
    IEditorCellPtr GetX16Y3Cell ( );
    IEditorCellPtr GetX15Y4Cell ( );
    IEditorCellPtr GetX14Y5Cell ( );
    IEditorCellPtr GetX13Y6Cell ( );
    IEditorCellPtr GetX12Y7Cell ( );
    IEditorCellPtr GetX11Y8Cell ( );
    IEditorCellPtr GetX10Y9Cell ( );
    IEditorCellPtr GetX9Y10Cell ( );
    IEditorCellPtr GetX8Y11Cell ( );
    IEditorCellPtr GetX7Y12Cell ( );
    IEditorCellPtr GetX6Y13Cell ( );
    IEditorCellPtr GetX5Y14Cell ( );
    IEditorCellPtr GetX4Y15Cell ( );
    IEditorCellPtr GetX3Y16Cell ( );
    IEditorCellPtr GetX2Y17Cell ( );
    IEditorCellPtr GetX1Y18Cell ( );
    IEditorCellPtr GetX0Y19Cell ( );
    IEditorCellPtr GetX20Y0Cell ( );
    IEditorCellPtr GetX19Y1Cell ( );
    IEditorCellPtr GetX18Y2Cell ( );
    IEditorCellPtr GetX17Y3Cell ( );
    IEditorCellPtr GetX16Y4Cell ( );
    IEditorCellPtr GetX15Y5Cell ( );
    IEditorCellPtr GetX14Y6Cell ( );
    IEditorCellPtr GetX13Y7Cell ( );
    IEditorCellPtr GetX12Y8Cell ( );
    IEditorCellPtr GetX11Y9Cell ( );
    IEditorCellPtr GetX10Y10Cell ( );
    IEditorCellPtr GetX9Y11Cell ( );
    IEditorCellPtr GetX8Y12Cell ( );
    IEditorCellPtr GetX7Y13Cell ( );
    IEditorCellPtr GetX6Y14Cell ( );
    IEditorCellPtr GetX5Y15Cell ( );
    IEditorCellPtr GetX4Y16Cell ( );
    IEditorCellPtr GetX3Y17Cell ( );
    IEditorCellPtr GetX2Y18Cell ( );
    IEditorCellPtr GetX1Y19Cell ( );
    IEditorCellPtr GetX0Y20Cell ( );
    IEditorCellPtr GetX21Y0Cell ( );
    IEditorCellPtr GetX20Y1Cell ( );
    IEditorCellPtr GetX19Y2Cell ( );
    IEditorCellPtr GetX18Y3Cell ( );
    IEditorCellPtr GetX17Y4Cell ( );
    IEditorCellPtr GetX16Y5Cell ( );
    IEditorCellPtr GetX15Y6Cell ( );
    IEditorCellPtr GetX14Y7Cell ( );
    IEditorCellPtr GetX13Y8Cell ( );
    IEditorCellPtr GetX12Y9Cell ( );
    IEditorCellPtr GetX11Y10Cell ( );
    IEditorCellPtr GetX10Y11Cell ( );
    IEditorCellPtr GetX9Y12Cell ( );
    IEditorCellPtr GetX8Y13Cell ( );
    IEditorCellPtr GetX7Y14Cell ( );
    IEditorCellPtr GetX6Y15Cell ( );
    IEditorCellPtr GetX5Y16Cell ( );
    IEditorCellPtr GetX4Y17Cell ( );
    IEditorCellPtr GetX3Y18Cell ( );
    IEditorCellPtr GetX2Y19Cell ( );
    double GetX1Y0 ( );
    void PutX1Y0 (
        double pRetVal );
    double GetX0Y1 ( );
    void PutX0Y1 (
        double pRetVal );
    double GetX2Y0 ( );
    void PutX2Y0 (
        double pRetVal );
    double GetX1Y1 ( );
    void PutX1Y1 (
        double pRetVal );
    double GetX0Y2 ( );
    void PutX0Y2 (
        double pRetVal );
    double GetX3Y0 ( );
    void PutX3Y0 (
        double pRetVal );
    double GetX2Y1 ( );
    void PutX2Y1 (
        double pRetVal );
    double GetX1Y2 ( );
    void PutX1Y2 (
        double pRetVal );
    double GetX0Y3 ( );
    void PutX0Y3 (
        double pRetVal );
    double GetX4Y0 ( );
    void PutX4Y0 (
        double pRetVal );
    double GetX3Y1 ( );
    void PutX3Y1 (
        double pRetVal );
    double GetX2Y2 ( );
    void PutX2Y2 (
        double pRetVal );
    double GetX1Y3 ( );
    void PutX1Y3 (
        double pRetVal );
    double GetX0Y4 ( );
    void PutX0Y4 (
        double pRetVal );
    double GetX5Y0 ( );
    void PutX5Y0 (
        double pRetVal );
    double GetX4Y1 ( );
    void PutX4Y1 (
        double pRetVal );
    double GetX3Y2 ( );
    void PutX3Y2 (
        double pRetVal );
    double GetX2Y3 ( );
    void PutX2Y3 (
        double pRetVal );
    double GetX1Y4 ( );
    void PutX1Y4 (
        double pRetVal );
    double GetX0Y5 ( );
    void PutX0Y5 (
        double pRetVal );
    double GetX6Y0 ( );
    void PutX6Y0 (
        double pRetVal );
    double GetX5Y1 ( );
    void PutX5Y1 (
        double pRetVal );
    double GetX4Y2 ( );
    void PutX4Y2 (
        double pRetVal );
    double GetX3Y3 ( );
    void PutX3Y3 (
        double pRetVal );
    double GetX2Y4 ( );
    void PutX2Y4 (
        double pRetVal );
    double GetX1Y5 ( );
    void PutX1Y5 (
        double pRetVal );
    double GetX0Y6 ( );
    void PutX0Y6 (
        double pRetVal );
    double GetX7Y0 ( );
    void PutX7Y0 (
        double pRetVal );
    double GetX6Y1 ( );
    void PutX6Y1 (
        double pRetVal );
    double GetX5Y2 ( );
    void PutX5Y2 (
        double pRetVal );
    double GetX4Y3 ( );
    void PutX4Y3 (
        double pRetVal );
    double GetX3Y4 ( );
    void PutX3Y4 (
        double pRetVal );
    double GetX2Y5 ( );
    void PutX2Y5 (
        double pRetVal );
    double GetX1Y6 ( );
    void PutX1Y6 (
        double pRetVal );
    double GetX0Y7 ( );
    void PutX0Y7 (
        double pRetVal );
    double GetX8Y0 ( );
    void PutX8Y0 (
        double pRetVal );
    double GetX7Y1 ( );
    void PutX7Y1 (
        double pRetVal );
    double GetX6Y2 ( );
    void PutX6Y2 (
        double pRetVal );
    double GetX5Y3 ( );
    void PutX5Y3 (
        double pRetVal );
    double GetX4Y4 ( );
    void PutX4Y4 (
        double pRetVal );
    double GetX3Y5 ( );
    void PutX3Y5 (
        double pRetVal );
    double GetX2Y6 ( );
    void PutX2Y6 (
        double pRetVal );
    double GetX1Y7 ( );
    void PutX1Y7 (
        double pRetVal );
    double GetX0Y8 ( );
    void PutX0Y8 (
        double pRetVal );
    double GetX9Y0 ( );
    void PutX9Y0 (
        double pRetVal );
    double GetX8Y1 ( );
    void PutX8Y1 (
        double pRetVal );
    double GetX7Y2 ( );
    void PutX7Y2 (
        double pRetVal );
    double GetX6Y3 ( );
    void PutX6Y3 (
        double pRetVal );
    double GetX5Y4 ( );
    void PutX5Y4 (
        double pRetVal );
    double GetX4Y5 ( );
    void PutX4Y5 (
        double pRetVal );
    double GetX3Y6 ( );
    void PutX3Y6 (
        double pRetVal );
    double GetX2Y7 ( );
    void PutX2Y7 (
        double pRetVal );
    double GetX1Y8 ( );
    void PutX1Y8 (
        double pRetVal );
    double GetX0Y9 ( );
    void PutX0Y9 (
        double pRetVal );
    double GetX10Y0 ( );
    void PutX10Y0 (
        double pRetVal );
    double GetX9Y1 ( );
    void PutX9Y1 (
        double pRetVal );
    double GetX8Y2 ( );
    void PutX8Y2 (
        double pRetVal );
    double GetX7Y3 ( );
    void PutX7Y3 (
        double pRetVal );
    double GetX6Y4 ( );
    void PutX6Y4 (
        double pRetVal );
    double GetX5Y5 ( );
    void PutX5Y5 (
        double pRetVal );
    double GetX4Y6 ( );
    void PutX4Y6 (
        double pRetVal );
    double GetX3Y7 ( );
    void PutX3Y7 (
        double pRetVal );
    double GetX2Y8 ( );
    void PutX2Y8 (
        double pRetVal );
    double GetX1Y9 ( );
    void PutX1Y9 (
        double pRetVal );
    double GetX0Y10 ( );
    void PutX0Y10 (
        double pRetVal );
    double GetX11Y0 ( );
    void PutX11Y0 (
        double pRetVal );
    double GetX10Y1 ( );
    void PutX10Y1 (
        double pRetVal );
    double GetX9Y2 ( );
    void PutX9Y2 (
        double pRetVal );
    double GetX8Y3 ( );
    void PutX8Y3 (
        double pRetVal );
    double GetX7Y4 ( );
    void PutX7Y4 (
        double pRetVal );
    double GetX6Y5 ( );
    void PutX6Y5 (
        double pRetVal );
    double GetX5Y6 ( );
    void PutX5Y6 (
        double pRetVal );
    double GetX4Y7 ( );
    void PutX4Y7 (
        double pRetVal );
    double GetX3Y8 ( );
    void PutX3Y8 (
        double pRetVal );
    double GetX2Y9 ( );
    void PutX2Y9 (
        double pRetVal );
    double GetX1Y10 ( );
    void PutX1Y10 (
        double pRetVal );
    double GetX0Y11 ( );
    void PutX0Y11 (
        double pRetVal );
    double GetX12Y0 ( );
    void PutX12Y0 (
        double pRetVal );
    double GetX11Y1 ( );
    void PutX11Y1 (
        double pRetVal );
    double GetX10Y2 ( );
    void PutX10Y2 (
        double pRetVal );
    double GetX9Y3 ( );
    void PutX9Y3 (
        double pRetVal );
    double GetX8Y4 ( );
    void PutX8Y4 (
        double pRetVal );
    double GetX7Y5 ( );
    void PutX7Y5 (
        double pRetVal );
    double GetX6Y6 ( );
    void PutX6Y6 (
        double pRetVal );
    double GetX5Y7 ( );
    void PutX5Y7 (
        double pRetVal );
    double GetX4Y8 ( );
    void PutX4Y8 (
        double pRetVal );
    double GetX3Y9 ( );
    void PutX3Y9 (
        double pRetVal );
    double GetX2Y10 ( );
    void PutX2Y10 (
        double pRetVal );
    double GetX1Y11 ( );
    void PutX1Y11 (
        double pRetVal );
    double GetX0Y12 ( );
    void PutX0Y12 (
        double pRetVal );
    double GetX13Y0 ( );
    void PutX13Y0 (
        double pRetVal );
    double GetX12Y1 ( );
    void PutX12Y1 (
        double pRetVal );
    double GetX11Y2 ( );
    void PutX11Y2 (
        double pRetVal );
    double GetX10Y3 ( );
    void PutX10Y3 (
        double pRetVal );
    double GetX9Y4 ( );
    void PutX9Y4 (
        double pRetVal );
    double GetX8Y5 ( );
    void PutX8Y5 (
        double pRetVal );
    double GetX7Y6 ( );
    void PutX7Y6 (
        double pRetVal );
    double GetX6Y7 ( );
    void PutX6Y7 (
        double pRetVal );
    double GetX5Y8 ( );
    void PutX5Y8 (
        double pRetVal );
    double GetX4Y9 ( );
    void PutX4Y9 (
        double pRetVal );
    double GetX3Y10 ( );
    void PutX3Y10 (
        double pRetVal );
    double GetX2Y11 ( );
    void PutX2Y11 (
        double pRetVal );
    double GetX1Y12 ( );
    void PutX1Y12 (
        double pRetVal );
    double GetX0Y13 ( );
    void PutX0Y13 (
        double pRetVal );
    double GetX14Y0 ( );
    void PutX14Y0 (
        double pRetVal );
    double GetX13Y1 ( );
    void PutX13Y1 (
        double pRetVal );
    double GetX12Y2 ( );
    void PutX12Y2 (
        double pRetVal );
    double GetX11Y3 ( );
    void PutX11Y3 (
        double pRetVal );
    double GetX10Y4 ( );
    void PutX10Y4 (
        double pRetVal );
    double GetX9Y5 ( );
    void PutX9Y5 (
        double pRetVal );
    double GetX8Y6 ( );
    void PutX8Y6 (
        double pRetVal );
    double GetX7Y7 ( );
    void PutX7Y7 (
        double pRetVal );
    double GetX6Y8 ( );
    void PutX6Y8 (
        double pRetVal );
    double GetX5Y9 ( );
    void PutX5Y9 (
        double pRetVal );
    double GetX4Y10 ( );
    void PutX4Y10 (
        double pRetVal );
    double GetX3Y11 ( );
    void PutX3Y11 (
        double pRetVal );
    double GetX2Y12 ( );
    void PutX2Y12 (
        double pRetVal );
    double GetX1Y13 ( );
    void PutX1Y13 (
        double pRetVal );
    double GetX0Y14 ( );
    void PutX0Y14 (
        double pRetVal );
    double GetX15Y0 ( );
    void PutX15Y0 (
        double pRetVal );
    double GetX14Y1 ( );
    void PutX14Y1 (
        double pRetVal );
    double GetX13Y2 ( );
    void PutX13Y2 (
        double pRetVal );
    double GetX12Y3 ( );
    void PutX12Y3 (
        double pRetVal );
    double GetX11Y4 ( );
    void PutX11Y4 (
        double pRetVal );
    double GetX10Y5 ( );
    void PutX10Y5 (
        double pRetVal );
    double GetX9Y6 ( );
    void PutX9Y6 (
        double pRetVal );
    double GetX8Y7 ( );
    void PutX8Y7 (
        double pRetVal );
    double GetX7Y8 ( );
    void PutX7Y8 (
        double pRetVal );
    double GetX6Y9 ( );
    void PutX6Y9 (
        double pRetVal );
    double GetX5Y10 ( );
    void PutX5Y10 (
        double pRetVal );
    double GetX4Y11 ( );
    void PutX4Y11 (
        double pRetVal );
    double GetX3Y12 ( );
    void PutX3Y12 (
        double pRetVal );
    double GetX2Y13 ( );
    void PutX2Y13 (
        double pRetVal );
    double GetX1Y14 ( );
    void PutX1Y14 (
        double pRetVal );
    double GetX0Y15 ( );
    void PutX0Y15 (
        double pRetVal );
    double GetX16Y0 ( );
    void PutX16Y0 (
        double pRetVal );
    double GetX15Y1 ( );
    void PutX15Y1 (
        double pRetVal );
    double GetX14Y2 ( );
    void PutX14Y2 (
        double pRetVal );
    double GetX13Y3 ( );
    void PutX13Y3 (
        double pRetVal );
    double GetX12Y4 ( );
    void PutX12Y4 (
        double pRetVal );
    double GetX11Y5 ( );
    void PutX11Y5 (
        double pRetVal );
    double GetX10Y6 ( );
    void PutX10Y6 (
        double pRetVal );
    double GetX9Y7 ( );
    void PutX9Y7 (
        double pRetVal );
    double GetX8Y8 ( );
    void PutX8Y8 (
        double pRetVal );
    double GetX7Y9 ( );
    void PutX7Y9 (
        double pRetVal );
    double GetX6Y10 ( );
    void PutX6Y10 (
        double pRetVal );
    double GetX5Y11 ( );
    void PutX5Y11 (
        double pRetVal );
    double GetX4Y12 ( );
    void PutX4Y12 (
        double pRetVal );
    double GetX3Y13 ( );
    void PutX3Y13 (
        double pRetVal );
    double GetX2Y14 ( );
    void PutX2Y14 (
        double pRetVal );
    double GetX1Y15 ( );
    void PutX1Y15 (
        double pRetVal );
    double GetX0Y16 ( );
    void PutX0Y16 (
        double pRetVal );
    double GetX17Y0 ( );
    void PutX17Y0 (
        double pRetVal );
    double GetX16Y1 ( );
    void PutX16Y1 (
        double pRetVal );
    double GetX15Y2 ( );
    void PutX15Y2 (
        double pRetVal );
    double GetX14Y3 ( );
    void PutX14Y3 (
        double pRetVal );
    double GetX13Y4 ( );
    void PutX13Y4 (
        double pRetVal );
    double GetX12Y5 ( );
    void PutX12Y5 (
        double pRetVal );
    double GetX11Y6 ( );
    void PutX11Y6 (
        double pRetVal );
    double GetX10Y7 ( );
    void PutX10Y7 (
        double pRetVal );
    double GetX9Y8 ( );
    void PutX9Y8 (
        double pRetVal );
    double GetX8Y9 ( );
    void PutX8Y9 (
        double pRetVal );
    double GetX7Y10 ( );
    void PutX7Y10 (
        double pRetVal );
    double GetX6Y11 ( );
    void PutX6Y11 (
        double pRetVal );
    double GetX5Y12 ( );
    void PutX5Y12 (
        double pRetVal );
    double GetX4Y13 ( );
    void PutX4Y13 (
        double pRetVal );
    double GetX3Y14 ( );
    void PutX3Y14 (
        double pRetVal );
    double GetX2Y15 ( );
    void PutX2Y15 (
        double pRetVal );
    double GetX1Y16 ( );
    void PutX1Y16 (
        double pRetVal );
    double GetX0Y17 ( );
    void PutX0Y17 (
        double pRetVal );
    double GetX18Y0 ( );
    void PutX18Y0 (
        double pRetVal );
    double GetX17Y1 ( );
    void PutX17Y1 (
        double pRetVal );
    double GetX16Y2 ( );
    void PutX16Y2 (
        double pRetVal );
    double GetX15Y3 ( );
    void PutX15Y3 (
        double pRetVal );
    double GetX14Y4 ( );
    void PutX14Y4 (
        double pRetVal );
    double GetX13Y5 ( );
    void PutX13Y5 (
        double pRetVal );
    double GetX12Y6 ( );
    void PutX12Y6 (
        double pRetVal );
    double GetX11Y7 ( );
    void PutX11Y7 (
        double pRetVal );
    double GetX10Y8 ( );
    void PutX10Y8 (
        double pRetVal );
    double GetX9Y9 ( );
    void PutX9Y9 (
        double pRetVal );
    double GetX8Y10 ( );
    void PutX8Y10 (
        double pRetVal );
    double GetX7Y11 ( );
    void PutX7Y11 (
        double pRetVal );
    double GetX6Y12 ( );
    void PutX6Y12 (
        double pRetVal );
    double GetX5Y13 ( );
    void PutX5Y13 (
        double pRetVal );
    double GetX4Y14 ( );
    void PutX4Y14 (
        double pRetVal );
    double GetX3Y15 ( );
    void PutX3Y15 (
        double pRetVal );
    double GetX2Y16 ( );
    void PutX2Y16 (
        double pRetVal );
    double GetX1Y17 ( );
    void PutX1Y17 (
        double pRetVal );
    double GetX0Y18 ( );
    void PutX0Y18 (
        double pRetVal );
    double GetX19Y0 ( );
    void PutX19Y0 (
        double pRetVal );
    double GetX18Y1 ( );
    void PutX18Y1 (
        double pRetVal );
    double GetX17Y2 ( );
    void PutX17Y2 (
        double pRetVal );
    double GetX16Y3 ( );
    void PutX16Y3 (
        double pRetVal );
    double GetX15Y4 ( );
    void PutX15Y4 (
        double pRetVal );
    double GetX14Y5 ( );
    void PutX14Y5 (
        double pRetVal );
    double GetX13Y6 ( );
    void PutX13Y6 (
        double pRetVal );
    double GetX12Y7 ( );
    void PutX12Y7 (
        double pRetVal );
    double GetX11Y8 ( );
    void PutX11Y8 (
        double pRetVal );
    double GetX10Y9 ( );
    void PutX10Y9 (
        double pRetVal );
    double GetX9Y10 ( );
    void PutX9Y10 (
        double pRetVal );
    double GetX8Y11 ( );
    void PutX8Y11 (
        double pRetVal );
    double GetX7Y12 ( );
    void PutX7Y12 (
        double pRetVal );
    double GetX6Y13 ( );
    void PutX6Y13 (
        double pRetVal );
    double GetX5Y14 ( );
    void PutX5Y14 (
        double pRetVal );
    double GetX4Y15 ( );
    void PutX4Y15 (
        double pRetVal );
    double GetX3Y16 ( );
    void PutX3Y16 (
        double pRetVal );
    double GetX2Y17 ( );
    void PutX2Y17 (
        double pRetVal );
    double GetX1Y18 ( );
    void PutX1Y18 (
        double pRetVal );
    double GetX0Y19 ( );
    void PutX0Y19 (
        double pRetVal );
    double GetX20Y0 ( );
    void PutX20Y0 (
        double pRetVal );
    double GetX19Y1 ( );
    void PutX19Y1 (
        double pRetVal );
    double GetX18Y2 ( );
    void PutX18Y2 (
        double pRetVal );
    double GetX17Y3 ( );
    void PutX17Y3 (
        double pRetVal );
    double GetX16Y4 ( );
    void PutX16Y4 (
        double pRetVal );
    double GetX15Y5 ( );
    void PutX15Y5 (
        double pRetVal );
    double GetX14Y6 ( );
    void PutX14Y6 (
        double pRetVal );
    double GetX13Y7 ( );
    void PutX13Y7 (
        double pRetVal );
    double GetX12Y8 ( );
    void PutX12Y8 (
        double pRetVal );
    double GetX11Y9 ( );
    void PutX11Y9 (
        double pRetVal );
    double GetX10Y10 ( );
    void PutX10Y10 (
        double pRetVal );
    double GetX9Y11 ( );
    void PutX9Y11 (
        double pRetVal );
    double GetX8Y12 ( );
    void PutX8Y12 (
        double pRetVal );
    double GetX7Y13 ( );
    void PutX7Y13 (
        double pRetVal );
    double GetX6Y14 ( );
    void PutX6Y14 (
        double pRetVal );
    double GetX5Y15 ( );
    void PutX5Y15 (
        double pRetVal );
    double GetX4Y16 ( );
    void PutX4Y16 (
        double pRetVal );
    double GetX3Y17 ( );
    void PutX3Y17 (
        double pRetVal );
    double GetX2Y18 ( );
    void PutX2Y18 (
        double pRetVal );
    double GetX1Y19 ( );
    void PutX1Y19 (
        double pRetVal );
    double GetX0Y20 ( );
    void PutX0Y20 (
        double pRetVal );
    double GetX21Y0 ( );
    void PutX21Y0 (
        double pRetVal );
    double GetX20Y1 ( );
    void PutX20Y1 (
        double pRetVal );
    double GetX19Y2 ( );
    void PutX19Y2 (
        double pRetVal );
    double GetX18Y3 ( );
    void PutX18Y3 (
        double pRetVal );
    double GetX17Y4 ( );
    void PutX17Y4 (
        double pRetVal );
    double GetX16Y5 ( );
    void PutX16Y5 (
        double pRetVal );
    double GetX15Y6 ( );
    void PutX15Y6 (
        double pRetVal );
    double GetX14Y7 ( );
    void PutX14Y7 (
        double pRetVal );
    double GetX13Y8 ( );
    void PutX13Y8 (
        double pRetVal );
    double GetX12Y9 ( );
    void PutX12Y9 (
        double pRetVal );
    double GetX11Y10 ( );
    void PutX11Y10 (
        double pRetVal );
    double GetX10Y11 ( );
    void PutX10Y11 (
        double pRetVal );
    double GetX9Y12 ( );
    void PutX9Y12 (
        double pRetVal );
    double GetX8Y13 ( );
    void PutX8Y13 (
        double pRetVal );
    double GetX7Y14 ( );
    void PutX7Y14 (
        double pRetVal );
    double GetX6Y15 ( );
    void PutX6Y15 (
        double pRetVal );
    double GetX5Y16 ( );
    void PutX5Y16 (
        double pRetVal );
    double GetX4Y17 ( );
    void PutX4Y17 (
        double pRetVal );
    double GetX3Y18 ( );
    void PutX3Y18 (
        double pRetVal );
    double GetX2Y19 ( );
    void PutX2Y19 (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NumberOfTermsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfTerms (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfTerms (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y0Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y0Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y0Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y3Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y0Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y3Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y0Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y3Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y5Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y0Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y3Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y5Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y0Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y3Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y5Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y7Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X8Y0Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y3Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y5Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y7Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y8Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X9Y0Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X8Y1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y3Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y5Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y7Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y8Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y9Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X10Y0Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X9Y1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X8Y2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y3Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y5Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y7Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y8Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y9Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y10Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X11Y0Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X10Y1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X9Y2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X8Y3Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y5Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y7Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y8Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y9Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y10Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y11Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X12Y0Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X11Y1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X10Y2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X9Y3Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X8Y4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y5Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y7Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y8Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y9Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y10Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y11Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y12Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X13Y0Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X12Y1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X11Y2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X10Y3Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X9Y4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X8Y5Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y7Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y8Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y9Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y10Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y11Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y12Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y13Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X14Y0Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X13Y1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X12Y2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X11Y3Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X10Y4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X9Y5Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X8Y6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y7Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y8Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y9Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y10Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y11Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y12Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y13Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y14Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X15Y0Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X14Y1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X13Y2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X12Y3Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X11Y4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X10Y5Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X9Y6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X8Y7Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y8Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y9Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y10Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y11Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y12Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y13Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y14Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y15Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X16Y0Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X15Y1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X14Y2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X13Y3Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X12Y4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X11Y5Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X10Y6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X9Y7Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X8Y8Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y9Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y10Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y11Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y12Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y13Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y14Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y15Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y16Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X17Y0Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X16Y1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X15Y2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X14Y3Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X13Y4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X12Y5Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X11Y6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X10Y7Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X9Y8Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X8Y9Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y10Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y11Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y12Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y13Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y14Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y15Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y16Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y17Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X18Y0Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X17Y1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X16Y2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X15Y3Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X14Y4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X13Y5Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X12Y6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X11Y7Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X10Y8Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X9Y9Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X8Y10Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y11Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y12Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y13Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y14Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y15Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y16Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y17Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y18Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X19Y0Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X18Y1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X17Y2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X16Y3Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X15Y4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X14Y5Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X13Y6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X12Y7Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X11Y8Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X10Y9Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X9Y10Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X8Y11Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y12Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y13Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y14Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y15Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y16Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y17Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y18Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y19Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X20Y0Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X19Y1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X18Y2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X17Y3Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X16Y4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X15Y5Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X14Y6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X13Y7Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X12Y8Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X11Y9Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X10Y10Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X9Y11Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X8Y12Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y13Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y14Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y15Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y16Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y17Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y18Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y19Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y20Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X21Y0Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X20Y1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X19Y2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X18Y3Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X17Y4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X16Y5Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X15Y6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X14Y7Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X13Y8Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X12Y9Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X11Y10Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X10Y11Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X9Y12Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X8Y13Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y14Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y15Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y16Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y17Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y18Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y19Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y0 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X1Y0 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X0Y1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y0 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X2Y0 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X1Y1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X0Y2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y0 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X3Y0 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X2Y1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X1Y2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y3 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X0Y3 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y0 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X4Y0 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X3Y1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X2Y2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y3 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X1Y3 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X0Y4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y0 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X5Y0 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X4Y1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X3Y2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y3 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X2Y3 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X1Y4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y5 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X0Y5 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y0 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X6Y0 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X5Y1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X4Y2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y3 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X3Y3 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X2Y4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y5 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X1Y5 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X0Y6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y0 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X7Y0 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X6Y1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X5Y2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y3 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X4Y3 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X3Y4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y5 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X2Y5 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X1Y6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y7 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X0Y7 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X8Y0 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X8Y0 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X7Y1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X6Y2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y3 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X5Y3 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X4Y4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y5 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X3Y5 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X2Y6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y7 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X1Y7 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y8 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X0Y8 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X9Y0 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X9Y0 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X8Y1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X8Y1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X7Y2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y3 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X6Y3 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X5Y4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y5 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X4Y5 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X3Y6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y7 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X2Y7 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y8 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X1Y8 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y9 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X0Y9 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X10Y0 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X10Y0 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X9Y1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X9Y1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X8Y2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X8Y2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y3 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X7Y3 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X6Y4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y5 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X5Y5 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X4Y6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y7 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X3Y7 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y8 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X2Y8 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y9 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X1Y9 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y10 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X0Y10 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X11Y0 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X11Y0 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X10Y1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X10Y1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X9Y2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X9Y2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X8Y3 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X8Y3 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X7Y4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y5 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X6Y5 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X5Y6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y7 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X4Y7 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y8 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X3Y8 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y9 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X2Y9 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y10 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X1Y10 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y11 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X0Y11 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X12Y0 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X12Y0 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X11Y1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X11Y1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X10Y2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X10Y2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X9Y3 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X9Y3 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X8Y4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X8Y4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y5 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X7Y5 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X6Y6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y7 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X5Y7 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y8 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X4Y8 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y9 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X3Y9 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y10 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X2Y10 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y11 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X1Y11 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y12 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X0Y12 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X13Y0 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X13Y0 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X12Y1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X12Y1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X11Y2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X11Y2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X10Y3 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X10Y3 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X9Y4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X9Y4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X8Y5 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X8Y5 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X7Y6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y7 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X6Y7 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y8 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X5Y8 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y9 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X4Y9 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y10 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X3Y10 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y11 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X2Y11 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y12 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X1Y12 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y13 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X0Y13 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X14Y0 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X14Y0 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X13Y1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X13Y1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X12Y2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X12Y2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X11Y3 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X11Y3 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X10Y4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X10Y4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X9Y5 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X9Y5 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X8Y6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X8Y6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y7 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X7Y7 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y8 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X6Y8 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y9 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X5Y9 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y10 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X4Y10 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y11 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X3Y11 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y12 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X2Y12 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y13 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X1Y13 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y14 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X0Y14 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X15Y0 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X15Y0 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X14Y1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X14Y1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X13Y2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X13Y2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X12Y3 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X12Y3 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X11Y4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X11Y4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X10Y5 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X10Y5 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X9Y6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X9Y6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X8Y7 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X8Y7 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y8 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X7Y8 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y9 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X6Y9 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y10 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X5Y10 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y11 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X4Y11 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y12 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X3Y12 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y13 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X2Y13 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y14 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X1Y14 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y15 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X0Y15 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X16Y0 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X16Y0 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X15Y1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X15Y1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X14Y2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X14Y2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X13Y3 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X13Y3 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X12Y4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X12Y4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X11Y5 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X11Y5 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X10Y6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X10Y6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X9Y7 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X9Y7 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X8Y8 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X8Y8 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y9 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X7Y9 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y10 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X6Y10 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y11 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X5Y11 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y12 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X4Y12 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y13 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X3Y13 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y14 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X2Y14 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y15 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X1Y15 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y16 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X0Y16 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X17Y0 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X17Y0 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X16Y1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X16Y1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X15Y2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X15Y2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X14Y3 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X14Y3 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X13Y4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X13Y4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X12Y5 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X12Y5 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X11Y6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X11Y6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X10Y7 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X10Y7 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X9Y8 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X9Y8 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X8Y9 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X8Y9 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y10 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X7Y10 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y11 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X6Y11 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y12 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X5Y12 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y13 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X4Y13 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y14 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X3Y14 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y15 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X2Y15 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y16 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X1Y16 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y17 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X0Y17 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X18Y0 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X18Y0 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X17Y1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X17Y1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X16Y2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X16Y2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X15Y3 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X15Y3 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X14Y4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X14Y4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X13Y5 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X13Y5 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X12Y6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X12Y6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X11Y7 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X11Y7 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X10Y8 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X10Y8 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X9Y9 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X9Y9 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X8Y10 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X8Y10 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y11 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X7Y11 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y12 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X6Y12 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y13 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X5Y13 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y14 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X4Y14 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y15 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X3Y15 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y16 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X2Y16 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y17 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X1Y17 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y18 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X0Y18 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X19Y0 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X19Y0 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X18Y1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X18Y1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X17Y2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X17Y2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X16Y3 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X16Y3 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X15Y4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X15Y4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X14Y5 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X14Y5 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X13Y6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X13Y6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X12Y7 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X12Y7 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X11Y8 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X11Y8 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X10Y9 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X10Y9 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X9Y10 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X9Y10 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X8Y11 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X8Y11 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y12 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X7Y12 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y13 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X6Y13 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y14 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X5Y14 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y15 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X4Y15 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y16 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X3Y16 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y17 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X2Y17 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y18 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X1Y18 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y19 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X0Y19 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X20Y0 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X20Y0 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X19Y1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X19Y1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X18Y2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X18Y2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X17Y3 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X17Y3 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X16Y4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X16Y4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X15Y5 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X15Y5 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X14Y6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X14Y6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X13Y7 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X13Y7 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X12Y8 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X12Y8 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X11Y9 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X11Y9 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X10Y10 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X10Y10 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X9Y11 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X9Y11 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X8Y12 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X8Y12 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y13 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X7Y13 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y14 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X6Y14 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y15 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X5Y15 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y16 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X4Y16 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y17 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X3Y17 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y18 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X2Y18 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1Y19 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X1Y19 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X0Y20 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X0Y20 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X21Y0 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X21Y0 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X20Y1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X20Y1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X19Y2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X19Y2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X18Y3 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X18Y3 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X17Y4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X17Y4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X16Y5 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X16Y5 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X15Y6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X15Y6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X14Y7 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X14Y7 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X13Y8 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X13Y8 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X12Y9 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X12Y9 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X11Y10 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X11Y10 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X10Y11 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X10Y11 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X9Y12 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X9Y12 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X8Y13 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X8Y13 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X7Y14 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X7Y14 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X6Y15 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X6Y15 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X5Y16 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X5Y16 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X4Y17 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X4Y17 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X3Y18 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X3Y18 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2Y19 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X2Y19 (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("751c6d6a-bd6c-4bb1-997f-2a48973a84de"))
ISurfaceNthOrderTerms : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr NthOrderTermCell (
        long N );
    double GetNthOrderTerm (
        long N );
    HRESULT SetNthOrderTerm (
        long N,
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_NthOrderTermCell (
        /*[in]*/ long N,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetNthOrderTerm (
        /*[in]*/ long N,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetNthOrderTerm (
        /*[in]*/ long N,
        /*[in]*/ double Value ) = 0;
};

struct __declspec(uuid("a518ff41-058e-4081-93bd-fadac1914861"))
ISurfaceNthEvenOrderTerms : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr NthEvenOrderTermCell (
        long N );
    double GetNthEvenOrderTerm (
        long N );
    HRESULT SetNthEvenOrderTerm (
        long N,
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_NthEvenOrderTermCell (
        /*[in]*/ long N,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetNthEvenOrderTerm (
        /*[in]*/ long N,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetNthEvenOrderTerm (
        /*[in]*/ long N,
        /*[in]*/ double Value ) = 0;
};

struct __declspec(uuid("7b119854-b3c6-49c9-a076-c5dd23d04f14"))
ISurfaceNthThickness : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNumberOfTermsCell))
    IEditorCellPtr NumberOfTermsCell;
    __declspec(property(get=GetNumberOfTerms,put=PutNumberOfTerms))
    long NumberOfTerms;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetNumberOfTermsCell ( );
    long GetNumberOfTerms ( );
    void PutNumberOfTerms (
        long pRetVal );
    IEditorCellPtr NthThicknessCell (
        long N );
    double GetNthThickness (
        long N );
    HRESULT SetNthThickness (
        long N,
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NumberOfTermsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfTerms (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfTerms (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall raw_NthThicknessCell (
        /*[in]*/ long N,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetNthThickness (
        /*[in]*/ long N,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetNthThickness (
        /*[in]*/ long N,
        /*[in]*/ double Value ) = 0;
};

struct __declspec(uuid("beaa3da7-a16d-4ac7-a7e6-ca2ef2abfc9e"))
ISurfaceCoeff_P_NthPower : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNumberOfTermsCell))
    IEditorCellPtr NumberOfTermsCell;
    __declspec(property(get=GetNumberOfTerms,put=PutNumberOfTerms))
    long NumberOfTerms;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetNumberOfTermsCell ( );
    long GetNumberOfTerms ( );
    void PutNumberOfTerms (
        long pRetVal );
    IEditorCellPtr Coeff_P_NthPowerCell (
        long N );
    double GetCoeff_P_NthPower (
        long N );
    HRESULT SetCoeff_P_NthPower (
        long N,
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NumberOfTermsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfTerms (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfTerms (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Coeff_P_NthPowerCell (
        /*[in]*/ long N,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetCoeff_P_NthPower (
        /*[in]*/ long N,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetCoeff_P_NthPower (
        /*[in]*/ long N,
        /*[in]*/ double Value ) = 0;
};

struct __declspec(uuid("d1f2452c-ed16-4649-aa1a-f6e44b4d6f82"))
ISurfaceCoeff_R_NthPower : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr Coeff_R_NthPowerCell (
        long N );
    double GetCoeff_R_NthPower (
        long N );
    HRESULT SetCoeff_R_NthPower (
        long N,
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Coeff_R_NthPowerCell (
        /*[in]*/ long N,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetCoeff_R_NthPower (
        /*[in]*/ long N,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetCoeff_R_NthPower (
        /*[in]*/ long N,
        /*[in]*/ double Value ) = 0;
};

struct __declspec(uuid("5e588941-4723-4bde-ab61-a0ec79a37043"))
ISurfaceCoeff_P_NthEvenPower : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNumberOfTermsCell))
    IEditorCellPtr NumberOfTermsCell;
    __declspec(property(get=GetNumberOfTerms,put=PutNumberOfTerms))
    long NumberOfTerms;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetNumberOfTermsCell ( );
    long GetNumberOfTerms ( );
    void PutNumberOfTerms (
        long pRetVal );
    IEditorCellPtr Coeff_P_NthEvenPowerCell (
        long N );
    double GetCoeff_P_NthEvenPower (
        long N );
    HRESULT SetCoeff_P_NthEvenPower (
        long N,
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NumberOfTermsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfTerms (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfTerms (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Coeff_P_NthEvenPowerCell (
        /*[in]*/ long N,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetCoeff_P_NthEvenPower (
        /*[in]*/ long N,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetCoeff_P_NthEvenPower (
        /*[in]*/ long N,
        /*[in]*/ double Value ) = 0;
};

struct __declspec(uuid("8631f57e-cd98-4062-9b31-a2156d525cb8"))
ISurfaceCoeff_R_NthEvenPower : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNumberOfTermsCell))
    IEditorCellPtr NumberOfTermsCell;
    __declspec(property(get=GetNumberOfTerms,put=PutNumberOfTerms))
    long NumberOfTerms;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetNumberOfTermsCell ( );
    long GetNumberOfTerms ( );
    void PutNumberOfTerms (
        long pRetVal );
    IEditorCellPtr Coeff_R_NthEvenPowerCell (
        long N );
    double GetCoeff_R_NthEvenPower (
        long N );
    HRESULT SetCoeff_R_NthEvenPower (
        long N,
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NumberOfTermsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfTerms (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfTerms (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Coeff_R_NthEvenPowerCell (
        /*[in]*/ long N,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetCoeff_R_NthEvenPower (
        /*[in]*/ long N,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetCoeff_R_NthEvenPower (
        /*[in]*/ long N,
        /*[in]*/ double Value ) = 0;
};

struct __declspec(uuid("3f83b66b-ec9f-444e-92b5-137ef364a275"))
ISurfaceCoeff_X_NthEvenPower_8 : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr Coeff_X_NthEvenPowerCell (
        long N );
    double GetCoeff_X_NthEvenPower (
        long N );
    HRESULT SetCoeff_X_NthEvenPower (
        long N,
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Coeff_X_NthEvenPowerCell (
        /*[in]*/ long N,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetCoeff_X_NthEvenPower (
        /*[in]*/ long N,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetCoeff_X_NthEvenPower (
        /*[in]*/ long N,
        /*[in]*/ double Value ) = 0;
};

struct __declspec(uuid("6998db38-ae18-4ac5-8b21-dd15025b1ff0"))
ISurfaceCoeff_X_NthEvenPower : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNumberOfTermsCell))
    IEditorCellPtr NumberOfTermsCell;
    __declspec(property(get=GetNumberOfTerms,put=PutNumberOfTerms))
    long NumberOfTerms;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetNumberOfTermsCell ( );
    long GetNumberOfTerms ( );
    void PutNumberOfTerms (
        long pRetVal );
    IEditorCellPtr Coeff_X_NthEvenPowerCell (
        long N );
    double GetCoeff_X_NthEvenPower (
        long N );
    HRESULT SetCoeff_X_NthEvenPower (
        long N,
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NumberOfTermsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfTerms (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfTerms (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Coeff_X_NthEvenPowerCell (
        /*[in]*/ long N,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetCoeff_X_NthEvenPower (
        /*[in]*/ long N,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetCoeff_X_NthEvenPower (
        /*[in]*/ long N,
        /*[in]*/ double Value ) = 0;
};

struct __declspec(uuid("5eb29f42-52a8-4a2d-b183-1a9c6d956e90"))
ISurfaceCoeff_Y_NthEvenPower_8 : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr Coeff_Y_NthEvenPowerCell (
        long N );
    double GetCoeff_Y_NthEvenPower (
        long N );
    HRESULT SetCoeff_Y_NthEvenPower (
        long N,
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Coeff_Y_NthEvenPowerCell (
        /*[in]*/ long N,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetCoeff_Y_NthEvenPower (
        /*[in]*/ long N,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetCoeff_Y_NthEvenPower (
        /*[in]*/ long N,
        /*[in]*/ double Value ) = 0;
};

struct __declspec(uuid("d05054e1-7aa3-4164-a7e4-3fda1e585bdb"))
ISurfaceCoeff_Y_NthEvenPower : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNumberOfTermsCell))
    IEditorCellPtr NumberOfTermsCell;
    __declspec(property(get=GetNumberOfTerms,put=PutNumberOfTerms))
    long NumberOfTerms;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetNumberOfTermsCell ( );
    long GetNumberOfTerms ( );
    void PutNumberOfTerms (
        long pRetVal );
    IEditorCellPtr Coeff_Y_NthEvenPowerCell (
        long N );
    double GetCoeff_Y_NthEvenPower (
        long N );
    HRESULT SetCoeff_Y_NthEvenPower (
        long N,
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NumberOfTermsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfTerms (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfTerms (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Coeff_Y_NthEvenPowerCell (
        /*[in]*/ long N,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetCoeff_Y_NthEvenPower (
        /*[in]*/ long N,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetCoeff_Y_NthEvenPower (
        /*[in]*/ long N,
        /*[in]*/ double Value ) = 0;
};

struct __declspec(uuid("d4347bc1-7605-4747-96f3-f6c47f023662"))
ISurfaceCoeff_X1P1X2P2_NthEvenPower : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr Coeff_X1_NthEvenPowerCell (
        long N );
    double GetCoeff_X1_NthEvenPower (
        long N );
    HRESULT SetCoeff_X1_NthEvenPower (
        long N,
        double Value );
    IEditorCellPtr Coeff_P1_NthEvenPowerCell (
        long N );
    double GetCoeff_P1_NthEvenPower (
        long N );
    HRESULT SetCoeff_P1_NthEvenPower (
        long N,
        double Value );
    IEditorCellPtr Coeff_X2_NthEvenPowerCell (
        long N );
    double GetCoeff_X2_NthEvenPower (
        long N );
    HRESULT SetCoeff_X2_NthEvenPower (
        long N,
        double Value );
    IEditorCellPtr Coeff_P2_NthEvenPowerCell (
        long N );
    double GetCoeff_P2_NthEvenPower (
        long N );
    HRESULT SetCoeff_P2_NthEvenPower (
        long N,
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Coeff_X1_NthEvenPowerCell (
        /*[in]*/ long N,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetCoeff_X1_NthEvenPower (
        /*[in]*/ long N,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetCoeff_X1_NthEvenPower (
        /*[in]*/ long N,
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall raw_Coeff_P1_NthEvenPowerCell (
        /*[in]*/ long N,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetCoeff_P1_NthEvenPower (
        /*[in]*/ long N,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetCoeff_P1_NthEvenPower (
        /*[in]*/ long N,
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall raw_Coeff_X2_NthEvenPowerCell (
        /*[in]*/ long N,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetCoeff_X2_NthEvenPower (
        /*[in]*/ long N,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetCoeff_X2_NthEvenPower (
        /*[in]*/ long N,
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall raw_Coeff_P2_NthEvenPowerCell (
        /*[in]*/ long N,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetCoeff_P2_NthEvenPower (
        /*[in]*/ long N,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetCoeff_P2_NthEvenPower (
        /*[in]*/ long N,
        /*[in]*/ double Value ) = 0;
};

struct __declspec(uuid("d81fc75d-9990-4b07-9960-1737e7fbed37"))
ISurfaceNthZernike : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNumberOfTermsCell))
    IEditorCellPtr NumberOfTermsCell;
    __declspec(property(get=GetNormRadiusCell))
    IEditorCellPtr NormRadiusCell;
    __declspec(property(get=GetNumberOfTerms,put=PutNumberOfTerms))
    long NumberOfTerms;
    __declspec(property(get=GetNormRadius,put=PutNormRadius))
    double NormRadius;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetNumberOfTermsCell ( );
    IEditorCellPtr GetNormRadiusCell ( );
    IEditorCellPtr NthZernikeCoefficientCell (
        long N );
    long GetNumberOfTerms ( );
    void PutNumberOfTerms (
        long pRetVal );
    double GetNormRadius ( );
    void PutNormRadius (
        double pRetVal );
    double GetNthZernikeCoefficient (
        long N );
    HRESULT SetNthZernikeCoefficient (
        long N,
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NumberOfTermsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NormRadiusCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_NthZernikeCoefficientCell (
        /*[in]*/ long N,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfTerms (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfTerms (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_NormRadius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NormRadius (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetNthZernikeCoefficient (
        /*[in]*/ long N,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetNthZernikeCoefficient (
        /*[in]*/ long N,
        /*[in]*/ double Value ) = 0;
};

struct __declspec(uuid("1468c9e7-0cf7-4bf8-8ad4-7a7bf86c6254"))
ISurfaceAPBC : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr AnCell (
        long N );
    IEditorCellPtr PnCell (
        long N );
    IEditorCellPtr BnCell (
        long N );
    IEditorCellPtr CnCell (
        long N );
    double GetAn (
        long N );
    HRESULT SetAn (
        long N,
        double Value );
    double GetPn (
        long N );
    HRESULT SetPn (
        long N,
        double Value );
    double GetBn (
        long N );
    HRESULT SetBn (
        long N,
        double Value );
    double GetCn (
        long N );
    HRESULT SetCn (
        long N,
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AnCell (
        /*[in]*/ long N,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_PnCell (
        /*[in]*/ long N,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_BnCell (
        /*[in]*/ long N,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CnCell (
        /*[in]*/ long N,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAn (
        /*[in]*/ long N,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetAn (
        /*[in]*/ long N,
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall raw_GetPn (
        /*[in]*/ long N,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetPn (
        /*[in]*/ long N,
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall raw_GetBn (
        /*[in]*/ long N,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetBn (
        /*[in]*/ long N,
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall raw_GetCn (
        /*[in]*/ long N,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetCn (
        /*[in]*/ long N,
        /*[in]*/ double Value ) = 0;
};

struct __declspec(uuid("735bc140-2235-47e0-b96e-bbfcb244754a"))
ISurfaceABCD : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAxCell))
    IEditorCellPtr AxCell;
    __declspec(property(get=GetBxCell))
    IEditorCellPtr BxCell;
    __declspec(property(get=GetCxCell))
    IEditorCellPtr CxCell;
    __declspec(property(get=GetDxCell))
    IEditorCellPtr DxCell;
    __declspec(property(get=GetAyCell))
    IEditorCellPtr AyCell;
    __declspec(property(get=GetByCell))
    IEditorCellPtr ByCell;
    __declspec(property(get=GetCyCell))
    IEditorCellPtr CyCell;
    __declspec(property(get=GetDyCell))
    IEditorCellPtr DyCell;
    __declspec(property(get=GetAx,put=PutAx))
    double Ax;
    __declspec(property(get=GetBx,put=PutBx))
    double Bx;
    __declspec(property(get=Getcx,put=Putcx))
    double cx;
    __declspec(property(get=GetDx,put=PutDx))
    double Dx;
    __declspec(property(get=GetAy,put=PutAy))
    double Ay;
    __declspec(property(get=GetBy,put=PutBy))
    double By;
    __declspec(property(get=GetCy,put=PutCy))
    double Cy;
    __declspec(property(get=GetDy,put=PutDy))
    double Dy;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetAxCell ( );
    IEditorCellPtr GetBxCell ( );
    IEditorCellPtr GetCxCell ( );
    IEditorCellPtr GetDxCell ( );
    IEditorCellPtr GetAyCell ( );
    IEditorCellPtr GetByCell ( );
    IEditorCellPtr GetCyCell ( );
    IEditorCellPtr GetDyCell ( );
    double GetAx ( );
    void PutAx (
        double pRetVal );
    double GetBx ( );
    void PutBx (
        double pRetVal );
    double Getcx ( );
    void Putcx (
        double pRetVal );
    double GetDx ( );
    void PutDx (
        double pRetVal );
    double GetAy ( );
    void PutAy (
        double pRetVal );
    double GetBy ( );
    void PutBy (
        double pRetVal );
    double GetCy ( );
    void PutCy (
        double pRetVal );
    double GetDy ( );
    void PutDy (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AxCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_BxCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CxCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DxCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AyCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ByCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CyCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DyCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Ax (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Ax (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Bx (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Bx (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_cx (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_cx (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Dx (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Dx (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Ay (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Ay (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_By (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_By (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Cy (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Cy (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Dy (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Dy (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("aae74124-ae40-4bbd-8ad5-4bbbe212412c"))
ISurfaceAnnularZernikeSag : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetExtrapolateCell))
    IEditorCellPtr ExtrapolateCell;
    __declspec(property(get=GetObscurationCell))
    IEditorCellPtr ObscurationCell;
    __declspec(property(get=GetNumberOfTermsCell))
    IEditorCellPtr NumberOfTermsCell;
    __declspec(property(get=GetNormRadiusCell))
    IEditorCellPtr NormRadiusCell;
    __declspec(property(get=GetExtrapolate,put=PutExtrapolate))
    long Extrapolate;
    __declspec(property(get=GetObscuration,put=PutObscuration))
    double Obscuration;
    __declspec(property(get=GetNumberOfTerms,put=PutNumberOfTerms))
    long NumberOfTerms;
    __declspec(property(get=GetNormRadius,put=PutNormRadius))
    double NormRadius;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetExtrapolateCell ( );
    IEditorCellPtr GetObscurationCell ( );
    IEditorCellPtr GetNumberOfTermsCell ( );
    IEditorCellPtr GetNormRadiusCell ( );
    IEditorCellPtr GetZernikeTermCell (
        long termN );
    long GetExtrapolate ( );
    void PutExtrapolate (
        long pRetVal );
    double GetObscuration ( );
    void PutObscuration (
        double pRetVal );
    long GetNumberOfTerms ( );
    void PutNumberOfTerms (
        long pRetVal );
    double GetNormRadius ( );
    void PutNormRadius (
        double pRetVal );
    double GetZernikeTerm (
        long termN );
    HRESULT SetZernikeTerm (
        long termN,
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ExtrapolateCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ObscurationCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfTermsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NormRadiusCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetZernikeTermCell (
        /*[in]*/ long termN,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Extrapolate (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Extrapolate (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Obscuration (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Obscuration (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfTerms (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfTerms (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_NormRadius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NormRadius (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetZernikeTerm (
        /*[in]*/ long termN,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetZernikeTerm (
        /*[in]*/ long termN,
        /*[in]*/ double Value ) = 0;
};

struct __declspec(uuid("71430e2e-4c44-4116-a412-4f31bc6d3889"))
ISurfaceAtmospheric : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetZenithCell))
    IEditorCellPtr ZenithCell;
    __declspec(property(get=GetHeightCell))
    IEditorCellPtr HeightCell;
    __declspec(property(get=GetTemperatureCell))
    IEditorCellPtr TemperatureCell;
    __declspec(property(get=GetPressureCell))
    IEditorCellPtr PressureCell;
    __declspec(property(get=GetHumidityCell))
    IEditorCellPtr HumidityCell;
    __declspec(property(get=GetLatitudeCell))
    IEditorCellPtr LatitudeCell;
    __declspec(property(get=GetIsAbsoluteCell))
    IEditorCellPtr IsAbsoluteCell;
    __declspec(property(get=GetZenith,put=PutZenith))
    double Zenith;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTemperature,put=PutTemperature))
    double Temperature;
    __declspec(property(get=GetPressure,put=PutPressure))
    double Pressure;
    __declspec(property(get=GetHumidity,put=PutHumidity))
    double Humidity;
    __declspec(property(get=GetLatitude,put=PutLatitude))
    double Latitude;
    __declspec(property(get=GetIsAbsolute,put=PutIsAbsolute))
    VARIANT_BOOL IsAbsolute;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetZenithCell ( );
    IEditorCellPtr GetHeightCell ( );
    IEditorCellPtr GetTemperatureCell ( );
    IEditorCellPtr GetPressureCell ( );
    IEditorCellPtr GetHumidityCell ( );
    IEditorCellPtr GetLatitudeCell ( );
    IEditorCellPtr GetIsAbsoluteCell ( );
    double GetZenith ( );
    void PutZenith (
        double pRetVal );
    double GetHeight ( );
    void PutHeight (
        double pRetVal );
    double GetTemperature ( );
    void PutTemperature (
        double pRetVal );
    double GetPressure ( );
    void PutPressure (
        double pRetVal );
    double GetHumidity ( );
    void PutHumidity (
        double pRetVal );
    double GetLatitude ( );
    void PutLatitude (
        double pRetVal );
    VARIANT_BOOL GetIsAbsolute ( );
    void PutIsAbsolute (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ZenithCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_HeightCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TemperatureCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_PressureCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_HumidityCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LatitudeCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsAbsoluteCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Zenith (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Zenith (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Temperature (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Temperature (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Pressure (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Pressure (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Humidity (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Humidity (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Latitude (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Latitude (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsAbsolute (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsAbsolute (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("fada3847-9fd9-4c02-8a6a-3af139e5a4e2"))
ISurfaceBiconic : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetXRadiusCell))
    IEditorCellPtr XRadiusCell;
    __declspec(property(get=GetXConicCell))
    IEditorCellPtr XConicCell;
    __declspec(property(get=GetXRadius,put=PutXRadius))
    double XRadius;
    __declspec(property(get=GetXConic,put=PutXConic))
    double XConic;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetXRadiusCell ( );
    IEditorCellPtr GetXConicCell ( );
    double GetXRadius ( );
    void PutXRadius (
        double pRetVal );
    double GetXConic ( );
    void PutXConic (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_XRadiusCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XConicCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XRadius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XRadius (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_XConic (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XConic (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("17a514fc-acea-4b5a-8ec9-c61119437b6d"))
ISurfaceBiconicZernike : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetExtrapolateCell))
    IEditorCellPtr ExtrapolateCell;
    __declspec(property(get=GetXRadiusCell))
    IEditorCellPtr XRadiusCell;
    __declspec(property(get=GetXConicCell))
    IEditorCellPtr XConicCell;
    __declspec(property(get=GetNumberOfTermsCell))
    IEditorCellPtr NumberOfTermsCell;
    __declspec(property(get=GetNormRadiusCell))
    IEditorCellPtr NormRadiusCell;
    __declspec(property(get=GetExtrapolate,put=PutExtrapolate))
    long Extrapolate;
    __declspec(property(get=GetXRadius,put=PutXRadius))
    double XRadius;
    __declspec(property(get=GetXConic,put=PutXConic))
    double XConic;
    __declspec(property(get=GetNumberOfTerms,put=PutNumberOfTerms))
    long NumberOfTerms;
    __declspec(property(get=GetNormRadius,put=PutNormRadius))
    double NormRadius;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetExtrapolateCell ( );
    IEditorCellPtr GetXRadiusCell ( );
    IEditorCellPtr GetXConicCell ( );
    IEditorCellPtr GetNumberOfTermsCell ( );
    IEditorCellPtr GetNormRadiusCell ( );
    long GetExtrapolate ( );
    void PutExtrapolate (
        long pRetVal );
    double GetXRadius ( );
    void PutXRadius (
        double pRetVal );
    double GetXConic ( );
    void PutXConic (
        double pRetVal );
    long GetNumberOfTerms ( );
    void PutNumberOfTerms (
        long pRetVal );
    double GetNormRadius ( );
    void PutNormRadius (
        double pRetVal );
    IEditorCellPtr GetCellXn (
        long N );
    IEditorCellPtr GetCellYn (
        long N );
    IEditorCellPtr GetCellZn (
        long N );
    double GetXn (
        long N );
    double GetYn (
        long N );
    double GetZn (
        long N );
    HRESULT SetXn (
        long N,
        double v );
    HRESULT SetYn (
        long N,
        double v );
    HRESULT SetZn (
        long N,
        double v );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ExtrapolateCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XRadiusCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XConicCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfTermsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NormRadiusCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Extrapolate (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Extrapolate (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_XRadius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XRadius (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_XConic (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XConic (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfTerms (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfTerms (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_NormRadius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NormRadius (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetCellXn (
        /*[in]*/ long N,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetCellYn (
        /*[in]*/ long N,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetCellZn (
        /*[in]*/ long N,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetXn (
        /*[in]*/ long N,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetYn (
        /*[in]*/ long N,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetZn (
        /*[in]*/ long N,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetXn (
        /*[in]*/ long N,
        /*[in]*/ double v ) = 0;
      virtual HRESULT __stdcall raw_SetYn (
        /*[in]*/ long N,
        /*[in]*/ double v ) = 0;
      virtual HRESULT __stdcall raw_SetZn (
        /*[in]*/ long N,
        /*[in]*/ double v ) = 0;
};

struct __declspec(uuid("6705dcae-ed22-44f5-8349-f18b5ef13c85"))
ISurfaceBinary1 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDiffractOrderCell))
    IEditorCellPtr DiffractOrderCell;
    __declspec(property(get=GetIsAbsoluteCell))
    IEditorCellPtr IsAbsoluteCell;
    __declspec(property(get=GetNormRadiusCell))
    IEditorCellPtr NormRadiusCell;
    __declspec(property(get=GetDiffractOrder,put=PutDiffractOrder))
    double DiffractOrder;
    __declspec(property(get=GetIsAbsolute,put=PutIsAbsolute))
    VARIANT_BOOL IsAbsolute;
    __declspec(property(get=GetNormRadius,put=PutNormRadius))
    double NormRadius;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetDiffractOrderCell ( );
    IEditorCellPtr GetIsAbsoluteCell ( );
    IEditorCellPtr GetNormRadiusCell ( );
    double GetDiffractOrder ( );
    void PutDiffractOrder (
        double pRetVal );
    VARIANT_BOOL GetIsAbsolute ( );
    void PutIsAbsolute (
        VARIANT_BOOL pRetVal );
    double GetNormRadius ( );
    void PutNormRadius (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DiffractOrderCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsAbsoluteCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NormRadiusCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DiffractOrder (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DiffractOrder (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsAbsolute (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsAbsolute (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_NormRadius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NormRadius (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("88a297a5-206c-4c82-94e0-a572de1d40ed"))
ISurfaceBinary2 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDiffractOrderCell))
    IEditorCellPtr DiffractOrderCell;
    __declspec(property(get=GetNormRadiusCell))
    IEditorCellPtr NormRadiusCell;
    __declspec(property(get=GetDiffractOrder,put=PutDiffractOrder))
    double DiffractOrder;
    __declspec(property(get=GetNormRadius,put=PutNormRadius))
    double NormRadius;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetDiffractOrderCell ( );
    IEditorCellPtr GetNormRadiusCell ( );
    double GetDiffractOrder ( );
    void PutDiffractOrder (
        double pRetVal );
    double GetNormRadius ( );
    void PutNormRadius (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DiffractOrderCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NormRadiusCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DiffractOrder (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DiffractOrder (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_NormRadius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NormRadius (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("c0ee1b60-5999-4e1f-9410-bb67946661a1"))
ISurfaceBinary3 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetR2Cell))
    IEditorCellPtr R2Cell;
    __declspec(property(get=GetK2Cell))
    IEditorCellPtr K2Cell;
    __declspec(property(get=GetA1Cell))
    IEditorCellPtr A1Cell;
    __declspec(property(get=GetA2Cell))
    IEditorCellPtr A2Cell;
    __declspec(property(get=GetM1Cell))
    IEditorCellPtr M1Cell;
    __declspec(property(get=GetM2Cell))
    IEditorCellPtr M2Cell;
    __declspec(property(get=GetSinDeltaZeroCell))
    IEditorCellPtr SinDeltaZeroCell;
    __declspec(property(get=GetBreakCell))
    IEditorCellPtr BreakCell;
    __declspec(property(get=GetR2,put=PutR2))
    double R2;
    __declspec(property(get=GetK2,put=PutK2))
    double K2;
    __declspec(property(get=GetA1,put=PutA1))
    double A1;
    __declspec(property(get=GetA2,put=PutA2))
    double A2;
    __declspec(property(get=GetM1,put=PutM1))
    double M1;
    __declspec(property(get=Getm2,put=Putm2))
    double m2;
    __declspec(property(get=GetSinDeltaZero,put=PutSinDeltaZero))
    double SinDeltaZero;
    __declspec(property(get=GetBreak,put=PutBreak))
    VARIANT_BOOL Break;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetR2Cell ( );
    IEditorCellPtr GetK2Cell ( );
    IEditorCellPtr GetA1Cell ( );
    IEditorCellPtr GetA2Cell ( );
    IEditorCellPtr GetM1Cell ( );
    IEditorCellPtr GetM2Cell ( );
    IEditorCellPtr GetSinDeltaZeroCell ( );
    IEditorCellPtr GetBreakCell ( );
    double GetR2 ( );
    void PutR2 (
        double pRetVal );
    double GetK2 ( );
    void PutK2 (
        double pRetVal );
    double GetA1 ( );
    void PutA1 (
        double pRetVal );
    double GetA2 ( );
    void PutA2 (
        double pRetVal );
    double GetM1 ( );
    void PutM1 (
        double pRetVal );
    double Getm2 ( );
    void Putm2 (
        double pRetVal );
    double GetSinDeltaZero ( );
    void PutSinDeltaZero (
        double pRetVal );
    VARIANT_BOOL GetBreak ( );
    void PutBreak (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_R2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_K2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_A1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_A2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_M1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_M2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SinDeltaZeroCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_BreakCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_R2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_R2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_K2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_K2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_A1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_A1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_A2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_A2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_M1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_M1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_m2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_m2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_SinDeltaZero (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SinDeltaZero (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Break (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Break (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("5fa944ed-1a9d-414c-b59c-e6d401dd825c"))
ISurfaceBinary4 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNumberOfRadialZonesCell))
    IEditorCellPtr NumberOfRadialZonesCell;
    __declspec(property(get=GetNumberOfAsphericTermsCell))
    IEditorCellPtr NumberOfAsphericTermsCell;
    __declspec(property(get=GetNumberOfPhaseTermsCell))
    IEditorCellPtr NumberOfPhaseTermsCell;
    __declspec(property(get=GetSineDeltaZeroCell))
    IEditorCellPtr SineDeltaZeroCell;
    __declspec(property(get=GetNumberOfRadialZones,put=PutNumberOfRadialZones))
    long NumberOfRadialZones;
    __declspec(property(get=GetNumberOfAsphericTerms,put=PutNumberOfAsphericTerms))
    long NumberOfAsphericTerms;
    __declspec(property(get=GetNumberOfPhaseTerms,put=PutNumberOfPhaseTerms))
    long NumberOfPhaseTerms;
    __declspec(property(get=GetSineDeltaZero,put=PutSineDeltaZero))
    double SineDeltaZero;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetNumberOfRadialZonesCell ( );
    IEditorCellPtr GetNumberOfAsphericTermsCell ( );
    IEditorCellPtr GetNumberOfPhaseTermsCell ( );
    IEditorCellPtr GetSineDeltaZeroCell ( );
    IEditorCellPtr RadialApertureInZoneCell (
        long zoneN );
    IEditorCellPtr RadiusInZoneCell (
        long zoneN );
    IEditorCellPtr ConicInZoneCell (
        long zoneN );
    IEditorCellPtr OrderInZoneCell (
        long zoneN );
    IEditorCellPtr AsphereInZone_P_NthEvenPowerCell (
        long zoneN,
        long N );
    IEditorCellPtr PhaseInZone_P_NthEvenPowerCell (
        long zoneN,
        long N );
    long GetNumberOfRadialZones ( );
    void PutNumberOfRadialZones (
        long pRetVal );
    long GetNumberOfAsphericTerms ( );
    void PutNumberOfAsphericTerms (
        long pRetVal );
    long GetNumberOfPhaseTerms ( );
    void PutNumberOfPhaseTerms (
        long pRetVal );
    double GetSineDeltaZero ( );
    void PutSineDeltaZero (
        double pRetVal );
    double GetRadialApertureInZone (
        long zoneN );
    HRESULT SetRadialApertureInZone (
        long zoneN,
        double Value );
    double GetRadiusInZone (
        long zoneN );
    HRESULT SetRadiusInZone (
        long zoneN,
        double Value );
    double GetConicInZone (
        long zoneN );
    HRESULT SetConicInZone (
        long zoneN,
        double Value );
    double GetOrderInZone (
        long zoneN );
    HRESULT SetOrderInZone (
        long zoneN,
        double Value );
    double GetAsphereInZone_P_NthEvenPower (
        long zoneN,
        long N );
    HRESULT SetAsphereInZone_P_NthEvenPower (
        long zoneN,
        long N,
        double Value );
    double GetPhaseInZone_P_NthEvenPower (
        long zoneN,
        long N );
    HRESULT SetPhaseInZone_P_NthEvenPower (
        long zoneN,
        long N,
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NumberOfRadialZonesCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfAsphericTermsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfPhaseTermsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SineDeltaZeroCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_RadialApertureInZoneCell (
        /*[in]*/ long zoneN,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_RadiusInZoneCell (
        /*[in]*/ long zoneN,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ConicInZoneCell (
        /*[in]*/ long zoneN,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_OrderInZoneCell (
        /*[in]*/ long zoneN,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AsphereInZone_P_NthEvenPowerCell (
        /*[in]*/ long zoneN,
        /*[in]*/ long N,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_PhaseInZone_P_NthEvenPowerCell (
        /*[in]*/ long zoneN,
        /*[in]*/ long N,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfRadialZones (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfRadialZones (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfAsphericTerms (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfAsphericTerms (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfPhaseTerms (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfPhaseTerms (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_SineDeltaZero (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SineDeltaZero (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetRadialApertureInZone (
        /*[in]*/ long zoneN,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetRadialApertureInZone (
        /*[in]*/ long zoneN,
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall raw_GetRadiusInZone (
        /*[in]*/ long zoneN,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetRadiusInZone (
        /*[in]*/ long zoneN,
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall raw_GetConicInZone (
        /*[in]*/ long zoneN,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetConicInZone (
        /*[in]*/ long zoneN,
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall raw_GetOrderInZone (
        /*[in]*/ long zoneN,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetOrderInZone (
        /*[in]*/ long zoneN,
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall raw_GetAsphereInZone_P_NthEvenPower (
        /*[in]*/ long zoneN,
        /*[in]*/ long N,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetAsphereInZone_P_NthEvenPower (
        /*[in]*/ long zoneN,
        /*[in]*/ long N,
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall raw_GetPhaseInZone_P_NthEvenPower (
        /*[in]*/ long zoneN,
        /*[in]*/ long N,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetPhaseInZone_P_NthEvenPower (
        /*[in]*/ long zoneN,
        /*[in]*/ long N,
        /*[in]*/ double Value ) = 0;
};

struct __declspec(uuid("f8bbb68a-6313-49d2-ac10-6846eabfa580"))
ISurfaceBirefringentIn : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDrawAxisCell))
    IEditorCellPtr DrawAxisCell;
    __declspec(property(get=GetModeCell))
    IEditorCellPtr ModeCell;
    __declspec(property(get=GetX_CosineCell))
    IEditorCellPtr X_CosineCell;
    __declspec(property(get=GetY_CosineCell))
    IEditorCellPtr Y_CosineCell;
    __declspec(property(get=GetZ_CosineCell))
    IEditorCellPtr Z_CosineCell;
    __declspec(property(get=GetIgnoreParaxialRaysCell))
    IEditorCellPtr IgnoreParaxialRaysCell;
    __declspec(property(get=GetShapeCell))
    IEditorCellPtr ShapeCell;
    __declspec(property(get=GetRadiusOfRotationCell))
    IEditorCellPtr RadiusOfRotationCell;
    __declspec(property(get=GetA,put=PutA))
    double A;
    __declspec(property(get=GetGradientModeCell))
    IEditorCellPtr GradientModeCell;
    __declspec(property(get=GetDeltaTCell))
    IEditorCellPtr DeltaTCell;
    __declspec(property(get=GetB,put=PutB))
    double B;
    __declspec(property(get=GetAz,put=PutAz))
    double Az;
    __declspec(property(get=GetZ0,put=PutZ0))
    double Z0;
    __declspec(property(get=GetZn,put=PutZn))
    double Zn;
    __declspec(property(get=GetOCell))
    IEditorCellPtr OCell;
    __declspec(property(get=GetECell))
    IEditorCellPtr ECell;
    __declspec(property(get=GetACell_2))
    IEditorCellPtr ACell_2;
    __declspec(property(get=GetBCell))
    IEditorCellPtr BCell;
    __declspec(property(get=GetazCell))
    IEditorCellPtr azCell;
    __declspec(property(get=GetZ0Cell))
    IEditorCellPtr Z0Cell;
    __declspec(property(get=GetZnCell))
    IEditorCellPtr ZnCell;
    __declspec(property(get=GetDrawAxis,put=PutDrawAxis))
    double DrawAxis;
    __declspec(property(get=GetMode,put=PutMode))
    long Mode;
    __declspec(property(get=GetX_Cosine,put=PutX_Cosine))
    double X_Cosine;
    __declspec(property(get=GetY_Cosine,put=PutY_Cosine))
    double Y_Cosine;
    __declspec(property(get=GetZ_Cosine,put=PutZ_Cosine))
    double Z_Cosine;
    __declspec(property(get=GetIgnoreParaxialRays,put=PutIgnoreParaxialRays))
    VARIANT_BOOL IgnoreParaxialRays;
    __declspec(property(get=GetShape,put=PutShape))
    long Shape;
    __declspec(property(get=GetRadiusOfRotation,put=PutRadiusOfRotation))
    double RadiusOfRotation;
    __declspec(property(get=GetGradientMode,put=PutGradientMode))
    long GradientMode;
    __declspec(property(get=GetDeltaT,put=PutDeltaT))
    double DeltaT;
    __declspec(property(get=GetO,put=PutO))
    double O;
    __declspec(property(get=GetE,put=PutE))
    double E;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetDrawAxisCell ( );
    IEditorCellPtr GetModeCell ( );
    IEditorCellPtr GetX_CosineCell ( );
    IEditorCellPtr GetY_CosineCell ( );
    IEditorCellPtr GetZ_CosineCell ( );
    IEditorCellPtr GetIgnoreParaxialRaysCell ( );
    IEditorCellPtr GetShapeCell ( );
    IEditorCellPtr GetRadiusOfRotationCell ( );
    IEditorCellPtr NthEvenOrderTermCell (
        long N );
    IEditorCellPtr GetGradientModeCell ( );
    IEditorCellPtr GetDeltaTCell ( );
    IEditorCellPtr CxCell (
        long N );
    IEditorCellPtr CyCell (
        long N );
    IEditorCellPtr CzCell (
        long N );
    IEditorCellPtr PhiCell (
        long N );
    IEditorCellPtr aCell (
        long N );
    IEditorCellPtr GetOCell ( );
    IEditorCellPtr GetECell ( );
    IEditorCellPtr GetACell_2 ( );
    IEditorCellPtr GetBCell ( );
    IEditorCellPtr Mode7CxCell (
        long N );
    IEditorCellPtr GetazCell ( );
    IEditorCellPtr GetZ0Cell ( );
    IEditorCellPtr GetZnCell ( );
    IEditorCellPtr CmnCell (
        long M,
        long N );
    double GetDrawAxis ( );
    void PutDrawAxis (
        double pRetVal );
    long GetMode ( );
    void PutMode (
        long pRetVal );
    double GetX_Cosine ( );
    void PutX_Cosine (
        double pRetVal );
    double GetY_Cosine ( );
    void PutY_Cosine (
        double pRetVal );
    double GetZ_Cosine ( );
    void PutZ_Cosine (
        double pRetVal );
    VARIANT_BOOL GetIgnoreParaxialRays ( );
    void PutIgnoreParaxialRays (
        VARIANT_BOOL pRetVal );
    long GetShape ( );
    void PutShape (
        long pRetVal );
    double GetRadiusOfRotation ( );
    void PutRadiusOfRotation (
        double pRetVal );
    double GetNthEvenOrderTerm (
        long N );
    HRESULT SetNthEvenOrderTerm (
        long N,
        double Value );
    long GetGradientMode ( );
    void PutGradientMode (
        long pRetVal );
    double GetDeltaT ( );
    void PutDeltaT (
        double pRetVal );
    double GetCx (
        long N );
    HRESULT SetCx (
        long N,
        double Value );
    double GetCy (
        long N );
    HRESULT SetCy (
        long N,
        double Value );
    double GetCz (
        long N );
    HRESULT SetCz (
        long N,
        double Value );
    double GetPhi (
        long N );
    HRESULT SetPhi (
        long N,
        double Value );
    double Get_a (
        long N );
    HRESULT Set_a (
        long N,
        double Value );
    double GetO ( );
    void PutO (
        double pRetVal );
    double GetE ( );
    void PutE (
        double pRetVal );
    double GetA ( );
    void PutA (
        double pRetVal );
    double GetB ( );
    void PutB (
        double pRetVal );
    double GetMode7Cx (
        long N );
    HRESULT SetMode7Cx (
        long N,
        double Value );
    double GetAz ( );
    void PutAz (
        double pRetVal );
    double GetZ0 ( );
    void PutZ0 (
        double pRetVal );
    double GetZn ( );
    void PutZn (
        double pRetVal );
    double GetCmn (
        long M,
        long N );
    HRESULT SetCmn (
        long M,
        long N,
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DrawAxisCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ModeCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X_CosineCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y_CosineCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Z_CosineCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IgnoreParaxialRaysCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShapeCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadiusOfRotationCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_NthEvenOrderTermCell (
        /*[in]*/ long N,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_GradientModeCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DeltaTCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CxCell (
        /*[in]*/ long N,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CyCell (
        /*[in]*/ long N,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CzCell (
        /*[in]*/ long N,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_PhiCell (
        /*[in]*/ long N,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_aCell (
        /*[in]*/ long N,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_OCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ECell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ACell_2 (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_BCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Mode7CxCell (
        /*[in]*/ long N,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_azCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Z0Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZnCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CmnCell (
        /*[in]*/ long M,
        /*[in]*/ long N,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DrawAxis (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DrawAxis (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Mode (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Mode (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_X_Cosine (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X_Cosine (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y_Cosine (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Y_Cosine (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Z_Cosine (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Z_Cosine (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_IgnoreParaxialRays (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IgnoreParaxialRays (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Shape (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Shape (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadiusOfRotation (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RadiusOfRotation (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetNthEvenOrderTerm (
        /*[in]*/ long N,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetNthEvenOrderTerm (
        /*[in]*/ long N,
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_GradientMode (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_GradientMode (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_DeltaT (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DeltaT (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetCx (
        /*[in]*/ long N,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetCx (
        /*[in]*/ long N,
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall raw_GetCy (
        /*[in]*/ long N,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetCy (
        /*[in]*/ long N,
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall raw_GetCz (
        /*[in]*/ long N,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetCz (
        /*[in]*/ long N,
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall raw_GetPhi (
        /*[in]*/ long N,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetPhi (
        /*[in]*/ long N,
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall raw_Get_a (
        /*[in]*/ long N,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Set_a (
        /*[in]*/ long N,
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_O (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_O (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_E (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_E (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_A (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_A (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_B (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_B (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetMode7Cx (
        /*[in]*/ long N,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetMode7Cx (
        /*[in]*/ long N,
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_Az (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Az (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Z0 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Z0 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Zn (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Zn (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetCmn (
        /*[in]*/ long M,
        /*[in]*/ long N,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetCmn (
        /*[in]*/ long M,
        /*[in]*/ long N,
        /*[in]*/ double Value ) = 0;
};

struct __declspec(uuid("484c1b7b-f53f-4085-968c-658909dd3989"))
ISurfaceBirefringentOut : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetShapeCell))
    IEditorCellPtr ShapeCell;
    __declspec(property(get=GetRadiusOfRotationCell))
    IEditorCellPtr RadiusOfRotationCell;
    __declspec(property(get=GetShape,put=PutShape))
    long Shape;
    __declspec(property(get=GetRadiusOfRotation,put=PutRadiusOfRotation))
    double RadiusOfRotation;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetShapeCell ( );
    IEditorCellPtr GetRadiusOfRotationCell ( );
    long GetShape ( );
    void PutShape (
        long pRetVal );
    double GetRadiusOfRotation ( );
    void PutRadiusOfRotation (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ShapeCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadiusOfRotationCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Shape (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Shape (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadiusOfRotation (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RadiusOfRotation (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("eb95a026-36eb-4259-baa1-b3b70ce62d53"))
ISurfaceChebyShv : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNumberOf_X_OrdersCell))
    IEditorCellPtr NumberOf_X_OrdersCell;
    __declspec(property(get=GetNumberOf_Y_OrdersCell))
    IEditorCellPtr NumberOf_Y_OrdersCell;
    __declspec(property(get=GetNorm_X_LengthCell))
    IEditorCellPtr Norm_X_LengthCell;
    __declspec(property(get=GetNorm_Y_LengthCell))
    IEditorCellPtr Norm_Y_LengthCell;
    __declspec(property(get=GetNumberOf_X_Orders,put=PutNumberOf_X_Orders))
    long NumberOf_X_Orders;
    __declspec(property(get=GetNumberOf_Y_Orders,put=PutNumberOf_Y_Orders))
    long NumberOf_Y_Orders;
    __declspec(property(get=GetNorm_X_Length,put=PutNorm_X_Length))
    double Norm_X_Length;
    __declspec(property(get=GetNorm_Y_Length,put=PutNorm_Y_Length))
    double Norm_Y_Length;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetNumberOf_X_OrdersCell ( );
    IEditorCellPtr GetNumberOf_Y_OrdersCell ( );
    IEditorCellPtr GetNorm_X_LengthCell ( );
    IEditorCellPtr GetNorm_Y_LengthCell ( );
    IEditorCellPtr CxyCell (
        long orderX,
        long orderY );
    long GetNumberOf_X_Orders ( );
    void PutNumberOf_X_Orders (
        long pRetVal );
    long GetNumberOf_Y_Orders ( );
    void PutNumberOf_Y_Orders (
        long pRetVal );
    double GetNorm_X_Length ( );
    void PutNorm_X_Length (
        double pRetVal );
    double GetNorm_Y_Length ( );
    void PutNorm_Y_Length (
        double pRetVal );
    double GetCxy (
        long orderX,
        long orderY );
    HRESULT SetCxy (
        long orderX,
        long orderY,
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NumberOf_X_OrdersCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOf_Y_OrdersCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Norm_X_LengthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Norm_Y_LengthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CxyCell (
        /*[in]*/ long orderX,
        /*[in]*/ long orderY,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOf_X_Orders (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOf_X_Orders (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOf_Y_Orders (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOf_Y_Orders (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Norm_X_Length (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Norm_X_Length (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Norm_Y_Length (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Norm_Y_Length (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetCxy (
        /*[in]*/ long orderX,
        /*[in]*/ long orderY,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetCxy (
        /*[in]*/ long orderX,
        /*[in]*/ long orderY,
        /*[in]*/ double Value ) = 0;
};

struct __declspec(uuid("7089cb24-8485-4d35-b982-17a1ee5ef589"))
ISurfaceConjugate : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetX1_Cell))
    IEditorCellPtr X1_Cell;
    __declspec(property(get=GetY1_Cell))
    IEditorCellPtr Y1_Cell;
    __declspec(property(get=GetZ1_Cell))
    IEditorCellPtr Z1_Cell;
    __declspec(property(get=GetX2_Cell))
    IEditorCellPtr X2_Cell;
    __declspec(property(get=GetY2_Cell))
    IEditorCellPtr Y2_Cell;
    __declspec(property(get=GetZ2_Cell))
    IEditorCellPtr Z2_Cell;
    __declspec(property(get=GetX1,put=PutX1))
    double X1;
    __declspec(property(get=GetY1,put=PutY1))
    double Y1;
    __declspec(property(get=GetZ1,put=PutZ1))
    double Z1;
    __declspec(property(get=GetX2,put=PutX2))
    double X2;
    __declspec(property(get=GetY2,put=PutY2))
    double Y2;
    __declspec(property(get=GetZ2,put=PutZ2))
    double Z2;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetX1_Cell ( );
    IEditorCellPtr GetY1_Cell ( );
    IEditorCellPtr GetZ1_Cell ( );
    IEditorCellPtr GetX2_Cell ( );
    IEditorCellPtr GetY2_Cell ( );
    IEditorCellPtr GetZ2_Cell ( );
    double GetX1 ( );
    void PutX1 (
        double pRetVal );
    double GetY1 ( );
    void PutY1 (
        double pRetVal );
    double GetZ1 ( );
    void PutZ1 (
        double pRetVal );
    double GetX2 ( );
    void PutX2 (
        double pRetVal );
    double GetY2 ( );
    void PutY2 (
        double pRetVal );
    double GetZ2 ( );
    void PutZ2 (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X1_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y1_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Z1_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y2_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Z2_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Y1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Z1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Z1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Y2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Z2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Z2 (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("9aa2d1da-633c-49bd-ab74-403ffb266f22"))
ISurfaceCoordinateBreak : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDecenter_X_Cell))
    IEditorCellPtr Decenter_X_Cell;
    __declspec(property(get=GetDecenter_Y_Cell))
    IEditorCellPtr Decenter_Y_Cell;
    __declspec(property(get=GetTiltAbout_X_Cell))
    IEditorCellPtr TiltAbout_X_Cell;
    __declspec(property(get=GetTiltAbout_Y_Cell))
    IEditorCellPtr TiltAbout_Y_Cell;
    __declspec(property(get=GetTiltAbout_Z_Cell))
    IEditorCellPtr TiltAbout_Z_Cell;
    __declspec(property(get=GetOrderCell))
    IEditorCellPtr OrderCell;
    __declspec(property(get=GetDecenter_X,put=PutDecenter_X))
    double Decenter_X;
    __declspec(property(get=GetDecenter_Y,put=PutDecenter_Y))
    double Decenter_Y;
    __declspec(property(get=GetTiltAbout_X,put=PutTiltAbout_X))
    double TiltAbout_X;
    __declspec(property(get=GetTiltAbout_Y,put=PutTiltAbout_Y))
    double TiltAbout_Y;
    __declspec(property(get=GetTiltAbout_Z,put=PutTiltAbout_Z))
    double TiltAbout_Z;
    __declspec(property(get=GetOrder,put=PutOrder))
    long Order;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetDecenter_X_Cell ( );
    IEditorCellPtr GetDecenter_Y_Cell ( );
    IEditorCellPtr GetTiltAbout_X_Cell ( );
    IEditorCellPtr GetTiltAbout_Y_Cell ( );
    IEditorCellPtr GetTiltAbout_Z_Cell ( );
    IEditorCellPtr GetOrderCell ( );
    double GetDecenter_X ( );
    void PutDecenter_X (
        double pRetVal );
    double GetDecenter_Y ( );
    void PutDecenter_Y (
        double pRetVal );
    double GetTiltAbout_X ( );
    void PutTiltAbout_X (
        double pRetVal );
    double GetTiltAbout_Y ( );
    void PutTiltAbout_Y (
        double pRetVal );
    double GetTiltAbout_Z ( );
    void PutTiltAbout_Z (
        double pRetVal );
    long GetOrder ( );
    void PutOrder (
        long pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Decenter_X_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Decenter_Y_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TiltAbout_X_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TiltAbout_Y_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TiltAbout_Z_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_OrderCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Decenter_X (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Decenter_X (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Decenter_Y (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Decenter_Y (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_TiltAbout_X (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TiltAbout_X (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_TiltAbout_Y (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TiltAbout_Y (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_TiltAbout_Z (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TiltAbout_Z (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Order (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Order (
        /*[in]*/ long pRetVal ) = 0;
};

struct __declspec(uuid("70a721dc-d8d3-4a71-a824-b9cb084abd49"))
ISurfaceCubicSpline : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr Z_nEigthsCell (
        long N );
    double Get_Z_nEighths (
        long N );
    HRESULT Set_Z_nEighths (
        long N,
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Z_nEigthsCell (
        /*[in]*/ long N,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Get_Z_nEighths (
        /*[in]*/ long N,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Set_Z_nEighths (
        /*[in]*/ long N,
        /*[in]*/ double Value ) = 0;
};

struct __declspec(uuid("da4946d0-57f2-4cb7-b579-f3d15faadbf9"))
ISurfaceCylinderFrensel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCurvatureCell))
    IEditorCellPtr CurvatureCell;
    __declspec(property(get=GetConicCell))
    IEditorCellPtr ConicCell;
    __declspec(property(get=GetCurvature,put=PutCurvature))
    double Curvature;
    __declspec(property(get=GetConic,put=PutConic))
    double Conic;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetCurvatureCell ( );
    IEditorCellPtr GetConicCell ( );
    double GetCurvature ( );
    void PutCurvature (
        double pRetVal );
    double GetConic ( );
    void PutConic (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CurvatureCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ConicCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Curvature (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Curvature (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Conic (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("1cd33aa5-dcbd-4dd3-9277-19684f0f2b02"))
ISurfaceData : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr NthExtraDataCell (
        long N );
    double GetNthExtraData (
        long N );
    HRESULT SetNthExtraData (
        long N,
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_NthExtraDataCell (
        /*[in]*/ long N,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetNthExtraData (
        /*[in]*/ long N,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetNthExtraData (
        /*[in]*/ long N,
        /*[in]*/ double Value ) = 0;
};

struct __declspec(uuid("b5ff855c-b239-4a3e-bb70-addf3d206918"))
ISurfaceDiffractionGrating : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLinesPerMicroMeterCell))
    IEditorCellPtr LinesPerMicroMeterCell;
    __declspec(property(get=GetDiffractionOrderCell))
    IEditorCellPtr DiffractionOrderCell;
    __declspec(property(get=GetLinesPerMicroMeter,put=PutLinesPerMicroMeter))
    double LinesPerMicroMeter;
    __declspec(property(get=GetDiffractionOrder,put=PutDiffractionOrder))
    double DiffractionOrder;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetLinesPerMicroMeterCell ( );
    IEditorCellPtr GetDiffractionOrderCell ( );
    double GetLinesPerMicroMeter ( );
    void PutLinesPerMicroMeter (
        double pRetVal );
    double GetDiffractionOrder ( );
    void PutDiffractionOrder (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LinesPerMicroMeterCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DiffractionOrderCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LinesPerMicroMeter (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_LinesPerMicroMeter (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_DiffractionOrder (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DiffractionOrder (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("29bc3501-e30b-423a-8c3b-9c3542ae64cd"))
ISurfaceEllipticalGrating1 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLinesPerMicroMeterCell))
    IEditorCellPtr LinesPerMicroMeterCell;
    __declspec(property(get=GetDiffractionOrderCell))
    IEditorCellPtr DiffractionOrderCell;
    __declspec(property(get=GetaCell))
    IEditorCellPtr aCell;
    __declspec(property(get=GetBCell))
    IEditorCellPtr BCell;
    __declspec(property(get=GetcCell))
    IEditorCellPtr cCell;
    __declspec(property(get=GetAlphaCell))
    IEditorCellPtr AlphaCell;
    __declspec(property(get=GetBetaCell))
    IEditorCellPtr BetaCell;
    __declspec(property(get=GetGammaCell))
    IEditorCellPtr GammaCell;
    __declspec(property(get=GetDeltaCell))
    IEditorCellPtr DeltaCell;
    __declspec(property(get=GetEpsilonCell))
    IEditorCellPtr EpsilonCell;
    __declspec(property(get=GetNormRadiusCell))
    IEditorCellPtr NormRadiusCell;
    __declspec(property(get=GetLinesPerMicroMeter,put=PutLinesPerMicroMeter))
    double LinesPerMicroMeter;
    __declspec(property(get=GetDiffractionOrder,put=PutDiffractionOrder))
    double DiffractionOrder;
    __declspec(property(get=GetA,put=PutA))
    double A;
    __declspec(property(get=GetB,put=PutB))
    double B;
    __declspec(property(get=Getc,put=Putc))
    double c;
    __declspec(property(get=GetAlpha,put=PutAlpha))
    double Alpha;
    __declspec(property(get=GetBeta,put=PutBeta))
    double Beta;
    __declspec(property(get=GetGamma,put=PutGamma))
    double Gamma;
    __declspec(property(get=GetDelta,put=PutDelta))
    double Delta;
    __declspec(property(get=GetEpsilon,put=PutEpsilon))
    double Epsilon;
    __declspec(property(get=GetNormRadius,put=PutNormRadius))
    double NormRadius;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetLinesPerMicroMeterCell ( );
    IEditorCellPtr GetDiffractionOrderCell ( );
    IEditorCellPtr GetaCell ( );
    IEditorCellPtr GetBCell ( );
    IEditorCellPtr GetcCell ( );
    IEditorCellPtr GetAlphaCell ( );
    IEditorCellPtr GetBetaCell ( );
    IEditorCellPtr GetGammaCell ( );
    IEditorCellPtr GetDeltaCell ( );
    IEditorCellPtr GetEpsilonCell ( );
    IEditorCellPtr GetNormRadiusCell ( );
    double GetLinesPerMicroMeter ( );
    void PutLinesPerMicroMeter (
        double pRetVal );
    double GetDiffractionOrder ( );
    void PutDiffractionOrder (
        double pRetVal );
    double GetA ( );
    void PutA (
        double pRetVal );
    double GetB ( );
    void PutB (
        double pRetVal );
    double Getc ( );
    void Putc (
        double pRetVal );
    double GetAlpha ( );
    void PutAlpha (
        double pRetVal );
    double GetBeta ( );
    void PutBeta (
        double pRetVal );
    double GetGamma ( );
    void PutGamma (
        double pRetVal );
    double GetDelta ( );
    void PutDelta (
        double pRetVal );
    double GetEpsilon ( );
    void PutEpsilon (
        double pRetVal );
    double GetNormRadius ( );
    void PutNormRadius (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LinesPerMicroMeterCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DiffractionOrderCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_aCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_BCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_cCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AlphaCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_BetaCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_GammaCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DeltaCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EpsilonCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NormRadiusCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LinesPerMicroMeter (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_LinesPerMicroMeter (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_DiffractionOrder (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DiffractionOrder (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_A (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_A (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_B (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_B (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_c (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_c (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Alpha (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Alpha (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Beta (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Beta (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Gamma (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Gamma (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Delta (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Delta (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Epsilon (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Epsilon (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_NormRadius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NormRadius (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("a0357781-22c6-4ffb-8531-8a6e2dcef409"))
ISurfaceEllipticalGrating2 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLinesPerMicroMeterCell))
    IEditorCellPtr LinesPerMicroMeterCell;
    __declspec(property(get=GetDiffractionOrderCell))
    IEditorCellPtr DiffractionOrderCell;
    __declspec(property(get=GetaCell))
    IEditorCellPtr aCell;
    __declspec(property(get=GetBCell))
    IEditorCellPtr BCell;
    __declspec(property(get=GetcCell))
    IEditorCellPtr cCell;
    __declspec(property(get=GetThetaCell))
    IEditorCellPtr ThetaCell;
    __declspec(property(get=GetNormRadiusCell))
    IEditorCellPtr NormRadiusCell;
    __declspec(property(get=GetLinesPerMicroMeter,put=PutLinesPerMicroMeter))
    double LinesPerMicroMeter;
    __declspec(property(get=GetDiffractionOrder,put=PutDiffractionOrder))
    double DiffractionOrder;
    __declspec(property(get=GetA,put=PutA))
    double A;
    __declspec(property(get=GetB,put=PutB))
    double B;
    __declspec(property(get=Getc,put=Putc))
    double c;
    __declspec(property(get=GetTheta,put=PutTheta))
    double Theta;
    __declspec(property(get=GetNormRadius,put=PutNormRadius))
    double NormRadius;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetLinesPerMicroMeterCell ( );
    IEditorCellPtr GetDiffractionOrderCell ( );
    IEditorCellPtr GetaCell ( );
    IEditorCellPtr GetBCell ( );
    IEditorCellPtr GetcCell ( );
    IEditorCellPtr GetThetaCell ( );
    IEditorCellPtr GetNormRadiusCell ( );
    double GetLinesPerMicroMeter ( );
    void PutLinesPerMicroMeter (
        double pRetVal );
    double GetDiffractionOrder ( );
    void PutDiffractionOrder (
        double pRetVal );
    double GetA ( );
    void PutA (
        double pRetVal );
    double GetB ( );
    void PutB (
        double pRetVal );
    double Getc ( );
    void Putc (
        double pRetVal );
    double GetTheta ( );
    void PutTheta (
        double pRetVal );
    double GetNormRadius ( );
    void PutNormRadius (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LinesPerMicroMeterCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DiffractionOrderCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_aCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_BCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_cCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ThetaCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NormRadiusCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LinesPerMicroMeter (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_LinesPerMicroMeter (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_DiffractionOrder (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DiffractionOrder (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_A (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_A (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_B (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_B (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_c (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_c (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Theta (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Theta (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_NormRadius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NormRadius (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("299f052e-ca77-42f6-a140-094a44389601"))
ISurfaceExtendedToroidalGrating : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRadiusOfRotationCell))
    IEditorCellPtr RadiusOfRotationCell;
    __declspec(property(get=GetLinesPerMicroMeterCell))
    IEditorCellPtr LinesPerMicroMeterCell;
    __declspec(property(get=GetDiffractionOrderCell))
    IEditorCellPtr DiffractionOrderCell;
    __declspec(property(get=GetRadiusOfRotation,put=PutRadiusOfRotation))
    double RadiusOfRotation;
    __declspec(property(get=GetLinesPerMicroMeter,put=PutLinesPerMicroMeter))
    double LinesPerMicroMeter;
    __declspec(property(get=GetDiffractionOrder,put=PutDiffractionOrder))
    double DiffractionOrder;
    __declspec(property(get=GetNormRadiusCell))
    IEditorCellPtr NormRadiusCell;
    __declspec(property(get=GetNormRadius,put=PutNormRadius))
    double NormRadius;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetRadiusOfRotationCell ( );
    IEditorCellPtr GetLinesPerMicroMeterCell ( );
    IEditorCellPtr GetDiffractionOrderCell ( );
    double GetRadiusOfRotation ( );
    void PutRadiusOfRotation (
        double pRetVal );
    double GetLinesPerMicroMeter ( );
    void PutLinesPerMicroMeter (
        double pRetVal );
    double GetDiffractionOrder ( );
    void PutDiffractionOrder (
        double pRetVal );
    IEditorCellPtr GetNormRadiusCell ( );
    double GetNormRadius ( );
    void PutNormRadius (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RadiusOfRotationCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LinesPerMicroMeterCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DiffractionOrderCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadiusOfRotation (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RadiusOfRotation (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_LinesPerMicroMeter (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_LinesPerMicroMeter (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_DiffractionOrder (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DiffractionOrder (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_NormRadiusCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NormRadius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NormRadius (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("e0550c75-793e-4c71-a8f0-2e4eebf6f9c8"))
ISurfaceExtendedAsphere : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNormRadiusCell))
    IEditorCellPtr NormRadiusCell;
    __declspec(property(get=GetNormRadius,put=PutNormRadius))
    double NormRadius;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetNormRadiusCell ( );
    double GetNormRadius ( );
    void PutNormRadius (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NormRadiusCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NormRadius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NormRadius (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("1d657164-b039-42c4-a255-cb6d4a3009b0"))
ISurfaceExtendedCubicSpline : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNumberOfStepsCell))
    IEditorCellPtr NumberOfStepsCell;
    __declspec(property(get=GetStepSizeCell))
    IEditorCellPtr StepSizeCell;
    __declspec(property(get=GetNumberOfSteps,put=PutNumberOfSteps))
    long NumberOfSteps;
    __declspec(property(get=GetStepSize,put=PutStepSize))
    double StepSize;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetNumberOfStepsCell ( );
    IEditorCellPtr GetStepSizeCell ( );
    IEditorCellPtr SagAtNthStepCell (
        long N );
    long GetNumberOfSteps ( );
    void PutNumberOfSteps (
        long pRetVal );
    double GetStepSize ( );
    void PutStepSize (
        double pRetVal );
    double GetSagAtNthStep (
        long N );
    HRESULT SetSagAtNthStep (
        long N,
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NumberOfStepsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_StepSizeCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SagAtNthStepCell (
        /*[in]*/ long N,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfSteps (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfSteps (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_StepSize (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_StepSize (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetSagAtNthStep (
        /*[in]*/ long N,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetSagAtNthStep (
        /*[in]*/ long N,
        /*[in]*/ double Value ) = 0;
};

struct __declspec(uuid("76bf0805-5cfb-4d0a-8be6-8fd684e27736"))
ISurfaceExtendedFresnel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCurvatureCell))
    IEditorCellPtr CurvatureCell;
    __declspec(property(get=GetConicCell))
    IEditorCellPtr ConicCell;
    __declspec(property(get=GetCurvature,put=PutCurvature))
    double Curvature;
    __declspec(property(get=GetConic,put=PutConic))
    double Conic;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetCurvatureCell ( );
    IEditorCellPtr GetConicCell ( );
    double GetCurvature ( );
    void PutCurvature (
        double pRetVal );
    double GetConic ( );
    void PutConic (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CurvatureCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ConicCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Curvature (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Curvature (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Conic (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("928a96db-9539-44a9-9570-2e21d62ffc93"))
ISurfaceExtendedOddAsphere : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNormRadiusCell))
    IEditorCellPtr NormRadiusCell;
    __declspec(property(get=GetNormRadius,put=PutNormRadius))
    double NormRadius;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetNormRadiusCell ( );
    double GetNormRadius ( );
    void PutNormRadius (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NormRadiusCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NormRadius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NormRadius (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("cebc6371-ecae-47ad-b875-5f48e1b9d53c"))
ISurfaceExtendedPolynomial : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNormRadiusCell))
    IEditorCellPtr NormRadiusCell;
    __declspec(property(get=GetNormRadius,put=PutNormRadius))
    double NormRadius;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetNormRadiusCell ( );
    double GetNormRadius ( );
    void PutNormRadius (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NormRadiusCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NormRadius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NormRadius (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("79a508de-1a94-4842-88e3-ff48c7b3d59b"))
ISurfaceGeneralizedFresnel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNormRadiusCell))
    IEditorCellPtr NormRadiusCell;
    __declspec(property(get=GetNormRadius,put=PutNormRadius))
    double NormRadius;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetNormRadiusCell ( );
    double GetNormRadius ( );
    void PutNormRadius (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NormRadiusCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NormRadius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NormRadius (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("4d79895b-2f63-4707-b232-abd023ee5112"))
ISurfaceGradient1 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDeltaTCell))
    IEditorCellPtr DeltaTCell;
    __declspec(property(get=Getn0Cell))
    IEditorCellPtr n0Cell;
    __declspec(property(get=GetNr2Cell))
    IEditorCellPtr Nr2Cell;
    __declspec(property(get=GetNr1Cell))
    IEditorCellPtr Nr1Cell;
    __declspec(property(get=GetDeltaT,put=PutDeltaT))
    double DeltaT;
    __declspec(property(get=Getn0,put=Putn0))
    double n0;
    __declspec(property(get=GetNr2,put=PutNr2))
    double Nr2;
    __declspec(property(get=GetNr1,put=PutNr1))
    double Nr1;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetDeltaTCell ( );
    IEditorCellPtr Getn0Cell ( );
    IEditorCellPtr GetNr2Cell ( );
    IEditorCellPtr GetNr1Cell ( );
    double GetDeltaT ( );
    void PutDeltaT (
        double pRetVal );
    double Getn0 ( );
    void Putn0 (
        double pRetVal );
    double GetNr2 ( );
    void PutNr2 (
        double pRetVal );
    double GetNr1 ( );
    void PutNr1 (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DeltaTCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_n0Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Nr2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Nr1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DeltaT (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DeltaT (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_n0 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_n0 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Nr2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Nr2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Nr1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Nr1 (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("a6c133cd-6960-4b33-bc23-93b8bec1356d"))
ISurfaceGradient2 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDeltaTCell))
    IEditorCellPtr DeltaTCell;
    __declspec(property(get=Getn0Cell))
    IEditorCellPtr n0Cell;
    __declspec(property(get=GetNr2Cell))
    IEditorCellPtr Nr2Cell;
    __declspec(property(get=GetNr4Cell))
    IEditorCellPtr Nr4Cell;
    __declspec(property(get=GetNr6Cell))
    IEditorCellPtr Nr6Cell;
    __declspec(property(get=GetNr8Cell))
    IEditorCellPtr Nr8Cell;
    __declspec(property(get=GetNr10Cell))
    IEditorCellPtr Nr10Cell;
    __declspec(property(get=GetNr12Cell))
    IEditorCellPtr Nr12Cell;
    __declspec(property(get=GetDeltaT,put=PutDeltaT))
    double DeltaT;
    __declspec(property(get=Getn0,put=Putn0))
    double n0;
    __declspec(property(get=GetNr2,put=PutNr2))
    double Nr2;
    __declspec(property(get=GetNr4,put=PutNr4))
    double Nr4;
    __declspec(property(get=GetNr6,put=PutNr6))
    double Nr6;
    __declspec(property(get=GetNr8,put=PutNr8))
    double Nr8;
    __declspec(property(get=GetNr10,put=PutNr10))
    double Nr10;
    __declspec(property(get=GetNr12,put=PutNr12))
    double Nr12;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetDeltaTCell ( );
    IEditorCellPtr Getn0Cell ( );
    IEditorCellPtr GetNr2Cell ( );
    IEditorCellPtr GetNr4Cell ( );
    IEditorCellPtr GetNr6Cell ( );
    IEditorCellPtr GetNr8Cell ( );
    IEditorCellPtr GetNr10Cell ( );
    IEditorCellPtr GetNr12Cell ( );
    double GetDeltaT ( );
    void PutDeltaT (
        double pRetVal );
    double Getn0 ( );
    void Putn0 (
        double pRetVal );
    double GetNr2 ( );
    void PutNr2 (
        double pRetVal );
    double GetNr4 ( );
    void PutNr4 (
        double pRetVal );
    double GetNr6 ( );
    void PutNr6 (
        double pRetVal );
    double GetNr8 ( );
    void PutNr8 (
        double pRetVal );
    double GetNr10 ( );
    void PutNr10 (
        double pRetVal );
    double GetNr12 ( );
    void PutNr12 (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DeltaTCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_n0Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Nr2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Nr4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Nr6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Nr8Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Nr10Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Nr12Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DeltaT (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DeltaT (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_n0 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_n0 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Nr2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Nr2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Nr4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Nr4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Nr6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Nr6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Nr8 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Nr8 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Nr10 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Nr10 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Nr12 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Nr12 (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("ca871284-ced0-44ac-8fa3-6871297e1ad3"))
ISurfaceGradient3 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDeltaTCell))
    IEditorCellPtr DeltaTCell;
    __declspec(property(get=Getn0Cell))
    IEditorCellPtr n0Cell;
    __declspec(property(get=GetNr2Cell))
    IEditorCellPtr Nr2Cell;
    __declspec(property(get=GetNr4Cell))
    IEditorCellPtr Nr4Cell;
    __declspec(property(get=GetNr6Cell))
    IEditorCellPtr Nr6Cell;
    __declspec(property(get=GetNz1Cell))
    IEditorCellPtr Nz1Cell;
    __declspec(property(get=GetNz2Cell))
    IEditorCellPtr Nz2Cell;
    __declspec(property(get=GetNz3Cell))
    IEditorCellPtr Nz3Cell;
    __declspec(property(get=GetDeltaT,put=PutDeltaT))
    double DeltaT;
    __declspec(property(get=Getn0,put=Putn0))
    double n0;
    __declspec(property(get=GetNr2,put=PutNr2))
    double Nr2;
    __declspec(property(get=GetNr4,put=PutNr4))
    double Nr4;
    __declspec(property(get=GetNr6,put=PutNr6))
    double Nr6;
    __declspec(property(get=GetNz1,put=PutNz1))
    double Nz1;
    __declspec(property(get=GetNz2,put=PutNz2))
    double Nz2;
    __declspec(property(get=GetNz3,put=PutNz3))
    double Nz3;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetDeltaTCell ( );
    IEditorCellPtr Getn0Cell ( );
    IEditorCellPtr GetNr2Cell ( );
    IEditorCellPtr GetNr4Cell ( );
    IEditorCellPtr GetNr6Cell ( );
    IEditorCellPtr GetNz1Cell ( );
    IEditorCellPtr GetNz2Cell ( );
    IEditorCellPtr GetNz3Cell ( );
    double GetDeltaT ( );
    void PutDeltaT (
        double pRetVal );
    double Getn0 ( );
    void Putn0 (
        double pRetVal );
    double GetNr2 ( );
    void PutNr2 (
        double pRetVal );
    double GetNr4 ( );
    void PutNr4 (
        double pRetVal );
    double GetNr6 ( );
    void PutNr6 (
        double pRetVal );
    double GetNz1 ( );
    void PutNz1 (
        double pRetVal );
    double GetNz2 ( );
    void PutNz2 (
        double pRetVal );
    double GetNz3 ( );
    void PutNz3 (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DeltaTCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_n0Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Nr2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Nr4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Nr6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Nz1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Nz2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Nz3Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DeltaT (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DeltaT (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_n0 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_n0 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Nr2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Nr2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Nr4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Nr4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Nr6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Nr6 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Nz1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Nz1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Nz2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Nz2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Nz3 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Nz3 (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("dca5be1a-f3e2-473f-a894-e0984b83f37d"))
ISurfaceGradient4 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDeltaTCell))
    IEditorCellPtr DeltaTCell;
    __declspec(property(get=Getn0Cell))
    IEditorCellPtr n0Cell;
    __declspec(property(get=GetNx1Cell))
    IEditorCellPtr Nx1Cell;
    __declspec(property(get=GetNx2Cell))
    IEditorCellPtr Nx2Cell;
    __declspec(property(get=GetNy1Cell))
    IEditorCellPtr Ny1Cell;
    __declspec(property(get=GetNy2Cell))
    IEditorCellPtr Ny2Cell;
    __declspec(property(get=GetNz1Cell))
    IEditorCellPtr Nz1Cell;
    __declspec(property(get=GetNz2Cell))
    IEditorCellPtr Nz2Cell;
    __declspec(property(get=GetDeltaT,put=PutDeltaT))
    double DeltaT;
    __declspec(property(get=Getn0,put=Putn0))
    double n0;
    __declspec(property(get=GetNx1,put=PutNx1))
    double Nx1;
    __declspec(property(get=GetNx2,put=PutNx2))
    double Nx2;
    __declspec(property(get=GetNy1,put=PutNy1))
    double Ny1;
    __declspec(property(get=GetNy2,put=PutNy2))
    double Ny2;
    __declspec(property(get=GetNz1,put=PutNz1))
    double Nz1;
    __declspec(property(get=GetNz2,put=PutNz2))
    double Nz2;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetDeltaTCell ( );
    IEditorCellPtr Getn0Cell ( );
    IEditorCellPtr GetNx1Cell ( );
    IEditorCellPtr GetNx2Cell ( );
    IEditorCellPtr GetNy1Cell ( );
    IEditorCellPtr GetNy2Cell ( );
    IEditorCellPtr GetNz1Cell ( );
    IEditorCellPtr GetNz2Cell ( );
    double GetDeltaT ( );
    void PutDeltaT (
        double pRetVal );
    double Getn0 ( );
    void Putn0 (
        double pRetVal );
    double GetNx1 ( );
    void PutNx1 (
        double pRetVal );
    double GetNx2 ( );
    void PutNx2 (
        double pRetVal );
    double GetNy1 ( );
    void PutNy1 (
        double pRetVal );
    double GetNy2 ( );
    void PutNy2 (
        double pRetVal );
    double GetNz1 ( );
    void PutNz1 (
        double pRetVal );
    double GetNz2 ( );
    void PutNz2 (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DeltaTCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_n0Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Nx1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Nx2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Ny1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Ny2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Nz1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Nz2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DeltaT (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DeltaT (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_n0 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_n0 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Nx1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Nx1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Nx2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Nx2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Ny1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Ny1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Ny2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Ny2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Nz1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Nz1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Nz2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Nz2 (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("85dd0f2d-6dab-4dd1-a7cd-f24ac999d31c"))
ISurfaceGradient5 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDeltaTCell))
    IEditorCellPtr DeltaTCell;
    __declspec(property(get=Getn0Cell))
    IEditorCellPtr n0Cell;
    __declspec(property(get=GetNr2Cell))
    IEditorCellPtr Nr2Cell;
    __declspec(property(get=GetNr4Cell))
    IEditorCellPtr Nr4Cell;
    __declspec(property(get=GetNz1Cell))
    IEditorCellPtr Nz1Cell;
    __declspec(property(get=GetNz2Cell))
    IEditorCellPtr Nz2Cell;
    __declspec(property(get=GetNz3Cell))
    IEditorCellPtr Nz3Cell;
    __declspec(property(get=GetNz4Cell))
    IEditorCellPtr Nz4Cell;
    __declspec(property(get=GetX_TangentCell))
    IEditorCellPtr X_TangentCell;
    __declspec(property(get=GetY_TangentCell))
    IEditorCellPtr Y_TangentCell;
    __declspec(property(get=GetDeltaT,put=PutDeltaT))
    double DeltaT;
    __declspec(property(get=Getn0,put=Putn0))
    double n0;
    __declspec(property(get=GetNr2,put=PutNr2))
    double Nr2;
    __declspec(property(get=GetNr4,put=PutNr4))
    double Nr4;
    __declspec(property(get=GetNz1,put=PutNz1))
    double Nz1;
    __declspec(property(get=GetNz2,put=PutNz2))
    double Nz2;
    __declspec(property(get=GetNz3,put=PutNz3))
    double Nz3;
    __declspec(property(get=GetNz4,put=PutNz4))
    double Nz4;
    __declspec(property(get=GetX_Tangent,put=PutX_Tangent))
    double X_Tangent;
    __declspec(property(get=GetY_Tangent,put=PutY_Tangent))
    double Y_Tangent;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetDeltaTCell ( );
    IEditorCellPtr Getn0Cell ( );
    IEditorCellPtr GetNr2Cell ( );
    IEditorCellPtr GetNr4Cell ( );
    IEditorCellPtr GetNz1Cell ( );
    IEditorCellPtr GetNz2Cell ( );
    IEditorCellPtr GetNz3Cell ( );
    IEditorCellPtr GetNz4Cell ( );
    IEditorCellPtr GetX_TangentCell ( );
    IEditorCellPtr GetY_TangentCell ( );
    double GetDeltaT ( );
    void PutDeltaT (
        double pRetVal );
    double Getn0 ( );
    void Putn0 (
        double pRetVal );
    double GetNr2 ( );
    void PutNr2 (
        double pRetVal );
    double GetNr4 ( );
    void PutNr4 (
        double pRetVal );
    double GetNz1 ( );
    void PutNz1 (
        double pRetVal );
    double GetNz2 ( );
    void PutNz2 (
        double pRetVal );
    double GetNz3 ( );
    void PutNz3 (
        double pRetVal );
    double GetNz4 ( );
    void PutNz4 (
        double pRetVal );
    double GetX_Tangent ( );
    void PutX_Tangent (
        double pRetVal );
    double GetY_Tangent ( );
    void PutY_Tangent (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DeltaTCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_n0Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Nr2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Nr4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Nz1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Nz2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Nz3Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Nz4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X_TangentCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y_TangentCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DeltaT (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DeltaT (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_n0 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_n0 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Nr2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Nr2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Nr4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Nr4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Nz1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Nz1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Nz2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Nz2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Nz3 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Nz3 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Nz4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Nz4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X_Tangent (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X_Tangent (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y_Tangent (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Y_Tangent (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("7a02ebbe-8a01-46a6-9b1d-a5bb25cfae51"))
ISurfaceGradient6 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDeltaTCell))
    IEditorCellPtr DeltaTCell;
    __declspec(property(get=GetDeltaT,put=PutDeltaT))
    double DeltaT;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetDeltaTCell ( );
    double GetDeltaT ( );
    void PutDeltaT (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DeltaTCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DeltaT (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DeltaT (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("e1165182-191c-4b82-8537-a1cbb92a1bd4"))
ISurfaceGradient7 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDeltaTCell))
    IEditorCellPtr DeltaTCell;
    __declspec(property(get=Getn0Cell))
    IEditorCellPtr n0Cell;
    __declspec(property(get=GetRCell))
    IEditorCellPtr RCell;
    __declspec(property(get=GetAlphaCell))
    IEditorCellPtr AlphaCell;
    __declspec(property(get=GetBetaCell))
    IEditorCellPtr BetaCell;
    __declspec(property(get=GetDeltaT,put=PutDeltaT))
    double DeltaT;
    __declspec(property(get=Getn0,put=Putn0))
    double n0;
    __declspec(property(get=GetR,put=PutR))
    double R;
    __declspec(property(get=GetAlpha,put=PutAlpha))
    double Alpha;
    __declspec(property(get=GetBeta,put=PutBeta))
    double Beta;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetDeltaTCell ( );
    IEditorCellPtr Getn0Cell ( );
    IEditorCellPtr GetRCell ( );
    IEditorCellPtr GetAlphaCell ( );
    IEditorCellPtr GetBetaCell ( );
    double GetDeltaT ( );
    void PutDeltaT (
        double pRetVal );
    double Getn0 ( );
    void Putn0 (
        double pRetVal );
    double GetR ( );
    void PutR (
        double pRetVal );
    double GetAlpha ( );
    void PutAlpha (
        double pRetVal );
    double GetBeta ( );
    void PutBeta (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DeltaTCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_n0Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AlphaCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_BetaCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DeltaT (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DeltaT (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_n0 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_n0 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_R (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_R (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Alpha (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Alpha (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Beta (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Beta (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("c7ce2277-d2ea-4b8f-b367-bb57d503a456"))
ISurfaceGradient9 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDeltaTCell))
    IEditorCellPtr DeltaTCell;
    __declspec(property(get=GetX_TangentCell))
    IEditorCellPtr X_TangentCell;
    __declspec(property(get=GetY_TangentCell))
    IEditorCellPtr Y_TangentCell;
    __declspec(property(get=GetDeltaT,put=PutDeltaT))
    double DeltaT;
    __declspec(property(get=GetX_Tangent,put=PutX_Tangent))
    double X_Tangent;
    __declspec(property(get=GetY_Tangent,put=PutY_Tangent))
    double Y_Tangent;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetDeltaTCell ( );
    IEditorCellPtr GetX_TangentCell ( );
    IEditorCellPtr GetY_TangentCell ( );
    double GetDeltaT ( );
    void PutDeltaT (
        double pRetVal );
    double GetX_Tangent ( );
    void PutX_Tangent (
        double pRetVal );
    double GetY_Tangent ( );
    void PutY_Tangent (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DeltaTCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X_TangentCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y_TangentCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DeltaT (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DeltaT (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X_Tangent (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X_Tangent (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y_Tangent (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Y_Tangent (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("1773e32a-67c3-4b2f-add4-ca5034dc49fc"))
ISurfaceGradient10 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDeltaTCell))
    IEditorCellPtr DeltaTCell;
    __declspec(property(get=Getn0Cell))
    IEditorCellPtr n0Cell;
    __declspec(property(get=GetNy1Cell))
    IEditorCellPtr Ny1Cell;
    __declspec(property(get=GetNy2Cell))
    IEditorCellPtr Ny2Cell;
    __declspec(property(get=GetNy3Cell))
    IEditorCellPtr Ny3Cell;
    __declspec(property(get=GetNy4Cell))
    IEditorCellPtr Ny4Cell;
    __declspec(property(get=GetNy5Cell))
    IEditorCellPtr Ny5Cell;
    __declspec(property(get=GetNy6Cell))
    IEditorCellPtr Ny6Cell;
    __declspec(property(get=GetDeltaT,put=PutDeltaT))
    double DeltaT;
    __declspec(property(get=Getn0,put=Putn0))
    double n0;
    __declspec(property(get=GetNy1,put=PutNy1))
    double Ny1;
    __declspec(property(get=GetNy2,put=PutNy2))
    double Ny2;
    __declspec(property(get=GetNy3,put=PutNy3))
    double Ny3;
    __declspec(property(get=GetNy4,put=PutNy4))
    double Ny4;
    __declspec(property(get=GetNy5,put=PutNy5))
    double Ny5;
    __declspec(property(get=GetNy6,put=PutNy6))
    double Ny6;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetDeltaTCell ( );
    IEditorCellPtr Getn0Cell ( );
    IEditorCellPtr GetNy1Cell ( );
    IEditorCellPtr GetNy2Cell ( );
    IEditorCellPtr GetNy3Cell ( );
    IEditorCellPtr GetNy4Cell ( );
    IEditorCellPtr GetNy5Cell ( );
    IEditorCellPtr GetNy6Cell ( );
    double GetDeltaT ( );
    void PutDeltaT (
        double pRetVal );
    double Getn0 ( );
    void Putn0 (
        double pRetVal );
    double GetNy1 ( );
    void PutNy1 (
        double pRetVal );
    double GetNy2 ( );
    void PutNy2 (
        double pRetVal );
    double GetNy3 ( );
    void PutNy3 (
        double pRetVal );
    double GetNy4 ( );
    void PutNy4 (
        double pRetVal );
    double GetNy5 ( );
    void PutNy5 (
        double pRetVal );
    double GetNy6 ( );
    void PutNy6 (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DeltaTCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_n0Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Ny1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Ny2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Ny3Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Ny4Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Ny5Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Ny6Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DeltaT (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DeltaT (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_n0 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_n0 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Ny1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Ny1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Ny2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Ny2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Ny3 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Ny3 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Ny4 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Ny4 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Ny5 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Ny5 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Ny6 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Ny6 (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("d0c34ad0-2223-41d0-a4d3-c1880bd31738"))
ISurfaceGradient12 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDeltaTCell))
    IEditorCellPtr DeltaTCell;
    __declspec(property(get=GetOrderCell))
    IEditorCellPtr OrderCell;
    __declspec(property(get=Getn0Cell))
    IEditorCellPtr n0Cell;
    __declspec(property(get=GetDeltaT,put=PutDeltaT))
    double DeltaT;
    __declspec(property(get=GetOrder,put=PutOrder))
    long Order;
    __declspec(property(get=Getn0,put=Putn0))
    double n0;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetDeltaTCell ( );
    IEditorCellPtr GetOrderCell ( );
    IEditorCellPtr Getn0Cell ( );
    IEditorCellPtr NthNxCell (
        long N );
    IEditorCellPtr NthNyCell (
        long N );
    IEditorCellPtr NthNzCell (
        long N );
    double GetDeltaT ( );
    void PutDeltaT (
        double pRetVal );
    long GetOrder ( );
    void PutOrder (
        long pRetVal );
    double Getn0 ( );
    void Putn0 (
        double pRetVal );
    double GetNthNx (
        long N );
    double GetNthNy (
        long N );
    double GetNthNz (
        long N );
    HRESULT SetNthNx (
        long N,
        double Value );
    HRESULT SetNthNy (
        long N,
        double Value );
    HRESULT SetNthNz (
        long N,
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DeltaTCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_OrderCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_n0Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_NthNxCell (
        /*[in]*/ long N,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_NthNyCell (
        /*[in]*/ long N,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_NthNzCell (
        /*[in]*/ long N,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DeltaT (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DeltaT (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Order (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Order (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_n0 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_n0 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetNthNx (
        /*[in]*/ long N,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetNthNy (
        /*[in]*/ long N,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetNthNz (
        /*[in]*/ long N,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetNthNx (
        /*[in]*/ long N,
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall raw_SetNthNy (
        /*[in]*/ long N,
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall raw_SetNthNz (
        /*[in]*/ long N,
        /*[in]*/ double Value ) = 0;
};

struct __declspec(uuid("79563ead-6fcf-42da-acb5-edc78871a64e"))
ISurfaceGradium : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBouleThicknessCell))
    IEditorCellPtr BouleThicknessCell;
    __declspec(property(get=GetDeltaTCell))
    IEditorCellPtr DeltaTCell;
    __declspec(property(get=GetDeltaZCell))
    IEditorCellPtr DeltaZCell;
    __declspec(property(get=GetRef_n_Cell))
    IEditorCellPtr Ref_n_Cell;
    __declspec(property(get=GetDec_x_Cell))
    IEditorCellPtr Dec_x_Cell;
    __declspec(property(get=GetDec_y_Cell))
    IEditorCellPtr Dec_y_Cell;
    __declspec(property(get=GetTilt_x_Cell))
    IEditorCellPtr Tilt_x_Cell;
    __declspec(property(get=GetTilt_y_Cell))
    IEditorCellPtr Tilt_y_Cell;
    __declspec(property(get=GetCappingCell))
    IEditorCellPtr CappingCell;
    __declspec(property(get=GetBouleThickness,put=PutBouleThickness))
    double BouleThickness;
    __declspec(property(get=GetDeltaT,put=PutDeltaT))
    double DeltaT;
    __declspec(property(get=GetDeltaZ,put=PutDeltaZ))
    double DeltaZ;
    __declspec(property(get=GetRef_n,put=PutRef_n))
    double Ref_n;
    __declspec(property(get=GetDec_x,put=PutDec_x))
    double Dec_x;
    __declspec(property(get=GetDec_y,put=PutDec_y))
    double Dec_y;
    __declspec(property(get=GetTilt_x,put=PutTilt_x))
    double Tilt_x;
    __declspec(property(get=GetTilt_y,put=PutTilt_y))
    double Tilt_y;
    __declspec(property(get=GetCapping,put=PutCapping))
    double Capping;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetBouleThicknessCell ( );
    IEditorCellPtr GetDeltaTCell ( );
    IEditorCellPtr GetDeltaZCell ( );
    IEditorCellPtr GetRef_n_Cell ( );
    IEditorCellPtr GetDec_x_Cell ( );
    IEditorCellPtr GetDec_y_Cell ( );
    IEditorCellPtr GetTilt_x_Cell ( );
    IEditorCellPtr GetTilt_y_Cell ( );
    IEditorCellPtr GetCappingCell ( );
    double GetBouleThickness ( );
    void PutBouleThickness (
        double pRetVal );
    double GetDeltaT ( );
    void PutDeltaT (
        double pRetVal );
    double GetDeltaZ ( );
    void PutDeltaZ (
        double pRetVal );
    double GetRef_n ( );
    void PutRef_n (
        double pRetVal );
    double GetDec_x ( );
    void PutDec_x (
        double pRetVal );
    double GetDec_y ( );
    void PutDec_y (
        double pRetVal );
    double GetTilt_x ( );
    void PutTilt_x (
        double pRetVal );
    double GetTilt_y ( );
    void PutTilt_y (
        double pRetVal );
    double GetCapping ( );
    void PutCapping (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BouleThicknessCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DeltaTCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DeltaZCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Ref_n_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Dec_x_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Dec_y_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Tilt_x_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Tilt_y_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CappingCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_BouleThickness (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BouleThickness (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_DeltaT (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DeltaT (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_DeltaZ (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DeltaZ (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Ref_n (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Ref_n (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Dec_x (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Dec_x (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Dec_y (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Dec_y (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Tilt_x (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Tilt_x (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Tilt_y (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Tilt_y (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Capping (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Capping (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("cc9eb238-1a7f-4956-8937-efa8364f0b26"))
ISurfaceGridGradient : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDeltaTCell))
    IEditorCellPtr DeltaTCell;
    __declspec(property(get=GetDeltaT,put=PutDeltaT))
    double DeltaT;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetDeltaTCell ( );
    double GetDeltaT ( );
    void PutDeltaT (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DeltaTCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DeltaT (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DeltaT (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("16a5ed54-63d9-46cc-9fa7-23ec4ff018cc"))
ISurfaceGridPhase : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDiffractOrderCell))
    IEditorCellPtr DiffractOrderCell;
    __declspec(property(get=GetShearDistanceCell))
    IEditorCellPtr ShearDistanceCell;
    __declspec(property(get=GetInterpolateCell))
    IEditorCellPtr InterpolateCell;
    __declspec(property(get=GetDiffractOrder,put=PutDiffractOrder))
    double DiffractOrder;
    __declspec(property(get=GetShearDistance,put=PutShearDistance))
    double ShearDistance;
    __declspec(property(get=GetInterpolate,put=PutInterpolate))
    enum InterpolationMethod Interpolate;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetDiffractOrderCell ( );
    IEditorCellPtr GetShearDistanceCell ( );
    IEditorCellPtr GetInterpolateCell ( );
    double GetDiffractOrder ( );
    void PutDiffractOrder (
        double pRetVal );
    double GetShearDistance ( );
    void PutShearDistance (
        double pRetVal );
    enum InterpolationMethod GetInterpolate ( );
    void PutInterpolate (
        enum InterpolationMethod pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DiffractOrderCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShearDistanceCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_InterpolateCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DiffractOrder (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DiffractOrder (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShearDistance (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ShearDistance (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Interpolate (
        /*[out,retval]*/ enum InterpolationMethod * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Interpolate (
        /*[in]*/ enum InterpolationMethod pRetVal ) = 0;
};

struct __declspec(uuid("6412ce38-37db-44ce-8b6c-9dacb606e4f7"))
ISurfaceGridSag : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInterpolateCell))
    IEditorCellPtr InterpolateCell;
    __declspec(property(get=GetZernikeDecenter_X_Cell))
    IEditorCellPtr ZernikeDecenter_X_Cell;
    __declspec(property(get=GetZernikeDecenter_Y_Cell))
    IEditorCellPtr ZernikeDecenter_Y_Cell;
    __declspec(property(get=GetInterpolate,put=PutInterpolate))
    enum InterpolationMethod Interpolate;
    __declspec(property(get=GetZernikeDecenter_X,put=PutZernikeDecenter_X))
    double ZernikeDecenter_X;
    __declspec(property(get=GetZernikeDecenter_Y,put=PutZernikeDecenter_Y))
    double ZernikeDecenter_Y;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetInterpolateCell ( );
    IEditorCellPtr GetZernikeDecenter_X_Cell ( );
    IEditorCellPtr GetZernikeDecenter_Y_Cell ( );
    enum InterpolationMethod GetInterpolate ( );
    void PutInterpolate (
        enum InterpolationMethod pRetVal );
    double GetZernikeDecenter_X ( );
    void PutZernikeDecenter_X (
        double pRetVal );
    double GetZernikeDecenter_Y ( );
    void PutZernikeDecenter_Y (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_InterpolateCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZernikeDecenter_X_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZernikeDecenter_Y_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Interpolate (
        /*[out,retval]*/ enum InterpolationMethod * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Interpolate (
        /*[in]*/ enum InterpolationMethod pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZernikeDecenter_X (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ZernikeDecenter_X (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZernikeDecenter_Y (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ZernikeDecenter_Y (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("6c25eb5c-a7d3-4405-83d8-efd97b535947"))
ISurfaceHologram1 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetConstruct_X1_Cell))
    IEditorCellPtr Construct_X1_Cell;
    __declspec(property(get=GetConstruct_Y1_Cell))
    IEditorCellPtr Construct_Y1_Cell;
    __declspec(property(get=GetConstruct_Z1_Cell))
    IEditorCellPtr Construct_Z1_Cell;
    __declspec(property(get=GetConstruct_X2_Cell))
    IEditorCellPtr Construct_X2_Cell;
    __declspec(property(get=GetConstruct_Y2_Cell))
    IEditorCellPtr Construct_Y2_Cell;
    __declspec(property(get=GetConstruct_Z2_Cell))
    IEditorCellPtr Construct_Z2_Cell;
    __declspec(property(get=GetConstructWaveCell))
    IEditorCellPtr ConstructWaveCell;
    __declspec(property(get=GetDiffractOrderCell))
    IEditorCellPtr DiffractOrderCell;
    __declspec(property(get=GetConstruct_X1,put=PutConstruct_X1))
    double Construct_X1;
    __declspec(property(get=GetConstruct_Y1,put=PutConstruct_Y1))
    double Construct_Y1;
    __declspec(property(get=GetConstruct_Z1,put=PutConstruct_Z1))
    double Construct_Z1;
    __declspec(property(get=GetConstruct_X2,put=PutConstruct_X2))
    double Construct_X2;
    __declspec(property(get=GetConstruct_Y2,put=PutConstruct_Y2))
    double Construct_Y2;
    __declspec(property(get=GetConstruct_Z2,put=PutConstruct_Z2))
    double Construct_Z2;
    __declspec(property(get=GetConstructWave,put=PutConstructWave))
    double ConstructWave;
    __declspec(property(get=GetDiffractOrder,put=PutDiffractOrder))
    double DiffractOrder;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetConstruct_X1_Cell ( );
    IEditorCellPtr GetConstruct_Y1_Cell ( );
    IEditorCellPtr GetConstruct_Z1_Cell ( );
    IEditorCellPtr GetConstruct_X2_Cell ( );
    IEditorCellPtr GetConstruct_Y2_Cell ( );
    IEditorCellPtr GetConstruct_Z2_Cell ( );
    IEditorCellPtr GetConstructWaveCell ( );
    IEditorCellPtr GetDiffractOrderCell ( );
    double GetConstruct_X1 ( );
    void PutConstruct_X1 (
        double pRetVal );
    double GetConstruct_Y1 ( );
    void PutConstruct_Y1 (
        double pRetVal );
    double GetConstruct_Z1 ( );
    void PutConstruct_Z1 (
        double pRetVal );
    double GetConstruct_X2 ( );
    void PutConstruct_X2 (
        double pRetVal );
    double GetConstruct_Y2 ( );
    void PutConstruct_Y2 (
        double pRetVal );
    double GetConstruct_Z2 ( );
    void PutConstruct_Z2 (
        double pRetVal );
    double GetConstructWave ( );
    void PutConstructWave (
        double pRetVal );
    double GetDiffractOrder ( );
    void PutDiffractOrder (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Construct_X1_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Construct_Y1_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Construct_Z1_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Construct_X2_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Construct_Y2_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Construct_Z2_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ConstructWaveCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DiffractOrderCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Construct_X1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Construct_X1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Construct_Y1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Construct_Y1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Construct_Z1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Construct_Z1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Construct_X2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Construct_X2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Construct_Y2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Construct_Y2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Construct_Z2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Construct_Z2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ConstructWave (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ConstructWave (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_DiffractOrder (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DiffractOrder (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("b2266597-4aa5-44b0-9c17-edc542416e40"))
ISurfaceHologram2 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetConstruct_X1_Cell))
    IEditorCellPtr Construct_X1_Cell;
    __declspec(property(get=GetConstruct_Y1_Cell))
    IEditorCellPtr Construct_Y1_Cell;
    __declspec(property(get=GetConstruct_Z1_Cell))
    IEditorCellPtr Construct_Z1_Cell;
    __declspec(property(get=GetConstruct_X2_Cell))
    IEditorCellPtr Construct_X2_Cell;
    __declspec(property(get=GetConstruct_Y2_Cell))
    IEditorCellPtr Construct_Y2_Cell;
    __declspec(property(get=GetConstruct_Z2_Cell))
    IEditorCellPtr Construct_Z2_Cell;
    __declspec(property(get=GetConstructWaveCell))
    IEditorCellPtr ConstructWaveCell;
    __declspec(property(get=GetDiffractOrderCell))
    IEditorCellPtr DiffractOrderCell;
    __declspec(property(get=GetConstruct_X1,put=PutConstruct_X1))
    double Construct_X1;
    __declspec(property(get=GetConstruct_Y1,put=PutConstruct_Y1))
    double Construct_Y1;
    __declspec(property(get=GetConstruct_Z1,put=PutConstruct_Z1))
    double Construct_Z1;
    __declspec(property(get=GetConstruct_X2,put=PutConstruct_X2))
    double Construct_X2;
    __declspec(property(get=GetConstruct_Y2,put=PutConstruct_Y2))
    double Construct_Y2;
    __declspec(property(get=GetConstruct_Z2,put=PutConstruct_Z2))
    double Construct_Z2;
    __declspec(property(get=GetConstructWave,put=PutConstructWave))
    double ConstructWave;
    __declspec(property(get=GetDiffractOrder,put=PutDiffractOrder))
    double DiffractOrder;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetConstruct_X1_Cell ( );
    IEditorCellPtr GetConstruct_Y1_Cell ( );
    IEditorCellPtr GetConstruct_Z1_Cell ( );
    IEditorCellPtr GetConstruct_X2_Cell ( );
    IEditorCellPtr GetConstruct_Y2_Cell ( );
    IEditorCellPtr GetConstruct_Z2_Cell ( );
    IEditorCellPtr GetConstructWaveCell ( );
    IEditorCellPtr GetDiffractOrderCell ( );
    double GetConstruct_X1 ( );
    void PutConstruct_X1 (
        double pRetVal );
    double GetConstruct_Y1 ( );
    void PutConstruct_Y1 (
        double pRetVal );
    double GetConstruct_Z1 ( );
    void PutConstruct_Z1 (
        double pRetVal );
    double GetConstruct_X2 ( );
    void PutConstruct_X2 (
        double pRetVal );
    double GetConstruct_Y2 ( );
    void PutConstruct_Y2 (
        double pRetVal );
    double GetConstruct_Z2 ( );
    void PutConstruct_Z2 (
        double pRetVal );
    double GetConstructWave ( );
    void PutConstructWave (
        double pRetVal );
    double GetDiffractOrder ( );
    void PutDiffractOrder (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Construct_X1_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Construct_Y1_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Construct_Z1_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Construct_X2_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Construct_Y2_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Construct_Z2_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ConstructWaveCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DiffractOrderCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Construct_X1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Construct_X1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Construct_Y1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Construct_Y1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Construct_Z1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Construct_Z1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Construct_X2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Construct_X2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Construct_Y2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Construct_Y2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Construct_Z2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Construct_Z2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ConstructWave (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ConstructWave (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_DiffractOrder (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DiffractOrder (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("33a7f8da-435d-40d9-813b-7f196bc86812"))
ISurfaceIrregular : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDecenter_X_Cell))
    IEditorCellPtr Decenter_X_Cell;
    __declspec(property(get=GetDecenter_Y_Cell))
    IEditorCellPtr Decenter_Y_Cell;
    __declspec(property(get=GetTiltAbout_X_Cell))
    IEditorCellPtr TiltAbout_X_Cell;
    __declspec(property(get=GetTiltAbout_Y_Cell))
    IEditorCellPtr TiltAbout_Y_Cell;
    __declspec(property(get=GetSphericalCell))
    IEditorCellPtr SphericalCell;
    __declspec(property(get=GetAstigmatismCell))
    IEditorCellPtr AstigmatismCell;
    __declspec(property(get=GetComaCell))
    IEditorCellPtr ComaCell;
    __declspec(property(get=GetAngleCell))
    IEditorCellPtr AngleCell;
    __declspec(property(get=GetDecenter_X,put=PutDecenter_X))
    double Decenter_X;
    __declspec(property(get=GetDecenter_Y,put=PutDecenter_Y))
    double Decenter_Y;
    __declspec(property(get=GetTiltAbout_X,put=PutTiltAbout_X))
    double TiltAbout_X;
    __declspec(property(get=GetTiltAbout_Y,put=PutTiltAbout_Y))
    double TiltAbout_Y;
    __declspec(property(get=GetSpherical,put=PutSpherical))
    double Spherical;
    __declspec(property(get=GetAstigmatism,put=PutAstigmatism))
    double Astigmatism;
    __declspec(property(get=GetComa,put=PutComa))
    double Coma;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetDecenter_X_Cell ( );
    IEditorCellPtr GetDecenter_Y_Cell ( );
    IEditorCellPtr GetTiltAbout_X_Cell ( );
    IEditorCellPtr GetTiltAbout_Y_Cell ( );
    IEditorCellPtr GetSphericalCell ( );
    IEditorCellPtr GetAstigmatismCell ( );
    IEditorCellPtr GetComaCell ( );
    IEditorCellPtr GetAngleCell ( );
    double GetDecenter_X ( );
    void PutDecenter_X (
        double pRetVal );
    double GetDecenter_Y ( );
    void PutDecenter_Y (
        double pRetVal );
    double GetTiltAbout_X ( );
    void PutTiltAbout_X (
        double pRetVal );
    double GetTiltAbout_Y ( );
    void PutTiltAbout_Y (
        double pRetVal );
    double GetSpherical ( );
    void PutSpherical (
        double pRetVal );
    double GetAstigmatism ( );
    void PutAstigmatism (
        double pRetVal );
    double GetComa ( );
    void PutComa (
        double pRetVal );
    double GetAngle ( );
    void PutAngle (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Decenter_X_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Decenter_Y_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TiltAbout_X_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TiltAbout_Y_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SphericalCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AstigmatismCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ComaCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AngleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Decenter_X (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Decenter_X (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Decenter_Y (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Decenter_Y (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_TiltAbout_X (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TiltAbout_X (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_TiltAbout_Y (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TiltAbout_Y (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Spherical (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Spherical (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Astigmatism (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Astigmatism (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coma (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coma (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("23270c40-697b-47d9-b42a-222cd2ee4346"))
ISurfaceJonesMatrix : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAr_Cell))
    IEditorCellPtr Ar_Cell;
    __declspec(property(get=GetAi_Cell))
    IEditorCellPtr Ai_Cell;
    __declspec(property(get=GetBr_Cell))
    IEditorCellPtr Br_Cell;
    __declspec(property(get=GetBi_Cell))
    IEditorCellPtr Bi_Cell;
    __declspec(property(get=GetCr_Cell))
    IEditorCellPtr Cr_Cell;
    __declspec(property(get=GetCi_Cell))
    IEditorCellPtr Ci_Cell;
    __declspec(property(get=GetDr_Cell))
    IEditorCellPtr Dr_Cell;
    __declspec(property(get=GetDi_Cell))
    IEditorCellPtr Di_Cell;
    __declspec(property(get=GetAr,put=PutAr))
    double Ar;
    __declspec(property(get=GetAi,put=PutAi))
    double Ai;
    __declspec(property(get=GetBr,put=PutBr))
    double Br;
    __declspec(property(get=GetBi,put=PutBi))
    double Bi;
    __declspec(property(get=GetCr,put=PutCr))
    double Cr;
    __declspec(property(get=GetCi,put=PutCi))
    double Ci;
    __declspec(property(get=GetDr,put=PutDr))
    double Dr;
    __declspec(property(get=GetDi,put=PutDi))
    double Di;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetAr_Cell ( );
    IEditorCellPtr GetAi_Cell ( );
    IEditorCellPtr GetBr_Cell ( );
    IEditorCellPtr GetBi_Cell ( );
    IEditorCellPtr GetCr_Cell ( );
    IEditorCellPtr GetCi_Cell ( );
    IEditorCellPtr GetDr_Cell ( );
    IEditorCellPtr GetDi_Cell ( );
    double GetAr ( );
    void PutAr (
        double pRetVal );
    double GetAi ( );
    void PutAi (
        double pRetVal );
    double GetBr ( );
    void PutBr (
        double pRetVal );
    double GetBi ( );
    void PutBi (
        double pRetVal );
    double GetCr ( );
    void PutCr (
        double pRetVal );
    double GetCi ( );
    void PutCi (
        double pRetVal );
    double GetDr ( );
    void PutDr (
        double pRetVal );
    double GetDi ( );
    void PutDi (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Ar_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Ai_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Br_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Bi_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Cr_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Ci_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Dr_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Di_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Ar (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Ar (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Ai (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Ai (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Br (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Br (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Bi (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Bi (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Cr (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Cr (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Ci (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Ci (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Dr (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Dr (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Di (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Di (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("b26d7745-8e6f-4889-943b-07c58e12c473"))
ISurfaceNonSequential : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDrawPortsCell))
    IEditorCellPtr DrawPortsCell;
    __declspec(property(get=GetExitLocation_X_Cell))
    IEditorCellPtr ExitLocation_X_Cell;
    __declspec(property(get=GetExitLocation_Y_Cell))
    IEditorCellPtr ExitLocation_Y_Cell;
    __declspec(property(get=GetExitLocation_Z_Cell))
    IEditorCellPtr ExitLocation_Z_Cell;
    __declspec(property(get=GetExitTilt_X_Cell))
    IEditorCellPtr ExitTilt_X_Cell;
    __declspec(property(get=GetExitTilt_Y_Cell))
    IEditorCellPtr ExitTilt_Y_Cell;
    __declspec(property(get=GetExitTilt_Z_Cell))
    IEditorCellPtr ExitTilt_Z_Cell;
    __declspec(property(get=GetOrderCell))
    IEditorCellPtr OrderCell;
    __declspec(property(get=GetReverseRaysCell))
    IEditorCellPtr ReverseRaysCell;
    __declspec(property(get=GetDrawPorts,put=PutDrawPorts))
    long DrawPorts;
    __declspec(property(get=GetExitLocation_X,put=PutExitLocation_X))
    double ExitLocation_X;
    __declspec(property(get=GetExitLocation_Y,put=PutExitLocation_Y))
    double ExitLocation_Y;
    __declspec(property(get=GetExitLocation_Z,put=PutExitLocation_Z))
    double ExitLocation_Z;
    __declspec(property(get=GetExitTilt_X,put=PutExitTilt_X))
    double ExitTilt_X;
    __declspec(property(get=GetExitTilt_Y,put=PutExitTilt_Y))
    double ExitTilt_Y;
    __declspec(property(get=GetExitTilt_Z,put=PutExitTilt_Z))
    double ExitTilt_Z;
    __declspec(property(get=GetOrder,put=PutOrder))
    long Order;
    __declspec(property(get=GetReverseRays,put=PutReverseRays))
    long ReverseRays;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetDrawPortsCell ( );
    IEditorCellPtr GetExitLocation_X_Cell ( );
    IEditorCellPtr GetExitLocation_Y_Cell ( );
    IEditorCellPtr GetExitLocation_Z_Cell ( );
    IEditorCellPtr GetExitTilt_X_Cell ( );
    IEditorCellPtr GetExitTilt_Y_Cell ( );
    IEditorCellPtr GetExitTilt_Z_Cell ( );
    IEditorCellPtr GetOrderCell ( );
    IEditorCellPtr GetReverseRaysCell ( );
    long GetDrawPorts ( );
    void PutDrawPorts (
        long pRetVal );
    double GetExitLocation_X ( );
    void PutExitLocation_X (
        double pRetVal );
    double GetExitLocation_Y ( );
    void PutExitLocation_Y (
        double pRetVal );
    double GetExitLocation_Z ( );
    void PutExitLocation_Z (
        double pRetVal );
    double GetExitTilt_X ( );
    void PutExitTilt_X (
        double pRetVal );
    double GetExitTilt_Y ( );
    void PutExitTilt_Y (
        double pRetVal );
    double GetExitTilt_Z ( );
    void PutExitTilt_Z (
        double pRetVal );
    long GetOrder ( );
    void PutOrder (
        long pRetVal );
    long GetReverseRays ( );
    void PutReverseRays (
        long pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DrawPortsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ExitLocation_X_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ExitLocation_Y_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ExitLocation_Z_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ExitTilt_X_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ExitTilt_Y_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ExitTilt_Z_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_OrderCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ReverseRaysCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DrawPorts (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DrawPorts (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_ExitLocation_X (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ExitLocation_X (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ExitLocation_Y (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ExitLocation_Y (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ExitLocation_Z (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ExitLocation_Z (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ExitTilt_X (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ExitTilt_X (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ExitTilt_Y (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ExitTilt_Y (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ExitTilt_Z (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ExitTilt_Z (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Order (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Order (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_ReverseRays (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ReverseRays (
        /*[in]*/ long pRetVal ) = 0;
};

struct __declspec(uuid("8c204bc8-8235-425d-b8ed-254f8441411e"))
ISurfaceOddCosine : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNumberOfTermsCell))
    IEditorCellPtr NumberOfTermsCell;
    __declspec(property(get=GetNormRadiusCell))
    IEditorCellPtr NormRadiusCell;
    __declspec(property(get=GetNumberOfTerms,put=PutNumberOfTerms))
    long NumberOfTerms;
    __declspec(property(get=GetNormRadius,put=PutNormRadius))
    double NormRadius;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetNumberOfTermsCell ( );
    IEditorCellPtr GetNormRadiusCell ( );
    long GetNumberOfTerms ( );
    void PutNumberOfTerms (
        long pRetVal );
    double GetNormRadius ( );
    void PutNormRadius (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NumberOfTermsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NormRadiusCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfTerms (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfTerms (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_NormRadius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NormRadius (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("e69eecd5-7a79-477b-b470-95b89a243f3c"))
ISurfaceOpticallyFabricatedHologram : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetShapeCell))
    IEditorCellPtr ShapeCell;
    __declspec(property(get=GetHologramTypeCell))
    IEditorCellPtr HologramTypeCell;
    __declspec(property(get=GetOPDModeCell))
    IEditorCellPtr OPDModeCell;
    __declspec(property(get=GetDiffractOrderCell))
    IEditorCellPtr DiffractOrderCell;
    __declspec(property(get=GetCurvatureCell))
    IEditorCellPtr CurvatureCell;
    __declspec(property(get=GetConicCell))
    IEditorCellPtr ConicCell;
    __declspec(property(get=GetRotation_R_Cell))
    IEditorCellPtr Rotation_R_Cell;
    __declspec(property(get=GetaCell))
    IEditorCellPtr aCell;
    __declspec(property(get=GetBCell))
    IEditorCellPtr BCell;
    __declspec(property(get=GetcCell))
    IEditorCellPtr cCell;
    __declspec(property(get=GetNormRadiusCell))
    IEditorCellPtr NormRadiusCell;
    __declspec(property(get=GetShape,put=PutShape))
    long Shape;
    __declspec(property(get=GetHologramType,put=PutHologramType))
    long HologramType;
    __declspec(property(get=GetOPDMode,put=PutOPDMode))
    long OPDMode;
    __declspec(property(get=GetDiffractOrder,put=PutDiffractOrder))
    double DiffractOrder;
    __declspec(property(get=GetCurvature,put=PutCurvature))
    double Curvature;
    __declspec(property(get=GetConic,put=PutConic))
    double Conic;
    __declspec(property(get=GetRotation_R,put=PutRotation_R))
    double Rotation_R;
    __declspec(property(get=GetA,put=PutA))
    double A;
    __declspec(property(get=GetB,put=PutB))
    double B;
    __declspec(property(get=Getc,put=Putc))
    double c;
    __declspec(property(get=GetNormRadius,put=PutNormRadius))
    double NormRadius;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetShapeCell ( );
    IEditorCellPtr GetHologramTypeCell ( );
    IEditorCellPtr GetOPDModeCell ( );
    IEditorCellPtr GetDiffractOrderCell ( );
    IEditorCellPtr GetCurvatureCell ( );
    IEditorCellPtr GetConicCell ( );
    IEditorCellPtr GetRotation_R_Cell ( );
    IEditorCellPtr GetaCell ( );
    IEditorCellPtr GetBCell ( );
    IEditorCellPtr GetcCell ( );
    IEditorCellPtr GetNormRadiusCell ( );
    long GetShape ( );
    void PutShape (
        long pRetVal );
    long GetHologramType ( );
    void PutHologramType (
        long pRetVal );
    long GetOPDMode ( );
    void PutOPDMode (
        long pRetVal );
    double GetDiffractOrder ( );
    void PutDiffractOrder (
        double pRetVal );
    double GetCurvature ( );
    void PutCurvature (
        double pRetVal );
    double GetConic ( );
    void PutConic (
        double pRetVal );
    double GetRotation_R ( );
    void PutRotation_R (
        double pRetVal );
    double GetA ( );
    void PutA (
        double pRetVal );
    double GetB ( );
    void PutB (
        double pRetVal );
    double Getc ( );
    void Putc (
        double pRetVal );
    double GetNormRadius ( );
    void PutNormRadius (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ShapeCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_HologramTypeCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_OPDModeCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DiffractOrderCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CurvatureCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ConicCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Rotation_R_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_aCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_BCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_cCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NormRadiusCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Shape (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Shape (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_HologramType (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_HologramType (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_OPDMode (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OPDMode (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_DiffractOrder (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DiffractOrder (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Curvature (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Curvature (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Conic (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Rotation_R (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Rotation_R (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_A (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_A (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_B (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_B (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_c (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_c (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_NormRadius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NormRadius (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("da1d83d8-292e-4668-ab0c-4c8b5540c0a5"))
ISurfaceParaxial : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFocalLengthCell))
    IEditorCellPtr FocalLengthCell;
    __declspec(property(get=GetOPDModeCell))
    IEditorCellPtr OPDModeCell;
    __declspec(property(get=GetFocalLength,put=PutFocalLength))
    double FocalLength;
    __declspec(property(get=GetOPDMode,put=PutOPDMode))
    long OPDMode;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetFocalLengthCell ( );
    IEditorCellPtr GetOPDModeCell ( );
    double GetFocalLength ( );
    void PutFocalLength (
        double pRetVal );
    long GetOPDMode ( );
    void PutOPDMode (
        long pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FocalLengthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_OPDModeCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FocalLength (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FocalLength (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_OPDMode (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OPDMode (
        /*[in]*/ long pRetVal ) = 0;
};

struct __declspec(uuid("ee363065-bc12-4ab2-b9d1-ecf9d3043649"))
ISurfaceParaxialXY : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetX_PowerCell))
    IEditorCellPtr X_PowerCell;
    __declspec(property(get=GetY_PowerCell))
    IEditorCellPtr Y_PowerCell;
    __declspec(property(get=GetX_Power,put=PutX_Power))
    double X_Power;
    __declspec(property(get=GetY_Power,put=PutY_Power))
    double Y_Power;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetX_PowerCell ( );
    IEditorCellPtr GetY_PowerCell ( );
    double GetX_Power ( );
    void PutX_Power (
        double pRetVal );
    double GetY_Power ( );
    void PutY_Power (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X_PowerCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y_PowerCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X_Power (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X_Power (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y_Power (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Y_Power (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("d9e22f13-027d-456a-aa31-70f1b3f5a8bf"))
ISurfacePeriodic : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAmplitudeCell))
    IEditorCellPtr AmplitudeCell;
    __declspec(property(get=GetX_FrequencyCell))
    IEditorCellPtr X_FrequencyCell;
    __declspec(property(get=GetY_FrequencyCell))
    IEditorCellPtr Y_FrequencyCell;
    __declspec(property(get=GetAmplitude,put=PutAmplitude))
    double Amplitude;
    __declspec(property(get=GetX_Frequency,put=PutX_Frequency))
    double X_Frequency;
    __declspec(property(get=GetY_Frequency,put=PutY_Frequency))
    double Y_Frequency;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetAmplitudeCell ( );
    IEditorCellPtr GetX_FrequencyCell ( );
    IEditorCellPtr GetY_FrequencyCell ( );
    double GetAmplitude ( );
    void PutAmplitude (
        double pRetVal );
    double GetX_Frequency ( );
    void PutX_Frequency (
        double pRetVal );
    double GetY_Frequency ( );
    void PutY_Frequency (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AmplitudeCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X_FrequencyCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y_FrequencyCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Amplitude (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Amplitude (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_X_Frequency (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X_Frequency (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y_Frequency (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Y_Frequency (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("e5dc1cac-0ab3-474b-ab7e-376f274feaf3"))
ISurfaceQTypeAsphere : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTypeCell))
    IEditorCellPtr TypeCell;
    __declspec(property(get=GetNumberOfTermsCell))
    IEditorCellPtr NumberOfTermsCell;
    __declspec(property(get=GetNormRadiusCell))
    IEditorCellPtr NormRadiusCell;
    __declspec(property(get=GetQType,put=PutQType))
    enum QTypes QType;
    __declspec(property(get=GetNumberOfTerms,put=PutNumberOfTerms))
    long NumberOfTerms;
    __declspec(property(get=GetNormRadius,put=PutNormRadius))
    double NormRadius;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetTypeCell ( );
    IEditorCellPtr GetNumberOfTermsCell ( );
    IEditorCellPtr GetNormRadiusCell ( );
    IEditorCellPtr AnCell (
        long N );
    enum QTypes GetQType ( );
    void PutQType (
        enum QTypes pRetVal );
    long GetNumberOfTerms ( );
    void PutNumberOfTerms (
        long pRetVal );
    double GetNormRadius ( );
    void PutNormRadius (
        double pRetVal );
    double GetAn (
        long N );
    HRESULT SetAn (
        long N,
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TypeCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfTermsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NormRadiusCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AnCell (
        /*[in]*/ long N,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_QType (
        /*[out,retval]*/ enum QTypes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_QType (
        /*[in]*/ enum QTypes pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfTerms (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfTerms (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_NormRadius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NormRadius (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAn (
        /*[in]*/ long N,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetAn (
        /*[in]*/ long N,
        /*[in]*/ double Value ) = 0;
};

struct __declspec(uuid("cf433230-1bdb-48c4-8ecd-2e2682dc39a7"))
ISurfaceRadialGrating : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDeffractOrderCell))
    IEditorCellPtr DeffractOrderCell;
    __declspec(property(get=GetGratingModeCell))
    IEditorCellPtr GratingModeCell;
    __declspec(property(get=GetNormRadiusCell))
    IEditorCellPtr NormRadiusCell;
    __declspec(property(get=GetDeffractOrder,put=PutDeffractOrder))
    double DeffractOrder;
    __declspec(property(get=GetGratingMode,put=PutGratingMode))
    long GratingMode;
    __declspec(property(get=GetNormRadius,put=PutNormRadius))
    double NormRadius;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetDeffractOrderCell ( );
    IEditorCellPtr GetGratingModeCell ( );
    IEditorCellPtr GetNormRadiusCell ( );
    double GetDeffractOrder ( );
    void PutDeffractOrder (
        double pRetVal );
    long GetGratingMode ( );
    void PutGratingMode (
        long pRetVal );
    double GetNormRadius ( );
    void PutNormRadius (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DeffractOrderCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_GratingModeCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NormRadiusCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DeffractOrder (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DeffractOrder (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_GratingMode (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_GratingMode (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_NormRadius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NormRadius (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("a06c9bd1-d5c5-4545-a308-23caf5c4f3f6"))
ISurfaceRadialNurbs : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNumberOfTermsCell))
    IEditorCellPtr NumberOfTermsCell;
    __declspec(property(get=GetNumberOfTerms,put=PutNumberOfTerms))
    long NumberOfTerms;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetNumberOfTermsCell ( );
    IEditorCellPtr YnCell (
        long N );
    IEditorCellPtr ZnCell (
        long N );
    IEditorCellPtr WnCell (
        long N );
    long GetNumberOfTerms ( );
    void PutNumberOfTerms (
        long pRetVal );
    double GetYn (
        long N );
    HRESULT SetYn (
        long N,
        double Value );
    double GetZn (
        long N );
    HRESULT SetZn (
        long N,
        double Value );
    double GetWn (
        long N );
    HRESULT SetWn (
        long N,
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NumberOfTermsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_YnCell (
        /*[in]*/ long N,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ZnCell (
        /*[in]*/ long N,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_WnCell (
        /*[in]*/ long N,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfTerms (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfTerms (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetYn (
        /*[in]*/ long N,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetYn (
        /*[in]*/ long N,
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall raw_GetZn (
        /*[in]*/ long N,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetZn (
        /*[in]*/ long N,
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall raw_GetWn (
        /*[in]*/ long N,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetWn (
        /*[in]*/ long N,
        /*[in]*/ double Value ) = 0;
};

struct __declspec(uuid("fbcd55b0-8619-4686-938f-c29bcb3f2576"))
ISurfaceSlide : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetModeCell))
    IEditorCellPtr ModeCell;
    __declspec(property(get=GetX_HalfWidthCell))
    IEditorCellPtr X_HalfWidthCell;
    __declspec(property(get=GetY_HalfWidthCell))
    IEditorCellPtr Y_HalfWidthCell;
    __declspec(property(get=GetMode,put=PutMode))
    long Mode;
    __declspec(property(get=GetX_HalfWidth,put=PutX_HalfWidth))
    double X_HalfWidth;
    __declspec(property(get=GetY_HalfWidth,put=PutY_HalfWidth))
    double Y_HalfWidth;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetModeCell ( );
    IEditorCellPtr GetX_HalfWidthCell ( );
    IEditorCellPtr GetY_HalfWidthCell ( );
    long GetMode ( );
    void PutMode (
        long pRetVal );
    double GetX_HalfWidth ( );
    void PutX_HalfWidth (
        double pRetVal );
    double GetY_HalfWidth ( );
    void PutY_HalfWidth (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ModeCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X_HalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y_HalfWidthCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Mode (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Mode (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_X_HalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X_HalfWidth (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y_HalfWidth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Y_HalfWidth (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("1863ea26-9cde-4946-83de-392ce81ff3b0"))
ISurfaceSuperconic : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNumberOfTermsCell))
    IEditorCellPtr NumberOfTermsCell;
    __declspec(property(get=GetNumberOfTerms,put=PutNumberOfTerms))
    long NumberOfTerms;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetNumberOfTermsCell ( );
    IEditorCellPtr VnCell (
        long N );
    IEditorCellPtr UnCell (
        long N );
    long GetNumberOfTerms ( );
    void PutNumberOfTerms (
        long pRetVal );
    double GetVn (
        long N );
    HRESULT SetVn (
        long N,
        double Value );
    double GetUn (
        long N );
    HRESULT SetUn (
        long N,
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NumberOfTermsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_VnCell (
        /*[in]*/ long N,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_UnCell (
        /*[in]*/ long N,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfTerms (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfTerms (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetVn (
        /*[in]*/ long N,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetVn (
        /*[in]*/ long N,
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall raw_GetUn (
        /*[in]*/ long N,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetUn (
        /*[in]*/ long N,
        /*[in]*/ double Value ) = 0;
};

struct __declspec(uuid("fa2ca9de-880d-4db5-a67d-cce119cc79f7"))
ISurfaceTilted : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetX_TangentCell))
    IEditorCellPtr X_TangentCell;
    __declspec(property(get=GetY_TangentCell))
    IEditorCellPtr Y_TangentCell;
    __declspec(property(get=GetX_Tangent,put=PutX_Tangent))
    double X_Tangent;
    __declspec(property(get=GetY_Tangent,put=PutY_Tangent))
    double Y_Tangent;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetX_TangentCell ( );
    IEditorCellPtr GetY_TangentCell ( );
    double GetX_Tangent ( );
    void PutX_Tangent (
        double pRetVal );
    double GetY_Tangent ( );
    void PutY_Tangent (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X_TangentCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y_TangentCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_X_Tangent (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X_Tangent (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y_Tangent (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Y_Tangent (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("b60cc842-f659-496e-8c1f-71b4b0ea56c4"))
ISurfaceToroidal : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetExtrapolateCell))
    IEditorCellPtr ExtrapolateCell;
    __declspec(property(get=GetRadiusOfRotationCell))
    IEditorCellPtr RadiusOfRotationCell;
    __declspec(property(get=GetExtrapolate,put=PutExtrapolate))
    long Extrapolate;
    __declspec(property(get=GetRadiusOfRotation,put=PutRadiusOfRotation))
    double RadiusOfRotation;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetExtrapolateCell ( );
    IEditorCellPtr GetRadiusOfRotationCell ( );
    long GetExtrapolate ( );
    void PutExtrapolate (
        long pRetVal );
    double GetRadiusOfRotation ( );
    void PutRadiusOfRotation (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ExtrapolateCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadiusOfRotationCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Extrapolate (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Extrapolate (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadiusOfRotation (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RadiusOfRotation (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("2f66201f-95c9-4b86-8724-bfff2ff7a75b"))
ISurfaceToroidalGrat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRadiusOfRotationCell))
    IEditorCellPtr RadiusOfRotationCell;
    __declspec(property(get=GetLinesPerMicroMeterCell))
    IEditorCellPtr LinesPerMicroMeterCell;
    __declspec(property(get=GetDiffractionOrderCell))
    IEditorCellPtr DiffractionOrderCell;
    __declspec(property(get=GetRadiusOfRotation,put=PutRadiusOfRotation))
    double RadiusOfRotation;
    __declspec(property(get=GetLinesPerMicroMeter,put=PutLinesPerMicroMeter))
    double LinesPerMicroMeter;
    __declspec(property(get=GetDiffractionOrder,put=PutDiffractionOrder))
    double DiffractionOrder;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetRadiusOfRotationCell ( );
    IEditorCellPtr GetLinesPerMicroMeterCell ( );
    IEditorCellPtr GetDiffractionOrderCell ( );
    double GetRadiusOfRotation ( );
    void PutRadiusOfRotation (
        double pRetVal );
    double GetLinesPerMicroMeter ( );
    void PutLinesPerMicroMeter (
        double pRetVal );
    double GetDiffractionOrder ( );
    void PutDiffractionOrder (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RadiusOfRotationCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LinesPerMicroMeterCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DiffractionOrderCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadiusOfRotation (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RadiusOfRotation (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_LinesPerMicroMeter (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_LinesPerMicroMeter (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_DiffractionOrder (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DiffractionOrder (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("bc6ab6ca-1619-43d4-903d-85cd29c01590"))
ISurfaceToroidalHologram : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRadiusOfRotationCell))
    IEditorCellPtr RadiusOfRotationCell;
    __declspec(property(get=GetConst_X1_Cell))
    IEditorCellPtr Const_X1_Cell;
    __declspec(property(get=GetConst_Y1_Cell))
    IEditorCellPtr Const_Y1_Cell;
    __declspec(property(get=GetConst_Z1_Cell))
    IEditorCellPtr Const_Z1_Cell;
    __declspec(property(get=GetConst_X2_Cell))
    IEditorCellPtr Const_X2_Cell;
    __declspec(property(get=GetConst_Y2_Cell))
    IEditorCellPtr Const_Y2_Cell;
    __declspec(property(get=GetConst_Z2_Cell))
    IEditorCellPtr Const_Z2_Cell;
    __declspec(property(get=GetConstWaveCell))
    IEditorCellPtr ConstWaveCell;
    __declspec(property(get=GetOrderCell))
    IEditorCellPtr OrderCell;
    __declspec(property(get=GetFlagCell))
    IEditorCellPtr FlagCell;
    __declspec(property(get=GetRadiusOfRotation,put=PutRadiusOfRotation))
    double RadiusOfRotation;
    __declspec(property(get=GetConst_X1,put=PutConst_X1))
    double Const_X1;
    __declspec(property(get=GetConst_Y1,put=PutConst_Y1))
    double Const_Y1;
    __declspec(property(get=GetConst_Z1,put=PutConst_Z1))
    double Const_Z1;
    __declspec(property(get=GetConst_X2,put=PutConst_X2))
    double Const_X2;
    __declspec(property(get=GetConst_Y2,put=PutConst_Y2))
    double Const_Y2;
    __declspec(property(get=GetConst_Z2,put=PutConst_Z2))
    double Const_Z2;
    __declspec(property(get=GetConstWave,put=PutConstWave))
    double ConstWave;
    __declspec(property(get=GetOrder,put=PutOrder))
    double Order;
    __declspec(property(get=GetFlag,put=PutFlag))
    long Flag;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetRadiusOfRotationCell ( );
    IEditorCellPtr GetConst_X1_Cell ( );
    IEditorCellPtr GetConst_Y1_Cell ( );
    IEditorCellPtr GetConst_Z1_Cell ( );
    IEditorCellPtr GetConst_X2_Cell ( );
    IEditorCellPtr GetConst_Y2_Cell ( );
    IEditorCellPtr GetConst_Z2_Cell ( );
    IEditorCellPtr GetConstWaveCell ( );
    IEditorCellPtr GetOrderCell ( );
    IEditorCellPtr GetFlagCell ( );
    double GetRadiusOfRotation ( );
    void PutRadiusOfRotation (
        double pRetVal );
    double GetConst_X1 ( );
    void PutConst_X1 (
        double pRetVal );
    double GetConst_Y1 ( );
    void PutConst_Y1 (
        double pRetVal );
    double GetConst_Z1 ( );
    void PutConst_Z1 (
        double pRetVal );
    double GetConst_X2 ( );
    void PutConst_X2 (
        double pRetVal );
    double GetConst_Y2 ( );
    void PutConst_Y2 (
        double pRetVal );
    double GetConst_Z2 ( );
    void PutConst_Z2 (
        double pRetVal );
    double GetConstWave ( );
    void PutConstWave (
        double pRetVal );
    double GetOrder ( );
    void PutOrder (
        double pRetVal );
    long GetFlag ( );
    void PutFlag (
        long pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RadiusOfRotationCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Const_X1_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Const_Y1_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Const_Z1_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Const_X2_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Const_Y2_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Const_Z2_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ConstWaveCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_OrderCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FlagCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadiusOfRotation (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RadiusOfRotation (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Const_X1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Const_X1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Const_Y1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Const_Y1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Const_Z1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Const_Z1 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Const_X2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Const_X2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Const_Y2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Const_Y2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Const_Z2 (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Const_Z2 (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ConstWave (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ConstWave (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Order (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Order (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Flag (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Flag (
        /*[in]*/ long pRetVal ) = 0;
};

struct __declspec(uuid("513e85b8-b351-4a52-985b-d9840367c344"))
ISurfaceToroidalNurbs : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRadiusOfRotationCell))
    IEditorCellPtr RadiusOfRotationCell;
    __declspec(property(get=GetMinimum_X_Cell))
    IEditorCellPtr Minimum_X_Cell;
    __declspec(property(get=GetMinimumAngleCell))
    IEditorCellPtr MinimumAngleCell;
    __declspec(property(get=GetMaximum_X_Cell))
    IEditorCellPtr Maximum_X_Cell;
    __declspec(property(get=GetMaximumAngleCell))
    IEditorCellPtr MaximumAngleCell;
    __declspec(property(get=GetRadiusOfRotation,put=PutRadiusOfRotation))
    double RadiusOfRotation;
    __declspec(property(get=GetMinimum_X,put=PutMinimum_X))
    double Minimum_X;
    __declspec(property(get=GetMinimumAngle,put=PutMinimumAngle))
    double MinimumAngle;
    __declspec(property(get=GetMaximum_X,put=PutMaximum_X))
    double Maximum_X;
    __declspec(property(get=GetMaximumAngle,put=PutMaximumAngle))
    double MaximumAngle;
    __declspec(property(get=GetNumberOfTermsCell))
    IEditorCellPtr NumberOfTermsCell;
    __declspec(property(get=GetNumberOfTerms,put=PutNumberOfTerms))
    long NumberOfTerms;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetRadiusOfRotationCell ( );
    IEditorCellPtr GetMinimum_X_Cell ( );
    IEditorCellPtr GetMinimumAngleCell ( );
    IEditorCellPtr GetMaximum_X_Cell ( );
    IEditorCellPtr GetMaximumAngleCell ( );
    double GetRadiusOfRotation ( );
    void PutRadiusOfRotation (
        double pRetVal );
    double GetMinimum_X ( );
    void PutMinimum_X (
        double pRetVal );
    double GetMinimumAngle ( );
    void PutMinimumAngle (
        double pRetVal );
    double GetMaximum_X ( );
    void PutMaximum_X (
        double pRetVal );
    double GetMaximumAngle ( );
    void PutMaximumAngle (
        double pRetVal );
    IEditorCellPtr GetNumberOfTermsCell ( );
    IEditorCellPtr YnCell (
        long N );
    IEditorCellPtr ZnCell (
        long N );
    IEditorCellPtr WnCell (
        long N );
    long GetNumberOfTerms ( );
    void PutNumberOfTerms (
        long pRetVal );
    double GetYn (
        long N );
    double GetZn (
        long N );
    double GetWn (
        long N );
    HRESULT SetYn (
        long N,
        double Value );
    HRESULT SetZn (
        long N,
        double Value );
    HRESULT SetWn (
        long N,
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RadiusOfRotationCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Minimum_X_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinimumAngleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Maximum_X_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumAngleCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadiusOfRotation (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RadiusOfRotation (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Minimum_X (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Minimum_X (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinimumAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MinimumAngle (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Maximum_X (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Maximum_X (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaximumAngle (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfTermsCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_YnCell (
        /*[in]*/ long N,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ZnCell (
        /*[in]*/ long N,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_WnCell (
        /*[in]*/ long N,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfTerms (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfTerms (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetYn (
        /*[in]*/ long N,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetZn (
        /*[in]*/ long N,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetWn (
        /*[in]*/ long N,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetYn (
        /*[in]*/ long N,
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall raw_SetZn (
        /*[in]*/ long N,
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall raw_SetWn (
        /*[in]*/ long N,
        /*[in]*/ double Value ) = 0;
};

struct __declspec(uuid("05448d1b-31c0-4397-ba47-ed2381592847"))
ISurfaceVariableLineSpaceGrating : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDiffractOrderCell))
    IEditorCellPtr DiffractOrderCell;
    __declspec(property(get=GetFocalRadius_L_Cell))
    IEditorCellPtr FocalRadius_L_Cell;
    __declspec(property(get=GetCosineAlphaCell))
    IEditorCellPtr CosineAlphaCell;
    __declspec(property(get=GetCosineBetaCell))
    IEditorCellPtr CosineBetaCell;
    __declspec(property(get=GetLambdaZeroCell))
    IEditorCellPtr LambdaZeroCell;
    __declspec(property(get=GetDiffractOrder,put=PutDiffractOrder))
    double DiffractOrder;
    __declspec(property(get=GetFocalRadius_L,put=PutFocalRadius_L))
    double FocalRadius_L;
    __declspec(property(get=GetCosineAlpha,put=PutCosineAlpha))
    double CosineAlpha;
    __declspec(property(get=GetCosineBeta,put=PutCosineBeta))
    double CosineBeta;
    __declspec(property(get=GetLambdaZero,put=PutLambdaZero))
    double LambdaZero;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetDiffractOrderCell ( );
    IEditorCellPtr GetFocalRadius_L_Cell ( );
    IEditorCellPtr GetCosineAlphaCell ( );
    IEditorCellPtr GetCosineBetaCell ( );
    IEditorCellPtr GetLambdaZeroCell ( );
    double GetDiffractOrder ( );
    void PutDiffractOrder (
        double pRetVal );
    double GetFocalRadius_L ( );
    void PutFocalRadius_L (
        double pRetVal );
    double GetCosineAlpha ( );
    void PutCosineAlpha (
        double pRetVal );
    double GetCosineBeta ( );
    void PutCosineBeta (
        double pRetVal );
    double GetLambdaZero ( );
    void PutLambdaZero (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DiffractOrderCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FocalRadius_L_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CosineAlphaCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CosineBetaCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LambdaZeroCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DiffractOrder (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DiffractOrder (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_FocalRadius_L (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FocalRadius_L (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CosineAlpha (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CosineAlpha (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_CosineBeta (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CosineBeta (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_LambdaZero (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_LambdaZero (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("920c1623-df44-4b49-a07b-fc1f08e3b0d3"))
ISurfaceZernikeAnnularPhase : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDiffractOrderCell))
    IEditorCellPtr DiffractOrderCell;
    __declspec(property(get=GetExtrapolateCell))
    IEditorCellPtr ExtrapolateCell;
    __declspec(property(get=GetObscurationCell))
    IEditorCellPtr ObscurationCell;
    __declspec(property(get=GetDiffractOrder,put=PutDiffractOrder))
    double DiffractOrder;
    __declspec(property(get=GetExtrapolate,put=PutExtrapolate))
    long Extrapolate;
    __declspec(property(get=GetObscuration,put=PutObscuration))
    double Obscuration;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetDiffractOrderCell ( );
    IEditorCellPtr GetExtrapolateCell ( );
    IEditorCellPtr GetObscurationCell ( );
    double GetDiffractOrder ( );
    void PutDiffractOrder (
        double pRetVal );
    long GetExtrapolate ( );
    void PutExtrapolate (
        long pRetVal );
    double GetObscuration ( );
    void PutObscuration (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DiffractOrderCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ExtrapolateCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ObscurationCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DiffractOrder (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DiffractOrder (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Extrapolate (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Extrapolate (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Obscuration (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Obscuration (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("233dba22-a8dd-48c8-a8bc-22a5c225c14f"))
ISurfaceZernikeFringePhase : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDiffractOrderCell))
    IEditorCellPtr DiffractOrderCell;
    __declspec(property(get=GetExtrapolateCell))
    IEditorCellPtr ExtrapolateCell;
    __declspec(property(get=GetDiffractOrder,put=PutDiffractOrder))
    double DiffractOrder;
    __declspec(property(get=GetExtrapolate,put=PutExtrapolate))
    long Extrapolate;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetDiffractOrderCell ( );
    IEditorCellPtr GetExtrapolateCell ( );
    double GetDiffractOrder ( );
    void PutDiffractOrder (
        double pRetVal );
    long GetExtrapolate ( );
    void PutExtrapolate (
        long pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DiffractOrderCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ExtrapolateCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DiffractOrder (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DiffractOrder (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Extrapolate (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Extrapolate (
        /*[in]*/ long pRetVal ) = 0;
};

struct __declspec(uuid("747d3c2c-82d3-4841-b4aa-b2216486a53f"))
ISurfaceZernikeFringeSag : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetExtrapolateCell))
    IEditorCellPtr ExtrapolateCell;
    __declspec(property(get=GetZernikeDecenter_X_Cell))
    IEditorCellPtr ZernikeDecenter_X_Cell;
    __declspec(property(get=GetZernikeDecenter_Y_Cell))
    IEditorCellPtr ZernikeDecenter_Y_Cell;
    __declspec(property(get=GetExtrapolate,put=PutExtrapolate))
    long Extrapolate;
    __declspec(property(get=GetZernikeDecenter_X,put=PutZernikeDecenter_X))
    double ZernikeDecenter_X;
    __declspec(property(get=GetZernikeDecenter_Y,put=PutZernikeDecenter_Y))
    double ZernikeDecenter_Y;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetExtrapolateCell ( );
    IEditorCellPtr GetZernikeDecenter_X_Cell ( );
    IEditorCellPtr GetZernikeDecenter_Y_Cell ( );
    long GetExtrapolate ( );
    void PutExtrapolate (
        long pRetVal );
    double GetZernikeDecenter_X ( );
    void PutZernikeDecenter_X (
        double pRetVal );
    double GetZernikeDecenter_Y ( );
    void PutZernikeDecenter_Y (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ExtrapolateCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZernikeDecenter_X_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZernikeDecenter_Y_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Extrapolate (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Extrapolate (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZernikeDecenter_X (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ZernikeDecenter_X (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZernikeDecenter_Y (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ZernikeDecenter_Y (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("98de5872-a983-4f6d-b0c8-2e8c2c2318b7"))
ISurfaceZernikeStandardPhase : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDiffractOrderCell))
    IEditorCellPtr DiffractOrderCell;
    __declspec(property(get=GetExtrapolateCell))
    IEditorCellPtr ExtrapolateCell;
    __declspec(property(get=GetDiffractOrder,put=PutDiffractOrder))
    double DiffractOrder;
    __declspec(property(get=GetExtrapolate,put=PutExtrapolate))
    long Extrapolate;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetDiffractOrderCell ( );
    IEditorCellPtr GetExtrapolateCell ( );
    double GetDiffractOrder ( );
    void PutDiffractOrder (
        double pRetVal );
    long GetExtrapolate ( );
    void PutExtrapolate (
        long pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DiffractOrderCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ExtrapolateCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DiffractOrder (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DiffractOrder (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Extrapolate (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Extrapolate (
        /*[in]*/ long pRetVal ) = 0;
};

struct __declspec(uuid("e2bf4d28-6166-4035-875e-394f1f658806"))
ISurfaceZernikeStandardSag : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetExtrapolateCell))
    IEditorCellPtr ExtrapolateCell;
    __declspec(property(get=GetZernikeDecenter_X_Cell))
    IEditorCellPtr ZernikeDecenter_X_Cell;
    __declspec(property(get=GetZernikeDecenter_Y_Cell))
    IEditorCellPtr ZernikeDecenter_Y_Cell;
    __declspec(property(get=GetExtrapolate,put=PutExtrapolate))
    long Extrapolate;
    __declspec(property(get=GetZernikeDecenter_X,put=PutZernikeDecenter_X))
    double ZernikeDecenter_X;
    __declspec(property(get=GetZernikeDecenter_Y,put=PutZernikeDecenter_Y))
    double ZernikeDecenter_Y;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetExtrapolateCell ( );
    IEditorCellPtr GetZernikeDecenter_X_Cell ( );
    IEditorCellPtr GetZernikeDecenter_Y_Cell ( );
    long GetExtrapolate ( );
    void PutExtrapolate (
        long pRetVal );
    double GetZernikeDecenter_X ( );
    void PutZernikeDecenter_X (
        double pRetVal );
    double GetZernikeDecenter_Y ( );
    void PutZernikeDecenter_Y (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ExtrapolateCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZernikeDecenter_X_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZernikeDecenter_Y_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Extrapolate (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Extrapolate (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZernikeDecenter_X (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ZernikeDecenter_X (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZernikeDecenter_Y (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ZernikeDecenter_Y (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("69807bda-440d-4f8c-a58d-1fb5cce87be2"))
ISurfaceZonePlate : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetModeCell))
    IEditorCellPtr ModeCell;
    __declspec(property(get=GetDelta_R_Cell))
    IEditorCellPtr Delta_R_Cell;
    __declspec(property(get=GetReferenceWaveCell))
    IEditorCellPtr ReferenceWaveCell;
    __declspec(property(get=GetMode,put=PutMode))
    double Mode;
    __declspec(property(get=GetDelta_R,put=PutDelta_R))
    double Delta_R;
    __declspec(property(get=GetReferenceWave,put=PutReferenceWave))
    double ReferenceWave;

    //
    // Wrapper methods for error-handling
    //

    IEditorCellPtr GetModeCell ( );
    IEditorCellPtr GetDelta_R_Cell ( );
    IEditorCellPtr GetReferenceWaveCell ( );
    double GetMode ( );
    void PutMode (
        double pRetVal );
    double GetDelta_R ( );
    void PutDelta_R (
        double pRetVal );
    double GetReferenceWave ( );
    void PutReferenceWave (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ModeCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Delta_R_Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceWaveCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Mode (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Mode (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Delta_R (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Delta_R (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceWave (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceWave (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("79ebc8f8-8745-4790-8453-b42eadd3ff85"))
ITDERow : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsActive))
    VARIANT_BOOL IsActive;
    __declspec(property(get=GetOperandNumber))
    long OperandNumber;
    __declspec(property(get=GetTypeName))
    _bstr_t TypeName;
    __declspec(property(get=GetType))
    enum ToleranceOperandType Type;
    __declspec(property(get=GetDoNotAdjustDuringInverseTolerancing,put=PutDoNotAdjustDuringInverseTolerancing))
    VARIANT_BOOL DoNotAdjustDuringInverseTolerancing;
    __declspec(property(get=GetRowColor,put=PutRowColor))
    enum ZemaxColor RowColor;
    __declspec(property(get=GetMin,put=PutMin))
    double Min;
    __declspec(property(get=GetMinCell))
    IEditorCellPtr MinCell;
    __declspec(property(get=GetIsMinUsed))
    VARIANT_BOOL IsMinUsed;
    __declspec(property(get=GetMax,put=PutMax))
    double Max;
    __declspec(property(get=GetMaxCell))
    IEditorCellPtr MaxCell;
    __declspec(property(get=GetIsMaxUsed))
    VARIANT_BOOL IsMaxUsed;
    __declspec(property(get=GetComment,put=PutComment))
    _bstr_t Comment;
    __declspec(property(get=GetCommentCell))
    IEditorCellPtr CommentCell;
    __declspec(property(get=GetParam1,put=PutParam1))
    long Param1;
    __declspec(property(get=GetParam1Cell))
    IEditorCellPtr Param1Cell;
    __declspec(property(get=GetIsParam1Used))
    VARIANT_BOOL IsParam1Used;
    __declspec(property(get=GetParam2,put=PutParam2))
    long Param2;
    __declspec(property(get=GetParam2Cell))
    IEditorCellPtr Param2Cell;
    __declspec(property(get=GetIsParam2Used))
    VARIANT_BOOL IsParam2Used;
    __declspec(property(get=GetParam3,put=PutParam3))
    long Param3;
    __declspec(property(get=GetParam3Cell))
    IEditorCellPtr Param3Cell;
    __declspec(property(get=GetIsParam3Used))
    VARIANT_BOOL IsParam3Used;
    __declspec(property(get=GetNominal))
    double Nominal;
    __declspec(property(get=GetNominalCell))
    IEditorCellPtr NominalCell;
    __declspec(property(get=GetIsNominalUsed))
    VARIANT_BOOL IsNominalUsed;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsActive ( );
    long GetOperandNumber ( );
    IEditorCellPtr GetOperandCell (
        enum ToleranceColumn Col );
    _bstr_t GetTypeName ( );
    enum ToleranceOperandType GetType ( );
    SAFEARRAY * AvailableOperandTypes ( );
    VARIANT_BOOL ChangeType (
        enum ToleranceOperandType Type );
    VARIANT_BOOL GetDoNotAdjustDuringInverseTolerancing ( );
    void PutDoNotAdjustDuringInverseTolerancing (
        VARIANT_BOOL pRetVal );
    enum ZemaxColor GetRowColor ( );
    void PutRowColor (
        enum ZemaxColor pRetVal );
    double GetMin ( );
    void PutMin (
        double pRetVal );
    IEditorCellPtr GetMinCell ( );
    VARIANT_BOOL GetIsMinUsed ( );
    double GetMax ( );
    void PutMax (
        double pRetVal );
    IEditorCellPtr GetMaxCell ( );
    VARIANT_BOOL GetIsMaxUsed ( );
    _bstr_t GetComment ( );
    void PutComment (
        _bstr_t pRetVal );
    IEditorCellPtr GetCommentCell ( );
    long GetParam1 ( );
    void PutParam1 (
        long pRetVal );
    IEditorCellPtr GetParam1Cell ( );
    VARIANT_BOOL GetIsParam1Used ( );
    long GetParam2 ( );
    void PutParam2 (
        long pRetVal );
    IEditorCellPtr GetParam2Cell ( );
    VARIANT_BOOL GetIsParam2Used ( );
    long GetParam3 ( );
    void PutParam3 (
        long pRetVal );
    IEditorCellPtr GetParam3Cell ( );
    VARIANT_BOOL GetIsParam3Used ( );
    double GetNominal ( );
    IEditorCellPtr GetNominalCell ( );
    VARIANT_BOOL GetIsNominalUsed ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsActive (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_OperandNumber (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetOperandCell (
        /*[in]*/ enum ToleranceColumn Col,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum ToleranceOperandType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AvailableOperandTypes (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ChangeType (
        /*[in]*/ enum ToleranceOperandType Type,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DoNotAdjustDuringInverseTolerancing (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DoNotAdjustDuringInverseTolerancing (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_RowColor (
        /*[out,retval]*/ enum ZemaxColor * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RowColor (
        /*[in]*/ enum ZemaxColor pRetVal ) = 0;
      virtual HRESULT __stdcall get_Min (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Min (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsMinUsed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Max (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Max (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaxCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsMaxUsed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Comment (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Comment (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_CommentCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Param1 (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Param1 (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Param1Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsParam1Used (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Param2 (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Param2 (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Param2Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsParam2Used (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Param3 (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Param3 (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Param3Cell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsParam3Used (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Nominal (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NominalCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsNominalUsed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("62f3b7ae-2bf9-4005-90b3-d8b769436ef6"))
IToleranceDataEditor : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRowToOperandOffset))
    long RowToOperandOffset;
    __declspec(property(get=GetNumberOfOperands))
    long NumberOfOperands;
    __declspec(property(get=GetFirstColumn))
    enum ToleranceColumn FirstColumn;
    __declspec(property(get=GetLastColumn))
    enum ToleranceColumn LastColumn;
    __declspec(property(get=GetNSCToleranceWizard))
    INSCToleranceWizardPtr NSCToleranceWizard;
    __declspec(property(get=GetSEQToleranceWizard))
    ISEQToleranceWizardPtr SEQToleranceWizard;

    //
    // Wrapper methods for error-handling
    //

    long GetRowToOperandOffset ( );
    long GetNumberOfOperands ( );
    enum ToleranceColumn GetFirstColumn ( );
    enum ToleranceColumn GetLastColumn ( );
    ITDERowPtr GetOperandAt (
        long OperandNumber );
    ITDERowPtr InsertNewOperandAt (
        long OperandNumber );
    ITDERowPtr AddOperand ( );
    VARIANT_BOOL RemoveOperandAt (
        long OperandNumber );
    long RemoveOperandsAt (
        long OperandNumber,
        long numOperands );
    VARIANT_BOOL ShowTDE ( );
    HRESULT HideTDE ( );
    INSCToleranceWizardPtr GetNSCToleranceWizard ( );
    ISEQToleranceWizardPtr GetSEQToleranceWizard ( );
    VARIANT_BOOL LoadToleranceFile (
        _bstr_t fileName );
    HRESULT SaveToleranceFile (
        _bstr_t fileName );
    long CopyOperands (
        long fromOperandNumber,
        long NumberOfOperands,
        long toOperandNumber );
    long CopyOperandsFrom (
        struct IToleranceDataEditor * fromEditor,
        long fromOperandNumber,
        long NumberOfOperands,
        long toOperandNumber );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RowToOperandOffset (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfOperands (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FirstColumn (
        /*[out,retval]*/ enum ToleranceColumn * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LastColumn (
        /*[out,retval]*/ enum ToleranceColumn * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetOperandAt (
        /*[in]*/ long OperandNumber,
        /*[out,retval]*/ struct ITDERow * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_InsertNewOperandAt (
        /*[in]*/ long OperandNumber,
        /*[out,retval]*/ struct ITDERow * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddOperand (
        /*[out,retval]*/ struct ITDERow * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveOperandAt (
        /*[in]*/ long OperandNumber,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveOperandsAt (
        /*[in]*/ long OperandNumber,
        /*[in]*/ long numOperands,
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ShowTDE (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_HideTDE ( ) = 0;
      virtual HRESULT __stdcall get_NSCToleranceWizard (
        /*[out,retval]*/ struct INSCToleranceWizard * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SEQToleranceWizard (
        /*[out,retval]*/ struct ISEQToleranceWizard * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_LoadToleranceFile (
        /*[in]*/ BSTR fileName,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SaveToleranceFile (
        /*[in]*/ BSTR fileName ) = 0;
      virtual HRESULT __stdcall raw_CopyOperands (
        /*[in]*/ long fromOperandNumber,
        /*[in]*/ long NumberOfOperands,
        /*[in]*/ long toOperandNumber,
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CopyOperandsFrom (
        /*[in]*/ struct IToleranceDataEditor * fromEditor,
        /*[in]*/ long fromOperandNumber,
        /*[in]*/ long NumberOfOperands,
        /*[in]*/ long toOperandNumber,
        /*[out,retval]*/ long * pRetVal ) = 0;
};

struct __declspec(uuid("d0e50824-eb22-4884-bfcb-99ed98c67599"))
IMFERow : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsActive))
    VARIANT_BOOL IsActive;
    __declspec(property(get=GetOperandNumber))
    long OperandNumber;
    __declspec(property(get=GetValue))
    double Value;
    __declspec(property(get=GetTypeName))
    _bstr_t TypeName;
    __declspec(property(get=GetType))
    enum MeritOperandType Type;
    __declspec(property(get=GetRowColor,put=PutRowColor))
    enum ZemaxColor RowColor;
    __declspec(property(get=GetTarget,put=PutTarget))
    double Target;
    __declspec(property(get=GetTargetCell))
    IEditorCellPtr TargetCell;
    __declspec(property(get=GetWeight,put=PutWeight))
    double Weight;
    __declspec(property(get=GetWeightCell))
    IEditorCellPtr WeightCell;
    __declspec(property(get=GetValueCell))
    IEditorCellPtr ValueCell;
    __declspec(property(get=GetContribution))
    double Contribution;
    __declspec(property(get=GetContributionCell))
    IEditorCellPtr ContributionCell;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsActive ( );
    long GetOperandNumber ( );
    IEditorCellPtr GetOperandCell (
        enum MeritColumn Col );
    _bstr_t GetTypeName ( );
    enum MeritOperandType GetType ( );
    SAFEARRAY * AvailableOperandTypes ( );
    VARIANT_BOOL ChangeType (
        enum MeritOperandType Type );
    enum ZemaxColor GetRowColor ( );
    void PutRowColor (
        enum ZemaxColor pRetVal );
    double GetTarget ( );
    void PutTarget (
        double pRetVal );
    IEditorCellPtr GetTargetCell ( );
    double GetWeight ( );
    void PutWeight (
        double pRetVal );
    IEditorCellPtr GetWeightCell ( );
    double GetValue ( );
    IEditorCellPtr GetValueCell ( );
    double GetContribution ( );
    IEditorCellPtr GetContributionCell ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsActive (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_OperandNumber (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetOperandCell (
        /*[in]*/ enum MeritColumn Col,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum MeritOperandType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AvailableOperandTypes (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ChangeType (
        /*[in]*/ enum MeritOperandType Type,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RowColor (
        /*[out,retval]*/ enum ZemaxColor * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RowColor (
        /*[in]*/ enum ZemaxColor pRetVal ) = 0;
      virtual HRESULT __stdcall get_Target (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Target (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_TargetCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Weight (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Weight (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_WeightCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ValueCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Contribution (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ContributionCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
};

struct __declspec(uuid("733800f9-d6a9-4530-800e-14e31e9d34a6"))
IMeritFunctionEditor : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRowToOperandOffset))
    long RowToOperandOffset;
    __declspec(property(get=GetNumberOfOperands))
    long NumberOfOperands;
    __declspec(property(get=GetFirstColumn))
    enum MeritColumn FirstColumn;
    __declspec(property(get=GetLastColumn))
    enum MeritColumn LastColumn;
    __declspec(property(get=GetMeritFunctionDirectory))
    _bstr_t MeritFunctionDirectory;
    __declspec(property(get=GetNSCOptimizationWizard))
    INSCOptimizationWizardPtr NSCOptimizationWizard;
    __declspec(property(get=GetSEQOptimizationWizard))
    ISEQOptimizationWizardPtr SEQOptimizationWizard;
    __declspec(property(get=GetNSCBitmapWizard))
    INSCBitmapWizardPtr NSCBitmapWizard;
    __declspec(property(get=GetNSCRoadwayLightingWizard))
    INSCRoadwayLightingWizardPtr NSCRoadwayLightingWizard;

    //
    // Wrapper methods for error-handling
    //

    long GetRowToOperandOffset ( );
    long GetNumberOfOperands ( );
    enum MeritColumn GetFirstColumn ( );
    enum MeritColumn GetLastColumn ( );
    IMFERowPtr GetOperandAt (
        long OperandNumber );
    IMFERowPtr InsertNewOperandAt (
        long OperandNumber );
    IMFERowPtr AddOperand ( );
    VARIANT_BOOL RemoveOperandAt (
        long OperandNumber );
    long RemoveOperandsAt (
        long OperandNumber,
        long numOperands );
    VARIANT_BOOL ShowMFE ( );
    HRESULT HideMFE ( );
    HRESULT SaveMeritFunction (
        _bstr_t fileName );
    HRESULT LoadMeritFunction (
        _bstr_t fileName );
    long InsertMeritFunction (
        _bstr_t fileName,
        long OperandNumber );
    SAFEARRAY * GetMeritFunctionFiles ( );
    _bstr_t GetMeritFunctionDirectory ( );
    double CalculateMeritFunction ( );
    double GetOperandValue (
        enum MeritOperandType Type,
        long srf,
        long wave,
        double Hx,
        double Hy,
        double Px,
        double Py,
        double Ex,
        double Ey );
    INSCOptimizationWizardPtr GetNSCOptimizationWizard ( );
    ISEQOptimizationWizardPtr GetSEQOptimizationWizard ( );
    INSCBitmapWizardPtr GetNSCBitmapWizard ( );
    INSCRoadwayLightingWizardPtr GetNSCRoadwayLightingWizard ( );
    long CopyOperands (
        long fromOperandNumber,
        long NumberOfOperands,
        long toOperandNumber );
    long CopyOperandsFrom (
        struct IMeritFunctionEditor * fromEditor,
        long fromOperandNumber,
        long NumberOfOperands,
        long toOperandNumber );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RowToOperandOffset (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfOperands (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FirstColumn (
        /*[out,retval]*/ enum MeritColumn * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LastColumn (
        /*[out,retval]*/ enum MeritColumn * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetOperandAt (
        /*[in]*/ long OperandNumber,
        /*[out,retval]*/ struct IMFERow * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_InsertNewOperandAt (
        /*[in]*/ long OperandNumber,
        /*[out,retval]*/ struct IMFERow * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddOperand (
        /*[out,retval]*/ struct IMFERow * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveOperandAt (
        /*[in]*/ long OperandNumber,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveOperandsAt (
        /*[in]*/ long OperandNumber,
        /*[in]*/ long numOperands,
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ShowMFE (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_HideMFE ( ) = 0;
      virtual HRESULT __stdcall raw_SaveMeritFunction (
        /*[in]*/ BSTR fileName ) = 0;
      virtual HRESULT __stdcall raw_LoadMeritFunction (
        /*[in]*/ BSTR fileName ) = 0;
      virtual HRESULT __stdcall raw_InsertMeritFunction (
        /*[in]*/ BSTR fileName,
        /*[in]*/ long OperandNumber,
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetMeritFunctionFiles (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MeritFunctionDirectory (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CalculateMeritFunction (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetOperandValue (
        /*[in]*/ enum MeritOperandType Type,
        /*[in]*/ long srf,
        /*[in]*/ long wave,
        /*[in]*/ double Hx,
        /*[in]*/ double Hy,
        /*[in]*/ double Px,
        /*[in]*/ double Py,
        /*[in]*/ double Ex,
        /*[in]*/ double Ey,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NSCOptimizationWizard (
        /*[out,retval]*/ struct INSCOptimizationWizard * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SEQOptimizationWizard (
        /*[out,retval]*/ struct ISEQOptimizationWizard * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NSCBitmapWizard (
        /*[out,retval]*/ struct INSCBitmapWizard * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NSCRoadwayLightingWizard (
        /*[out,retval]*/ struct INSCRoadwayLightingWizard * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CopyOperands (
        /*[in]*/ long fromOperandNumber,
        /*[in]*/ long NumberOfOperands,
        /*[in]*/ long toOperandNumber,
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CopyOperandsFrom (
        /*[in]*/ struct IMeritFunctionEditor * fromEditor,
        /*[in]*/ long fromOperandNumber,
        /*[in]*/ long NumberOfOperands,
        /*[in]*/ long toOperandNumber,
        /*[out,retval]*/ long * pRetVal ) = 0;
};

struct __declspec(uuid("ae69b825-a398-48ce-b1a8-7aa1e4435293"))
IMCERow : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsActive))
    VARIANT_BOOL IsActive;
    __declspec(property(get=GetOperandNumber))
    long OperandNumber;
    __declspec(property(get=GetTypeName))
    _bstr_t TypeName;
    __declspec(property(get=GetType))
    enum MultiConfigOperandType Type;
    __declspec(property(get=GetRowColor,put=PutRowColor))
    enum ZemaxColor RowColor;
    __declspec(property(get=GetParam1,put=PutParam1))
    long Param1;
    __declspec(property(get=GetParam1Enabled))
    VARIANT_BOOL Param1Enabled;
    __declspec(property(get=GetParam2,put=PutParam2))
    long Param2;
    __declspec(property(get=GetParam2Enabled))
    VARIANT_BOOL Param2Enabled;
    __declspec(property(get=GetParam3,put=PutParam3))
    long Param3;
    __declspec(property(get=GetParam3Enabled))
    VARIANT_BOOL Param3Enabled;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsActive ( );
    long GetOperandNumber ( );
    IEditorCellPtr GetOperandCell (
        long Configuration );
    _bstr_t GetTypeName ( );
    enum MultiConfigOperandType GetType ( );
    SAFEARRAY * AvailableConfigOperandTypes ( );
    VARIANT_BOOL ChangeType (
        enum MultiConfigOperandType Type );
    enum ZemaxColor GetRowColor ( );
    void PutRowColor (
        enum ZemaxColor pRetVal );
    long GetParam1 ( );
    void PutParam1 (
        long pRetVal );
    VARIANT_BOOL GetParam1Enabled ( );
    long GetParam2 ( );
    void PutParam2 (
        long pRetVal );
    VARIANT_BOOL GetParam2Enabled ( );
    long GetParam3 ( );
    void PutParam3 (
        long pRetVal );
    VARIANT_BOOL GetParam3Enabled ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsActive (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_OperandNumber (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetOperandCell (
        /*[in]*/ long Configuration,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum MultiConfigOperandType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AvailableConfigOperandTypes (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ChangeType (
        /*[in]*/ enum MultiConfigOperandType Type,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RowColor (
        /*[out,retval]*/ enum ZemaxColor * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RowColor (
        /*[in]*/ enum ZemaxColor pRetVal ) = 0;
      virtual HRESULT __stdcall get_Param1 (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Param1 (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Param1Enabled (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Param2 (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Param2 (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Param2Enabled (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Param3 (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Param3 (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Param3Enabled (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("57b4116f-8a5b-4d29-b750-443521c07e91"))
IMultiConfigEditor : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRowToOperandOffset))
    long RowToOperandOffset;
    __declspec(property(get=GetNumberOfOperands))
    long NumberOfOperands;
    __declspec(property(get=GetFirstConfiguration))
    long FirstConfiguration;
    __declspec(property(get=GetLastConfiguration))
    long LastConfiguration;
    __declspec(property(get=GetNumberOfConfigurations))
    long NumberOfConfigurations;
    __declspec(property(get=GetCurrentConfiguration))
    long CurrentConfiguration;

    //
    // Wrapper methods for error-handling
    //

    long GetRowToOperandOffset ( );
    long GetNumberOfOperands ( );
    long GetFirstConfiguration ( );
    long GetLastConfiguration ( );
    long GetNumberOfConfigurations ( );
    long GetCurrentConfiguration ( );
    VARIANT_BOOL SetCurrentConfiguration (
        long configurationNumber );
    VARIANT_BOOL DeleteConfiguration (
        long configurationNumber );
    VARIANT_BOOL DeleteAllConfigurations ( );
    VARIANT_BOOL InsertConfiguration (
        long configurationNumber,
        VARIANT_BOOL withPickups );
    VARIANT_BOOL AddConfiguration (
        VARIANT_BOOL withPickups );
    HRESULT MakeSingleConfiguration ( );
    HRESULT MakeSingleConfigurationOpt (
        VARIANT_BOOL deleteMFEOperands );
    VARIANT_BOOL NextConfiguration ( );
    VARIANT_BOOL PrevConfiguration ( );
    IMCERowPtr GetOperandAt (
        long OperandNumber );
    IMCERowPtr InsertNewOperandAt (
        long OperandNumber );
    IMCERowPtr AddOperand ( );
    VARIANT_BOOL RemoveOperandAt (
        long OperandNumber );
    long RemoveOperandsAt (
        long OperandNumber,
        long numOperands );
    VARIANT_BOOL ShowMCE ( );
    HRESULT HideMCE ( );
    long CopyOperands (
        long fromOperandNumber,
        long NumberOfOperands,
        long toOperandNumber );
    long CopyOperandsFrom (
        struct IMultiConfigEditor * fromEditor,
        long fromOperandNumber,
        long NumberOfOperands,
        long toOperandNumber );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RowToOperandOffset (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfOperands (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FirstConfiguration (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LastConfiguration (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfConfigurations (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CurrentConfiguration (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetCurrentConfiguration (
        /*[in]*/ long configurationNumber,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_DeleteConfiguration (
        /*[in]*/ long configurationNumber,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_DeleteAllConfigurations (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_InsertConfiguration (
        /*[in]*/ long configurationNumber,
        /*[in]*/ VARIANT_BOOL withPickups,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddConfiguration (
        /*[in]*/ VARIANT_BOOL withPickups,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_MakeSingleConfiguration ( ) = 0;
      virtual HRESULT __stdcall raw_MakeSingleConfigurationOpt (
        /*[in]*/ VARIANT_BOOL deleteMFEOperands ) = 0;
      virtual HRESULT __stdcall raw_NextConfiguration (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_PrevConfiguration (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetOperandAt (
        /*[in]*/ long OperandNumber,
        /*[out,retval]*/ struct IMCERow * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_InsertNewOperandAt (
        /*[in]*/ long OperandNumber,
        /*[out,retval]*/ struct IMCERow * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddOperand (
        /*[out,retval]*/ struct IMCERow * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveOperandAt (
        /*[in]*/ long OperandNumber,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveOperandsAt (
        /*[in]*/ long OperandNumber,
        /*[in]*/ long numOperands,
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ShowMCE (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_HideMCE ( ) = 0;
      virtual HRESULT __stdcall raw_CopyOperands (
        /*[in]*/ long fromOperandNumber,
        /*[in]*/ long NumberOfOperands,
        /*[in]*/ long toOperandNumber,
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CopyOperandsFrom (
        /*[in]*/ struct IMultiConfigEditor * fromEditor,
        /*[in]*/ long fromOperandNumber,
        /*[in]*/ long NumberOfOperands,
        /*[in]*/ long toOperandNumber,
        /*[out,retval]*/ long * pRetVal ) = 0;
};

struct __declspec(uuid("f3b16461-abca-4989-9903-b7ddda03d5b0"))
INonSeqEditor : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRowToObjectOffset))
    long RowToObjectOffset;
    __declspec(property(get=GetActiveSurface))
    long ActiveSurface;
    __declspec(property(get=GetNumberOfObjects))
    long NumberOfObjects;
    __declspec(property(get=GetFirstColumn))
    enum ObjectColumn FirstColumn;
    __declspec(property(get=GetLastColumn))
    enum ObjectColumn LastColumn;

    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * AllAvailableObjectNames ( );
    SAFEARRAY * AvailableSourceNames ( );
    SAFEARRAY * AvailableDetectorNames ( );
    SAFEARRAY * AvailableObjectNames ( );
    enum ObjectType ObjectTypeFromObjectName (
        _bstr_t objectName );
    _bstr_t ObjectNameFromObjectType (
        enum ObjectType ObjectType );
    long GetRowToObjectOffset ( );
    long GetActiveSurface ( );
    VARIANT_BOOL SetActiveSurface (
        long SurfaceNumber );
    VARIANT_BOOL NextNSCGroup ( );
    VARIANT_BOOL PrevNSCGroup ( );
    long GetNumberOfObjects ( );
    enum ObjectColumn GetFirstColumn ( );
    enum ObjectColumn GetLastColumn ( );
    INCERowPtr GetObjectAt (
        long ObjectNumber );
    INCERowPtr InsertNewObjectAt (
        long ObjectNumber );
    INCERowPtr AddObject ( );
    VARIANT_BOOL RemoveObjectAt (
        long ObjectNumber );
    long RemoveObjectsAt (
        long ObjectNumber,
        long numObjects );
    HRESULT ReloadObject (
        long ObjectNumber );
    HRESULT ReloadAllObjects ( );
    VARIANT_BOOL ShowNCE ( );
    HRESULT HideNCE ( );
    VARIANT_BOOL GetMatrix (
        long ObjectNumber,
        double * R11,
        double * R12,
        double * R13,
        double * R21,
        double * R22,
        double * R23,
        double * R31,
        double * R32,
        double * R33,
        double * xo,
        double * yo,
        double * zo );
    VARIANT_BOOL GetDetectorDimensions (
        long ObjectNumber,
        unsigned long * Rows,
        unsigned long * Cols );
    VARIANT_BOOL GetCoherentData (
        long ObjectNumber,
        long pixel,
        enum DetectorDataType Data,
        double * Value );
    SAFEARRAY * GetAllCoherentDataSafe (
        long ObjectNumber,
        enum DetectorDataType Data );
    VARIANT_BOOL GetAllCoherentData (
        long ObjectNumber,
        enum DetectorDataType Data,
        unsigned long numPixels,
        double * detectorData );
    unsigned long GetDetectorSize (
        long ObjectNumber );
    VARIANT_BOOL GetDetectorData (
        long ObjectNumber,
        long pixel,
        long Data,
        double * Value );
    VARIANT_BOOL GetAllDetectorData (
        long ObjectNumber,
        long Data,
        unsigned long numPixels,
        double * detectorData );
    SAFEARRAY * GetAllDetectorDataSafe (
        long ObjectNumber,
        long Data );
    VARIANT_BOOL GetPolarDetectorData (
        long ObjectNumber,
        long pixel,
        enum PolarDetectorDataType Data,
        double * Value );
    VARIANT_BOOL GetAllPolarDetectorData (
        long ObjectNumber,
        enum PolarDetectorDataType Data,
        unsigned long numPixels,
        double * detectorData );
    SAFEARRAY * GetAllPolarDetectorDataSafe (
        long ObjectNumber,
        enum PolarDetectorDataType Data );
    VARIANT_BOOL LoadDetector (
        long ObjectNumber,
        _bstr_t fileName,
        VARIANT_BOOL appendData );
    VARIANT_BOOL SaveDetector (
        long ObjectNumber,
        _bstr_t fileName );
    long CopyObjects (
        long fromObjectNumber,
        long NumberOfObjects,
        long toObjectNumber );
    long CopyObjectsFrom (
        struct INonSeqEditor * fromEditor,
        long fromObjectNumber,
        long NumberOfObjects,
        long toObjectNumber );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AllAvailableObjectNames (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AvailableSourceNames (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AvailableDetectorNames (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AvailableObjectNames (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ObjectTypeFromObjectName (
        /*[in]*/ BSTR objectName,
        /*[out,retval]*/ enum ObjectType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ObjectNameFromObjectType (
        /*[in]*/ enum ObjectType ObjectType,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RowToObjectOffset (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ActiveSurface (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetActiveSurface (
        /*[in]*/ long SurfaceNumber,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_NextNSCGroup (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_PrevNSCGroup (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfObjects (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FirstColumn (
        /*[out,retval]*/ enum ObjectColumn * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LastColumn (
        /*[out,retval]*/ enum ObjectColumn * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetObjectAt (
        /*[in]*/ long ObjectNumber,
        /*[out,retval]*/ struct INCERow * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_InsertNewObjectAt (
        /*[in]*/ long ObjectNumber,
        /*[out,retval]*/ struct INCERow * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddObject (
        /*[out,retval]*/ struct INCERow * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveObjectAt (
        /*[in]*/ long ObjectNumber,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveObjectsAt (
        /*[in]*/ long ObjectNumber,
        /*[in]*/ long numObjects,
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ReloadObject (
        /*[in]*/ long ObjectNumber ) = 0;
      virtual HRESULT __stdcall raw_ReloadAllObjects ( ) = 0;
      virtual HRESULT __stdcall raw_ShowNCE (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_HideNCE ( ) = 0;
      virtual HRESULT __stdcall raw_GetMatrix (
        /*[in]*/ long ObjectNumber,
        /*[out]*/ double * R11,
        /*[out]*/ double * R12,
        /*[out]*/ double * R13,
        /*[out]*/ double * R21,
        /*[out]*/ double * R22,
        /*[out]*/ double * R23,
        /*[out]*/ double * R31,
        /*[out]*/ double * R32,
        /*[out]*/ double * R33,
        /*[out]*/ double * xo,
        /*[out]*/ double * yo,
        /*[out]*/ double * zo,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetDetectorDimensions (
        /*[in]*/ long ObjectNumber,
        /*[out]*/ unsigned long * Rows,
        /*[out]*/ unsigned long * Cols,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetCoherentData (
        /*[in]*/ long ObjectNumber,
        /*[in]*/ long pixel,
        /*[in]*/ enum DetectorDataType Data,
        /*[out]*/ double * Value,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAllCoherentDataSafe (
        /*[in]*/ long ObjectNumber,
        /*[in]*/ enum DetectorDataType Data,
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAllCoherentData (
        /*[in]*/ long ObjectNumber,
        /*[in]*/ enum DetectorDataType Data,
        /*[in]*/ unsigned long numPixels,
        /*[in,out]*/ double * detectorData,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetDetectorSize (
        /*[in]*/ long ObjectNumber,
        /*[out,retval]*/ unsigned long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetDetectorData (
        /*[in]*/ long ObjectNumber,
        /*[in]*/ long pixel,
        /*[in]*/ long Data,
        /*[out]*/ double * Value,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAllDetectorData (
        /*[in]*/ long ObjectNumber,
        /*[in]*/ long Data,
        /*[in]*/ unsigned long numPixels,
        /*[in,out]*/ double * detectorData,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAllDetectorDataSafe (
        /*[in]*/ long ObjectNumber,
        /*[in]*/ long Data,
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetPolarDetectorData (
        /*[in]*/ long ObjectNumber,
        /*[in]*/ long pixel,
        /*[in]*/ enum PolarDetectorDataType Data,
        /*[out]*/ double * Value,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAllPolarDetectorData (
        /*[in]*/ long ObjectNumber,
        /*[in]*/ enum PolarDetectorDataType Data,
        /*[in]*/ unsigned long numPixels,
        /*[in,out]*/ double * detectorData,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAllPolarDetectorDataSafe (
        /*[in]*/ long ObjectNumber,
        /*[in]*/ enum PolarDetectorDataType Data,
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_LoadDetector (
        /*[in]*/ long ObjectNumber,
        /*[in]*/ BSTR fileName,
        /*[in]*/ VARIANT_BOOL appendData,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SaveDetector (
        /*[in]*/ long ObjectNumber,
        /*[in]*/ BSTR fileName,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CopyObjects (
        /*[in]*/ long fromObjectNumber,
        /*[in]*/ long NumberOfObjects,
        /*[in]*/ long toObjectNumber,
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CopyObjectsFrom (
        /*[in]*/ struct INonSeqEditor * fromEditor,
        /*[in]*/ long fromObjectNumber,
        /*[in]*/ long NumberOfObjects,
        /*[in]*/ long toObjectNumber,
        /*[out,retval]*/ long * pRetVal ) = 0;
};

struct __declspec(uuid("4e663289-db55-4a9b-901a-903f185d1d7b"))
INCERow : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsActive))
    VARIANT_BOOL IsActive;
    __declspec(property(get=GetObjectNumber))
    long ObjectNumber;
    __declspec(property(get=GetTypeName))
    _bstr_t TypeName;
    __declspec(property(get=GetType))
    enum ObjectType Type;
    __declspec(property(get=GetCurrentTypeSettings))
    IObjectTypeSettingsPtr CurrentTypeSettings;
    __declspec(property(get=GetObjectData))
    IObjectPtr ObjectData;
    __declspec(property(get=GetTypeData))
    INCETypeDataPtr TypeData;
    __declspec(property(get=GetDrawData))
    INCEDrawDataPtr DrawData;
    __declspec(property(get=GetSourcesData))
    INCESourcesDataPtr SourcesData;
    __declspec(property(get=GetCoatScatterData))
    INCECoatScatterDataPtr CoatScatterData;
    __declspec(property(get=GetScatterToData))
    INCEScatterToDataPtr ScatterToData;
    __declspec(property(get=GetVolumePhysicsData))
    INCEVolumePhysicsDataPtr VolumePhysicsData;
    __declspec(property(get=GetIndexData))
    INCEIndexDataPtr IndexData;
    __declspec(property(get=GetDiffractionData))
    INCEDiffractionDataPtr DiffractionData;
    __declspec(property(get=GetCADData))
    INCECADDataPtr CADData;
    __declspec(property(get=GetComment,put=PutComment))
    _bstr_t Comment;
    __declspec(property(get=GetCommentCell))
    IEditorCellPtr CommentCell;
    __declspec(property(get=GetRefObject,put=PutRefObject))
    long RefObject;
    __declspec(property(get=GetRefObjectCell))
    IEditorCellPtr RefObjectCell;
    __declspec(property(get=GetInsideOf,put=PutInsideOf))
    long InsideOf;
    __declspec(property(get=GetInsideOfCell))
    IEditorCellPtr InsideOfCell;
    __declspec(property(get=GetXPosition,put=PutXPosition))
    double XPosition;
    __declspec(property(get=GetXPositionCell))
    IEditorCellPtr XPositionCell;
    __declspec(property(get=GetYPosition,put=PutYPosition))
    double YPosition;
    __declspec(property(get=GetYPositionCell))
    IEditorCellPtr YPositionCell;
    __declspec(property(get=GetZPosition,put=PutZPosition))
    double ZPosition;
    __declspec(property(get=GetZPositionCell))
    IEditorCellPtr ZPositionCell;
    __declspec(property(get=GetTiltAboutX,put=PutTiltAboutX))
    double TiltAboutX;
    __declspec(property(get=GetTiltAboutXCell))
    IEditorCellPtr TiltAboutXCell;
    __declspec(property(get=GetTiltAboutY,put=PutTiltAboutY))
    double TiltAboutY;
    __declspec(property(get=GetTiltAboutYCell))
    IEditorCellPtr TiltAboutYCell;
    __declspec(property(get=GetTiltAboutZ,put=PutTiltAboutZ))
    double TiltAboutZ;
    __declspec(property(get=GetTiltAboutZCell))
    IEditorCellPtr TiltAboutZCell;
    __declspec(property(get=GetMaterial,put=PutMaterial))
    _bstr_t Material;
    __declspec(property(get=GetMaterialCell))
    IEditorCellPtr MaterialCell;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsActive ( );
    long GetObjectNumber ( );
    IEditorCellPtr GetObjectCell (
        enum ObjectColumn Col );
    _bstr_t GetTypeName ( );
    enum ObjectType GetType ( );
    SAFEARRAY * AvailableObjectTypes ( );
    SAFEARRAY * AvailableParameters ( );
    IObjectTypeSettingsPtr GetCurrentTypeSettings ( );
    IObjectTypeSettingsPtr GetObjectTypeSettings (
        enum ObjectType Type );
    VARIANT_BOOL ChangeType (
        struct IObjectTypeSettings * settings );
    IObjectPtr GetObjectData ( );
    INCETypeDataPtr GetTypeData ( );
    INCEDrawDataPtr GetDrawData ( );
    INCESourcesDataPtr GetSourcesData ( );
    INCECoatScatterDataPtr GetCoatScatterData ( );
    INCEScatterToDataPtr GetScatterToData ( );
    INCEVolumePhysicsDataPtr GetVolumePhysicsData ( );
    INCEIndexDataPtr GetIndexData ( );
    INCEDiffractionDataPtr GetDiffractionData ( );
    INCECADDataPtr GetCADData ( );
    _bstr_t GetComment ( );
    void PutComment (
        _bstr_t pRetVal );
    IEditorCellPtr GetCommentCell ( );
    long GetRefObject ( );
    void PutRefObject (
        long pRetVal );
    IEditorCellPtr GetRefObjectCell ( );
    long GetInsideOf ( );
    void PutInsideOf (
        long pRetVal );
    IEditorCellPtr GetInsideOfCell ( );
    double GetXPosition ( );
    void PutXPosition (
        double pRetVal );
    IEditorCellPtr GetXPositionCell ( );
    double GetYPosition ( );
    void PutYPosition (
        double pRetVal );
    IEditorCellPtr GetYPositionCell ( );
    double GetZPosition ( );
    void PutZPosition (
        double pRetVal );
    IEditorCellPtr GetZPositionCell ( );
    double GetTiltAboutX ( );
    void PutTiltAboutX (
        double pRetVal );
    IEditorCellPtr GetTiltAboutXCell ( );
    double GetTiltAboutY ( );
    void PutTiltAboutY (
        double pRetVal );
    IEditorCellPtr GetTiltAboutYCell ( );
    double GetTiltAboutZ ( );
    void PutTiltAboutZ (
        double pRetVal );
    IEditorCellPtr GetTiltAboutZCell ( );
    _bstr_t GetMaterial ( );
    void PutMaterial (
        _bstr_t pRetVal );
    IEditorCellPtr GetMaterialCell ( );
    IFaceDataPtr GetFacetedObjectData ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsActive (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectNumber (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetObjectCell (
        /*[in]*/ enum ObjectColumn Col,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum ObjectType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AvailableObjectTypes (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AvailableParameters (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CurrentTypeSettings (
        /*[out,retval]*/ struct IObjectTypeSettings * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetObjectTypeSettings (
        /*[in]*/ enum ObjectType Type,
        /*[out,retval]*/ struct IObjectTypeSettings * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ChangeType (
        /*[in]*/ struct IObjectTypeSettings * settings,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectData (
        /*[out,retval]*/ struct IObject * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeData (
        /*[out,retval]*/ struct INCETypeData * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DrawData (
        /*[out,retval]*/ struct INCEDrawData * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SourcesData (
        /*[out,retval]*/ struct INCESourcesData * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoatScatterData (
        /*[out,retval]*/ struct INCECoatScatterData * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ScatterToData (
        /*[out,retval]*/ struct INCEScatterToData * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_VolumePhysicsData (
        /*[out,retval]*/ struct INCEVolumePhysicsData * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IndexData (
        /*[out,retval]*/ struct INCEIndexData * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DiffractionData (
        /*[out,retval]*/ struct INCEDiffractionData * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CADData (
        /*[out,retval]*/ struct INCECADData * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Comment (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Comment (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_CommentCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RefObject (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RefObject (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_RefObjectCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_InsideOf (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_InsideOf (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_InsideOfCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XPosition (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XPosition (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_XPositionCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YPosition (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YPosition (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_YPositionCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZPosition (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ZPosition (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ZPositionCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TiltAboutX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TiltAboutX (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_TiltAboutXCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TiltAboutY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TiltAboutY (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_TiltAboutYCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TiltAboutZ (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TiltAboutZ (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_TiltAboutZCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Material (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Material (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaterialCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetFacetedObjectData (
        /*[out,retval]*/ struct IFaceData * * pRetVal ) = 0;
};

struct __declspec(uuid("8364239e-0f1f-42d1-9995-a3b8d075cc0c"))
IObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum ObjectType Type;
    __declspec(property(get=GetRow))
    INCERowPtr Row;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;

    //
    // Wrapper methods for error-handling
    //

    enum ObjectType GetType ( );
    INCERowPtr GetRow ( );
    VARIANT_BOOL GetIsValid ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum ObjectType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Row (
        /*[out,retval]*/ struct INCERow * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("2850046c-592f-4d0f-bce4-186b95ba2d7f"))
ILensDataEditor : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRowToSurfaceOffset))
    long RowToSurfaceOffset;
    __declspec(property(get=GetNumberOfSurfaces))
    long NumberOfSurfaces;
    __declspec(property(get=GetNumberOfNonSequentialSurfaces))
    long NumberOfNonSequentialSurfaces;
    __declspec(property(get=GetFirstColumn))
    enum SurfaceColumn FirstColumn;
    __declspec(property(get=GetLastColumn))
    enum SurfaceColumn LastColumn;
    __declspec(property(get=GetStopSurface))
    long StopSurface;

    //
    // Wrapper methods for error-handling
    //

    long GetRowToSurfaceOffset ( );
    long GetNumberOfSurfaces ( );
    long GetNumberOfNonSequentialSurfaces ( );
    enum SurfaceColumn GetFirstColumn ( );
    enum SurfaceColumn GetLastColumn ( );
    long GetStopSurface ( );
    ILDERowPtr GetSurfaceAt (
        long SurfaceNumber );
    ILDERowPtr InsertNewSurfaceAt (
        long SurfaceNumber );
    ILDERowPtr AddSurface ( );
    VARIANT_BOOL RemoveSurfaceAt (
        long SurfaceNumber );
    long RemoveSurfacesAt (
        long SurfaceNumber,
        long numSurfaces );
    VARIANT_BOOL ShowLDE ( );
    HRESULT HideLDE ( );
    IUnknownPtr GetTool_AddCoatingsToAllSurfaces ( );
    HRESULT RunTool_AddCoatingsToAllSurfaces (
        IUnknown * settings );
    HRESULT RunTool_RemoveAllApertures ( );
    HRESULT RunTool_ConvertSemiDiametersToCircularApertures ( );
    HRESULT RunTool_ConvertSemiDiametersToFloatingApertures ( );
    HRESULT RunTool_ConvertSemiDiametersToMaximumApertures ( );
    HRESULT RunTool_ReplaceVignettingWithApertures ( );
    enum CoordinateConversionResult RunTool_ConvertGlobalToLocalCoordinates (
        long FirstSurface,
        long LastSurface,
        enum ConversionOrder Order );
    enum CoordinateConversionResult RunTool_ConvertLocalToGlobalCoordinates (
        long FirstSurface,
        long LastSurface,
        long referenceSurface );
    double GetApodization (
        double Px,
        double Py );
    HRESULT GetFirstOrderData (
        double * EFL,
        double * paraxialWorkingFNumber,
        double * realWorkingFNumber,
        double * paraxialImageHeight,
        double * paraxialMagnification );
    VARIANT_BOOL GetGlass (
        long Surface,
        BSTR * glassName,
        double * nd,
        double * vd,
        double * dPgF );
    VARIANT_BOOL GetGlobalMatrix (
        long Surface,
        double * R11,
        double * R12,
        double * R13,
        double * R21,
        double * R22,
        double * R23,
        double * R31,
        double * R32,
        double * R33,
        double * xo,
        double * yo,
        double * zo );
    long GetIndex (
        long Surface,
        long NumberOfWavelengths,
        double * indexAtWavelength );
    VARIANT_BOOL SetLabel (
        long Surface,
        long label );
    VARIANT_BOOL GetLabel (
        long Surface,
        long * label );
    VARIANT_BOOL FindLabel (
        long label,
        long * Surface );
    HRESULT GetPupil (
        enum ZemaxApertureType * Type,
        double * ApertureValue,
        double * entrancePupilDiameter,
        double * entrancePupilPosition,
        double * exitPupilDiameter,
        double * exitPupilPosition,
        enum PupilApodizationType * ApodizationType,
        double * ApodizationFactor );
    VARIANT_BOOL GetSag (
        long Surface,
        double X,
        double Y,
        double * sag,
        double * alternateSag );
    long CopySurfaces (
        long fromSurfaceNumber,
        long NumberOfSurfaces,
        long toSurfaceNumber );
    long CopySurfacesFrom (
        struct ILensDataEditor * fromEditor,
        long fromSurfaceNumber,
        long NumberOfSurfaces,
        long toSurfaceNumber );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RowToSurfaceOffset (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfSurfaces (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfNonSequentialSurfaces (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FirstColumn (
        /*[out,retval]*/ enum SurfaceColumn * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LastColumn (
        /*[out,retval]*/ enum SurfaceColumn * pRetVal ) = 0;
      virtual HRESULT __stdcall get_StopSurface (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetSurfaceAt (
        /*[in]*/ long SurfaceNumber,
        /*[out,retval]*/ struct ILDERow * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_InsertNewSurfaceAt (
        /*[in]*/ long SurfaceNumber,
        /*[out,retval]*/ struct ILDERow * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddSurface (
        /*[out,retval]*/ struct ILDERow * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveSurfaceAt (
        /*[in]*/ long SurfaceNumber,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveSurfacesAt (
        /*[in]*/ long SurfaceNumber,
        /*[in]*/ long numSurfaces,
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ShowLDE (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_HideLDE ( ) = 0;
      virtual HRESULT __stdcall raw_GetTool_AddCoatingsToAllSurfaces (
        /*[out,retval]*/ IUnknown * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_RunTool_AddCoatingsToAllSurfaces (
        /*[in]*/ IUnknown * settings ) = 0;
      virtual HRESULT __stdcall raw_RunTool_RemoveAllApertures ( ) = 0;
      virtual HRESULT __stdcall raw_RunTool_ConvertSemiDiametersToCircularApertures ( ) = 0;
      virtual HRESULT __stdcall raw_RunTool_ConvertSemiDiametersToFloatingApertures ( ) = 0;
      virtual HRESULT __stdcall raw_RunTool_ConvertSemiDiametersToMaximumApertures ( ) = 0;
      virtual HRESULT __stdcall raw_RunTool_ReplaceVignettingWithApertures ( ) = 0;
      virtual HRESULT __stdcall raw_RunTool_ConvertGlobalToLocalCoordinates (
        /*[in]*/ long FirstSurface,
        /*[in]*/ long LastSurface,
        /*[in]*/ enum ConversionOrder Order,
        /*[out,retval]*/ enum CoordinateConversionResult * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_RunTool_ConvertLocalToGlobalCoordinates (
        /*[in]*/ long FirstSurface,
        /*[in]*/ long LastSurface,
        /*[in]*/ long referenceSurface,
        /*[out,retval]*/ enum CoordinateConversionResult * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetApodization (
        /*[in]*/ double Px,
        /*[in]*/ double Py,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetFirstOrderData (
        /*[out]*/ double * EFL,
        /*[out]*/ double * paraxialWorkingFNumber,
        /*[out]*/ double * realWorkingFNumber,
        /*[out]*/ double * paraxialImageHeight,
        /*[out]*/ double * paraxialMagnification ) = 0;
      virtual HRESULT __stdcall raw_GetGlass (
        /*[in]*/ long Surface,
        /*[out]*/ BSTR * glassName,
        /*[out]*/ double * nd,
        /*[out]*/ double * vd,
        /*[out]*/ double * dPgF,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetGlobalMatrix (
        /*[in]*/ long Surface,
        /*[out]*/ double * R11,
        /*[out]*/ double * R12,
        /*[out]*/ double * R13,
        /*[out]*/ double * R21,
        /*[out]*/ double * R22,
        /*[out]*/ double * R23,
        /*[out]*/ double * R31,
        /*[out]*/ double * R32,
        /*[out]*/ double * R33,
        /*[out]*/ double * xo,
        /*[out]*/ double * yo,
        /*[out]*/ double * zo,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetIndex (
        /*[in]*/ long Surface,
        /*[in]*/ long NumberOfWavelengths,
        /*[in,out]*/ double * indexAtWavelength,
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetLabel (
        /*[in]*/ long Surface,
        /*[in]*/ long label,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetLabel (
        /*[in]*/ long Surface,
        /*[out]*/ long * label,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindLabel (
        /*[in]*/ long label,
        /*[out]*/ long * Surface,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetPupil (
        /*[out]*/ enum ZemaxApertureType * Type,
        /*[out]*/ double * ApertureValue,
        /*[out]*/ double * entrancePupilDiameter,
        /*[out]*/ double * entrancePupilPosition,
        /*[out]*/ double * exitPupilDiameter,
        /*[out]*/ double * exitPupilPosition,
        /*[out]*/ enum PupilApodizationType * ApodizationType,
        /*[out]*/ double * ApodizationFactor ) = 0;
      virtual HRESULT __stdcall raw_GetSag (
        /*[in]*/ long Surface,
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[out]*/ double * sag,
        /*[out]*/ double * alternateSag,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CopySurfaces (
        /*[in]*/ long fromSurfaceNumber,
        /*[in]*/ long NumberOfSurfaces,
        /*[in]*/ long toSurfaceNumber,
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CopySurfacesFrom (
        /*[in]*/ struct ILensDataEditor * fromEditor,
        /*[in]*/ long fromSurfaceNumber,
        /*[in]*/ long NumberOfSurfaces,
        /*[in]*/ long toSurfaceNumber,
        /*[out,retval]*/ long * pRetVal ) = 0;
};

struct __declspec(uuid("774c8955-b4d3-4232-95ce-3b4cd460e8b3"))
ILDERow : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsActive))
    VARIANT_BOOL IsActive;
    __declspec(property(get=GetSurfaceNumber))
    long SurfaceNumber;
    __declspec(property(get=GetTypeName))
    _bstr_t TypeName;
    __declspec(property(get=GetType))
    enum SurfaceType Type;
    __declspec(property(get=GetCurrentTypeSettings))
    ISurfaceTypeSettingsPtr CurrentTypeSettings;
    __declspec(property(get=GetIsObject))
    VARIANT_BOOL IsObject;
    __declspec(property(get=GetIsImage))
    VARIANT_BOOL IsImage;
    __declspec(property(get=GetIsStop,put=PutIsStop))
    VARIANT_BOOL IsStop;
    __declspec(property(get=GetSurfaceData))
    ISurfacePtr SurfaceData;
    __declspec(property(get=GetTypeData))
    ILDETypeDataPtr TypeData;
    __declspec(property(get=GetDrawData))
    ILDEDrawDataPtr DrawData;
    __declspec(property(get=GetApertureData))
    ILDEApertureDataPtr ApertureData;
    __declspec(property(get=GetScatteringData))
    ILDEScatteringDataPtr ScatteringData;
    __declspec(property(get=GetTiltDecenterData))
    ILDETiltDecenterDataPtr TiltDecenterData;
    __declspec(property(get=GetPhysicalOpticsData))
    ILDEPhysicalOpticsDataPtr PhysicalOpticsData;
    __declspec(property(get=GetCoatingData))
    ILDECoatingDataPtr CoatingData;
    __declspec(property(get=GetImportData))
    ILDEImportDataPtr ImportData;
    __declspec(property(get=GetComment,put=PutComment))
    _bstr_t Comment;
    __declspec(property(get=GetCommentCell))
    IEditorCellPtr CommentCell;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetRadiusCell))
    IEditorCellPtr RadiusCell;
    __declspec(property(get=GetThickness,put=PutThickness))
    double Thickness;
    __declspec(property(get=GetThicknessCell))
    IEditorCellPtr ThicknessCell;
    __declspec(property(get=GetMaterial,put=PutMaterial))
    _bstr_t Material;
    __declspec(property(get=GetMaterialCell))
    IEditorCellPtr MaterialCell;
    __declspec(property(get=GetCoating,put=PutCoating))
    _bstr_t Coating;
    __declspec(property(get=GetCoatingCell))
    IEditorCellPtr CoatingCell;
    __declspec(property(get=GetSemiDiameter,put=PutSemiDiameter))
    double SemiDiameter;
    __declspec(property(get=GetSemiDiameterCell))
    IEditorCellPtr SemiDiameterCell;
    __declspec(property(get=GetChipZone,put=PutChipZone))
    double ChipZone;
    __declspec(property(get=GetChipZoneCell))
    IEditorCellPtr ChipZoneCell;
    __declspec(property(get=GetMechanicalSemiDiameter,put=PutMechanicalSemiDiameter))
    double MechanicalSemiDiameter;
    __declspec(property(get=GetMechanicalSemiDiameterCell))
    IEditorCellPtr MechanicalSemiDiameterCell;
    __declspec(property(get=GetConic,put=PutConic))
    double Conic;
    __declspec(property(get=GetConicCell))
    IEditorCellPtr ConicCell;
    __declspec(property(get=GetTCE,put=PutTCE))
    double TCE;
    __declspec(property(get=GetTCECell))
    IEditorCellPtr TCECell;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsActive ( );
    long GetSurfaceNumber ( );
    IEditorCellPtr GetSurfaceCell (
        enum SurfaceColumn Col );
    _bstr_t GetTypeName ( );
    enum SurfaceType GetType ( );
    SAFEARRAY * AvailableSurfaceTypes ( );
    ISurfaceTypeSettingsPtr GetCurrentTypeSettings ( );
    ISurfaceTypeSettingsPtr GetSurfaceTypeSettings (
        enum SurfaceType Type );
    VARIANT_BOOL ChangeType (
        struct ISurfaceTypeSettings * settings );
    VARIANT_BOOL GetIsObject ( );
    VARIANT_BOOL GetIsImage ( );
    VARIANT_BOOL GetIsStop ( );
    void PutIsStop (
        VARIANT_BOOL pRetVal );
    ISurfacePtr GetSurfaceData ( );
    ILDETypeDataPtr GetTypeData ( );
    ILDEDrawDataPtr GetDrawData ( );
    ILDEApertureDataPtr GetApertureData ( );
    ILDEScatteringDataPtr GetScatteringData ( );
    ILDETiltDecenterDataPtr GetTiltDecenterData ( );
    ILDEPhysicalOpticsDataPtr GetPhysicalOpticsData ( );
    ILDECoatingDataPtr GetCoatingData ( );
    ILDEImportDataPtr GetImportData ( );
    _bstr_t GetComment ( );
    void PutComment (
        _bstr_t pRetVal );
    IEditorCellPtr GetCommentCell ( );
    double GetRadius ( );
    void PutRadius (
        double pRetVal );
    IEditorCellPtr GetRadiusCell ( );
    double GetThickness ( );
    void PutThickness (
        double pRetVal );
    IEditorCellPtr GetThicknessCell ( );
    _bstr_t GetMaterial ( );
    void PutMaterial (
        _bstr_t pRetVal );
    IEditorCellPtr GetMaterialCell ( );
    _bstr_t GetCoating ( );
    void PutCoating (
        _bstr_t pRetVal );
    IEditorCellPtr GetCoatingCell ( );
    double GetSemiDiameter ( );
    void PutSemiDiameter (
        double pRetVal );
    IEditorCellPtr GetSemiDiameterCell ( );
    double GetChipZone ( );
    void PutChipZone (
        double pRetVal );
    IEditorCellPtr GetChipZoneCell ( );
    double GetMechanicalSemiDiameter ( );
    void PutMechanicalSemiDiameter (
        double pRetVal );
    IEditorCellPtr GetMechanicalSemiDiameterCell ( );
    double GetConic ( );
    void PutConic (
        double pRetVal );
    IEditorCellPtr GetConicCell ( );
    double GetTCE ( );
    void PutTCE (
        double pRetVal );
    IEditorCellPtr GetTCECell ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsActive (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SurfaceNumber (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetSurfaceCell (
        /*[in]*/ enum SurfaceColumn Col,
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum SurfaceType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AvailableSurfaceTypes (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CurrentTypeSettings (
        /*[out,retval]*/ struct ISurfaceTypeSettings * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetSurfaceTypeSettings (
        /*[in]*/ enum SurfaceType Type,
        /*[out,retval]*/ struct ISurfaceTypeSettings * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ChangeType (
        /*[in]*/ struct ISurfaceTypeSettings * settings,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsObject (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsImage (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsStop (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsStop (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_SurfaceData (
        /*[out,retval]*/ struct ISurface * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeData (
        /*[out,retval]*/ struct ILDETypeData * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DrawData (
        /*[out,retval]*/ struct ILDEDrawData * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ApertureData (
        /*[out,retval]*/ struct ILDEApertureData * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ScatteringData (
        /*[out,retval]*/ struct ILDEScatteringData * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TiltDecenterData (
        /*[out,retval]*/ struct ILDETiltDecenterData * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_PhysicalOpticsData (
        /*[out,retval]*/ struct ILDEPhysicalOpticsData * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoatingData (
        /*[out,retval]*/ struct ILDECoatingData * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ImportData (
        /*[out,retval]*/ struct ILDEImportData * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Comment (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Comment (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_CommentCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_RadiusCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Thickness (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Thickness (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ThicknessCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Material (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Material (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaterialCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coating (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Coating (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoatingCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SemiDiameter (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SemiDiameter (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_SemiDiameterCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ChipZone (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ChipZone (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ChipZoneCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MechanicalSemiDiameter (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MechanicalSemiDiameter (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_MechanicalSemiDiameterCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Conic (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Conic (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_ConicCell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TCE (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TCE (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_TCECell (
        /*[out,retval]*/ struct IEditorCell * * pRetVal ) = 0;
};

struct __declspec(uuid("33c05440-fbef-4efb-8e0d-d1123f200d4f"))
ISurface : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum SurfaceType Type;
    __declspec(property(get=GetRow))
    ILDERowPtr Row;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;

    //
    // Wrapper methods for error-handling
    //

    enum SurfaceType GetType ( );
    ILDERowPtr GetRow ( );
    VARIANT_BOOL GetIsValid ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum SurfaceType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Row (
        /*[out,retval]*/ struct ILDERow * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

//
// Function implementation mapping
//

#pragma start_map_region("e:\users\byrdie\school\classes\eele582_opticaldesign\finalproject\src\popread\cppstandaloneapplication\debug\zosapii.tli")
__declspec(implementation_key(1)) long IConvertToNSCGroup::GetFirstSurface ( );
__declspec(implementation_key(2)) void IConvertToNSCGroup::PutFirstSurface ( long pRetVal );
__declspec(implementation_key(3)) long IConvertToNSCGroup::GetLastSurface ( );
__declspec(implementation_key(4)) void IConvertToNSCGroup::PutLastSurface ( long pRetVal );
__declspec(implementation_key(5)) VARIANT_BOOL IConvertToNSCGroup::GetIgnoreErrors ( );
__declspec(implementation_key(6)) void IConvertToNSCGroup::PutIgnoreErrors ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(7)) VARIANT_BOOL IConvertToNSCGroup::GetConvertFileToNSC ( );
__declspec(implementation_key(8)) void IConvertToNSCGroup::PutConvertFileToNSC ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(9)) VARIANT_BOOL IConvertToNSCGroup::GetCreateSourcesAndDetectors ( );
__declspec(implementation_key(10)) void IConvertToNSCGroup::PutCreateSourcesAndDetectors ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(11)) VARIANT_BOOL IConvertToNSCGroup::GetConvertToGlobalCoordinates ( );
__declspec(implementation_key(12)) void IConvertToNSCGroup::PutConvertToGlobalCoordinates ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(13)) double IConvertToNSCGroup::GetOverfillFactor ( );
__declspec(implementation_key(14)) void IConvertToNSCGroup::PutOverfillFactor ( double pRetVal );
__declspec(implementation_key(15)) enum RayPatternOption ICriticalRaysetGenerator::GetRayPattern ( );
__declspec(implementation_key(16)) void ICriticalRaysetGenerator::PutRayPattern ( enum RayPatternOption pRetVal );
__declspec(implementation_key(17)) long ICriticalRaysetGenerator::GetNumRays ( );
__declspec(implementation_key(18)) void ICriticalRaysetGenerator::PutNumRays ( long pRetVal );
__declspec(implementation_key(19)) double ICriticalRaysetGenerator::GetMinimumEfectiveInputDistance ( );
__declspec(implementation_key(20)) double ICriticalRaysetGenerator::GetEffectiveInputDistance ( );
__declspec(implementation_key(21)) void ICriticalRaysetGenerator::PutEffectiveInputDistance ( double pRetVal );
__declspec(implementation_key(22)) VARIANT_BOOL ICriticalRaysetGenerator::GetUseAllFields ( );
__declspec(implementation_key(23)) void ICriticalRaysetGenerator::PutUseAllFields ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(24)) VARIANT_BOOL ICriticalRaysetGenerator::GetUseAllWavelengths ( );
__declspec(implementation_key(25)) void ICriticalRaysetGenerator::PutUseAllWavelengths ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(26)) void ICriticalRaysetGenerator::PutReadRaysFromFilename ( _bstr_t _arg1 );
__declspec(implementation_key(27)) void ICriticalRaysetGenerator::PutSaveCriticalRaysFilename ( _bstr_t _arg1 );
__declspec(implementation_key(28)) double IMFCalculator::GetMeritFunctionCalculation ( );
__declspec(implementation_key(29)) long IDesignLockdown::GetDecimalPrecision ( );
__declspec(implementation_key(30)) void IDesignLockdown::PutDecimalPrecision ( long pRetVal );
__declspec(implementation_key(31)) VARIANT_BOOL IDesignLockdown::GetExcludePickups ( );
__declspec(implementation_key(32)) void IDesignLockdown::PutExcludePickups ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(33)) VARIANT_BOOL IDesignLockdown::GetUsePrecisionRounding ( );
__declspec(implementation_key(34)) void IDesignLockdown::PutUsePrecisionRounding ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(35)) long ISystemTool::GetProgress ( );
__declspec(implementation_key(36)) _bstr_t ISystemTool::GetStatus ( );
__declspec(implementation_key(37)) VARIANT_BOOL ISystemTool::GetIsRunning ( );
__declspec(implementation_key(38)) VARIANT_BOOL ISystemTool::GetCanCancel ( );
__declspec(implementation_key(39)) VARIANT_BOOL ISystemTool::GetIsAsynchronous ( );
__declspec(implementation_key(40)) VARIANT_BOOL ISystemTool::GetIsFiniteDuration ( );
__declspec(implementation_key(41)) VARIANT_BOOL ISystemTool::GetIsValid ( );
__declspec(implementation_key(42)) VARIANT_BOOL ISystemTool::Run ( );
__declspec(implementation_key(43)) VARIANT_BOOL ISystemTool::RunAndWaitForCompletion ( );
__declspec(implementation_key(44)) VARIANT_BOOL ISystemTool::WaitForCompletion ( );
__declspec(implementation_key(45)) VARIANT_BOOL ISystemTool::Cancel ( );
__declspec(implementation_key(46)) VARIANT_BOOL ISystemTool::Close ( );
__declspec(implementation_key(47)) enum RunStatus ISystemTool::WaitWithTimeout ( double timeOutSeconds );
__declspec(implementation_key(48)) enum RunStatus ISystemTool::RunAndWaitWithTimeout ( double timeOutSeconds );
__declspec(implementation_key(49)) VARIANT_BOOL ISystemTool::GetSucceeded ( );
__declspec(implementation_key(50)) _bstr_t ISystemTool::GetErrorMessage ( );
__declspec(implementation_key(51)) long IQuickAdjust::GetAdjustSurface ( );
__declspec(implementation_key(52)) void IQuickAdjust::PutAdjustSurface ( long pRetVal );
__declspec(implementation_key(53)) enum QuickAdjustType IQuickAdjust::GetSurfaceParameter ( );
__declspec(implementation_key(54)) void IQuickAdjust::PutSurfaceParameter ( enum QuickAdjustType pRetVal );
__declspec(implementation_key(55)) enum QuickAdjustCriterion IQuickAdjust::GetCriterion ( );
__declspec(implementation_key(56)) void IQuickAdjust::PutCriterion ( enum QuickAdjustCriterion pRetVal );
__declspec(implementation_key(57)) long IQuickAdjust::GetEvaluateSurface ( );
__declspec(implementation_key(58)) void IQuickAdjust::PutEvaluateSurface ( long pRetVal );
__declspec(implementation_key(59)) HRESULT IQuickAdjust::SetEvaluateSurfaceImage ( );
__declspec(implementation_key(60)) VARIANT_BOOL IQuickFocus::GetUseCentroid ( );
__declspec(implementation_key(61)) void IQuickFocus::PutUseCentroid ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(62)) enum QuickFocusCriterion IQuickFocus::GetCriterion ( );
__declspec(implementation_key(63)) void IQuickFocus::PutCriterion ( enum QuickFocusCriterion pRetVal );
__declspec(implementation_key(64)) _bstr_t IRestoreArchive::GetArchiveFile ( );
__declspec(implementation_key(65)) enum ArchiveFileStatus IRestoreArchive::SetFileName ( _bstr_t ArchiveFile );
__declspec(implementation_key(66)) _bstr_t IRestoreArchive::GetOutputFolder ( );
__declspec(implementation_key(67)) VARIANT_BOOL IRestoreArchive::SetOutputFolder ( _bstr_t folder );
__declspec(implementation_key(68)) long IRestoreArchive::GetNumberOfFilesInArchive ( );
__declspec(implementation_key(69)) _bstr_t IRestoreArchive::GetFileNameInArchive ( long fileNumber );
__declspec(implementation_key(70)) HRESULT IRestoreArchive::SetFileOverwrite ( long fileNumber, VARIANT_BOOL allowOverwrite );
__declspec(implementation_key(71)) HRESULT IRestoreArchive::SetFilesAllOverwrite ( );
__declspec(implementation_key(72)) HRESULT IRestoreArchive::SetFilesNoOverwrite ( );
__declspec(implementation_key(73)) _bstr_t ICreateArchive::GetArchiveFileName ( );
__declspec(implementation_key(74)) VARIANT_BOOL ICreateArchive::SetArchiveFileName ( _bstr_t fullFileName );
__declspec(implementation_key(75)) VARIANT_BOOL ICreateArchive::GetUseDataCompression ( );
__declspec(implementation_key(76)) void ICreateArchive::PutUseDataCompression ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(77)) long IExportCAD::GetFirstSurface ( );
__declspec(implementation_key(78)) void IExportCAD::PutFirstSurface ( long pRetVal );
__declspec(implementation_key(79)) long IExportCAD::GetLastSurface ( );
__declspec(implementation_key(80)) void IExportCAD::PutLastSurface ( long pRetVal );
__declspec(implementation_key(81)) VARIANT_BOOL IExportCAD::GetCanChangeSurface ( );
__declspec(implementation_key(82)) long IExportCAD::GetFirstObject ( );
__declspec(implementation_key(83)) void IExportCAD::PutFirstObject ( long pRetVal );
__declspec(implementation_key(84)) long IExportCAD::GetLastObject ( );
__declspec(implementation_key(85)) void IExportCAD::PutLastObject ( long pRetVal );
__declspec(implementation_key(86)) VARIANT_BOOL IExportCAD::GetSequentialSettingsEnabled ( );
__declspec(implementation_key(87)) enum RayPatternType IExportCAD::GetRayPattern ( );
__declspec(implementation_key(88)) void IExportCAD::PutRayPattern ( enum RayPatternType pRetVal );
__declspec(implementation_key(89)) long IExportCAD::GetNumberOfRays ( );
__declspec(implementation_key(90)) void IExportCAD::PutNumberOfRays ( long pRetVal );
__declspec(implementation_key(91)) long IExportCAD::GetWavelength ( );
__declspec(implementation_key(92)) void IExportCAD::PutWavelength ( long pRetVal );
__declspec(implementation_key(93)) HRESULT IExportCAD::SetWavelengthAll ( );
__declspec(implementation_key(94)) long IExportCAD::GetField ( );
__declspec(implementation_key(95)) void IExportCAD::PutField ( long pRetVal );
__declspec(implementation_key(96)) HRESULT IExportCAD::SetFieldAll ( );
__declspec(implementation_key(97)) VARIANT_BOOL IExportCAD::GetDeleteVignetted ( );
__declspec(implementation_key(98)) void IExportCAD::PutDeleteVignetted ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(99)) long IExportCAD::GetRayLayer ( );
__declspec(implementation_key(100)) void IExportCAD::PutRayLayer ( long pRetVal );
__declspec(implementation_key(101)) long IExportCAD::GetLensLayer ( );
__declspec(implementation_key(102)) void IExportCAD::PutLensLayer ( long pRetVal );
__declspec(implementation_key(103)) double IExportCAD::GetDummyThickness ( );
__declspec(implementation_key(104)) void IExportCAD::PutDummyThickness ( double pRetVal );
__declspec(implementation_key(105)) enum SplineSegmentsType IExportCAD::GetSplineSegments ( );
__declspec(implementation_key(106)) void IExportCAD::PutSplineSegments ( enum SplineSegmentsType pRetVal );
__declspec(implementation_key(107)) enum CADFileType IExportCAD::GetFileType ( );
__declspec(implementation_key(108)) void IExportCAD::PutFileType ( enum CADFileType pRetVal );
__declspec(implementation_key(109)) enum CADToleranceType IExportCAD::GetTolerance ( );
__declspec(implementation_key(110)) void IExportCAD::PutTolerance ( enum CADToleranceType pRetVal );
__declspec(implementation_key(111)) enum CADAngularToleranceType IExportCAD::GetAngularTolerance ( );
__declspec(implementation_key(112)) void IExportCAD::PutAngularTolerance ( enum CADAngularToleranceType pRetVal );
__declspec(implementation_key(113)) long IExportCAD::GetConfiguration ( );
__declspec(implementation_key(114)) HRESULT IExportCAD::SetSingleConfiguration ( long configurationNumber );
__declspec(implementation_key(115)) HRESULT IExportCAD::SetCurrentConfiguration ( );
__declspec(implementation_key(116)) HRESULT IExportCAD::SetConfigurationAllByLayer ( );
__declspec(implementation_key(117)) HRESULT IExportCAD::SetConfigurationAllByFile ( );
__declspec(implementation_key(118)) HRESULT IExportCAD::SetConfigurationAllAtOnce ( );
__declspec(implementation_key(119)) VARIANT_BOOL IExportCAD::GetExportDummySurfaces ( );
__declspec(implementation_key(120)) void IExportCAD::PutExportDummySurfaces ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(121)) VARIANT_BOOL IExportCAD::GetSurfacesAsSolids ( );
__declspec(implementation_key(122)) void IExportCAD::PutSurfacesAsSolids ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(123)) VARIANT_BOOL IExportCAD::GetScatterNSCRays ( );
__declspec(implementation_key(124)) void IExportCAD::PutScatterNSCRays ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(125)) VARIANT_BOOL IExportCAD::GetSplitNSCRays ( );
__declspec(implementation_key(126)) void IExportCAD::PutSplitNSCRays ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(127)) VARIANT_BOOL IExportCAD::GetUsePolarization ( );
__declspec(implementation_key(128)) void IExportCAD::PutUsePolarization ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(129)) _bstr_t IExportCAD::GetOutputFileName ( );
__declspec(implementation_key(130)) void IExportCAD::PutOutputFileName ( _bstr_t pRetVal );
__declspec(implementation_key(131)) VARIANT_BOOL IExportCAD::GetAutoNameFaces ( );
__declspec(implementation_key(132)) void IExportCAD::PutAutoNameFaces ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(133)) double IScale::GetScaleFactor ( );
__declspec(implementation_key(134)) void IScale::PutScaleFactor ( double pRetVal );
__declspec(implementation_key(135)) long IScale::GetFirstComponent ( );
__declspec(implementation_key(136)) void IScale::PutFirstComponent ( long pRetVal );
__declspec(implementation_key(137)) long IScale::GetLastComponent ( );
__declspec(implementation_key(138)) void IScale::PutLastComponent ( long pRetVal );
__declspec(implementation_key(139)) enum ScaleToUnits IScale::GetScaleToUnit ( );
__declspec(implementation_key(140)) void IScale::PutScaleToUnit ( enum ScaleToUnits pRetVal );
__declspec(implementation_key(141)) VARIANT_BOOL IScale::GetScaleByFactor ( );
__declspec(implementation_key(142)) void IScale::PutScaleByFactor ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(143)) VARIANT_BOOL IScale::GetScaleByUnits ( );
__declspec(implementation_key(144)) void IScale::PutScaleByUnits ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(145)) long IScale::GetNumberOfComponents ( );
__declspec(implementation_key(146)) _bstr_t IScale::GetComponentAt ( long idx );
__declspec(implementation_key(147)) VARIANT_BOOL IComputeRMSSpotSize::GetUseGaussianQuadrature ( );
__declspec(implementation_key(148)) VARIANT_BOOL IComputeRMSSpotSize::GetUseRectangularArray ( );
__declspec(implementation_key(149)) long IComputeRMSSpotSize::GetNumberOfRings ( );
__declspec(implementation_key(150)) long IComputeRMSSpotSize::GetNumberOfArms ( );
__declspec(implementation_key(151)) double IComputeRMSSpotSize::GetObscuredFration ( );
__declspec(implementation_key(152)) long IComputeRMSSpotSize::GetGridSampling ( );
__declspec(implementation_key(153)) VARIANT_BOOL IComputeRMSSpotSize::GetDeleteVignetted ( );
__declspec(implementation_key(154)) VARIANT_BOOL IComputeRMSSpotSize::GetAssumeAxialSymmetry ( );
__declspec(implementation_key(155)) void IComputeRMSSpotSize::PutAssumeAxialSymmetry ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(156)) VARIANT_BOOL IComputeRMSSpotSize::GetIgnoreLateralColor ( );
__declspec(implementation_key(157)) void IComputeRMSSpotSize::PutIgnoreLateralColor ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(158)) HRESULT IComputeRMSSpotSize::SetMethodGaussianQuadrature ( long NumberOfRings, long NumberOfArms, double obscuredFraction );
__declspec(implementation_key(159)) HRESULT IComputeRMSSpotSize::SetMethodRectangularArray ( long GridSampling, VARIANT_BOOL DeleteVignetted );
__declspec(implementation_key(160)) long IComputeRMSSpotSize::GetNumberOfConfigurations ( );
__declspec(implementation_key(161)) long IComputeRMSSpotSize::GetNumberOfFields ( );
__declspec(implementation_key(162)) SAFEARRAY * IComputeRMSSpotSize::GetRMSSpotRadii ( );
__declspec(implementation_key(163)) double IComputeRMSSpotSize::GetSpotRadius ( long Configuration, long Field );
__declspec(implementation_key(164)) VARIANT_BOOL ITolerancing::Save ( _bstr_t fileName );
__declspec(implementation_key(165)) VARIANT_BOOL ITolerancing::Load ( _bstr_t fileName );
__declspec(implementation_key(166)) VARIANT_BOOL ITolerancing::Reset ( );
__declspec(implementation_key(167)) _bstr_t ITolerancing::GetResultFilename ( );
__declspec(implementation_key(168)) VARIANT_BOOL ITolerancing::GetIsForceRayAimingUsed ( );
__declspec(implementation_key(169)) void ITolerancing::PutIsForceRayAimingUsed ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(170)) VARIANT_BOOL ITolerancing::GetIsSeperateFieldConfigurationsUsed ( );
__declspec(implementation_key(171)) void ITolerancing::PutIsSeperateFieldConfigurationsUsed ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(172)) enum SetupModes ITolerancing::GetSetupMode ( );
__declspec(implementation_key(173)) void ITolerancing::PutSetupMode ( enum SetupModes pRetVal );
__declspec(implementation_key(174)) long ITolerancing::GetSetupModeIndex ( );
__declspec(implementation_key(175)) void ITolerancing::PutSetupModeIndex ( long pRetVal );
__declspec(implementation_key(176)) long ITolerancing::GetNumberOfSetupModes ( );
__declspec(implementation_key(177)) _bstr_t ITolerancing::GetSetupModeAt ( long idx );
__declspec(implementation_key(178)) enum SetupPolynomials ITolerancing::GetSetupPolynomial ( );
__declspec(implementation_key(179)) void ITolerancing::PutSetupPolynomial ( enum SetupPolynomials pRetVal );
__declspec(implementation_key(180)) long ITolerancing::GetSetupPolynomialsIndex ( );
__declspec(implementation_key(181)) void ITolerancing::PutSetupPolynomialsIndex ( long pRetVal );
__declspec(implementation_key(182)) long ITolerancing::GetNumberOfSetupPolynomials ( );
__declspec(implementation_key(183)) _bstr_t ITolerancing::GetSetupPolynomialAt ( long idx );
__declspec(implementation_key(184)) enum SetupCaches ITolerancing::GetSetupCache ( );
__declspec(implementation_key(185)) void ITolerancing::PutSetupCache ( enum SetupCaches pRetVal );
__declspec(implementation_key(186)) long ITolerancing::GetSetupCacheIndex ( );
__declspec(implementation_key(187)) void ITolerancing::PutSetupCacheIndex ( long pRetVal );
__declspec(implementation_key(188)) long ITolerancing::GetNumberOfSetupCaches ( );
__declspec(implementation_key(189)) _bstr_t ITolerancing::GetSetupCacheAt ( long idx );
__declspec(implementation_key(190)) enum SetupChanges ITolerancing::GetSetupChange ( );
__declspec(implementation_key(191)) void ITolerancing::PutSetupChange ( enum SetupChanges pRetVal );
__declspec(implementation_key(192)) long ITolerancing::GetSetupChangeIndex ( );
__declspec(implementation_key(193)) void ITolerancing::PutSetupChangeIndex ( long pRetVal );
__declspec(implementation_key(194)) long ITolerancing::GetNumberOfSetupChanges ( );
__declspec(implementation_key(195)) _bstr_t ITolerancing::GetSetupChangeAt ( long idx );
__declspec(implementation_key(196)) long ITolerancing::GetSetupCore ( );
__declspec(implementation_key(197)) void ITolerancing::PutSetupCore ( long pRetVal );
__declspec(implementation_key(198)) long ITolerancing::GetSetupCoreIndex ( );
__declspec(implementation_key(199)) void ITolerancing::PutSetupCoreIndex ( long pRetVal );
__declspec(implementation_key(200)) long ITolerancing::GetNumberOfSetupCores ( );
__declspec(implementation_key(201)) _bstr_t ITolerancing::GetSetupCoreAt ( long idx );
__declspec(implementation_key(202)) double ITolerancing::GetMaximumCriteria ( );
__declspec(implementation_key(203)) void ITolerancing::PutMaximumCriteria ( double pRetVal );
__declspec(implementation_key(204)) double ITolerancing::GetMTFFrequency ( );
__declspec(implementation_key(205)) void ITolerancing::PutMTFFrequency ( double pRetVal );
__declspec(implementation_key(206)) enum Criterions ITolerancing::GetCriterion ( );
__declspec(implementation_key(207)) void ITolerancing::PutCriterion ( enum Criterions pRetVal );
__declspec(implementation_key(208)) long ITolerancing::GetCriterionIndex ( );
__declspec(implementation_key(209)) void ITolerancing::PutCriterionIndex ( long pRetVal );
__declspec(implementation_key(210)) long ITolerancing::GetNumberOfCriteria ( );
__declspec(implementation_key(211)) _bstr_t ITolerancing::GetCriterionAt ( long idx );
__declspec(implementation_key(212)) long ITolerancing::GetCriterionSampling ( );
__declspec(implementation_key(213)) void ITolerancing::PutCriterionSampling ( long pRetVal );
__declspec(implementation_key(214)) long ITolerancing::GetCriterionSamplingIndex ( );
__declspec(implementation_key(215)) void ITolerancing::PutCriterionSamplingIndex ( long pRetVal );
__declspec(implementation_key(216)) long ITolerancing::GetNumberOfCriterionSamplings ( );
__declspec(implementation_key(217)) _bstr_t ITolerancing::GetCriterionSampleAt ( long idx );
__declspec(implementation_key(218)) enum CriterionComps ITolerancing::GetCriterionComp ( );
__declspec(implementation_key(219)) void ITolerancing::PutCriterionComp ( enum CriterionComps pRetVal );
__declspec(implementation_key(220)) long ITolerancing::GetCriterionCompIndex ( );
__declspec(implementation_key(221)) void ITolerancing::PutCriterionCompIndex ( long pRetVal );
__declspec(implementation_key(222)) long ITolerancing::GetNumberOfCriterionComps ( );
__declspec(implementation_key(223)) _bstr_t ITolerancing::GetCriterionCompAt ( long idx );
__declspec(implementation_key(224)) long ITolerancing::GetCriterionConfiguration ( );
__declspec(implementation_key(225)) void ITolerancing::PutCriterionConfiguration ( long pRetVal );
__declspec(implementation_key(226)) long ITolerancing::GetCriterionConfigurationIndex ( );
__declspec(implementation_key(227)) void ITolerancing::PutCriterionConfigurationIndex ( long pRetVal );
__declspec(implementation_key(228)) long ITolerancing::GetNumberOfCriterionConfigurations ( );
__declspec(implementation_key(229)) _bstr_t ITolerancing::GetCriterionConfigurationAt ( long idx );
__declspec(implementation_key(230)) enum CriterionFields ITolerancing::GetCriterionField ( );
__declspec(implementation_key(231)) void ITolerancing::PutCriterionField ( enum CriterionFields pRetVal );
__declspec(implementation_key(232)) long ITolerancing::GetCriterionFieldIndex ( );
__declspec(implementation_key(233)) void ITolerancing::PutCriterionFieldIndex ( long pRetVal );
__declspec(implementation_key(234)) long ITolerancing::GetNumberOfCriterionFields ( );
__declspec(implementation_key(235)) _bstr_t ITolerancing::GetCriterionFieldAt ( long idx );
__declspec(implementation_key(236)) long ITolerancing::GetCriterionCycle ( );
__declspec(implementation_key(237)) void ITolerancing::PutCriterionCycle ( long pRetVal );
__declspec(implementation_key(238)) long ITolerancing::GetCriterionCycleIndex ( );
__declspec(implementation_key(239)) void ITolerancing::PutCriterionCycleIndex ( long pRetVal );
__declspec(implementation_key(240)) long ITolerancing::GetNumberOfCriterionCycles ( );
__declspec(implementation_key(241)) _bstr_t ITolerancing::GetCriterionCycleAt ( long idx );
__declspec(implementation_key(242)) long ITolerancing::GetCriterionScript ( );
__declspec(implementation_key(243)) void ITolerancing::PutCriterionScript ( long pRetVal );
__declspec(implementation_key(244)) long ITolerancing::GetCriterionScriptIndex ( );
__declspec(implementation_key(245)) void ITolerancing::PutCriterionScriptIndex ( long pRetVal );
__declspec(implementation_key(246)) long ITolerancing::GetNumberOfCriterionScripts ( );
__declspec(implementation_key(247)) _bstr_t ITolerancing::GetCriterionScriptAt ( long idx );
__declspec(implementation_key(248)) long ITolerancing::GetNumberOfRuns ( );
__declspec(implementation_key(249)) void ITolerancing::PutNumberOfRuns ( long pRetVal );
__declspec(implementation_key(250)) long ITolerancing::GetNumberToSave ( );
__declspec(implementation_key(251)) void ITolerancing::PutNumberToSave ( long pRetVal );
__declspec(implementation_key(252)) VARIANT_BOOL ITolerancing::GetIsSaveBestWorstUsed ( );
__declspec(implementation_key(253)) void ITolerancing::PutIsSaveBestWorstUsed ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(254)) VARIANT_BOOL ITolerancing::GetIsOverlayGraphicsUsed ( );
__declspec(implementation_key(255)) void ITolerancing::PutIsOverlayGraphicsUsed ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(256)) _bstr_t ITolerancing::GetFilePrefix ( );
__declspec(implementation_key(257)) void ITolerancing::PutFilePrefix ( _bstr_t pRetVal );
__declspec(implementation_key(258)) enum MonteCarloStatistics ITolerancing::GetMonteCarloStatistic ( );
__declspec(implementation_key(259)) void ITolerancing::PutMonteCarloStatistic ( enum MonteCarloStatistics pRetVal );
__declspec(implementation_key(260)) long ITolerancing::GetMonteCarloStatisticIndex ( );
__declspec(implementation_key(261)) void ITolerancing::PutMonteCarloStatisticIndex ( long pRetVal );
__declspec(implementation_key(262)) long ITolerancing::GetNumberOfMonteCarloStatistics ( );
__declspec(implementation_key(263)) _bstr_t ITolerancing::GetMonteCarloStatisticAt ( long idx );
__declspec(implementation_key(264)) VARIANT_BOOL ITolerancing::GetIsShowDescriptionsUsed ( );
__declspec(implementation_key(265)) void ITolerancing::PutIsShowDescriptionsUsed ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(266)) VARIANT_BOOL ITolerancing::GetIsShowCompensatorsUsed ( );
__declspec(implementation_key(267)) void ITolerancing::PutIsShowCompensatorsUsed ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(268)) VARIANT_BOOL ITolerancing::GetIsHideAllButWorstUsed ( );
__declspec(implementation_key(269)) void ITolerancing::PutIsHideAllButWorstUsed ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(270)) _bstr_t ITolerancing::GetOutputFile ( );
__declspec(implementation_key(271)) void ITolerancing::PutOutputFile ( _bstr_t pRetVal );
__declspec(implementation_key(272)) long ITolerancing::GetDisplayShowWorst ( );
__declspec(implementation_key(273)) void ITolerancing::PutDisplayShowWorst ( long pRetVal );
__declspec(implementation_key(274)) long ITolerancing::GetDisplayShowWorstIndex ( );
__declspec(implementation_key(275)) void ITolerancing::PutDisplayShowWorstIndex ( long pRetVal );
__declspec(implementation_key(276)) long ITolerancing::GetNumberOfDisplayShowWorsts ( );
__declspec(implementation_key(277)) _bstr_t ITolerancing::GetDisplayShowWorstAt ( long idx );
__declspec(implementation_key(278)) enum LTRaySampling ILightningTrace::GetRaySampling ( );
__declspec(implementation_key(279)) void ILightningTrace::PutRaySampling ( enum LTRaySampling pRetVal );
__declspec(implementation_key(280)) enum LTEdgeSasmpling ILightningTrace::GetEdgeSampling ( );
__declspec(implementation_key(281)) void ILightningTrace::PutEdgeSampling ( enum LTEdgeSasmpling pRetVal );
__declspec(implementation_key(282)) long IRayTraceNormUnpolData::GetNumberOfRays ( );
__declspec(implementation_key(283)) long IRayTraceNormUnpolData::GetMaxRays ( );
__declspec(implementation_key(284)) HRESULT IRayTraceNormUnpolData::ClearData ( );
__declspec(implementation_key(285)) VARIANT_BOOL IRayTraceNormUnpolData::AddRay ( long waveNumber, double Hx, double Hy, double Px, double Py, enum OPDMode calcOPD );
__declspec(implementation_key(286)) VARIANT_BOOL IRayTraceNormUnpolData::GetHasResultData ( );
__declspec(implementation_key(287)) VARIANT_BOOL IRayTraceNormUnpolData::StartReadingResults ( );
__declspec(implementation_key(288)) VARIANT_BOOL IRayTraceNormUnpolData::ReadNextResult ( long * rayNumber, long * ErrorCode, long * vignetteCode, double * X, double * Y, double * Z, double * L, double * M, double * N, double * l2, double * m2, double * n2, double * opd, double * intensity );
__declspec(implementation_key(289)) long IRayTraceDirectUnpolData::GetNumberOfRays ( );
__declspec(implementation_key(290)) long IRayTraceDirectUnpolData::GetMaxRays ( );
__declspec(implementation_key(291)) HRESULT IRayTraceDirectUnpolData::ClearData ( );
__declspec(implementation_key(292)) VARIANT_BOOL IRayTraceDirectUnpolData::AddRay ( long waveNumber, double X, double Y, double Z, double L, double M, double N );
__declspec(implementation_key(293)) VARIANT_BOOL IRayTraceDirectUnpolData::GetHasResultData ( );
__declspec(implementation_key(294)) VARIANT_BOOL IRayTraceDirectUnpolData::StartReadingResults ( );
__declspec(implementation_key(295)) VARIANT_BOOL IRayTraceDirectUnpolData::ReadNextResult ( long * rayNumber, long * ErrorCode, long * vignetteCode, double * X, double * Y, double * Z, double * L, double * M, double * N, double * l2, double * m2, double * n2, double * intensity );
__declspec(implementation_key(296)) long IRayTraceNormPolData::GetNumberOfRays ( );
__declspec(implementation_key(297)) long IRayTraceNormPolData::GetMaxRays ( );
__declspec(implementation_key(298)) HRESULT IRayTraceNormPolData::ClearData ( );
__declspec(implementation_key(299)) VARIANT_BOOL IRayTraceNormPolData::AddRay ( long waveNumber, double Hx, double Hy, double Px, double Py, double exr, double exi, double eyr, double eyi, double ezr, double ezi );
__declspec(implementation_key(300)) VARIANT_BOOL IRayTraceNormPolData::GetHasResultData ( );
__declspec(implementation_key(301)) VARIANT_BOOL IRayTraceNormPolData::StartReadingResults ( );
__declspec(implementation_key(302)) VARIANT_BOOL IRayTraceNormPolData::ReadNextResult ( long * rayNumber, long * ErrorCode, double * exr, double * exi, double * eyr, double * eyi, double * ezr, double * ezi, double * intensity );
__declspec(implementation_key(303)) VARIANT_BOOL IRayTraceNormPolData::ReadNextResultFull ( long * rayNumber, long * ErrorCode, double * xo, double * yo, double * zo, double * lo, double * mo, double * no, double * exr, double * exi, double * eyr, double * eyi, double * ezr, double * ezi, double * intensity );
__declspec(implementation_key(304)) long IRayTraceDirectPolData::GetNumberOfRays ( );
__declspec(implementation_key(305)) long IRayTraceDirectPolData::GetMaxRays ( );
__declspec(implementation_key(306)) HRESULT IRayTraceDirectPolData::ClearData ( );
__declspec(implementation_key(307)) VARIANT_BOOL IRayTraceDirectPolData::AddRay ( long waveNumber, double X, double Y, double Z, double L, double M, double N );
__declspec(implementation_key(308)) VARIANT_BOOL IRayTraceDirectPolData::GetHasResultData ( );
__declspec(implementation_key(309)) VARIANT_BOOL IRayTraceDirectPolData::StartReadingResults ( );
__declspec(implementation_key(310)) VARIANT_BOOL IRayTraceDirectPolData::ReadNextResult ( long * rayNumber, long * ErrorCode, long * vignetteCode, double * exr, double * exi, double * eyr, double * eyi, double * ezr, double * ezi, double * intensity );
__declspec(implementation_key(311)) VARIANT_BOOL IRayTraceDirectPolData::ReadNextResultFull ( long * rayNumber, long * ErrorCode, long * vignetteCode, double * xo, double * yo, double * zo, double * lo, double * mo, double * no, double * exr, double * exi, double * eyr, double * eyi, double * ezr, double * ezi, double * intensity );
__declspec(implementation_key(312)) long IRayTraceNSCData::GetNumberOfRays ( );
__declspec(implementation_key(313)) long IRayTraceNSCData::GetMaxRays ( );
__declspec(implementation_key(314)) HRESULT IRayTraceNSCData::ClearData ( );
__declspec(implementation_key(315)) VARIANT_BOOL IRayTraceNSCData::AddRay ( long waveNumber, long surf, enum NSCTraceOptions Mode, double X, double Y, double Z, double L, double M, double N, long InsideOf, double exr, double exi, double eyr, double eyi, double ezr, double ezi );
__declspec(implementation_key(316)) VARIANT_BOOL IRayTraceNSCData::GetHasResultData ( );
__declspec(implementation_key(317)) VARIANT_BOOL IRayTraceNSCData::StartReadingResults ( );
__declspec(implementation_key(318)) VARIANT_BOOL IRayTraceNSCData::ReadNextResult ( long * rayNumber, long * ErrorCode, long * wave, long * numSegments );
__declspec(implementation_key(319)) VARIANT_BOOL IRayTraceNSCData::ReadNextSegment ( long * segmentLevel, long * segmentParent, long * hitObj, long * InsideOf, double * X, double * Y, double * Z, double * L, double * M, double * N, double * exr, double * exi, double * eyr, double * eyi, double * ezr, double * ezi, double * intensity, double * pathLength );
__declspec(implementation_key(320)) VARIANT_BOOL IRayTraceNSCSourceData::GetUseSingleSource ( );
__declspec(implementation_key(321)) void IRayTraceNSCSourceData::PutUseSingleSource ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(322)) long IRayTraceNSCSourceData::GetSurfaceNumber ( );
__declspec(implementation_key(323)) void IRayTraceNSCSourceData::PutSurfaceNumber ( long pRetVal );
__declspec(implementation_key(324)) long IRayTraceNSCSourceData::GetObjectNumber ( );
__declspec(implementation_key(325)) void IRayTraceNSCSourceData::PutObjectNumber ( long pRetVal );
__declspec(implementation_key(326)) long IRayTraceNSCSourceData::GetMaxRays ( );
__declspec(implementation_key(327)) void IRayTraceNSCSourceData::PutMaxRays ( long pRetVal );
__declspec(implementation_key(328)) enum NSCTraceOptions IRayTraceNSCSourceData::GetTraceOptions ( );
__declspec(implementation_key(329)) void IRayTraceNSCSourceData::PutTraceOptions ( enum NSCTraceOptions pRetVal );
__declspec(implementation_key(330)) long IRayTraceNSCSourceData::GetWavelength ( );
__declspec(implementation_key(331)) void IRayTraceNSCSourceData::PutWavelength ( long pRetVal );
__declspec(implementation_key(332)) HRESULT IRayTraceNSCSourceData::UsePrimaryWavelength ( );
__declspec(implementation_key(333)) HRESULT IRayTraceNSCSourceData::UseAnyWavelength ( );
__declspec(implementation_key(334)) VARIANT_BOOL IRayTraceNSCSourceData::GetHasResultData ( );
__declspec(implementation_key(335)) VARIANT_BOOL IRayTraceNSCSourceData::StartReadingResults ( );
__declspec(implementation_key(336)) VARIANT_BOOL IRayTraceNSCSourceData::ReadNextResult ( long * rayNumber, long * ErrorCode, long * wave, long * numSegments );
__declspec(implementation_key(337)) VARIANT_BOOL IRayTraceNSCSourceData::ReadNextSegment ( long * segmentLevel, long * segmentParent, long * hitObj, long * InsideOf, double * X, double * Y, double * Z, double * L, double * M, double * N, double * exr, double * exi, double * eyr, double * eyi, double * ezr, double * ezi, double * intensity, double * pathLength );
__declspec(implementation_key(338)) IRayTraceNormUnpolDataPtr IBatchRayTrace::CreateNormUnpol ( long MaxRays, enum RaysType rayType, long toSurface );
__declspec(implementation_key(339)) VARIANT_BOOL IBatchRayTrace::SingleRayNormUnpol ( enum RaysType rayType, long toSurf, long waveNumber, double Hx, double Hy, double Px, double Py, VARIANT_BOOL calcOPD, long * ErrorCode, long * vignetteCode, double * xo, double * yo, double * zo, double * lo, double * mo, double * no, double * l2o, double * m2o, double * n2o, double * opd, double * intensity );
__declspec(implementation_key(340)) IRayTraceDirectUnpolDataPtr IBatchRayTrace::CreateDirectUnpol ( long MaxRays, enum RaysType rayType, long startSurface, long toSurface );
__declspec(implementation_key(341)) VARIANT_BOOL IBatchRayTrace::SingleRayDirectUnpol ( enum RaysType rayType, long startSurface, long toSurface, long waveNumber, double X, double Y, double Z, double L, double M, double N, long * ErrorCode, long * vignetteCode, double * xo, double * yo, double * zo, double * lo, double * mo, double * no, double * l2o, double * m2o, double * n2o, double * intensity );
__declspec(implementation_key(342)) IRayTraceNormPolDataPtr IBatchRayTrace::CreateNormPol ( long MaxRays, enum RaysType rayType, double Ex, double Ey, double phaX, double phaY, long toSurface );
__declspec(implementation_key(343)) VARIANT_BOOL IBatchRayTrace::SingleRayNormPol ( enum RaysType rayType, double Ex, double Ey, double phaX, double phaY, long toSurf, long waveNumber, double Hx, double Hy, double Px, double Py, double exr, double exi, double eyr, double eyi, double ezr, double ezi, long * ErrorCode, double * exro, double * exio, double * eyro, double * eyio, double * ezro, double * ezio, double * intensity );
__declspec(implementation_key(344)) VARIANT_BOOL IBatchRayTrace::SingleRayNormPolFull ( enum RaysType rayType, double Ex, double Ey, double phaX, double phaY, long toSurf, long waveNumber, double Hx, double Hy, double Px, double Py, double exr, double exi, double eyr, double eyi, double ezr, double ezi, long * ErrorCode, double * xo, double * yo, double * zo, double * lo, double * mo, double * no, double * exro, double * exio, double * eyro, double * eyio, double * ezro, double * ezio, double * intensity );
__declspec(implementation_key(345)) IRayTraceDirectPolDataPtr IBatchRayTrace::CreateDirectPol ( long MaxRays, enum RaysType rayType, double Ex, double Ey, double phaX, double phaY, long startSurface, long toSurface );
__declspec(implementation_key(346)) VARIANT_BOOL IBatchRayTrace::SingleRayDirectPol ( enum RaysType rayType, double Ex, double Ey, double phaX, double phaY, long startSurface, long toSurface, long waveNumber, double X, double Y, double Z, double L, double M, double N, long * ErrorCode, long * vignetteCode, double * exro, double * exio, double * eyro, double * eyio, double * ezro, double * ezio, double * intensity );
__declspec(implementation_key(347)) VARIANT_BOOL IBatchRayTrace::SingleRayDirectPolFull ( enum RaysType rayType, double Ex, double Ey, double phaX, double phaY, long startSurface, long toSurface, long waveNumber, double X, double Y, double Z, double L, double M, double N, long * ErrorCode, long * vignetteCode, double * xo, double * yo, double * zo, double * lo, double * mo, double * no, double * exro, double * exio, double * eyro, double * eyio, double * ezro, double * ezio, double * intensity );
__declspec(implementation_key(348)) IRayTraceNSCDataPtr IBatchRayTrace::CreateNSC ( long MaxRays, long maxSegments, double coherenceLength );
__declspec(implementation_key(349)) IRayTraceNSCSourceDataPtr IBatchRayTrace::CreateNSCSourceData ( long maxSegments, double coherenceLength );
__declspec(implementation_key(350)) VARIANT_BOOL IBatchRayTrace::GetDirectFieldCoordinates ( long waveNumber, enum RaysType rayType, double Hx, double Hy, double Px, double Py, double * X, double * Y, double * Z, double * L, double * M, double * N );
__declspec(implementation_key(351)) HRESULT IBatchRayTrace::GetPhase ( double L, double M, double N, double jx, double jy, double xPhaseDeg, double yPhaseDeg, double intensity, double * exr, double * exi, double * eyr, double * eyi, double * ezr, double * ezi );
__declspec(implementation_key(352)) VARIANT_BOOL IZRDReaderResults::GetIsValid ( );
__declspec(implementation_key(353)) VARIANT_BOOL IZRDReaderResults::ReadNextResult ( long * rayNumber, long * waveIndex, double * wlUM, long * numSegments );
__declspec(implementation_key(354)) VARIANT_BOOL IZRDReaderResults::ReadNextSegment ( long * segmentLevel, long * segmentParent, long * hitObj, long * hitFace, long * InsideOf, enum RayStatus * Status, double * X, double * Y, double * Z, double * L, double * M, double * N, double * exr, double * exi, double * eyr, double * eyi, double * ezr, double * ezi, double * intensity, double * pathLength );
__declspec(implementation_key(355)) void IZRDReader::PutZRDFile ( _bstr_t _arg1 );
__declspec(implementation_key(356)) _bstr_t IZRDReader::GetFilter ( );
__declspec(implementation_key(357)) void IZRDReader::PutFilter ( _bstr_t pRetVal );
__declspec(implementation_key(358)) IZRDReaderResultsPtr IZRDReader::GetResults ( );
__declspec(implementation_key(359)) enum OptimizationAlgorithm ILocalOptimization::GetAlgorithm ( );
__declspec(implementation_key(360)) void ILocalOptimization::PutAlgorithm ( enum OptimizationAlgorithm pRetVal );
__declspec(implementation_key(361)) long ILocalOptimization::GetNumberOfCores ( );
__declspec(implementation_key(362)) void ILocalOptimization::PutNumberOfCores ( long pRetVal );
__declspec(implementation_key(363)) long ILocalOptimization::GetMaxCores ( );
__declspec(implementation_key(364)) enum OptimizationCycles ILocalOptimization::GetCycles ( );
__declspec(implementation_key(365)) void ILocalOptimization::PutCycles ( enum OptimizationCycles pRetVal );
__declspec(implementation_key(366)) long ILocalOptimization::GetTargets ( );
__declspec(implementation_key(367)) long ILocalOptimization::GetVariables ( );
__declspec(implementation_key(368)) double ILocalOptimization::GetInitialMeritFunction ( );
__declspec(implementation_key(369)) double ILocalOptimization::GetCurrentMeritFunction ( );
__declspec(implementation_key(370)) enum OptimizationAlgorithm IGlobalOptimization::GetAlgorithm ( );
__declspec(implementation_key(371)) void IGlobalOptimization::PutAlgorithm ( enum OptimizationAlgorithm pRetVal );
__declspec(implementation_key(372)) long IGlobalOptimization::GetNumberOfCores ( );
__declspec(implementation_key(373)) void IGlobalOptimization::PutNumberOfCores ( long pRetVal );
__declspec(implementation_key(374)) long IGlobalOptimization::GetMaxCores ( );
__declspec(implementation_key(375)) enum OptimizationSaveCount IGlobalOptimization::GetNumberToSave ( );
__declspec(implementation_key(376)) void IGlobalOptimization::PutNumberToSave ( enum OptimizationSaveCount pRetVal );
__declspec(implementation_key(377)) long IGlobalOptimization::GetTargets ( );
__declspec(implementation_key(378)) long IGlobalOptimization::GetVariables ( );
__declspec(implementation_key(379)) double IGlobalOptimization::GetInitialMeritFunction ( );
__declspec(implementation_key(380)) __int64 IGlobalOptimization::GetSystems ( );
__declspec(implementation_key(381)) long IGlobalOptimization::GetCycles ( );
__declspec(implementation_key(382)) double IGlobalOptimization::CurrentMeritFunction ( long N );
__declspec(implementation_key(383)) double IGlobalOptimization::GetCurrentMeritFunction01 ( );
__declspec(implementation_key(384)) double IGlobalOptimization::GetCurrentMeritFunction02 ( );
__declspec(implementation_key(385)) double IGlobalOptimization::GetCurrentMeritFunction03 ( );
__declspec(implementation_key(386)) double IGlobalOptimization::GetCurrentMeritFunction04 ( );
__declspec(implementation_key(387)) double IGlobalOptimization::GetCurrentMeritFunction05 ( );
__declspec(implementation_key(388)) double IGlobalOptimization::GetCurrentMeritFunction06 ( );
__declspec(implementation_key(389)) double IGlobalOptimization::GetCurrentMeritFunction07 ( );
__declspec(implementation_key(390)) double IGlobalOptimization::GetCurrentMeritFunction08 ( );
__declspec(implementation_key(391)) double IGlobalOptimization::GetCurrentMeritFunction09 ( );
__declspec(implementation_key(392)) double IGlobalOptimization::GetCurrentMeritFunction10 ( );
__declspec(implementation_key(393)) enum OptimizationAlgorithm IHammerOptimization::GetAlgorithm ( );
__declspec(implementation_key(394)) void IHammerOptimization::PutAlgorithm ( enum OptimizationAlgorithm pRetVal );
__declspec(implementation_key(395)) long IHammerOptimization::GetNumberOfCores ( );
__declspec(implementation_key(396)) void IHammerOptimization::PutNumberOfCores ( long pRetVal );
__declspec(implementation_key(397)) long IHammerOptimization::GetMaxCores ( );
__declspec(implementation_key(398)) VARIANT_BOOL IHammerOptimization::GetAutomaticOptimization ( );
__declspec(implementation_key(399)) void IHammerOptimization::PutAutomaticOptimization ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(400)) long IHammerOptimization::GetTargets ( );
__declspec(implementation_key(401)) long IHammerOptimization::GetVariables ( );
__declspec(implementation_key(402)) double IHammerOptimization::GetInitialMeritFunction ( );
__declspec(implementation_key(403)) double IHammerOptimization::GetCurrentMeritFunction ( );
__declspec(implementation_key(404)) __int64 IHammerOptimization::GetSystems ( );
__declspec(implementation_key(405)) enum WizardType IWizard::GetWizard ( );
__declspec(implementation_key(406)) HRESULT IWizard::OK ( );
__declspec(implementation_key(407)) HRESULT IWizard::Apply ( );
__declspec(implementation_key(408)) HRESULT IWizard::SaveSettings ( );
__declspec(implementation_key(409)) HRESULT IWizard::LoadSettings ( );
__declspec(implementation_key(410)) HRESULT IWizard::ResetSettings ( );
__declspec(implementation_key(411)) HRESULT IWizard::Initialize ( );
__declspec(implementation_key(412)) VARIANT_BOOL INSCWizard::GetIsNSCOptimizingWizard ( );
__declspec(implementation_key(413)) VARIANT_BOOL INSCWizard::GetIsNSCBitmapWizard ( );
__declspec(implementation_key(414)) VARIANT_BOOL INSCWizard::GetIsClearDataSettingsUsed ( );
__declspec(implementation_key(415)) void INSCWizard::PutIsClearDataSettingsUsed ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(416)) VARIANT_BOOL INSCWizard::GetIsRaytraceSettingsUsed ( );
__declspec(implementation_key(417)) void INSCWizard::PutIsRaytraceSettingsUsed ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(418)) VARIANT_BOOL INSCWizard::GetIsSplitRaysUsed ( );
__declspec(implementation_key(419)) void INSCWizard::PutIsSplitRaysUsed ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(420)) VARIANT_BOOL INSCWizard::GetIsUsePolarizationUsed ( );
__declspec(implementation_key(421)) void INSCWizard::PutIsUsePolarizationUsed ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(422)) VARIANT_BOOL INSCWizard::GetIsScatterRaysUsed ( );
__declspec(implementation_key(423)) void INSCWizard::PutIsScatterRaysUsed ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(424)) VARIANT_BOOL INSCWizard::GetIsIgnoreErrorsUsed ( );
__declspec(implementation_key(425)) void INSCWizard::PutIsIgnoreErrorsUsed ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(426)) VARIANT_BOOL INSCWizard::GetIsUseLightningTraceUsed ( );
__declspec(implementation_key(427)) void INSCWizard::PutIsUseLightningTraceUsed ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(428)) VARIANT_BOOL INSCWizard::GetIsCriterionSettingsUsed ( );
__declspec(implementation_key(429)) void INSCWizard::PutIsCriterionSettingsUsed ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(430)) VARIANT_BOOL INSCWizard::GetIsMinimumFluxUsed ( );
__declspec(implementation_key(431)) void INSCWizard::PutIsMinimumFluxUsed ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(432)) VARIANT_BOOL INSCWizard::GetIsOverwriteUsed ( );
__declspec(implementation_key(433)) void INSCWizard::PutIsOverwriteUsed ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(434)) VARIANT_BOOL INSCWizard::GetIsTargetSettingsUsed ( );
__declspec(implementation_key(435)) void INSCWizard::PutIsTargetSettingsUsed ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(436)) VARIANT_BOOL INSCWizard::GetIsColorTargetsUsed ( );
__declspec(implementation_key(437)) void INSCWizard::PutIsColorTargetsUsed ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(438)) VARIANT_BOOL INSCWizard::GetIsResampleDetectorUsed ( );
__declspec(implementation_key(439)) void INSCWizard::PutIsResampleDetectorUsed ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(440)) long INSCWizard::GetClearDetector ( );
__declspec(implementation_key(441)) void INSCWizard::PutClearDetector ( long pRetVal );
__declspec(implementation_key(442)) long INSCWizard::GetCriterion ( );
__declspec(implementation_key(443)) void INSCWizard::PutCriterion ( long pRetVal );
__declspec(implementation_key(444)) long INSCWizard::GetUseSource ( );
__declspec(implementation_key(445)) void INSCWizard::PutUseSource ( long pRetVal );
__declspec(implementation_key(446)) long INSCWizard::GetUseDetector ( );
__declspec(implementation_key(447)) void INSCWizard::PutUseDetector ( long pRetVal );
__declspec(implementation_key(448)) long INSCWizard::GetBoundary ( );
__declspec(implementation_key(449)) void INSCWizard::PutBoundary ( long pRetVal );
__declspec(implementation_key(450)) long INSCWizard::GetStartAt ( );
__declspec(implementation_key(451)) void INSCWizard::PutStartAt ( long pRetVal );
__declspec(implementation_key(452)) long INSCWizard::GetConfiguration ( );
__declspec(implementation_key(453)) void INSCWizard::PutConfiguration ( long pRetVal );
__declspec(implementation_key(454)) long INSCWizard::GetBitmapFile ( );
__declspec(implementation_key(455)) void INSCWizard::PutBitmapFile ( long pRetVal );
__declspec(implementation_key(456)) long INSCWizard::GetRaySampling ( );
__declspec(implementation_key(457)) void INSCWizard::PutRaySampling ( long pRetVal );
__declspec(implementation_key(458)) long INSCWizard::GetEdgeSampling ( );
__declspec(implementation_key(459)) void INSCWizard::PutEdgeSampling ( long pRetVal );
__declspec(implementation_key(460)) double INSCWizard::GetTarget ( );
__declspec(implementation_key(461)) void INSCWizard::PutTarget ( double pRetVal );
__declspec(implementation_key(462)) double INSCWizard::GetMinimumFlux ( );
__declspec(implementation_key(463)) void INSCWizard::PutMinimumFlux ( double pRetVal );
__declspec(implementation_key(464)) double INSCWizard::GetOverallWeight ( );
__declspec(implementation_key(465)) void INSCWizard::PutOverallWeight ( double pRetVal );
__declspec(implementation_key(466)) double INSCWizard::GetTotalFlux ( );
__declspec(implementation_key(467)) void INSCWizard::PutTotalFlux ( double pRetVal );
__declspec(implementation_key(468)) long INSCWizard::GetNumberOfSources ( );
__declspec(implementation_key(469)) _bstr_t INSCWizard::GetSourceAt ( long idx );
__declspec(implementation_key(470)) long INSCWizard::GetNumberOfDetectors ( );
__declspec(implementation_key(471)) _bstr_t INSCWizard::GetDetectorAt ( long idx );
__declspec(implementation_key(472)) long INSCWizard::GetNumberOfCriterion ( );
__declspec(implementation_key(473)) _bstr_t INSCWizard::GetCriterionAt ( long idx );
__declspec(implementation_key(474)) long INSCWizard::GetNumberOfConfigurations ( );
__declspec(implementation_key(475)) _bstr_t INSCWizard::GetConfigurationAt ( long idx );
__declspec(implementation_key(476)) long INSCWizard::GetNumberOfRaySamplings ( );
__declspec(implementation_key(477)) _bstr_t INSCWizard::GetRaySamplingAt ( long idx );
__declspec(implementation_key(478)) long INSCWizard::GetNumberOfEdgeSamplings ( );
__declspec(implementation_key(479)) _bstr_t INSCWizard::GetEdgeSamplingAt ( long idx );
__declspec(implementation_key(480)) long INSCWizard::GetNumberOfBoundaries ( );
__declspec(implementation_key(481)) _bstr_t INSCWizard::GetBoundaryAt ( long idx );
__declspec(implementation_key(482)) INSCWizardPtr INSCOptimizationWizard::GetNSCSettings ( );
__declspec(implementation_key(483)) IWizardPtr INSCOptimizationWizard::GetCommonSettings ( );
__declspec(implementation_key(484)) _bstr_t IImageData::GetImageName ( );
__declspec(implementation_key(485)) long IImageData::GetWidth ( );
__declspec(implementation_key(486)) long IImageData::GetHeight ( );
__declspec(implementation_key(487)) long IImageData::GetBitsPerPixel ( );
__declspec(implementation_key(488)) long IImageData::GetChannels ( );
__declspec(implementation_key(489)) long IImageData::GetStride ( );
__declspec(implementation_key(490)) VARIANT_BOOL IImageData::GetIsRGB ( );
__declspec(implementation_key(491)) SAFEARRAY * IImageData::GetRawData ( );
__declspec(implementation_key(492)) HRESULT IImageData::GetRawDataSafe ( long totalSize, long Height, long Width, unsigned char * Data );
__declspec(implementation_key(493)) SAFEARRAY * IImageData::GetPixels ( );
__declspec(implementation_key(494)) HRESULT IImageData::GetPixelsSafe ( long totalSize, long Height, long Width, unsigned char * Data );
__declspec(implementation_key(495)) INSCWizardPtr INSCBitmapWizard::GetNSCSettings ( );
__declspec(implementation_key(496)) IWizardPtr INSCBitmapWizard::GetCommonSettings ( );
__declspec(implementation_key(497)) long INSCBitmapWizard::GetNumberOfBitmapFiles ( );
__declspec(implementation_key(498)) _bstr_t INSCBitmapWizard::GetBitmapFileAt ( long idx );
__declspec(implementation_key(499)) IImageDataPtr INSCBitmapWizard::GetPreviewImage ( );
__declspec(implementation_key(500)) IWizardPtr INSCRoadwayLightingWizard::GetCommonSettings ( );
__declspec(implementation_key(501)) VARIANT_BOOL INSCRoadwayLightingWizard::GetIsNSCRoadwayLightingWizard ( );
__declspec(implementation_key(502)) VARIANT_BOOL INSCRoadwayLightingWizard::GetIsSplitRaysUsed ( );
__declspec(implementation_key(503)) void INSCRoadwayLightingWizard::PutIsSplitRaysUsed ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(504)) VARIANT_BOOL INSCRoadwayLightingWizard::GetIsScatterRaysUsed ( );
__declspec(implementation_key(505)) void INSCRoadwayLightingWizard::PutIsScatterRaysUsed ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(506)) VARIANT_BOOL INSCRoadwayLightingWizard::GetIsUsePolarizationUsed ( );
__declspec(implementation_key(507)) void INSCRoadwayLightingWizard::PutIsUsePolarizationUsed ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(508)) VARIANT_BOOL INSCRoadwayLightingWizard::GetIsIgnoreErrorsUsed ( );
__declspec(implementation_key(509)) void INSCRoadwayLightingWizard::PutIsIgnoreErrorsUsed ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(510)) long INSCRoadwayLightingWizard::GetArrangement ( );
__declspec(implementation_key(511)) void INSCRoadwayLightingWizard::PutArrangement ( long pRetVal );
__declspec(implementation_key(512)) long INSCRoadwayLightingWizard::GetOrigin ( );
__declspec(implementation_key(513)) void INSCRoadwayLightingWizard::PutOrigin ( long pRetVal );
__declspec(implementation_key(514)) long INSCRoadwayLightingWizard::GetNumberOfLanes ( );
__declspec(implementation_key(515)) void INSCRoadwayLightingWizard::PutNumberOfLanes ( long pRetVal );
__declspec(implementation_key(516)) long INSCRoadwayLightingWizard::GetSurfaceClassification ( );
__declspec(implementation_key(517)) void INSCRoadwayLightingWizard::PutSurfaceClassification ( long pRetVal );
__declspec(implementation_key(518)) long INSCRoadwayLightingWizard::GetRoadClass ( );
__declspec(implementation_key(519)) void INSCRoadwayLightingWizard::PutRoadClass ( long pRetVal );
__declspec(implementation_key(520)) long INSCRoadwayLightingWizard::GetStartAt ( );
__declspec(implementation_key(521)) void INSCRoadwayLightingWizard::PutStartAt ( long pRetVal );
__declspec(implementation_key(522)) long INSCRoadwayLightingWizard::GetConfiguration ( );
__declspec(implementation_key(523)) void INSCRoadwayLightingWizard::PutConfiguration ( long pRetVal );
__declspec(implementation_key(524)) double INSCRoadwayLightingWizard::GetMountingHeight ( );
__declspec(implementation_key(525)) void INSCRoadwayLightingWizard::PutMountingHeight ( double pRetVal );
__declspec(implementation_key(526)) double INSCRoadwayLightingWizard::GetLongitudinalSpacing ( );
__declspec(implementation_key(527)) void INSCRoadwayLightingWizard::PutLongitudinalSpacing ( double pRetVal );
__declspec(implementation_key(528)) double INSCRoadwayLightingWizard::GetLateralOffset ( );
__declspec(implementation_key(529)) void INSCRoadwayLightingWizard::PutLateralOffset ( double pRetVal );
__declspec(implementation_key(530)) double INSCRoadwayLightingWizard::GetLaneWidth ( );
__declspec(implementation_key(531)) void INSCRoadwayLightingWizard::PutLaneWidth ( double pRetVal );
__declspec(implementation_key(532)) double INSCRoadwayLightingWizard::GetOverallWeight ( );
__declspec(implementation_key(533)) void INSCRoadwayLightingWizard::PutOverallWeight ( double pRetVal );
__declspec(implementation_key(534)) long INSCRoadwayLightingWizard::GetNumberOfOrigins ( );
__declspec(implementation_key(535)) _bstr_t INSCRoadwayLightingWizard::GetOriginAt ( long idx );
__declspec(implementation_key(536)) long INSCRoadwayLightingWizard::GetNumberOfConfigurations ( );
__declspec(implementation_key(537)) _bstr_t INSCRoadwayLightingWizard::GetConfigurationAt ( long idx );
__declspec(implementation_key(538)) long INSCRoadwayLightingWizard::GetNumberOfArrangements ( );
__declspec(implementation_key(539)) _bstr_t INSCRoadwayLightingWizard::GetArrangementAt ( long idx );
__declspec(implementation_key(540)) long INSCRoadwayLightingWizard::GetNumberOfClassifications ( );
__declspec(implementation_key(541)) _bstr_t INSCRoadwayLightingWizard::GetClassificationAt ( long idx );
__declspec(implementation_key(542)) long INSCRoadwayLightingWizard::GetNumberOfRoadClasses ( );
__declspec(implementation_key(543)) _bstr_t INSCRoadwayLightingWizard::GetRoadClassAt ( long idx );
__declspec(implementation_key(544)) IWizardPtr ISEQOptimizationWizard::GetCommonSettings ( );
__declspec(implementation_key(545)) VARIANT_BOOL ISEQOptimizationWizard::GetIsSEQOptimizationWizard ( );
__declspec(implementation_key(546)) VARIANT_BOOL ISEQOptimizationWizard::GetIsDeleteVignetteUsed ( );
__declspec(implementation_key(547)) void ISEQOptimizationWizard::PutIsDeleteVignetteUsed ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(548)) VARIANT_BOOL ISEQOptimizationWizard::GetIsGlassUsed ( );
__declspec(implementation_key(549)) void ISEQOptimizationWizard::PutIsGlassUsed ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(550)) VARIANT_BOOL ISEQOptimizationWizard::GetIsAirUsed ( );
__declspec(implementation_key(551)) void ISEQOptimizationWizard::PutIsAirUsed ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(552)) VARIANT_BOOL ISEQOptimizationWizard::GetIsAssumeAxialSymmetryUsed ( );
__declspec(implementation_key(553)) void ISEQOptimizationWizard::PutIsAssumeAxialSymmetryUsed ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(554)) VARIANT_BOOL ISEQOptimizationWizard::GetIsIgnoreLateralColorUsed ( );
__declspec(implementation_key(555)) void ISEQOptimizationWizard::PutIsIgnoreLateralColorUsed ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(556)) VARIANT_BOOL ISEQOptimizationWizard::GetIsAddFavoriteOperandsUsed ( );
__declspec(implementation_key(557)) void ISEQOptimizationWizard::PutIsAddFavoriteOperandsUsed ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(558)) VARIANT_BOOL ISEQOptimizationWizard::GetIsRelativeXWeightUsed ( );
__declspec(implementation_key(559)) void ISEQOptimizationWizard::PutIsRelativeXWeightUsed ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(560)) long ISEQOptimizationWizard::GetType ( );
__declspec(implementation_key(561)) void ISEQOptimizationWizard::PutType ( long pRetVal );
__declspec(implementation_key(562)) long ISEQOptimizationWizard::GetData ( );
__declspec(implementation_key(563)) void ISEQOptimizationWizard::PutData ( long pRetVal );
__declspec(implementation_key(564)) long ISEQOptimizationWizard::GetReference ( );
__declspec(implementation_key(565)) void ISEQOptimizationWizard::PutReference ( long pRetVal );
__declspec(implementation_key(566)) long ISEQOptimizationWizard::GetPupilIntegrationMethod ( );
__declspec(implementation_key(567)) void ISEQOptimizationWizard::PutPupilIntegrationMethod ( long pRetVal );
__declspec(implementation_key(568)) long ISEQOptimizationWizard::GetRing ( );
__declspec(implementation_key(569)) void ISEQOptimizationWizard::PutRing ( long pRetVal );
__declspec(implementation_key(570)) long ISEQOptimizationWizard::GetArm ( );
__declspec(implementation_key(571)) void ISEQOptimizationWizard::PutArm ( long pRetVal );
__declspec(implementation_key(572)) long ISEQOptimizationWizard::GetGrid ( );
__declspec(implementation_key(573)) void ISEQOptimizationWizard::PutGrid ( long pRetVal );
__declspec(implementation_key(574)) long ISEQOptimizationWizard::GetConfiguration ( );
__declspec(implementation_key(575)) void ISEQOptimizationWizard::PutConfiguration ( long pRetVal );
__declspec(implementation_key(576)) long ISEQOptimizationWizard::GetStartAt ( );
__declspec(implementation_key(577)) void ISEQOptimizationWizard::PutStartAt ( long pRetVal );
__declspec(implementation_key(578)) double ISEQOptimizationWizard::GetObscuration ( );
__declspec(implementation_key(579)) void ISEQOptimizationWizard::PutObscuration ( double pRetVal );
__declspec(implementation_key(580)) double ISEQOptimizationWizard::GetGlassMin ( );
__declspec(implementation_key(581)) void ISEQOptimizationWizard::PutGlassMin ( double pRetVal );
__declspec(implementation_key(582)) double ISEQOptimizationWizard::GetGlassMax ( );
__declspec(implementation_key(583)) void ISEQOptimizationWizard::PutGlassMax ( double pRetVal );
__declspec(implementation_key(584)) double ISEQOptimizationWizard::GetGlassEdge ( );
__declspec(implementation_key(585)) void ISEQOptimizationWizard::PutGlassEdge ( double pRetVal );
__declspec(implementation_key(586)) double ISEQOptimizationWizard::GetAirMin ( );
__declspec(implementation_key(587)) void ISEQOptimizationWizard::PutAirMin ( double pRetVal );
__declspec(implementation_key(588)) double ISEQOptimizationWizard::GetAirMax ( );
__declspec(implementation_key(589)) void ISEQOptimizationWizard::PutAirMax ( double pRetVal );
__declspec(implementation_key(590)) double ISEQOptimizationWizard::GetAirEdge ( );
__declspec(implementation_key(591)) void ISEQOptimizationWizard::PutAirEdge ( double pRetVal );
__declspec(implementation_key(592)) double ISEQOptimizationWizard::GetRelativeXWeight ( );
__declspec(implementation_key(593)) void ISEQOptimizationWizard::PutRelativeXWeight ( double pRetVal );
__declspec(implementation_key(594)) double ISEQOptimizationWizard::GetOverallWeight ( );
__declspec(implementation_key(595)) void ISEQOptimizationWizard::PutOverallWeight ( double pRetVal );
__declspec(implementation_key(596)) long ISEQOptimizationWizard::GetNumberOfTypes ( );
__declspec(implementation_key(597)) _bstr_t ISEQOptimizationWizard::GetTypeAt ( long idx );
__declspec(implementation_key(598)) long ISEQOptimizationWizard::GetNumberOfDataTypes ( );
__declspec(implementation_key(599)) _bstr_t ISEQOptimizationWizard::GetDataTypeAt ( long idx );
__declspec(implementation_key(600)) long ISEQOptimizationWizard::GetNumberOfReferences ( );
__declspec(implementation_key(601)) _bstr_t ISEQOptimizationWizard::GetReferenceAt ( long idx );
__declspec(implementation_key(602)) long ISEQOptimizationWizard::GetNumberOfPupilIntegrationMethods ( );
__declspec(implementation_key(603)) _bstr_t ISEQOptimizationWizard::GetPupilIntegrationMethodAt ( long idx );
__declspec(implementation_key(604)) long ISEQOptimizationWizard::GetNumberOfRings ( );
__declspec(implementation_key(605)) _bstr_t ISEQOptimizationWizard::GetRingAt ( long idx );
__declspec(implementation_key(606)) long ISEQOptimizationWizard::GetNumberOfArms ( );
__declspec(implementation_key(607)) _bstr_t ISEQOptimizationWizard::GetArmAt ( long idx );
__declspec(implementation_key(608)) long ISEQOptimizationWizard::GetNumberOfGrids ( );
__declspec(implementation_key(609)) _bstr_t ISEQOptimizationWizard::GetGridAt ( long idx );
__declspec(implementation_key(610)) long ISEQOptimizationWizard::GetNumberOfConfigurations ( );
__declspec(implementation_key(611)) _bstr_t ISEQOptimizationWizard::GetConfigurationAt ( long idx );
__declspec(implementation_key(612)) IWizardPtr IToleranceWizard::GetCommonSettings ( );
__declspec(implementation_key(613)) VARIANT_BOOL IToleranceWizard::GetIsSEQToleranceWizard ( );
__declspec(implementation_key(614)) VARIANT_BOOL IToleranceWizard::GetIsSurfaceRadiusUsed ( );
__declspec(implementation_key(615)) void IToleranceWizard::PutIsSurfaceRadiusUsed ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(616)) VARIANT_BOOL IToleranceWizard::GetIsSurfaceThicknessUsed ( );
__declspec(implementation_key(617)) void IToleranceWizard::PutIsSurfaceThicknessUsed ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(618)) VARIANT_BOOL IToleranceWizard::GetIsSurfaceDecenterXUsed ( );
__declspec(implementation_key(619)) void IToleranceWizard::PutIsSurfaceDecenterXUsed ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(620)) VARIANT_BOOL IToleranceWizard::GetIsSurfaceDecenterYUsed ( );
__declspec(implementation_key(621)) void IToleranceWizard::PutIsSurfaceDecenterYUsed ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(622)) VARIANT_BOOL IToleranceWizard::GetIsSurfaceTiltXUsed ( );
__declspec(implementation_key(623)) void IToleranceWizard::PutIsSurfaceTiltXUsed ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(624)) VARIANT_BOOL IToleranceWizard::GetIsSurfaceTiltYUsed ( );
__declspec(implementation_key(625)) void IToleranceWizard::PutIsSurfaceTiltYUsed ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(626)) VARIANT_BOOL IToleranceWizard::GetIsSurfaceSandAIrregularityUsed ( );
__declspec(implementation_key(627)) void IToleranceWizard::PutIsSurfaceSandAIrregularityUsed ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(628)) VARIANT_BOOL IToleranceWizard::GetIsSurfaceZernikeIrregularityUsed ( );
__declspec(implementation_key(629)) void IToleranceWizard::PutIsSurfaceZernikeIrregularityUsed ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(630)) VARIANT_BOOL IToleranceWizard::GetIsElementDecenterXUsed ( );
__declspec(implementation_key(631)) void IToleranceWizard::PutIsElementDecenterXUsed ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(632)) VARIANT_BOOL IToleranceWizard::GetIsElementDecenterYUsed ( );
__declspec(implementation_key(633)) void IToleranceWizard::PutIsElementDecenterYUsed ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(634)) VARIANT_BOOL IToleranceWizard::GetIsElementTiltXUsed ( );
__declspec(implementation_key(635)) void IToleranceWizard::PutIsElementTiltXUsed ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(636)) VARIANT_BOOL IToleranceWizard::GetIsElementTiltYUsed ( );
__declspec(implementation_key(637)) void IToleranceWizard::PutIsElementTiltYUsed ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(638)) VARIANT_BOOL IToleranceWizard::GetIsIndexUsed ( );
__declspec(implementation_key(639)) void IToleranceWizard::PutIsIndexUsed ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(640)) VARIANT_BOOL IToleranceWizard::GetIsIndexAbbePercentageUsed ( );
__declspec(implementation_key(641)) void IToleranceWizard::PutIsIndexAbbePercentageUsed ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(642)) VARIANT_BOOL IToleranceWizard::GetIsFocusCompensationUsed ( );
__declspec(implementation_key(643)) void IToleranceWizard::PutIsFocusCompensationUsed ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(644)) enum DefaultAndFringes IToleranceWizard::GetSurfaceRadiusUnitType ( );
__declspec(implementation_key(645)) void IToleranceWizard::PutSurfaceRadiusUnitType ( enum DefaultAndFringes pRetVal );
__declspec(implementation_key(646)) enum DefaultAndDegrees IToleranceWizard::GetSurfaceTiltXUnitType ( );
__declspec(implementation_key(647)) void IToleranceWizard::PutSurfaceTiltXUnitType ( enum DefaultAndDegrees pRetVal );
__declspec(implementation_key(648)) enum DefaultAndDegrees IToleranceWizard::GetSurfaceTiltYUnitType ( );
__declspec(implementation_key(649)) void IToleranceWizard::PutSurfaceTiltYUnitType ( enum DefaultAndDegrees pRetVal );
__declspec(implementation_key(650)) long IToleranceWizard::GetStartAt ( );
__declspec(implementation_key(651)) void IToleranceWizard::PutStartAt ( long pRetVal );
__declspec(implementation_key(652)) long IToleranceWizard::GetStartAtSurface ( );
__declspec(implementation_key(653)) void IToleranceWizard::PutStartAtSurface ( long pRetVal );
__declspec(implementation_key(654)) long IToleranceWizard::GetStopAtSurface ( );
__declspec(implementation_key(655)) void IToleranceWizard::PutStopAtSurface ( long pRetVal );
__declspec(implementation_key(656)) double IToleranceWizard::GetSurfaceRadius ( );
__declspec(implementation_key(657)) void IToleranceWizard::PutSurfaceRadius ( double pRetVal );
__declspec(implementation_key(658)) double IToleranceWizard::GetSurfaceRadiusFringes ( );
__declspec(implementation_key(659)) void IToleranceWizard::PutSurfaceRadiusFringes ( double pRetVal );
__declspec(implementation_key(660)) double IToleranceWizard::GetSurfaceThickness ( );
__declspec(implementation_key(661)) void IToleranceWizard::PutSurfaceThickness ( double pRetVal );
__declspec(implementation_key(662)) double IToleranceWizard::GetSurfaceDecenterX ( );
__declspec(implementation_key(663)) void IToleranceWizard::PutSurfaceDecenterX ( double pRetVal );
__declspec(implementation_key(664)) double IToleranceWizard::GetSurfaceDecenterY ( );
__declspec(implementation_key(665)) void IToleranceWizard::PutSurfaceDecenterY ( double pRetVal );
__declspec(implementation_key(666)) double IToleranceWizard::GetSurfaceTiltX ( );
__declspec(implementation_key(667)) void IToleranceWizard::PutSurfaceTiltX ( double pRetVal );
__declspec(implementation_key(668)) double IToleranceWizard::GetSurfaceTiltXDegrees ( );
__declspec(implementation_key(669)) void IToleranceWizard::PutSurfaceTiltXDegrees ( double pRetVal );
__declspec(implementation_key(670)) double IToleranceWizard::GetSurfaceTiltY ( );
__declspec(implementation_key(671)) void IToleranceWizard::PutSurfaceTiltY ( double pRetVal );
__declspec(implementation_key(672)) double IToleranceWizard::GetSurfaceTiltYDegrees ( );
__declspec(implementation_key(673)) void IToleranceWizard::PutSurfaceTiltYDegrees ( double pRetVal );
__declspec(implementation_key(674)) double IToleranceWizard::GetSurfaceSandAIrregularityFringes ( );
__declspec(implementation_key(675)) void IToleranceWizard::PutSurfaceSandAIrregularityFringes ( double pRetVal );
__declspec(implementation_key(676)) double IToleranceWizard::GetSurfaceZernikeIrregularityFringes ( );
__declspec(implementation_key(677)) void IToleranceWizard::PutSurfaceZernikeIrregularityFringes ( double pRetVal );
__declspec(implementation_key(678)) double IToleranceWizard::GetElementDecenterX ( );
__declspec(implementation_key(679)) void IToleranceWizard::PutElementDecenterX ( double pRetVal );
__declspec(implementation_key(680)) double IToleranceWizard::GetElementDecenterY ( );
__declspec(implementation_key(681)) void IToleranceWizard::PutElementDecenterY ( double pRetVal );
__declspec(implementation_key(682)) double IToleranceWizard::GetElementTiltXDegrees ( );
__declspec(implementation_key(683)) void IToleranceWizard::PutElementTiltXDegrees ( double pRetVal );
__declspec(implementation_key(684)) double IToleranceWizard::GetElementTiltYDegrees ( );
__declspec(implementation_key(685)) void IToleranceWizard::PutElementTiltYDegrees ( double pRetVal );
__declspec(implementation_key(686)) double IToleranceWizard::Getindex ( );
__declspec(implementation_key(687)) void IToleranceWizard::Putindex ( double pRetVal );
__declspec(implementation_key(688)) double IToleranceWizard::GetIndexAbbePercentage ( );
__declspec(implementation_key(689)) void IToleranceWizard::PutIndexAbbePercentage ( double pRetVal );
__declspec(implementation_key(690)) double IToleranceWizard::GetTestWavelength ( );
__declspec(implementation_key(691)) void IToleranceWizard::PutTestWavelength ( double pRetVal );
__declspec(implementation_key(692)) IToleranceWizardPtr INSCToleranceWizard::GetToleranceSettings ( );
__declspec(implementation_key(693)) IToleranceWizardPtr ISEQToleranceWizard::GetToleranceSettings ( );
__declspec(implementation_key(694)) long ISurfaceSelection::GetFirstAllowedSurface ( );
__declspec(implementation_key(695)) long ISurfaceSelection::GetLastAllowedSurface ( );
__declspec(implementation_key(696)) long ISurfaceSelection::GetImageSurface ( );
__declspec(implementation_key(697)) long ISurfaceSelection::GetStopSurface ( );
__declspec(implementation_key(698)) long ISurfaceSelection::GetSelectedSurface ( );
__declspec(implementation_key(699)) VARIANT_BOOL ISurfaceSelection::SetSelectedSurface ( long Surface );
__declspec(implementation_key(700)) VARIANT_BOOL ISurfaceSelection::UseObjectSurface ( );
__declspec(implementation_key(701)) VARIANT_BOOL ISurfaceSelection::UseStopSurface ( );
__declspec(implementation_key(702)) VARIANT_BOOL ISurfaceSelection::UseImageSurface ( );
__declspec(implementation_key(703)) enum ZemaxApertureType ISDApertureData::GetApertureType ( );
__declspec(implementation_key(704)) void ISDApertureData::PutApertureType ( enum ZemaxApertureType pRetVal );
__declspec(implementation_key(705)) double ISDApertureData::GetApertureValue ( );
__declspec(implementation_key(706)) void ISDApertureData::PutApertureValue ( double pRetVal );
__declspec(implementation_key(707)) enum ZemaxApodizationType ISDApertureData::GetApodizationType ( );
__declspec(implementation_key(708)) void ISDApertureData::PutApodizationType ( enum ZemaxApodizationType pRetVal );
__declspec(implementation_key(709)) double ISDApertureData::GetApodizationFactor ( );
__declspec(implementation_key(710)) void ISDApertureData::PutApodizationFactor ( double pRetVal );
__declspec(implementation_key(711)) VARIANT_BOOL ISDApertureData::GetApodizationFactorIsUsed ( );
__declspec(implementation_key(712)) double ISDApertureData::GetSemiDiameterMargin ( );
__declspec(implementation_key(713)) void ISDApertureData::PutSemiDiameterMargin ( double pRetVal );
__declspec(implementation_key(714)) double ISDApertureData::GetSemiDiameterMarginPct ( );
__declspec(implementation_key(715)) void ISDApertureData::PutSemiDiameterMarginPct ( double pRetVal );
__declspec(implementation_key(716)) ISurfaceSelectionPtr ISDApertureData::GetGCRS ( );
__declspec(implementation_key(717)) VARIANT_BOOL ISDApertureData::GetTelecentricObjectSpace ( );
__declspec(implementation_key(718)) void ISDApertureData::PutTelecentricObjectSpace ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(719)) VARIANT_BOOL ISDApertureData::GetAFocalImageSpace ( );
__declspec(implementation_key(720)) void ISDApertureData::PutAFocalImageSpace ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(721)) VARIANT_BOOL ISDApertureData::GetIterateSolvesWhenUpdating ( );
__declspec(implementation_key(722)) void ISDApertureData::PutIterateSolvesWhenUpdating ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(723)) VARIANT_BOOL ISDApertureData::GetFastSemiDiameters ( );
__declspec(implementation_key(724)) void ISDApertureData::PutFastSemiDiameters ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(725)) VARIANT_BOOL ISDApertureData::GetCheckGRINApertures ( );
__declspec(implementation_key(726)) void ISDApertureData::PutCheckGRINApertures ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(727)) VARIANT_BOOL ISDEnvironmentData::GetAdjustIndexToEnvironment ( );
__declspec(implementation_key(728)) void ISDEnvironmentData::PutAdjustIndexToEnvironment ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(729)) double ISDEnvironmentData::GetTemperature ( );
__declspec(implementation_key(730)) void ISDEnvironmentData::PutTemperature ( double pRetVal );
__declspec(implementation_key(731)) double ISDEnvironmentData::GetPressure ( );
__declspec(implementation_key(732)) void ISDEnvironmentData::PutPressure ( double pRetVal );
__declspec(implementation_key(733)) VARIANT_BOOL ISDPolarizationData::GetConvertThinFilmPhaseToRayEquivalent ( );
__declspec(implementation_key(734)) void ISDPolarizationData::PutConvertThinFilmPhaseToRayEquivalent ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(735)) VARIANT_BOOL ISDPolarizationData::GetUnpolarized ( );
__declspec(implementation_key(736)) void ISDPolarizationData::PutUnpolarized ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(737)) double ISDPolarizationData::Getjx ( );
__declspec(implementation_key(738)) void ISDPolarizationData::Putjx ( double pRetVal );
__declspec(implementation_key(739)) double ISDPolarizationData::Getjy ( );
__declspec(implementation_key(740)) void ISDPolarizationData::Putjy ( double pRetVal );
__declspec(implementation_key(741)) double ISDPolarizationData::GetXPhase ( );
__declspec(implementation_key(742)) void ISDPolarizationData::PutXPhase ( double pRetVal );
__declspec(implementation_key(743)) double ISDPolarizationData::GetYPhase ( );
__declspec(implementation_key(744)) void ISDPolarizationData::PutYPhase ( double pRetVal );
__declspec(implementation_key(745)) enum PolarizationMethod ISDPolarizationData::GetMethod ( );
__declspec(implementation_key(746)) void ISDPolarizationData::PutMethod ( enum PolarizationMethod pRetVal );
__declspec(implementation_key(747)) enum ReferenceOPDSetting ISDAdvancedData::GetReferenceOPD ( );
__declspec(implementation_key(748)) void ISDAdvancedData::PutReferenceOPD ( enum ReferenceOPDSetting pRetVal );
__declspec(implementation_key(749)) enum ParaxialRaysSetting ISDAdvancedData::GetParaxialRays ( );
__declspec(implementation_key(750)) void ISDAdvancedData::PutParaxialRays ( enum ParaxialRaysSetting pRetVal );
__declspec(implementation_key(751)) enum FNumberComputationType ISDAdvancedData::GetFNumMethod ( );
__declspec(implementation_key(752)) void ISDAdvancedData::PutFNumMethod ( enum FNumberComputationType pRetVal );
__declspec(implementation_key(753)) VARIANT_BOOL ISDAdvancedData::GetDontPrintCoordinateBreakData ( );
__declspec(implementation_key(754)) void ISDAdvancedData::PutDontPrintCoordinateBreakData ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(755)) VARIANT_BOOL ISDAdvancedData::GetTurnOffThreading ( );
__declspec(implementation_key(756)) void ISDAdvancedData::PutTurnOffThreading ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(757)) VARIANT_BOOL ISDAdvancedData::GetOPDModulo2PI ( );
__declspec(implementation_key(758)) void ISDAdvancedData::PutOPDModulo2PI ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(759)) VARIANT_BOOL ISDAdvancedData::GetIncludeCalculatedDataInSessionFile ( );
__declspec(implementation_key(760)) void ISDAdvancedData::PutIncludeCalculatedDataInSessionFile ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(761)) enum HuygensIntegralSettings ISDAdvancedData::GetHuygensIntegralMethod ( );
__declspec(implementation_key(762)) void ISDAdvancedData::PutHuygensIntegralMethod ( enum HuygensIntegralSettings pRetVal );
__declspec(implementation_key(763)) enum RayAimingMethod ISDRayAimingData::GetRayAiming ( );
__declspec(implementation_key(764)) void ISDRayAimingData::PutRayAiming ( enum RayAimingMethod pRetVal );
__declspec(implementation_key(765)) VARIANT_BOOL ISDRayAimingData::GetUseRayAimingCache ( );
__declspec(implementation_key(766)) void ISDRayAimingData::PutUseRayAimingCache ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(767)) VARIANT_BOOL ISDRayAimingData::GetUseRobustRayAiming ( );
__declspec(implementation_key(768)) void ISDRayAimingData::PutUseRobustRayAiming ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(769)) VARIANT_BOOL ISDRayAimingData::GetScalePupilShiftFactorsByField ( );
__declspec(implementation_key(770)) void ISDRayAimingData::PutScalePupilShiftFactorsByField ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(771)) VARIANT_BOOL ISDRayAimingData::GetAutomaticallyCalculatePupilShiftsIsChecked ( );
__declspec(implementation_key(772)) void ISDRayAimingData::PutAutomaticallyCalculatePupilShiftsIsChecked ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(773)) double ISDRayAimingData::GetPupilShiftX ( );
__declspec(implementation_key(774)) void ISDRayAimingData::PutPupilShiftX ( double pRetVal );
__declspec(implementation_key(775)) double ISDRayAimingData::GetPupilShiftY ( );
__declspec(implementation_key(776)) void ISDRayAimingData::PutPupilShiftY ( double pRetVal );
__declspec(implementation_key(777)) double ISDRayAimingData::GetPupilShiftZ ( );
__declspec(implementation_key(778)) void ISDRayAimingData::PutPupilShiftZ ( double pRetVal );
__declspec(implementation_key(779)) double ISDRayAimingData::GetPupilCompressX ( );
__declspec(implementation_key(780)) void ISDRayAimingData::PutPupilCompressX ( double pRetVal );
__declspec(implementation_key(781)) double ISDRayAimingData::GetPupilCompressY ( );
__declspec(implementation_key(782)) void ISDRayAimingData::PutPupilCompressY ( double pRetVal );
__declspec(implementation_key(783)) SAFEARRAY * ISDMaterialCatalogData::GetCatalogsInUse ( );
__declspec(implementation_key(784)) SAFEARRAY * ISDMaterialCatalogData::GetAvailableCatalogs ( );
__declspec(implementation_key(785)) SAFEARRAY * ISDMaterialCatalogData::GetMaterialsInCatalog ( _bstr_t catalog );
__declspec(implementation_key(786)) VARIANT_BOOL ISDMaterialCatalogData::IsCatalogInUse ( _bstr_t catalog );
__declspec(implementation_key(787)) VARIANT_BOOL ISDMaterialCatalogData::RemoveCatalog ( _bstr_t catalog );
__declspec(implementation_key(788)) VARIANT_BOOL ISDMaterialCatalogData::AddCatalog ( _bstr_t catalog );
__declspec(implementation_key(789)) _bstr_t ISDTitleNotes::GetTitle ( );
__declspec(implementation_key(790)) void ISDTitleNotes::PutTitle ( _bstr_t pRetVal );
__declspec(implementation_key(791)) _bstr_t ISDTitleNotes::GetNotes ( );
__declspec(implementation_key(792)) void ISDTitleNotes::PutNotes ( _bstr_t pRetVal );
__declspec(implementation_key(793)) SAFEARRAY * ISDFiles::GetCoatingFiles ( );
__declspec(implementation_key(794)) _bstr_t ISDFiles::GetCoatingFile ( );
__declspec(implementation_key(795)) void ISDFiles::PutCoatingFile ( _bstr_t pRetVal );
__declspec(implementation_key(796)) SAFEARRAY * ISDFiles::GetScatterProfiles ( );
__declspec(implementation_key(797)) _bstr_t ISDFiles::GetScatterProfile ( );
__declspec(implementation_key(798)) void ISDFiles::PutScatterProfile ( _bstr_t pRetVal );
__declspec(implementation_key(799)) SAFEARRAY * ISDFiles::GetABgDataFiles ( );
__declspec(implementation_key(800)) _bstr_t ISDFiles::GetABgDataFile ( );
__declspec(implementation_key(801)) void ISDFiles::PutABgDataFile ( _bstr_t pRetVal );
__declspec(implementation_key(802)) SAFEARRAY * ISDFiles::GetGradiumProfiles ( );
__declspec(implementation_key(803)) _bstr_t ISDFiles::GetGradiumProfile ( );
__declspec(implementation_key(804)) void ISDFiles::PutGradiumProfile ( _bstr_t pRetVal );
__declspec(implementation_key(805)) HRESULT ISDFiles::ReloadFiles ( );
__declspec(implementation_key(806)) enum ZemaxSystemUnits ISDUnitsData::GetLensUnits ( );
__declspec(implementation_key(807)) void ISDUnitsData::PutLensUnits ( enum ZemaxSystemUnits pRetVal );
__declspec(implementation_key(808)) enum ZemaxUnitPrefix ISDUnitsData::GetSourceUnitPrefix ( );
__declspec(implementation_key(809)) void ISDUnitsData::PutSourceUnitPrefix ( enum ZemaxUnitPrefix pRetVal );
__declspec(implementation_key(810)) enum ZemaxSourceUnits ISDUnitsData::GetSourceUnits ( );
__declspec(implementation_key(811)) void ISDUnitsData::PutSourceUnits ( enum ZemaxSourceUnits pRetVal );
__declspec(implementation_key(812)) enum ZemaxUnitPrefix ISDUnitsData::GetAnalysisUnitPrefix ( );
__declspec(implementation_key(813)) void ISDUnitsData::PutAnalysisUnitPrefix ( enum ZemaxUnitPrefix pRetVal );
__declspec(implementation_key(814)) enum ZemaxAnalysisUnits ISDUnitsData::GetAnalysisUnits ( );
__declspec(implementation_key(815)) void ISDUnitsData::PutAnalysisUnits ( enum ZemaxAnalysisUnits pRetVal );
__declspec(implementation_key(816)) enum ZemaxAfocalModeUnits ISDUnitsData::GetAfocalModeUnits ( );
__declspec(implementation_key(817)) void ISDUnitsData::PutAfocalModeUnits ( enum ZemaxAfocalModeUnits pRetVal );
__declspec(implementation_key(818)) enum ZemaxMTFUnits ISDUnitsData::GetMTFUnits ( );
__declspec(implementation_key(819)) void ISDUnitsData::PutMTFUnits ( enum ZemaxMTFUnits pRetVal );
__declspec(implementation_key(820)) long IWavelength::GetWavelengthNumber ( );
__declspec(implementation_key(821)) VARIANT_BOOL IWavelength::GetIsActive ( );
__declspec(implementation_key(822)) VARIANT_BOOL IWavelength::GetIsPrimary ( );
__declspec(implementation_key(823)) double IWavelength::GetWavelength ( );
__declspec(implementation_key(824)) void IWavelength::PutWavelength ( double pRetVal );
__declspec(implementation_key(825)) double IWavelength::GetWeight ( );
__declspec(implementation_key(826)) void IWavelength::PutWeight ( double pRetVal );
__declspec(implementation_key(827)) HRESULT IWavelength::MakePrimary ( );
__declspec(implementation_key(828)) long IWavelengths::GetNumberOfWavelengths ( );
__declspec(implementation_key(829)) IWavelengthPtr IWavelengths::GetWavelength ( long position );
__declspec(implementation_key(830)) IWavelengthPtr IWavelengths::AddWavelength ( double Wavelength, double Weight );
__declspec(implementation_key(831)) VARIANT_BOOL IWavelengths::RemoveWavelength ( long position );
__declspec(implementation_key(832)) VARIANT_BOOL IWavelengths::SelectWavelengthPreset ( enum WavelengthPreset preset );
__declspec(implementation_key(833)) VARIANT_BOOL IWavelengths::GaussianQuadrature ( double minWave, double maxWave, enum QuadratureSteps numSteps );
__declspec(implementation_key(834)) VARIANT_BOOL IField::GetIsActive ( );
__declspec(implementation_key(835)) long IField::GetFieldNumber ( );
__declspec(implementation_key(836)) double IField::GetX ( );
__declspec(implementation_key(837)) void IField::PutX ( double pRetVal );
__declspec(implementation_key(838)) double IField::GetY ( );
__declspec(implementation_key(839)) void IField::PutY ( double pRetVal );
__declspec(implementation_key(840)) double IField::GetWeight ( );
__declspec(implementation_key(841)) void IField::PutWeight ( double pRetVal );
__declspec(implementation_key(842)) double IField::GetVDX ( );
__declspec(implementation_key(843)) void IField::PutVDX ( double pRetVal );
__declspec(implementation_key(844)) double IField::GetVDY ( );
__declspec(implementation_key(845)) void IField::PutVDY ( double pRetVal );
__declspec(implementation_key(846)) double IField::GetVCX ( );
__declspec(implementation_key(847)) void IField::PutVCX ( double pRetVal );
__declspec(implementation_key(848)) double IField::GetVCY ( );
__declspec(implementation_key(849)) void IField::PutVCY ( double pRetVal );
__declspec(implementation_key(850)) double IField::GetVAN ( );
__declspec(implementation_key(851)) void IField::PutVAN ( double pRetVal );
__declspec(implementation_key(852)) long IFields::GetNumberOfFields ( );
__declspec(implementation_key(853)) IFieldPtr IFields::GetField ( long position );
__declspec(implementation_key(854)) IFieldPtr IFields::AddField ( double X, double Y, double Weight );
__declspec(implementation_key(855)) VARIANT_BOOL IFields::RemoveField ( long position );
__declspec(implementation_key(856)) HRESULT IFields::SetVignetting ( );
__declspec(implementation_key(857)) HRESULT IFields::ClearVignetting ( );
__declspec(implementation_key(858)) enum FieldType IFields::GetFieldType ( );
__declspec(implementation_key(859)) HRESULT IFields::SetFieldType ( enum FieldType Type );
__declspec(implementation_key(860)) enum FieldNormalizationType IFields::GetNormalization ( );
__declspec(implementation_key(861)) void IFields::PutNormalization ( enum FieldNormalizationType pRetVal );
__declspec(implementation_key(862)) VARIANT_BOOL IFields::MakeEqualAreaFields ( long NumberOfFields, double maximumField );
__declspec(implementation_key(863)) long ISDNonSeqData::GetMaximumIntersectionsPerRay ( );
__declspec(implementation_key(864)) void ISDNonSeqData::PutMaximumIntersectionsPerRay ( long pRetVal );
__declspec(implementation_key(865)) long ISDNonSeqData::GetMaximumSegmentsPerRay ( );
__declspec(implementation_key(866)) void ISDNonSeqData::PutMaximumSegmentsPerRay ( long pRetVal );
__declspec(implementation_key(867)) long ISDNonSeqData::GetMaximumNestedTouchingObjects ( );
__declspec(implementation_key(868)) void ISDNonSeqData::PutMaximumNestedTouchingObjects ( long pRetVal );
__declspec(implementation_key(869)) long ISDNonSeqData::GetMaximumSourceFileRaysInMemory ( );
__declspec(implementation_key(870)) void ISDNonSeqData::PutMaximumSourceFileRaysInMemory ( long pRetVal );
__declspec(implementation_key(871)) double ISDNonSeqData::GetMinimumRelativeRayIntensity ( );
__declspec(implementation_key(872)) void ISDNonSeqData::PutMinimumRelativeRayIntensity ( double pRetVal );
__declspec(implementation_key(873)) double ISDNonSeqData::GetMinimumAbsoluteRayIntensity ( );
__declspec(implementation_key(874)) void ISDNonSeqData::PutMinimumAbsoluteRayIntensity ( double pRetVal );
__declspec(implementation_key(875)) double ISDNonSeqData::GetGlueDistanceInLensUnits ( );
__declspec(implementation_key(876)) void ISDNonSeqData::PutGlueDistanceInLensUnits ( double pRetVal );
__declspec(implementation_key(877)) double ISDNonSeqData::GetMissedRayDrawDistanceInLensUnits ( );
__declspec(implementation_key(878)) void ISDNonSeqData::PutMissedRayDrawDistanceInLensUnits ( double pRetVal );
__declspec(implementation_key(879)) VARIANT_BOOL ISDNonSeqData::GetSimpleRaySplitting ( );
__declspec(implementation_key(880)) void ISDNonSeqData::PutSimpleRaySplitting ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(881)) VARIANT_BOOL ISDNonSeqData::GetRetraceSourceRaysUponFileOpen ( );
__declspec(implementation_key(882)) void ISDNonSeqData::PutRetraceSourceRaysUponFileOpen ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(883)) _bstr_t ISDNamedFilters::GetNamedFilters ( );
__declspec(implementation_key(884)) void ISDNamedFilters::PutNamedFilters ( _bstr_t pRetVal );
__declspec(implementation_key(885)) ISDApertureDataPtr ISystemData::GetAperture ( );
__declspec(implementation_key(886)) IWavelengthsPtr ISystemData::GetWavelengths ( );
__declspec(implementation_key(887)) IFieldsPtr ISystemData::GetFields ( );
__declspec(implementation_key(888)) ISDEnvironmentDataPtr ISystemData::GetEnvironment ( );
__declspec(implementation_key(889)) ISDPolarizationDataPtr ISystemData::GetPolarization ( );
__declspec(implementation_key(890)) ISDAdvancedDataPtr ISystemData::GetAdvanced ( );
__declspec(implementation_key(891)) ISDRayAimingDataPtr ISystemData::GetRayAiming ( );
__declspec(implementation_key(892)) ISDMaterialCatalogDataPtr ISystemData::GetMaterialCatalogs ( );
__declspec(implementation_key(893)) ISDTitleNotesPtr ISystemData::GetTitleNotes ( );
__declspec(implementation_key(894)) ISDFilesPtr ISystemData::GetFiles ( );
__declspec(implementation_key(895)) ISDUnitsDataPtr ISystemData::GetUnits ( );
__declspec(implementation_key(896)) ISDNonSeqDataPtr ISystemData::GetNonSequentialData ( );
__declspec(implementation_key(897)) ISDNamedFiltersPtr ISystemData::GetNamedFiltersData ( );
__declspec(implementation_key(898)) _bstr_t ISolveZPLMacro::GetMacro ( );
__declspec(implementation_key(899)) void ISolveZPLMacro::PutMacro ( _bstr_t pRetVal );
__declspec(implementation_key(900)) SAFEARRAY * ISolveZPLMacro::GetAvailableMacros ( );
__declspec(implementation_key(901)) double ISolveMarginalRayAngle::GetAngle ( );
__declspec(implementation_key(902)) void ISolveMarginalRayAngle::PutAngle ( double pRetVal );
__declspec(implementation_key(903)) double ISolveMarginalRayHeight::GetHeight ( );
__declspec(implementation_key(904)) void ISolveMarginalRayHeight::PutHeight ( double pRetVal );
__declspec(implementation_key(905)) double ISolveMarginalRayHeight::GetPupilZone ( );
__declspec(implementation_key(906)) void ISolveMarginalRayHeight::PutPupilZone ( double pRetVal );
__declspec(implementation_key(907)) double ISolveChiefRayAngle::GetAngle ( );
__declspec(implementation_key(908)) void ISolveChiefRayAngle::PutAngle ( double pRetVal );
__declspec(implementation_key(909)) double ISolveElementPower::GetPower ( );
__declspec(implementation_key(910)) void ISolveElementPower::PutPower ( double pRetVal );
__declspec(implementation_key(911)) long ISolveCocentricSurface::GetAboutSurface ( );
__declspec(implementation_key(912)) void ISolveCocentricSurface::PutAboutSurface ( long pRetVal );
__declspec(implementation_key(913)) long ISolveCocentricRadius::GetWithSurface ( );
__declspec(implementation_key(914)) void ISolveCocentricRadius::PutWithSurface ( long pRetVal );
__declspec(implementation_key(915)) double ISolveFNumber::GetFNumber ( );
__declspec(implementation_key(916)) void ISolveFNumber::PutFNumber ( double pRetVal );
__declspec(implementation_key(917)) double ISolveChiefRayHeight::GetHeight ( );
__declspec(implementation_key(918)) void ISolveChiefRayHeight::PutHeight ( double pRetVal );
__declspec(implementation_key(919)) double ISolveEdgeThickness::GetThickness ( );
__declspec(implementation_key(920)) void ISolveEdgeThickness::PutThickness ( double pRetVal );
__declspec(implementation_key(921)) double ISolveEdgeThickness::GetRadialHeight ( );
__declspec(implementation_key(922)) void ISolveEdgeThickness::PutRadialHeight ( double pRetVal );
__declspec(implementation_key(923)) double ISolveOpticalPathDifference::Getopd ( );
__declspec(implementation_key(924)) void ISolveOpticalPathDifference::Putopd ( double pRetVal );
__declspec(implementation_key(925)) double ISolveOpticalPathDifference::GetPupilZone ( );
__declspec(implementation_key(926)) void ISolveOpticalPathDifference::PutPupilZone ( double pRetVal );
__declspec(implementation_key(927)) long ISolvePosition::GetFromSurface ( );
__declspec(implementation_key(928)) void ISolvePosition::PutFromSurface ( long pRetVal );
__declspec(implementation_key(929)) double ISolvePosition::GetLength ( );
__declspec(implementation_key(930)) void ISolvePosition::PutLength ( double pRetVal );
__declspec(implementation_key(931)) long ISolveCompensator::GetRefSurface ( );
__declspec(implementation_key(932)) void ISolveCompensator::PutRefSurface ( long pRetVal );
__declspec(implementation_key(933)) double ISolveCompensator::GetSum ( );
__declspec(implementation_key(934)) void ISolveCompensator::PutSum ( double pRetVal );
__declspec(implementation_key(935)) long ISolveCenterOfCurvature::GetRefSurface ( );
__declspec(implementation_key(936)) void ISolveCenterOfCurvature::PutRefSurface ( long pRetVal );
__declspec(implementation_key(937)) double ISolveMaterialModel::GetIndexNd ( );
__declspec(implementation_key(938)) void ISolveMaterialModel::PutIndexNd ( double pRetVal );
__declspec(implementation_key(939)) VARIANT_BOOL ISolveMaterialModel::GetVaryIndex ( );
__declspec(implementation_key(940)) void ISolveMaterialModel::PutVaryIndex ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(941)) double ISolveMaterialModel::GetAbbeVd ( );
__declspec(implementation_key(942)) void ISolveMaterialModel::PutAbbeVd ( double pRetVal );
__declspec(implementation_key(943)) VARIANT_BOOL ISolveMaterialModel::GetVaryAbbe ( );
__declspec(implementation_key(944)) void ISolveMaterialModel::PutVaryAbbe ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(945)) double ISolveMaterialModel::GetdPgF ( );
__declspec(implementation_key(946)) void ISolveMaterialModel::PutdPgF ( double pRetVal );
__declspec(implementation_key(947)) VARIANT_BOOL ISolveMaterialModel::GetVarydPgF ( );
__declspec(implementation_key(948)) void ISolveMaterialModel::PutVarydPgF ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(949)) _bstr_t ISolveMaterialSubstitute::Getcatalog ( );
__declspec(implementation_key(950)) void ISolveMaterialSubstitute::Putcatalog ( _bstr_t pRetVal );
__declspec(implementation_key(951)) double ISolveMaterialOffset::GetNdOffset ( );
__declspec(implementation_key(952)) void ISolveMaterialOffset::PutNdOffset ( double pRetVal );
__declspec(implementation_key(953)) double ISolveMaterialOffset::GetVdOffset ( );
__declspec(implementation_key(954)) void ISolveMaterialOffset::PutVdOffset ( double pRetVal );
__declspec(implementation_key(955)) long ISolvePickupChiefRay::GetField ( );
__declspec(implementation_key(956)) void ISolvePickupChiefRay::PutField ( long pRetVal );
__declspec(implementation_key(957)) long ISolvePickupChiefRay::GetWavelength ( );
__declspec(implementation_key(958)) void ISolvePickupChiefRay::PutWavelength ( long pRetVal );
__declspec(implementation_key(959)) long ISolveConfigPickup::GetOperand ( );
__declspec(implementation_key(960)) void ISolveConfigPickup::PutOperand ( long pRetVal );
__declspec(implementation_key(961)) double ISolveConfigPickup::GetScaleFactor ( );
__declspec(implementation_key(962)) void ISolveConfigPickup::PutScaleFactor ( double pRetVal );
__declspec(implementation_key(963)) VARIANT_BOOL ISolveConfigPickup::GetSupportsScale ( );
__declspec(implementation_key(964)) double ISolveConfigPickup::GetOffset ( );
__declspec(implementation_key(965)) void ISolveConfigPickup::PutOffset ( double pRetVal );
__declspec(implementation_key(966)) long ISolveConfigPickup::GetConfiguration ( );
__declspec(implementation_key(967)) void ISolveConfigPickup::PutConfiguration ( long pRetVal );
__declspec(implementation_key(968)) VARIANT_BOOL ISolveConfigPickup::GetSupportsOffset ( );
__declspec(implementation_key(969)) long ISolveThermalPickup::GetConfiguration ( );
__declspec(implementation_key(970)) void ISolveThermalPickup::PutConfiguration ( long pRetVal );
__declspec(implementation_key(971)) long ISolveObjectPickup::GetObject ( );
__declspec(implementation_key(972)) void ISolveObjectPickup::PutObject ( long pRetVal );
__declspec(implementation_key(973)) double ISolveObjectPickup::GetScaleFactor ( );
__declspec(implementation_key(974)) void ISolveObjectPickup::PutScaleFactor ( double pRetVal );
__declspec(implementation_key(975)) VARIANT_BOOL ISolveObjectPickup::GetSupportsScale ( );
__declspec(implementation_key(976)) double ISolveObjectPickup::GetOffset ( );
__declspec(implementation_key(977)) void ISolveObjectPickup::PutOffset ( double pRetVal );
__declspec(implementation_key(978)) VARIANT_BOOL ISolveObjectPickup::GetSupportsOffset ( );
__declspec(implementation_key(979)) enum ObjectColumn ISolveObjectPickup::GetColumn ( );
__declspec(implementation_key(980)) void ISolveObjectPickup::PutColumn ( enum ObjectColumn pRetVal );
__declspec(implementation_key(981)) enum ObjectType IObjectTypeSettings::GetType ( );
__declspec(implementation_key(982)) VARIANT_BOOL IObjectTypeSettings::GetIsValid ( );
__declspec(implementation_key(983)) VARIANT_BOOL IObjectTypeSettings::GetRequiresFile1 ( );
__declspec(implementation_key(984)) _bstr_t IObjectTypeSettings::GetFileName1 ( );
__declspec(implementation_key(985)) void IObjectTypeSettings::PutFileName1 ( _bstr_t pRetVal );
__declspec(implementation_key(986)) SAFEARRAY * IObjectTypeSettings::GetFileNames1 ( );
__declspec(implementation_key(987)) VARIANT_BOOL IObjectTypeSettings::GetRequiresFile2 ( );
__declspec(implementation_key(988)) _bstr_t IObjectTypeSettings::GetFileName2 ( );
__declspec(implementation_key(989)) void IObjectTypeSettings::PutFileName2 ( _bstr_t pRetVal );
__declspec(implementation_key(990)) SAFEARRAY * IObjectTypeSettings::GetFileNames2 ( );
__declspec(implementation_key(991)) long IFaceData::GetNumberOfFaces ( );
__declspec(implementation_key(992)) long IFaceData::GetCurrentFace ( );
__declspec(implementation_key(993)) void IFaceData::PutCurrentFace ( long pRetVal );
__declspec(implementation_key(994)) VARIANT_BOOL IFaceData::GetConvertToGlobal ( );
__declspec(implementation_key(995)) void IFaceData::PutConvertToGlobal ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(996)) long IFaceData::GetNumberOfVertices ( );
__declspec(implementation_key(997)) double IFaceData::GetFlux ( );
__declspec(implementation_key(998)) double IFaceData::GetIrradiance ( );
__declspec(implementation_key(999)) VARIANT_BOOL IFaceData::GetVertex ( long vertexNumber, double * X, double * Y, double * Z );
__declspec(implementation_key(1000)) VARIANT_BOOL IFaceData::GetVertexNormal ( long vertexNumber, double * X, double * Y, double * Z );
__declspec(implementation_key(1001)) VARIANT_BOOL IFaceData::FillData ( long size, double * X, double * Y, double * Z, double * XNorm, double * YNorm, double * ZNorm );
__declspec(implementation_key(1002)) long IObjectDetector::GetRowCount ( );
__declspec(implementation_key(1003)) long IObjectDetector::GetColCount ( );
__declspec(implementation_key(1004)) VARIANT_BOOL IObjectDetector::GetDetectorDimensions ( unsigned long * Rows, unsigned long * Cols );
__declspec(implementation_key(1005)) long IObjectDetector::GetDetectorSize ( );
__declspec(implementation_key(1006)) double ISCS_CIE1931Tristimulus::GetX ( );
__declspec(implementation_key(1007)) void ISCS_CIE1931Tristimulus::PutX ( double pRetVal );
__declspec(implementation_key(1008)) double ISCS_CIE1931Tristimulus::GetY ( );
__declspec(implementation_key(1009)) void ISCS_CIE1931Tristimulus::PutY ( double pRetVal );
__declspec(implementation_key(1010)) double ISCS_CIE1931Tristimulus::GetZ ( );
__declspec(implementation_key(1011)) void ISCS_CIE1931Tristimulus::PutZ ( double pRetVal );
__declspec(implementation_key(1012)) long ISCS_CIE1931Tristimulus::GetSpectrumCount ( );
__declspec(implementation_key(1013)) void ISCS_CIE1931Tristimulus::PutSpectrumCount ( long pRetVal );
__declspec(implementation_key(1014)) double ISCS_CIE1931Tristimulus::GetWavelengthFrom ( );
__declspec(implementation_key(1015)) void ISCS_CIE1931Tristimulus::PutWavelengthFrom ( double pRetVal );
__declspec(implementation_key(1016)) double ISCS_CIE1931Tristimulus::GetWavelengthTo ( );
__declspec(implementation_key(1017)) void ISCS_CIE1931Tristimulus::PutWavelengthTo ( double pRetVal );
__declspec(implementation_key(1018)) _bstr_t ISCS_CIE1931Tristimulus::GetFit ( );
__declspec(implementation_key(1019)) double ISCS_CIE1931Chromaticity::Getcx ( );
__declspec(implementation_key(1020)) void ISCS_CIE1931Chromaticity::Putcx ( double pRetVal );
__declspec(implementation_key(1021)) double ISCS_CIE1931Chromaticity::GetCy ( );
__declspec(implementation_key(1022)) void ISCS_CIE1931Chromaticity::PutCy ( double pRetVal );
__declspec(implementation_key(1023)) long ISCS_CIE1931Chromaticity::GetSpectrumCount ( );
__declspec(implementation_key(1024)) void ISCS_CIE1931Chromaticity::PutSpectrumCount ( long pRetVal );
__declspec(implementation_key(1025)) double ISCS_CIE1931Chromaticity::GetWavelengthFrom ( );
__declspec(implementation_key(1026)) void ISCS_CIE1931Chromaticity::PutWavelengthFrom ( double pRetVal );
__declspec(implementation_key(1027)) double ISCS_CIE1931Chromaticity::GetWavelengthTo ( );
__declspec(implementation_key(1028)) void ISCS_CIE1931Chromaticity::PutWavelengthTo ( double pRetVal );
__declspec(implementation_key(1029)) _bstr_t ISCS_CIE1931Chromaticity::GetFit ( );
__declspec(implementation_key(1030)) double ISCS_CIE1931RGB::GetR ( );
__declspec(implementation_key(1031)) void ISCS_CIE1931RGB::PutR ( double pRetVal );
__declspec(implementation_key(1032)) double ISCS_CIE1931RGB::GetG ( );
__declspec(implementation_key(1033)) void ISCS_CIE1931RGB::PutG ( double pRetVal );
__declspec(implementation_key(1034)) double ISCS_CIE1931RGB::GetB ( );
__declspec(implementation_key(1035)) void ISCS_CIE1931RGB::PutB ( double pRetVal );
__declspec(implementation_key(1036)) long ISCS_CIE1931RGB::GetSpectrumCount ( );
__declspec(implementation_key(1037)) void ISCS_CIE1931RGB::PutSpectrumCount ( long pRetVal );
__declspec(implementation_key(1038)) double ISCS_CIE1931RGB::GetWavelengthFrom ( );
__declspec(implementation_key(1039)) void ISCS_CIE1931RGB::PutWavelengthFrom ( double pRetVal );
__declspec(implementation_key(1040)) double ISCS_CIE1931RGB::GetWavelengthTo ( );
__declspec(implementation_key(1041)) void ISCS_CIE1931RGB::PutWavelengthTo ( double pRetVal );
__declspec(implementation_key(1042)) _bstr_t ISCS_CIE1931RGB::GetFit ( );
__declspec(implementation_key(1043)) long ISCS_UniformPowerSpectrum::GetSpectrumCount ( );
__declspec(implementation_key(1044)) void ISCS_UniformPowerSpectrum::PutSpectrumCount ( long pRetVal );
__declspec(implementation_key(1045)) double ISCS_UniformPowerSpectrum::GetWavelengthFrom ( );
__declspec(implementation_key(1046)) void ISCS_UniformPowerSpectrum::PutWavelengthFrom ( double pRetVal );
__declspec(implementation_key(1047)) double ISCS_UniformPowerSpectrum::GetWavelengthTo ( );
__declspec(implementation_key(1048)) void ISCS_UniformPowerSpectrum::PutWavelengthTo ( double pRetVal );
__declspec(implementation_key(1049)) _bstr_t ISCS_UniformPowerSpectrum::GetFit ( );
__declspec(implementation_key(1050)) long ISCS_D65White::GetSpectrumCount ( );
__declspec(implementation_key(1051)) void ISCS_D65White::PutSpectrumCount ( long pRetVal );
__declspec(implementation_key(1052)) double ISCS_D65White::GetWavelengthFrom ( );
__declspec(implementation_key(1053)) void ISCS_D65White::PutWavelengthFrom ( double pRetVal );
__declspec(implementation_key(1054)) double ISCS_D65White::GetWavelengthTo ( );
__declspec(implementation_key(1055)) void ISCS_D65White::PutWavelengthTo ( double pRetVal );
__declspec(implementation_key(1056)) _bstr_t ISCS_D65White::GetFit ( );
__declspec(implementation_key(1057)) double ISCS_ColorTemperature::GetTemperatureK ( );
__declspec(implementation_key(1058)) void ISCS_ColorTemperature::PutTemperatureK ( double pRetVal );
__declspec(implementation_key(1059)) long ISCS_ColorTemperature::GetSpectrumCount ( );
__declspec(implementation_key(1060)) void ISCS_ColorTemperature::PutSpectrumCount ( long pRetVal );
__declspec(implementation_key(1061)) double ISCS_ColorTemperature::GetWavelengthFrom ( );
__declspec(implementation_key(1062)) void ISCS_ColorTemperature::PutWavelengthFrom ( double pRetVal );
__declspec(implementation_key(1063)) double ISCS_ColorTemperature::GetWavelengthTo ( );
__declspec(implementation_key(1064)) void ISCS_ColorTemperature::PutWavelengthTo ( double pRetVal );
__declspec(implementation_key(1065)) _bstr_t ISCS_ColorTemperature::GetFit ( );
__declspec(implementation_key(1066)) double ISCS_BlackBodySpectrum::GetTemperatureK ( );
__declspec(implementation_key(1067)) void ISCS_BlackBodySpectrum::PutTemperatureK ( double pRetVal );
__declspec(implementation_key(1068)) long ISCS_BlackBodySpectrum::GetSpectrumCount ( );
__declspec(implementation_key(1069)) void ISCS_BlackBodySpectrum::PutSpectrumCount ( long pRetVal );
__declspec(implementation_key(1070)) double ISCS_BlackBodySpectrum::GetWavelengthFrom ( );
__declspec(implementation_key(1071)) void ISCS_BlackBodySpectrum::PutWavelengthFrom ( double pRetVal );
__declspec(implementation_key(1072)) double ISCS_BlackBodySpectrum::GetWavelengthTo ( );
__declspec(implementation_key(1073)) void ISCS_BlackBodySpectrum::PutWavelengthTo ( double pRetVal );
__declspec(implementation_key(1074)) _bstr_t ISCS_BlackBodySpectrum::GetFit ( );
__declspec(implementation_key(1075)) _bstr_t ISCS_SpectrumFile::GetSpectrumFile ( );
__declspec(implementation_key(1076)) void ISCS_SpectrumFile::PutSpectrumFile ( _bstr_t pRetVal );
__declspec(implementation_key(1077)) SAFEARRAY * ISCS_SpectrumFile::GetAvailableSpectrumFiles ( );
__declspec(implementation_key(1078)) long ISCS_SpectrumFile::GetSpectrumCount ( );
__declspec(implementation_key(1079)) double ISCS_SpectrumFile::GetWavelengthFrom ( );
__declspec(implementation_key(1080)) double ISCS_SpectrumFile::GetWavelengthTo ( );
__declspec(implementation_key(1081)) _bstr_t ISCS_SpectrumFile::GetFit ( );
__declspec(implementation_key(1082)) double ISCS_CIE1976::Getu ( );
__declspec(implementation_key(1083)) void ISCS_CIE1976::Putu ( double pRetVal );
__declspec(implementation_key(1084)) double ISCS_CIE1976::Getv ( );
__declspec(implementation_key(1085)) void ISCS_CIE1976::Putv ( double pRetVal );
__declspec(implementation_key(1086)) long ISCS_CIE1976::GetSpectrumCount ( );
__declspec(implementation_key(1087)) void ISCS_CIE1976::PutSpectrumCount ( long pRetVal );
__declspec(implementation_key(1088)) double ISCS_CIE1976::GetWavelengthFrom ( );
__declspec(implementation_key(1089)) void ISCS_CIE1976::PutWavelengthFrom ( double pRetVal );
__declspec(implementation_key(1090)) double ISCS_CIE1976::GetWavelengthTo ( );
__declspec(implementation_key(1091)) void ISCS_CIE1976::PutWavelengthTo ( double pRetVal );
__declspec(implementation_key(1092)) _bstr_t ISCS_CIE1976::GetFit ( );
__declspec(implementation_key(1093)) enum SourceColorMode ISourceColorSettings::GetMode ( );
__declspec(implementation_key(1094)) VARIANT_BOOL ISourceColorSettings::GetIsValid ( );
__declspec(implementation_key(1095)) ISCS_SystemWavelengthsPtr ISourceColorSettings::Get_S_SystemWavelengths ( );
__declspec(implementation_key(1096)) ISCS_CIE1931TristimulusPtr ISourceColorSettings::Get_S_CIE1931Tristimulus ( );
__declspec(implementation_key(1097)) ISCS_CIE1931ChromaticityPtr ISourceColorSettings::Get_S_CIE1931Chromaticity ( );
__declspec(implementation_key(1098)) ISCS_CIE1931RGBPtr ISourceColorSettings::Get_S_CIE1931RGB ( );
__declspec(implementation_key(1099)) ISCS_UniformPowerSpectrumPtr ISourceColorSettings::Get_S_UniformPowerSpectrum ( );
__declspec(implementation_key(1100)) ISCS_D65WhitePtr ISourceColorSettings::Get_S_D65White ( );
__declspec(implementation_key(1101)) ISCS_ColorTemperaturePtr ISourceColorSettings::Get_S_ColorTemperature ( );
__declspec(implementation_key(1102)) ISCS_BlackBodySpectrumPtr ISourceColorSettings::Get_S_BlackBodySpectrum ( );
__declspec(implementation_key(1103)) ISCS_SpectrumFilePtr ISourceColorSettings::Get_S_SpectrumFile ( );
__declspec(implementation_key(1104)) ISCS_CIE1976Ptr ISourceColorSettings::Get_S_CIE1976 ( );
__declspec(implementation_key(1105)) VARIANT_BOOL INCESourcesData::GetIsSourcesAvailable ( );
__declspec(implementation_key(1106)) VARIANT_BOOL INCESourcesData::GetRandomPolarization ( );
__declspec(implementation_key(1107)) void INCESourcesData::PutRandomPolarization ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1108)) double INCESourcesData::GetInitialPhaseDeg ( );
__declspec(implementation_key(1109)) void INCESourcesData::PutInitialPhaseDeg ( double pRetVal );
__declspec(implementation_key(1110)) double INCESourcesData::GetcoherenceLength ( );
__declspec(implementation_key(1111)) void INCESourcesData::PutcoherenceLength ( double pRetVal );
__declspec(implementation_key(1112)) double INCESourcesData::Getjx ( );
__declspec(implementation_key(1113)) void INCESourcesData::Putjx ( double pRetVal );
__declspec(implementation_key(1114)) double INCESourcesData::Getjy ( );
__declspec(implementation_key(1115)) void INCESourcesData::Putjy ( double pRetVal );
__declspec(implementation_key(1116)) double INCESourcesData::GetXPhase ( );
__declspec(implementation_key(1117)) void INCESourcesData::PutXPhase ( double pRetVal );
__declspec(implementation_key(1118)) double INCESourcesData::GetYPhase ( );
__declspec(implementation_key(1119)) void INCESourcesData::PutYPhase ( double pRetVal );
__declspec(implementation_key(1120)) VARIANT_BOOL INCESourcesData::GetReverseRays ( );
__declspec(implementation_key(1121)) void INCESourcesData::PutReverseRays ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1122)) double INCESourcesData::GetPrePropagation ( );
__declspec(implementation_key(1123)) void INCESourcesData::PutPrePropagation ( double pRetVal );
__declspec(implementation_key(1124)) enum SourceBulkScatterMode INCESourcesData::GetBulkScatter ( );
__declspec(implementation_key(1125)) void INCESourcesData::PutBulkScatter ( enum SourceBulkScatterMode pRetVal );
__declspec(implementation_key(1126)) enum SourceSamplingMethod INCESourcesData::GetSamplingMethod ( );
__declspec(implementation_key(1127)) void INCESourcesData::PutSamplingMethod ( enum SourceSamplingMethod pRetVal );
__declspec(implementation_key(1128)) enum ArrayMode INCESourcesData::GetArrayType ( );
__declspec(implementation_key(1129)) void INCESourcesData::PutArrayType ( enum ArrayMode pRetVal );
__declspec(implementation_key(1130)) long INCESourcesData::GetArrayNumberX ( );
__declspec(implementation_key(1131)) void INCESourcesData::PutArrayNumberX ( long pRetVal );
__declspec(implementation_key(1132)) long INCESourcesData::GetArrayNumberY ( );
__declspec(implementation_key(1133)) void INCESourcesData::PutArrayNumberY ( long pRetVal );
__declspec(implementation_key(1134)) double INCESourcesData::GetArraySpacingX ( );
__declspec(implementation_key(1135)) void INCESourcesData::PutArraySpacingX ( double pRetVal );
__declspec(implementation_key(1136)) double INCESourcesData::GetArraySpacingY ( );
__declspec(implementation_key(1137)) void INCESourcesData::PutArraySpacingY ( double pRetVal );
__declspec(implementation_key(1138)) long INCESourcesData::GetArrayNumber ( );
__declspec(implementation_key(1139)) void INCESourcesData::PutArrayNumber ( long pRetVal );
__declspec(implementation_key(1140)) double INCESourcesData::GetArrayRadius ( );
__declspec(implementation_key(1141)) void INCESourcesData::PutArrayRadius ( double pRetVal );
__declspec(implementation_key(1142)) long INCESourcesData::GetArrayRings ( );
__declspec(implementation_key(1143)) void INCESourcesData::PutArrayRings ( long pRetVal );
__declspec(implementation_key(1144)) double INCESourcesData::GetArraySpacing ( );
__declspec(implementation_key(1145)) void INCESourcesData::PutArraySpacing ( double pRetVal );
__declspec(implementation_key(1146)) enum SourceColorMode INCESourcesData::GetSourceColor ( );
__declspec(implementation_key(1147)) void INCESourcesData::PutSourceColor ( enum SourceColorMode pRetVal );
__declspec(implementation_key(1148)) ISourceColorSettingsPtr INCESourcesData::GetSourceColorSettings ( );
__declspec(implementation_key(1149)) double IOSS_Lambertian::GetScatterFraction ( );
__declspec(implementation_key(1150)) void IOSS_Lambertian::PutScatterFraction ( double pRetVal );
__declspec(implementation_key(1151)) double IOSS_Gaussian::GetScatterFraction ( );
__declspec(implementation_key(1152)) void IOSS_Gaussian::PutScatterFraction ( double pRetVal );
__declspec(implementation_key(1153)) double IOSS_Gaussian::GetSigma ( );
__declspec(implementation_key(1154)) void IOSS_Gaussian::PutSigma ( double pRetVal );
__declspec(implementation_key(1155)) _bstr_t IOSS_ABg::GetReflectName ( );
__declspec(implementation_key(1156)) void IOSS_ABg::PutReflectName ( _bstr_t pRetVal );
__declspec(implementation_key(1157)) _bstr_t IOSS_ABg::GetTransmitName ( );
__declspec(implementation_key(1158)) void IOSS_ABg::PutTransmitName ( _bstr_t pRetVal );
__declspec(implementation_key(1159)) SAFEARRAY * IOSS_ABg::GetAvailableABgNames ( );
__declspec(implementation_key(1160)) _bstr_t IOSS_ABgFile::GetReflectFile ( );
__declspec(implementation_key(1161)) void IOSS_ABgFile::PutReflectFile ( _bstr_t pRetVal );
__declspec(implementation_key(1162)) _bstr_t IOSS_ABgFile::GetTransmitFile ( );
__declspec(implementation_key(1163)) void IOSS_ABgFile::PutTransmitFile ( _bstr_t pRetVal );
__declspec(implementation_key(1164)) SAFEARRAY * IOSS_ABgFile::GetAvailableFiles ( );
__declspec(implementation_key(1165)) _bstr_t IOSS_BSDF::GetReflectFile ( );
__declspec(implementation_key(1166)) void IOSS_BSDF::PutReflectFile ( _bstr_t pRetVal );
__declspec(implementation_key(1167)) _bstr_t IOSS_BSDF::GetTransmitFile ( );
__declspec(implementation_key(1168)) void IOSS_BSDF::PutTransmitFile ( _bstr_t pRetVal );
__declspec(implementation_key(1169)) SAFEARRAY * IOSS_BSDF::GetAvailableFileNames ( );
__declspec(implementation_key(1170)) double IOSS_BSDF::GetScatterFraction ( );
__declspec(implementation_key(1171)) void IOSS_BSDF::PutScatterFraction ( double pRetVal );
__declspec(implementation_key(1172)) double IOSS_BSDF::GetAngle ( );
__declspec(implementation_key(1173)) void IOSS_BSDF::PutAngle ( double pRetVal );
__declspec(implementation_key(1174)) _bstr_t IOSS_User::GetDLLName ( );
__declspec(implementation_key(1175)) void IOSS_User::PutDLLName ( _bstr_t pRetVal );
__declspec(implementation_key(1176)) SAFEARRAY * IOSS_User::GetAvailableDLLNames ( );
__declspec(implementation_key(1177)) _bstr_t IOSS_User::GetfileName ( );
__declspec(implementation_key(1178)) void IOSS_User::PutfileName ( _bstr_t pRetVal );
__declspec(implementation_key(1179)) SAFEARRAY * IOSS_User::GetAvailableFileNames ( );
__declspec(implementation_key(1180)) VARIANT_BOOL IOSS_User::GetFileNameRequired ( );
__declspec(implementation_key(1181)) long IOSS_User::GetNumberOfParameters ( );
__declspec(implementation_key(1182)) _bstr_t IOSS_User::GetParameterName ( long paramIdx );
__declspec(implementation_key(1183)) double IOSS_User::GetParameterValue ( long paramIdx );
__declspec(implementation_key(1184)) VARIANT_BOOL IOSS_User::SetParameterValue ( long paramIdx, double Value );
__declspec(implementation_key(1185)) double IOSS_User::GetScatterFraction ( );
__declspec(implementation_key(1186)) void IOSS_User::PutScatterFraction ( double pRetVal );
__declspec(implementation_key(1187)) SAFEARRAY * IOSS_ISScatterCatalog::GetAvailableISFiles ( );
__declspec(implementation_key(1188)) _bstr_t IOSS_ISScatterCatalog::GetReflectFile ( );
__declspec(implementation_key(1189)) enum ReflectTransmitCode IOSS_ISScatterCatalog::SetReflectFile ( _bstr_t File );
__declspec(implementation_key(1190)) _bstr_t IOSS_ISScatterCatalog::GetTransmitFile ( );
__declspec(implementation_key(1191)) enum ReflectTransmitCode IOSS_ISScatterCatalog::SetTransmitFile ( _bstr_t File );
__declspec(implementation_key(1192)) enum SampleSides IOSS_ISScatterCatalog::GetSampleSideR ( );
__declspec(implementation_key(1193)) void IOSS_ISScatterCatalog::PutSampleSideR ( enum SampleSides pRetVal );
__declspec(implementation_key(1194)) SAFEARRAY * IOSS_ISScatterCatalog::GetSampleSidesR ( );
__declspec(implementation_key(1195)) enum Samplings IOSS_ISScatterCatalog::GetSamplingR ( );
__declspec(implementation_key(1196)) void IOSS_ISScatterCatalog::PutSamplingR ( enum Samplings pRetVal );
__declspec(implementation_key(1197)) enum SampleSides IOSS_ISScatterCatalog::GetSampleSideT ( );
__declspec(implementation_key(1198)) void IOSS_ISScatterCatalog::PutSampleSideT ( enum SampleSides pRetVal );
__declspec(implementation_key(1199)) SAFEARRAY * IOSS_ISScatterCatalog::GetSampleSidesT ( );
__declspec(implementation_key(1200)) enum Samplings IOSS_ISScatterCatalog::GetSamplingT ( );
__declspec(implementation_key(1201)) void IOSS_ISScatterCatalog::PutSamplingT ( enum Samplings pRetVal );
__declspec(implementation_key(1202)) double IOSS_ISScatterCatalog::GetAngle ( );
__declspec(implementation_key(1203)) void IOSS_ISScatterCatalog::PutAngle ( double pRetVal );
__declspec(implementation_key(1204)) enum ObjectScatteringTypes IObjectScatteringSettings::GetType ( );
__declspec(implementation_key(1205)) VARIANT_BOOL IObjectScatteringSettings::GetIsValid ( );
__declspec(implementation_key(1206)) IOSS_NonePtr IObjectScatteringSettings::Get_S_None ( );
__declspec(implementation_key(1207)) IOSS_LambertianPtr IObjectScatteringSettings::Get_S_Lambertian ( );
__declspec(implementation_key(1208)) IOSS_GaussianPtr IObjectScatteringSettings::Get_S_Gaussian ( );
__declspec(implementation_key(1209)) IOSS_ABgPtr IObjectScatteringSettings::Get_S_ABg ( );
__declspec(implementation_key(1210)) IOSS_ABgFilePtr IObjectScatteringSettings::Get_S_ABgFile ( );
__declspec(implementation_key(1211)) IOSS_BSDFPtr IObjectScatteringSettings::Get_S_BSDF ( );
__declspec(implementation_key(1212)) IOSS_UserPtr IObjectScatteringSettings::Get_S_User ( );
__declspec(implementation_key(1213)) IOSS_ISScatterCatalogPtr IObjectScatteringSettings::Get_S_ISScatterCatalog ( );
__declspec(implementation_key(1214)) VARIANT_BOOL INCECoatScatterFaceData::GetIsValid ( );
__declspec(implementation_key(1215)) long INCECoatScatterFaceData::GetfaceNumber ( );
__declspec(implementation_key(1216)) _bstr_t INCECoatScatterFaceData::GetFaceName ( );
__declspec(implementation_key(1217)) VARIANT_BOOL INCECoatScatterFaceData::GetIsReadOnly ( );
__declspec(implementation_key(1218)) VARIANT_BOOL INCECoatScatterFaceData::GetIsCustom ( );
__declspec(implementation_key(1219)) VARIANT_BOOL INCECoatScatterFaceData::UseCustomSettings ( );
__declspec(implementation_key(1220)) VARIANT_BOOL INCECoatScatterFaceData::GetIsProfile ( );
__declspec(implementation_key(1221)) VARIANT_BOOL INCECoatScatterFaceData::UseProfile ( _bstr_t profile );
__declspec(implementation_key(1222)) SAFEARRAY * INCECoatScatterFaceData::GetAvailableProfiles ( );
__declspec(implementation_key(1223)) _bstr_t INCECoatScatterFaceData::GetProfileName ( );
__declspec(implementation_key(1224)) VARIANT_BOOL INCECoatScatterFaceData::DeleteProfile ( );
__declspec(implementation_key(1225)) VARIANT_BOOL INCECoatScatterFaceData::SaveProfile ( _bstr_t ProfileName );
__declspec(implementation_key(1226)) enum FaceIsType INCECoatScatterFaceData::GetFaceIs ( );
__declspec(implementation_key(1227)) void INCECoatScatterFaceData::PutFaceIs ( enum FaceIsType pRetVal );
__declspec(implementation_key(1228)) _bstr_t INCECoatScatterFaceData::GetCoating ( );
__declspec(implementation_key(1229)) void INCECoatScatterFaceData::PutCoating ( _bstr_t pRetVal );
__declspec(implementation_key(1230)) SAFEARRAY * INCECoatScatterFaceData::GetAvailableCoatings ( );
__declspec(implementation_key(1231)) enum ObjectScatteringTypes INCECoatScatterFaceData::GetCurrentScatterModel ( );
__declspec(implementation_key(1232)) IObjectScatteringSettingsPtr INCECoatScatterFaceData::GetCurrentScatterModelSettings ( );
__declspec(implementation_key(1233)) IObjectScatteringSettingsPtr INCECoatScatterFaceData::CreateScatterModelSettings ( enum ObjectScatteringTypes Type );
__declspec(implementation_key(1234)) VARIANT_BOOL INCECoatScatterFaceData::ChangeScatterModelSettings ( struct IObjectScatteringSettings * newSettings );
__declspec(implementation_key(1235)) VARIANT_BOOL INCECoatScatterFaceData::GetThinWindowScattering ( );
__declspec(implementation_key(1236)) void INCECoatScatterFaceData::PutThinWindowScattering ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1237)) long INCECoatScatterFaceData::GetNumberOfRays ( );
__declspec(implementation_key(1238)) void INCECoatScatterFaceData::PutNumberOfRays ( long pRetVal );
__declspec(implementation_key(1239)) VARIANT_BOOL INCECoatScatterData::GetIsCoatScatterAvailable ( );
__declspec(implementation_key(1240)) long INCECoatScatterData::GetNumberOfFaces ( );
__declspec(implementation_key(1241)) INCECoatScatterFaceDataPtr INCECoatScatterData::GetFaceData ( long faceNumber );
__declspec(implementation_key(1242)) long IImportanceSamplingSettings::GetTowards ( );
__declspec(implementation_key(1243)) void IImportanceSamplingSettings::PutTowards ( long pRetVal );
__declspec(implementation_key(1244)) double IImportanceSamplingSettings::Getsize ( );
__declspec(implementation_key(1245)) void IImportanceSamplingSettings::Putsize ( double pRetVal );
__declspec(implementation_key(1246)) double IImportanceSamplingSettings::GetLimit ( );
__declspec(implementation_key(1247)) void IImportanceSamplingSettings::PutLimit ( double pRetVal );
__declspec(implementation_key(1248)) VARIANT_BOOL INCEScatterToData::GetIsScatterToAvailable ( );
__declspec(implementation_key(1249)) enum ScatterToType INCEScatterToData::GetScatterToMethod ( );
__declspec(implementation_key(1250)) void INCEScatterToData::PutScatterToMethod ( enum ScatterToType pRetVal );
__declspec(implementation_key(1251)) _bstr_t INCEScatterToData::GetScatterToList ( );
__declspec(implementation_key(1252)) void INCEScatterToData::PutScatterToList ( _bstr_t pRetVal );
__declspec(implementation_key(1253)) long INCEScatterToData::GetNumberOfRayData ( );
__declspec(implementation_key(1254)) IImportanceSamplingSettingsPtr INCEScatterToData::GetRayData ( long rayIndex );
__declspec(implementation_key(1255)) VARIANT_BOOL INCEScatterToData::SetRayData ( long rayIndex, struct IImportanceSamplingSettings * Data );
__declspec(implementation_key(1256)) double IVMPS_AngleScattering::GetMeanPath ( );
__declspec(implementation_key(1257)) void IVMPS_AngleScattering::PutMeanPath ( double pRetVal );
__declspec(implementation_key(1258)) double IVMPS_AngleScattering::GetAngle ( );
__declspec(implementation_key(1259)) void IVMPS_AngleScattering::PutAngle ( double pRetVal );
__declspec(implementation_key(1260)) _bstr_t IVMPS_DLLDefinedScattering::GetDLL ( );
__declspec(implementation_key(1261)) void IVMPS_DLLDefinedScattering::PutDLL ( _bstr_t pRetVal );
__declspec(implementation_key(1262)) SAFEARRAY * IVMPS_DLLDefinedScattering::GetAvailableDLLs ( );
__declspec(implementation_key(1263)) double IVMPS_DLLDefinedScattering::GetMeanPath ( );
__declspec(implementation_key(1264)) void IVMPS_DLLDefinedScattering::PutMeanPath ( double pRetVal );
__declspec(implementation_key(1265)) VARIANT_BOOL IVMPS_DLLDefinedScattering::GetMeanPathRequired ( );
__declspec(implementation_key(1266)) double IVMPS_DLLDefinedScattering::GetAngle ( );
__declspec(implementation_key(1267)) void IVMPS_DLLDefinedScattering::PutAngle ( double pRetVal );
__declspec(implementation_key(1268)) VARIANT_BOOL IVMPS_DLLDefinedScattering::GetAngleRequired ( );
__declspec(implementation_key(1269)) long IVMPS_DLLDefinedScattering::GetNumberOfParameters ( );
__declspec(implementation_key(1270)) _bstr_t IVMPS_DLLDefinedScattering::GetParameterName ( long paramIdx );
__declspec(implementation_key(1271)) double IVMPS_DLLDefinedScattering::GetParameterValue ( long paramIdx );
__declspec(implementation_key(1272)) VARIANT_BOOL IVMPS_DLLDefinedScattering::SetParameterValue ( long paramIdx, double Value );
__declspec(implementation_key(1273)) VARIANT_BOOL IVMPS_PhotoluminscenceModel::GetAreSettingsValid ( );
__declspec(implementation_key(1274)) _bstr_t IVMPS_PhotoluminscenceModel::GetAbsorptionFile ( );
__declspec(implementation_key(1275)) void IVMPS_PhotoluminscenceModel::PutAbsorptionFile ( _bstr_t pRetVal );
__declspec(implementation_key(1276)) SAFEARRAY * IVMPS_PhotoluminscenceModel::GetAvailableAbsorptionFiles ( );
__declspec(implementation_key(1277)) _bstr_t IVMPS_PhotoluminscenceModel::GetEmissionFile ( );
__declspec(implementation_key(1278)) void IVMPS_PhotoluminscenceModel::PutEmissionFile ( _bstr_t pRetVal );
__declspec(implementation_key(1279)) SAFEARRAY * IVMPS_PhotoluminscenceModel::GetAvailableEmissionFiles ( );
__declspec(implementation_key(1280)) _bstr_t IVMPS_PhotoluminscenceModel::GetExcitationFile ( );
__declspec(implementation_key(1281)) void IVMPS_PhotoluminscenceModel::PutExcitationFile ( _bstr_t pRetVal );
__declspec(implementation_key(1282)) SAFEARRAY * IVMPS_PhotoluminscenceModel::GetAvailableExcitationFiles ( );
__declspec(implementation_key(1283)) _bstr_t IVMPS_PhotoluminscenceModel::GetQuantumYield ( );
__declspec(implementation_key(1284)) void IVMPS_PhotoluminscenceModel::PutQuantumYield ( _bstr_t pRetVal );
__declspec(implementation_key(1285)) SAFEARRAY * IVMPS_PhotoluminscenceModel::GetAvailableQuantumYieldFiles ( );
__declspec(implementation_key(1286)) double IVMPS_PhotoluminscenceModel::GetParticleIndex ( );
__declspec(implementation_key(1287)) void IVMPS_PhotoluminscenceModel::PutParticleIndex ( double pRetVal );
__declspec(implementation_key(1288)) double IVMPS_PhotoluminscenceModel::GetParticleDensity ( );
__declspec(implementation_key(1289)) void IVMPS_PhotoluminscenceModel::PutParticleDensity ( double pRetVal );
__declspec(implementation_key(1290)) double IVMPS_PhotoluminscenceModel::GetParticleRadius ( );
__declspec(implementation_key(1291)) void IVMPS_PhotoluminscenceModel::PutParticleRadius ( double pRetVal );
__declspec(implementation_key(1292)) double IVMPS_PhotoluminscenceModel::GetThreshold ( );
__declspec(implementation_key(1293)) void IVMPS_PhotoluminscenceModel::PutThreshold ( double pRetVal );
__declspec(implementation_key(1294)) VARIANT_BOOL IVMPS_PhotoluminscenceModel::GetBasicAlgorithm ( );
__declspec(implementation_key(1295)) void IVMPS_PhotoluminscenceModel::PutBasicAlgorithm ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1296)) double IVMPS_PhotoluminscenceModel::GetPLMeanPath ( );
__declspec(implementation_key(1297)) void IVMPS_PhotoluminscenceModel::PutPLMeanPath ( double pRetVal );
__declspec(implementation_key(1298)) VARIANT_BOOL IVMPS_PhotoluminscenceModel::GetUseMieDensity ( );
__declspec(implementation_key(1299)) void IVMPS_PhotoluminscenceModel::PutUseMieDensity ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1300)) double IVMPS_PhotoluminscenceModel::GetMieMeanPath ( );
__declspec(implementation_key(1301)) void IVMPS_PhotoluminscenceModel::PutMieMeanPath ( double pRetVal );
__declspec(implementation_key(1302)) enum EfficiencySpectrumType IVMPS_PhotoluminscenceModel::GetEfficiencySpectrum ( );
__declspec(implementation_key(1303)) void IVMPS_PhotoluminscenceModel::PutEfficiencySpectrum ( enum EfficiencySpectrumType pRetVal );
__declspec(implementation_key(1304)) enum VolumePhysicsModelType IVolumePhysicsModelSettings::GetType ( );
__declspec(implementation_key(1305)) VARIANT_BOOL IVolumePhysicsModelSettings::GetIsValid ( );
__declspec(implementation_key(1306)) IVPMS_NonePtr IVolumePhysicsModelSettings::Get_S_None ( );
__declspec(implementation_key(1307)) IVMPS_AngleScatteringPtr IVolumePhysicsModelSettings::Get_S_AngleScattering ( );
__declspec(implementation_key(1308)) IVMPS_DLLDefinedScatteringPtr IVolumePhysicsModelSettings::Get_S_DLLDefinedScattering ( );
__declspec(implementation_key(1309)) IVMPS_PhotoluminscenceModelPtr IVolumePhysicsModelSettings::Get_S_PhotoluminescenceModel ( );
__declspec(implementation_key(1310)) VARIANT_BOOL INCEVolumePhysicsData::GetIsVolumePhysicsAvailable ( );
__declspec(implementation_key(1311)) enum VolumePhysicsModelType INCEVolumePhysicsData::GetModel ( );
__declspec(implementation_key(1312)) void INCEVolumePhysicsData::PutModel ( enum VolumePhysicsModelType pRetVal );
__declspec(implementation_key(1313)) IVolumePhysicsModelSettingsPtr INCEVolumePhysicsData::GetModelSettings ( );
__declspec(implementation_key(1314)) _bstr_t INCEVolumePhysicsData::GetWavelengthShift ( );
__declspec(implementation_key(1315)) void INCEVolumePhysicsData::PutWavelengthShift ( _bstr_t pRetVal );
__declspec(implementation_key(1316)) enum BirefringentMode IIMS_Birefringent::GetMode ( );
__declspec(implementation_key(1317)) void IIMS_Birefringent::PutMode ( enum BirefringentMode pRetVal );
__declspec(implementation_key(1318)) enum BirefringentReflections IIMS_Birefringent::GetReflections ( );
__declspec(implementation_key(1319)) void IIMS_Birefringent::PutReflections ( enum BirefringentReflections pRetVal );
__declspec(implementation_key(1320)) double IIMS_Birefringent::GetAx ( );
__declspec(implementation_key(1321)) void IIMS_Birefringent::PutAx ( double pRetVal );
__declspec(implementation_key(1322)) double IIMS_Birefringent::GetAy ( );
__declspec(implementation_key(1323)) void IIMS_Birefringent::PutAy ( double pRetVal );
__declspec(implementation_key(1324)) double IIMS_Birefringent::GetAz ( );
__declspec(implementation_key(1325)) void IIMS_Birefringent::PutAz ( double pRetVal );
__declspec(implementation_key(1326)) double IIMS_Birefringent::GetAxisLength ( );
__declspec(implementation_key(1327)) void IIMS_Birefringent::PutAxisLength ( double pRetVal );
__declspec(implementation_key(1328)) _bstr_t IIMS_GRIN::GetDLL ( );
__declspec(implementation_key(1329)) void IIMS_GRIN::PutDLL ( _bstr_t pRetVal );
__declspec(implementation_key(1330)) SAFEARRAY * IIMS_GRIN::GetAvailableDLLs ( );
__declspec(implementation_key(1331)) _bstr_t IIMS_GRIN::GetFile ( );
__declspec(implementation_key(1332)) void IIMS_GRIN::PutFile ( _bstr_t pRetVal );
__declspec(implementation_key(1333)) SAFEARRAY * IIMS_GRIN::GetAvailableFiles ( );
__declspec(implementation_key(1334)) VARIANT_BOOL IIMS_GRIN::GetUsesFile ( );
__declspec(implementation_key(1335)) double IIMS_GRIN::GetMaximumStepSize ( );
__declspec(implementation_key(1336)) void IIMS_GRIN::PutMaximumStepSize ( double pRetVal );
__declspec(implementation_key(1337)) long IIMS_GRIN::GetNumberOfParameters ( );
__declspec(implementation_key(1338)) _bstr_t IIMS_GRIN::GetParameterName ( long paramIdx );
__declspec(implementation_key(1339)) double IIMS_GRIN::GetParameterValue ( long paramIdx );
__declspec(implementation_key(1340)) VARIANT_BOOL IIMS_GRIN::SetParameterValue ( long paramIdx, double Value );
__declspec(implementation_key(1341)) enum NCEIndexType IIndexModelSettings::GetType ( );
__declspec(implementation_key(1342)) VARIANT_BOOL IIndexModelSettings::GetIsValid ( );
__declspec(implementation_key(1343)) IIMS_IsotropicPtr IIndexModelSettings::Get_S_Isotropic ( );
__declspec(implementation_key(1344)) IIMS_BirefringentPtr IIndexModelSettings::Get_S_Birefringent ( );
__declspec(implementation_key(1345)) IIMS_GRINPtr IIndexModelSettings::Get_S_GRIN ( );
__declspec(implementation_key(1346)) VARIANT_BOOL INCEIndexData::GetIsIndexAvailable ( );
__declspec(implementation_key(1347)) enum NCEIndexType INCEIndexData::GetIndexType ( );
__declspec(implementation_key(1348)) void INCEIndexData::PutIndexType ( enum NCEIndexType pRetVal );
__declspec(implementation_key(1349)) IIndexModelSettingsPtr INCEIndexData::GetModelSettings ( );
__declspec(implementation_key(1350)) VARIANT_BOOL INCEDiffractionData::GetIsDiffractionAvailable ( );
__declspec(implementation_key(1351)) enum DiffractionSplitType INCEDiffractionData::GetSplit ( );
__declspec(implementation_key(1352)) void INCEDiffractionData::PutSplit ( enum DiffractionSplitType pRetVal );
__declspec(implementation_key(1353)) _bstr_t INCEDiffractionData::GetDLL ( );
__declspec(implementation_key(1354)) void INCEDiffractionData::PutDLL ( _bstr_t pRetVal );
__declspec(implementation_key(1355)) VARIANT_BOOL INCEDiffractionData::GetIsDLLRequired ( );
__declspec(implementation_key(1356)) SAFEARRAY * INCEDiffractionData::GetAvailableDLLs ( );
__declspec(implementation_key(1357)) long INCEDiffractionData::GetStartOrder ( );
__declspec(implementation_key(1358)) void INCEDiffractionData::PutStartOrder ( long pRetVal );
__declspec(implementation_key(1359)) long INCEDiffractionData::GetStopOrder ( );
__declspec(implementation_key(1360)) void INCEDiffractionData::PutStopOrder ( long pRetVal );
__declspec(implementation_key(1361)) long INCEDiffractionData::GetNumberOfParameters ( );
__declspec(implementation_key(1362)) _bstr_t INCEDiffractionData::GetReflectParameterName ( long paramIdx );
__declspec(implementation_key(1363)) double INCEDiffractionData::GetReflectParameterValue ( long paramIdx );
__declspec(implementation_key(1364)) VARIANT_BOOL INCEDiffractionData::SetReflectParameterValue ( long paramIdx, double Value );
__declspec(implementation_key(1365)) _bstr_t INCEDiffractionData::GetTransmitParamaterName ( long paramIdx );
__declspec(implementation_key(1366)) double INCEDiffractionData::GetTransmitParameterValue ( long paramIdx );
__declspec(implementation_key(1367)) VARIANT_BOOL INCEDiffractionData::SetTransmitParameterValue ( long paramIdx, double Value );
__declspec(implementation_key(1368)) VARIANT_BOOL INCECADData::GetIsCADAvailable ( );
__declspec(implementation_key(1369)) VARIANT_BOOL INCECADData::GetHasChordTolerance ( );
__declspec(implementation_key(1370)) double INCECADData::GetChordTolerance ( );
__declspec(implementation_key(1371)) void INCECADData::PutChordTolerance ( double pRetVal );
__declspec(implementation_key(1372)) VARIANT_BOOL INCECADData::GetHasSurfaceTolerance ( );
__declspec(implementation_key(1373)) long INCECADData::GetSurfaceTolerance ( );
__declspec(implementation_key(1374)) void INCECADData::PutSurfaceTolerance ( long pRetVal );
__declspec(implementation_key(1375)) VARIANT_BOOL INCECADData::GetHasFaceParameters ( );
__declspec(implementation_key(1376)) double INCECADData::GetFaceAngle ( );
__declspec(implementation_key(1377)) void INCECADData::PutFaceAngle ( double pRetVal );
__declspec(implementation_key(1378)) long INCECADData::GetFaceMode ( );
__declspec(implementation_key(1379)) void INCECADData::PutFaceMode ( long pRetVal );
__declspec(implementation_key(1380)) VARIANT_BOOL INCECADData::GetHasMergeSurfaces ( );
__declspec(implementation_key(1381)) VARIANT_BOOL INCECADData::GetMergeSurfaces ( );
__declspec(implementation_key(1382)) void INCECADData::PutMergeSurfaces ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1383)) VARIANT_BOOL INCECADData::GetHasFaceData ( );
__declspec(implementation_key(1384)) long INCECADData::GetNumberOfSurfaces ( );
__declspec(implementation_key(1385)) long INCECADData::GetSurfaceFace ( long surfaceIdx );
__declspec(implementation_key(1386)) VARIANT_BOOL INCECADData::SetSurfaceFace ( long surfaceIdx, long face );
__declspec(implementation_key(1387)) _bstr_t INCECADData::GetSurfaceName ( long surfaceIdx );
__declspec(implementation_key(1388)) VARIANT_BOOL INCECADData::SetSurfaceName ( long surfaceIdx, _bstr_t name );
__declspec(implementation_key(1389)) VARIANT_BOOL INCECADData::GetHasPartData ( );
__declspec(implementation_key(1390)) long INCECADData::GetNumberOfConfigurations ( );
__declspec(implementation_key(1391)) long INCECADData::GetCurrentConfiguration ( );
__declspec(implementation_key(1392)) void INCECADData::PutCurrentConfiguration ( long pRetVal );
__declspec(implementation_key(1393)) _bstr_t INCECADData::GetConfigurationName ( long configIdx );
__declspec(implementation_key(1394)) long INCECADData::GetNumberOfParts ( );
__declspec(implementation_key(1395)) _bstr_t INCECADData::GetPartName ( long partIdx );
__declspec(implementation_key(1396)) VARIANT_BOOL INCECADData::GetPartExposed ( long partIdx );
__declspec(implementation_key(1397)) VARIANT_BOOL INCECADData::SetPartExposed ( long partIdx, VARIANT_BOOL exposed );
__declspec(implementation_key(1398)) VARIANT_BOOL INCECADData::SetAllPartsExposed ( VARIANT_BOOL exposed );
__declspec(implementation_key(1399)) long ISolveSurfacePickup::GetSurface ( );
__declspec(implementation_key(1400)) void ISolveSurfacePickup::PutSurface ( long pRetVal );
__declspec(implementation_key(1401)) double ISolveSurfacePickup::GetScaleFactor ( );
__declspec(implementation_key(1402)) void ISolveSurfacePickup::PutScaleFactor ( double pRetVal );
__declspec(implementation_key(1403)) VARIANT_BOOL ISolveSurfacePickup::GetSupportsScale ( );
__declspec(implementation_key(1404)) double ISolveSurfacePickup::GetOffset ( );
__declspec(implementation_key(1405)) void ISolveSurfacePickup::PutOffset ( double pRetVal );
__declspec(implementation_key(1406)) VARIANT_BOOL ISolveSurfacePickup::GetSupportsOffset ( );
__declspec(implementation_key(1407)) enum SurfaceColumn ISolveSurfacePickup::GetColumn ( );
__declspec(implementation_key(1408)) void ISolveSurfacePickup::PutColumn ( enum SurfaceColumn pRetVal );
__declspec(implementation_key(1409)) VARIANT_BOOL ISolveData::GetIsValid ( );
__declspec(implementation_key(1410)) enum SolveType ISolveData::GetType ( );
__declspec(implementation_key(1411)) ISolveNonePtr ISolveData::Get_S_None ( );
__declspec(implementation_key(1412)) ISolveFixedPtr ISolveData::Get_S_Fixed ( );
__declspec(implementation_key(1413)) ISolveVariablePtr ISolveData::Get_S_Variable ( );
__declspec(implementation_key(1414)) ISolveSurfacePickupPtr ISolveData::Get_S_SurfacePickup ( );
__declspec(implementation_key(1415)) ISolveZPLMacroPtr ISolveData::Get_S_ZPLMacro ( );
__declspec(implementation_key(1416)) ISolveMarginalRayAnglePtr ISolveData::Get_S_MarginalRayAngle ( );
__declspec(implementation_key(1417)) ISolveMarginalRayHeightPtr ISolveData::Get_S_MarginalRayHeight ( );
__declspec(implementation_key(1418)) ISolveChiefRayAnglePtr ISolveData::Get_S_ChiefRayAngle ( );
__declspec(implementation_key(1419)) ISolveMarginalRayNormalPtr ISolveData::Get_S_MarginalRayNormal ( );
__declspec(implementation_key(1420)) ISolveChiefRayNormalPtr ISolveData::Get_S_ChiefRayNormal ( );
__declspec(implementation_key(1421)) ISolveAplanaticPtr ISolveData::Get_S_Aplanatic ( );
__declspec(implementation_key(1422)) ISolveElementPowerPtr ISolveData::Get_S_ElementPower ( );
__declspec(implementation_key(1423)) ISolveCocentricSurfacePtr ISolveData::Get_S_CocentricSurface ( );
__declspec(implementation_key(1424)) ISolveCocentricRadiusPtr ISolveData::Get_S_CocentricRadius ( );
__declspec(implementation_key(1425)) ISolveFNumberPtr ISolveData::Get_S_FNumber ( );
__declspec(implementation_key(1426)) ISolveChiefRayHeightPtr ISolveData::Get_S_ChiefRayHeight ( );
__declspec(implementation_key(1427)) ISolveEdgeThicknessPtr ISolveData::Get_S_EdgeThickness ( );
__declspec(implementation_key(1428)) ISolveOpticalPathDifferencePtr ISolveData::Get_S_OpticalPathDifference ( );
__declspec(implementation_key(1429)) ISolvePositionPtr ISolveData::Get_S_Position ( );
__declspec(implementation_key(1430)) ISolveCompensatorPtr ISolveData::Get_S_Compensator ( );
__declspec(implementation_key(1431)) ISolveCenterOfCurvaturePtr ISolveData::Get_S_CenterOfCurvature ( );
__declspec(implementation_key(1432)) ISolvePupilPositionPtr ISolveData::Get_S_PupilPosition ( );
__declspec(implementation_key(1433)) ISolveMaterialModelPtr ISolveData::Get_S_MaterialModel ( );
__declspec(implementation_key(1434)) ISolveMaterialSubstitutePtr ISolveData::Get_S_MaterialSubstitute ( );
__declspec(implementation_key(1435)) ISolveMaterialOffsetPtr ISolveData::Get_S_MaterialOffset ( );
__declspec(implementation_key(1436)) ISolveAutomaticPtr ISolveData::Get_S_Automatic ( );
__declspec(implementation_key(1437)) ISolveMaximumPtr ISolveData::Get_S_Maximum ( );
__declspec(implementation_key(1438)) ISolvePickupChiefRayPtr ISolveData::Get_S_PickupChiefRay ( );
__declspec(implementation_key(1439)) ISolveObjectPickupPtr ISolveData::Get_S_ObjectPickup ( );
__declspec(implementation_key(1440)) ISolveConfigPickupPtr ISolveData::Get_S_ConfigPickup ( );
__declspec(implementation_key(1441)) ISolveThermalPickupPtr ISolveData::Get_S_ThermalPickup ( );
__declspec(implementation_key(1442)) VARIANT_BOOL ISurfaceTypeSettings::GetIsValid ( );
__declspec(implementation_key(1443)) enum SurfaceType ISurfaceTypeSettings::GetType ( );
__declspec(implementation_key(1444)) VARIANT_BOOL ISurfaceTypeSettings::GetRequiresFile ( );
__declspec(implementation_key(1445)) _bstr_t ISurfaceTypeSettings::GetfileName ( );
__declspec(implementation_key(1446)) void ISurfaceTypeSettings::PutfileName ( _bstr_t pRetVal );
__declspec(implementation_key(1447)) SAFEARRAY * ISurfaceTypeSettings::GetFileNames ( );
__declspec(implementation_key(1448)) long ISurfaceBlackBoxLens::GetNumberOfAvailableBlackBoxLensFilenames ( );
__declspec(implementation_key(1449)) _bstr_t ISurfaceBlackBoxLens::GetBlackBoxLensFilenameAt ( long idx );
__declspec(implementation_key(1450)) _bstr_t ISurfaceBlackBoxLens::GetBlackBoxLensFilename ( );
__declspec(implementation_key(1451)) void ISurfaceBlackBoxLens::PutBlackBoxLensFilename ( _bstr_t pRetVal );
__declspec(implementation_key(1452)) VARIANT_BOOL ILDEDrawData::GetHideRaysToThisSurface ( );
__declspec(implementation_key(1453)) void ILDEDrawData::PutHideRaysToThisSurface ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1454)) VARIANT_BOOL ILDEDrawData::GetSkipRaysToThisSurface ( );
__declspec(implementation_key(1455)) void ILDEDrawData::PutSkipRaysToThisSurface ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1456)) VARIANT_BOOL ILDEDrawData::GetDoNotDrawThisSurface ( );
__declspec(implementation_key(1457)) void ILDEDrawData::PutDoNotDrawThisSurface ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1458)) VARIANT_BOOL ILDEDrawData::GetDoNotDrawEdgesFromThisSurface ( );
__declspec(implementation_key(1459)) void ILDEDrawData::PutDoNotDrawEdgesFromThisSurface ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1460)) VARIANT_BOOL ILDEDrawData::GetDrawLocalAxis ( );
__declspec(implementation_key(1461)) void ILDEDrawData::PutDrawLocalAxis ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1462)) enum SurfaceEdgeDraw ILDEDrawData::GetDrawEdgesAs ( );
__declspec(implementation_key(1463)) void ILDEDrawData::PutDrawEdgesAs ( enum SurfaceEdgeDraw pRetVal );
__declspec(implementation_key(1464)) VARIANT_BOOL ILDEDrawData::GetHasMirrorSettings ( );
__declspec(implementation_key(1465)) enum SubstrateType ILDEDrawData::GetMirrorSubstrate ( );
__declspec(implementation_key(1466)) void ILDEDrawData::PutMirrorSubstrate ( enum SubstrateType pRetVal );
__declspec(implementation_key(1467)) double ILDEDrawData::GetMirrorThickness ( );
__declspec(implementation_key(1468)) void ILDEDrawData::PutMirrorThickness ( double pRetVal );
__declspec(implementation_key(1469)) double ISurfaceApertureCircular::GetMinimumRadius ( );
__declspec(implementation_key(1470)) void ISurfaceApertureCircular::PutMinimumRadius ( double pRetVal );
__declspec(implementation_key(1471)) double ISurfaceApertureCircular::GetMaximumRadius ( );
__declspec(implementation_key(1472)) void ISurfaceApertureCircular::PutMaximumRadius ( double pRetVal );
__declspec(implementation_key(1473)) double ISurfaceApertureCircular::GetApertureXDecenter ( );
__declspec(implementation_key(1474)) void ISurfaceApertureCircular::PutApertureXDecenter ( double pRetVal );
__declspec(implementation_key(1475)) double ISurfaceApertureCircular::GetApertureYDecenter ( );
__declspec(implementation_key(1476)) void ISurfaceApertureCircular::PutApertureYDecenter ( double pRetVal );
__declspec(implementation_key(1477)) double ISurfaceApertureUser::GetUDAScale ( );
__declspec(implementation_key(1478)) void ISurfaceApertureUser::PutUDAScale ( double pRetVal );
__declspec(implementation_key(1479)) double ISurfaceApertureUser::GetApertureXDecenter ( );
__declspec(implementation_key(1480)) void ISurfaceApertureUser::PutApertureXDecenter ( double pRetVal );
__declspec(implementation_key(1481)) double ISurfaceApertureUser::GetApertureYDecenter ( );
__declspec(implementation_key(1482)) void ISurfaceApertureUser::PutApertureYDecenter ( double pRetVal );
__declspec(implementation_key(1483)) _bstr_t ISurfaceApertureUser::GetApertureFile ( );
__declspec(implementation_key(1484)) void ISurfaceApertureUser::PutApertureFile ( _bstr_t pRetVal );
__declspec(implementation_key(1485)) SAFEARRAY * ISurfaceApertureUser::GetAvailableFiles ( );
__declspec(implementation_key(1486)) double ISurfaceApertureSpider::GetWidthOfArms ( );
__declspec(implementation_key(1487)) void ISurfaceApertureSpider::PutWidthOfArms ( double pRetVal );
__declspec(implementation_key(1488)) long ISurfaceApertureSpider::GetNumberOfArms ( );
__declspec(implementation_key(1489)) void ISurfaceApertureSpider::PutNumberOfArms ( long pRetVal );
__declspec(implementation_key(1490)) double ISurfaceApertureSpider::GetApertureXDecenter ( );
__declspec(implementation_key(1491)) void ISurfaceApertureSpider::PutApertureXDecenter ( double pRetVal );
__declspec(implementation_key(1492)) double ISurfaceApertureSpider::GetApertureYDecenter ( );
__declspec(implementation_key(1493)) void ISurfaceApertureSpider::PutApertureYDecenter ( double pRetVal );
__declspec(implementation_key(1494)) double ISurfaceApertureRectangular::GetXHalfWidth ( );
__declspec(implementation_key(1495)) void ISurfaceApertureRectangular::PutXHalfWidth ( double pRetVal );
__declspec(implementation_key(1496)) double ISurfaceApertureRectangular::GetYHalfWidth ( );
__declspec(implementation_key(1497)) void ISurfaceApertureRectangular::PutYHalfWidth ( double pRetVal );
__declspec(implementation_key(1498)) double ISurfaceApertureRectangular::GetApertureXDecenter ( );
__declspec(implementation_key(1499)) void ISurfaceApertureRectangular::PutApertureXDecenter ( double pRetVal );
__declspec(implementation_key(1500)) double ISurfaceApertureRectangular::GetApertureYDecenter ( );
__declspec(implementation_key(1501)) void ISurfaceApertureRectangular::PutApertureYDecenter ( double pRetVal );
__declspec(implementation_key(1502)) double ISurfaceApertureElliptical::GetXHalfWidth ( );
__declspec(implementation_key(1503)) void ISurfaceApertureElliptical::PutXHalfWidth ( double pRetVal );
__declspec(implementation_key(1504)) double ISurfaceApertureElliptical::GetYHalfWidth ( );
__declspec(implementation_key(1505)) void ISurfaceApertureElliptical::PutYHalfWidth ( double pRetVal );
__declspec(implementation_key(1506)) double ISurfaceApertureElliptical::GetApertureXDecenter ( );
__declspec(implementation_key(1507)) void ISurfaceApertureElliptical::PutApertureXDecenter ( double pRetVal );
__declspec(implementation_key(1508)) double ISurfaceApertureElliptical::GetApertureYDecenter ( );
__declspec(implementation_key(1509)) void ISurfaceApertureElliptical::PutApertureYDecenter ( double pRetVal );
__declspec(implementation_key(1510)) enum SurfaceApertureTypes ISurfaceApertureType::GetType ( );
__declspec(implementation_key(1511)) VARIANT_BOOL ISurfaceApertureType::GetIsReadOnly ( );
__declspec(implementation_key(1512)) ISurfaceApertureNonePtr ISurfaceApertureType::Get_S_None ( );
__declspec(implementation_key(1513)) ISurfaceApertureCircularPtr ISurfaceApertureType::Get_S_CircularAperture ( );
__declspec(implementation_key(1514)) ISurfaceApertureCircularPtr ISurfaceApertureType::Get_S_CircularObscuration ( );
__declspec(implementation_key(1515)) ISurfaceApertureSpiderPtr ISurfaceApertureType::Get_S_Spider ( );
__declspec(implementation_key(1516)) ISurfaceApertureRectangularPtr ISurfaceApertureType::Get_S_RectangularAperture ( );
__declspec(implementation_key(1517)) ISurfaceApertureRectangularPtr ISurfaceApertureType::Get_S_RectangularObscuration ( );
__declspec(implementation_key(1518)) ISurfaceApertureEllipticalPtr ISurfaceApertureType::Get_S_EllipticalAperture ( );
__declspec(implementation_key(1519)) ISurfaceApertureEllipticalPtr ISurfaceApertureType::Get_S_EllipticalObscuration ( );
__declspec(implementation_key(1520)) ISurfaceApertureUserPtr ISurfaceApertureType::Get_S_UserAperture ( );
__declspec(implementation_key(1521)) ISurfaceApertureUserPtr ISurfaceApertureType::Get_S_UserObscuration ( );
__declspec(implementation_key(1522)) ISurfaceApertureFloatingPtr ISurfaceApertureType::Get_S_FloatingAperture ( );
__declspec(implementation_key(1523)) long ILDEApertureData::GetPickupFrom ( );
__declspec(implementation_key(1524)) void ILDEApertureData::PutPickupFrom ( long pRetVal );
__declspec(implementation_key(1525)) HRESULT ILDEApertureData::SetPickupNone ( );
__declspec(implementation_key(1526)) VARIANT_BOOL ILDEApertureData::GetIsPickedUp ( );
__declspec(implementation_key(1527)) enum SurfaceApertureTypes ILDEApertureData::GetCurrentType ( );
__declspec(implementation_key(1528)) ISurfaceApertureTypePtr ILDEApertureData::GetCurrentTypeSettings ( );
__declspec(implementation_key(1529)) ISurfaceApertureTypePtr ILDEApertureData::CreateApertureTypeSettings ( enum SurfaceApertureTypes Type );
__declspec(implementation_key(1530)) VARIANT_BOOL ILDEApertureData::ChangeApertureTypeSettings ( struct ISurfaceApertureType * settings );
__declspec(implementation_key(1531)) VARIANT_BOOL ILDEApertureData::GetDisableClearSemiDiameterMarginsForThisSurface ( );
__declspec(implementation_key(1532)) void ILDEApertureData::PutDisableClearSemiDiameterMarginsForThisSurface ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1533)) double ISurfaceScatteringLambertian::GetScatterFraction ( );
__declspec(implementation_key(1534)) void ISurfaceScatteringLambertian::PutScatterFraction ( double pRetVal );
__declspec(implementation_key(1535)) double ISurfaceScatteringGaussian::GetScatterFraction ( );
__declspec(implementation_key(1536)) void ISurfaceScatteringGaussian::PutScatterFraction ( double pRetVal );
__declspec(implementation_key(1537)) double ISurfaceScatteringGaussian::GetSigma ( );
__declspec(implementation_key(1538)) void ISurfaceScatteringGaussian::PutSigma ( double pRetVal );
__declspec(implementation_key(1539)) _bstr_t ISurfaceScatteringABg::GetABgName ( );
__declspec(implementation_key(1540)) void ISurfaceScatteringABg::PutABgName ( _bstr_t pRetVal );
__declspec(implementation_key(1541)) SAFEARRAY * ISurfaceScatteringABg::GetAvailableABgNames ( );
__declspec(implementation_key(1542)) _bstr_t ISurfaceScatteringABgFile::GetfileName ( );
__declspec(implementation_key(1543)) void ISurfaceScatteringABgFile::PutfileName ( _bstr_t pRetVal );
__declspec(implementation_key(1544)) SAFEARRAY * ISurfaceScatteringABgFile::GetAvailableFileNames ( );
__declspec(implementation_key(1545)) _bstr_t ISurfaceScatteringBSDF::GetfileName ( );
__declspec(implementation_key(1546)) void ISurfaceScatteringBSDF::PutfileName ( _bstr_t pRetVal );
__declspec(implementation_key(1547)) SAFEARRAY * ISurfaceScatteringBSDF::GetAvailableFileNames ( );
__declspec(implementation_key(1548)) double ISurfaceScatteringBSDF::GetScatterFraction ( );
__declspec(implementation_key(1549)) void ISurfaceScatteringBSDF::PutScatterFraction ( double pRetVal );
__declspec(implementation_key(1550)) double ISurfaceScatteringBSDF::GetAngle ( );
__declspec(implementation_key(1551)) void ISurfaceScatteringBSDF::PutAngle ( double pRetVal );
__declspec(implementation_key(1552)) _bstr_t ISurfaceScatteringUser::GetDLLName ( );
__declspec(implementation_key(1553)) void ISurfaceScatteringUser::PutDLLName ( _bstr_t pRetVal );
__declspec(implementation_key(1554)) SAFEARRAY * ISurfaceScatteringUser::GetAvailableDLLNames ( );
__declspec(implementation_key(1555)) long ISurfaceScatteringUser::GetNumberOfParameters ( );
__declspec(implementation_key(1556)) _bstr_t ISurfaceScatteringUser::GetParameterName ( long paramIdx );
__declspec(implementation_key(1557)) double ISurfaceScatteringUser::GetParameterValue ( long paramIdx );
__declspec(implementation_key(1558)) VARIANT_BOOL ISurfaceScatteringUser::SetParameterValue ( long paramIdx, double Value );
__declspec(implementation_key(1559)) double ISurfaceScatteringCatalog::GetAngle ( );
__declspec(implementation_key(1560)) void ISurfaceScatteringCatalog::PutAngle ( double pRetVal );
__declspec(implementation_key(1561)) _bstr_t ISurfaceScatteringCatalog::GetFile ( );
__declspec(implementation_key(1562)) enum ReflectTransmitCode ISurfaceScatteringCatalog::SetFile ( _bstr_t File );
__declspec(implementation_key(1563)) SAFEARRAY * ISurfaceScatteringCatalog::GetAvailableFiles ( );
__declspec(implementation_key(1564)) enum SampleSides ISurfaceScatteringCatalog::GetSampleSide ( );
__declspec(implementation_key(1565)) void ISurfaceScatteringCatalog::PutSampleSide ( enum SampleSides pRetVal );
__declspec(implementation_key(1566)) SAFEARRAY * ISurfaceScatteringCatalog::GetSampleSides ( );
__declspec(implementation_key(1567)) enum Samplings ISurfaceScatteringCatalog::GetSampling ( );
__declspec(implementation_key(1568)) void ISurfaceScatteringCatalog::PutSampling ( enum Samplings pRetVal );
__declspec(implementation_key(1569)) enum SurfaceScatteringTypes ISurfaceScatteringType::GetType ( );
__declspec(implementation_key(1570)) ISurfaceScatteringNonePtr ISurfaceScatteringType::Get_S_None ( );
__declspec(implementation_key(1571)) ISurfaceScatteringLambertianPtr ISurfaceScatteringType::Get_S_Lambertian ( );
__declspec(implementation_key(1572)) ISurfaceScatteringGaussianPtr ISurfaceScatteringType::Get_S_Gaussian ( );
__declspec(implementation_key(1573)) ISurfaceScatteringABgPtr ISurfaceScatteringType::Get_S_ABg ( );
__declspec(implementation_key(1574)) ISurfaceScatteringABgFilePtr ISurfaceScatteringType::Get_S_ABgFile ( );
__declspec(implementation_key(1575)) ISurfaceScatteringBSDFPtr ISurfaceScatteringType::Get_S_BSDF ( );
__declspec(implementation_key(1576)) ISurfaceScatteringUserPtr ISurfaceScatteringType::Get_S_User ( );
__declspec(implementation_key(1577)) ISurfaceScatteringCatalogPtr ISurfaceScatteringType::Get_S_Catalog ( );
__declspec(implementation_key(1578)) enum SurfaceScatteringTypes ILDEScatteringData::GetCurrentType ( );
__declspec(implementation_key(1579)) ISurfaceScatteringTypePtr ILDEScatteringData::GetCurrentTypeSettings ( );
__declspec(implementation_key(1580)) ISurfaceScatteringTypePtr ILDEScatteringData::CreateScatteringTypeSettings ( enum SurfaceScatteringTypes Type );
__declspec(implementation_key(1581)) VARIANT_BOOL ILDEScatteringData::ChangeScatteringTypeSettings ( struct ISurfaceScatteringType * settings );
__declspec(implementation_key(1582)) enum TiltDecenterOrderType ILDETiltDecenterData::GetBeforeSurfaceOrder ( );
__declspec(implementation_key(1583)) void ILDETiltDecenterData::PutBeforeSurfaceOrder ( enum TiltDecenterOrderType pRetVal );
__declspec(implementation_key(1584)) double ILDETiltDecenterData::GetBeforeSurfaceDecenterX ( );
__declspec(implementation_key(1585)) void ILDETiltDecenterData::PutBeforeSurfaceDecenterX ( double pRetVal );
__declspec(implementation_key(1586)) double ILDETiltDecenterData::GetBeforeSurfaceDecenterY ( );
__declspec(implementation_key(1587)) void ILDETiltDecenterData::PutBeforeSurfaceDecenterY ( double pRetVal );
__declspec(implementation_key(1588)) double ILDETiltDecenterData::GetBeforeSurfaceTiltX ( );
__declspec(implementation_key(1589)) void ILDETiltDecenterData::PutBeforeSurfaceTiltX ( double pRetVal );
__declspec(implementation_key(1590)) double ILDETiltDecenterData::GetBeforeSurfaceTiltY ( );
__declspec(implementation_key(1591)) void ILDETiltDecenterData::PutBeforeSurfaceTiltY ( double pRetVal );
__declspec(implementation_key(1592)) double ILDETiltDecenterData::GetBeforeSurfaceTiltZ ( );
__declspec(implementation_key(1593)) void ILDETiltDecenterData::PutBeforeSurfaceTiltZ ( double pRetVal );
__declspec(implementation_key(1594)) enum TiltDecenterPickupType ILDETiltDecenterData::GetAfterSurfaceMode ( );
__declspec(implementation_key(1595)) long ILDETiltDecenterData::GetAfterSurfaceModeSurface ( );
__declspec(implementation_key(1596)) VARIANT_BOOL ILDETiltDecenterData::GetAfterSurfaceModeSurfaceIsThis ( );
__declspec(implementation_key(1597)) HRESULT ILDETiltDecenterData::SetAfterSurfaceModeExplicit ( );
__declspec(implementation_key(1598)) VARIANT_BOOL ILDETiltDecenterData::SetAfterSurfaceModePickup ( long FromSurface );
__declspec(implementation_key(1599)) VARIANT_BOOL ILDETiltDecenterData::SetAfterSurfaceModeReverse ( long FromSurface );
__declspec(implementation_key(1600)) VARIANT_BOOL ILDETiltDecenterData::SetAfterSurfaceModePickupThis ( );
__declspec(implementation_key(1601)) VARIANT_BOOL ILDETiltDecenterData::SetAfterSurfaceModeReverseThis ( );
__declspec(implementation_key(1602)) enum TiltDecenterOrderType ILDETiltDecenterData::GetAfterSurfaceOrder ( );
__declspec(implementation_key(1603)) void ILDETiltDecenterData::PutAfterSurfaceOrder ( enum TiltDecenterOrderType pRetVal );
__declspec(implementation_key(1604)) double ILDETiltDecenterData::GetAfterSurfaceDecenterX ( );
__declspec(implementation_key(1605)) void ILDETiltDecenterData::PutAfterSurfaceDecenterX ( double pRetVal );
__declspec(implementation_key(1606)) double ILDETiltDecenterData::GetAfterSurfaceDecenterY ( );
__declspec(implementation_key(1607)) void ILDETiltDecenterData::PutAfterSurfaceDecenterY ( double pRetVal );
__declspec(implementation_key(1608)) double ILDETiltDecenterData::GetAfterSurfaceTiltX ( );
__declspec(implementation_key(1609)) void ILDETiltDecenterData::PutAfterSurfaceTiltX ( double pRetVal );
__declspec(implementation_key(1610)) double ILDETiltDecenterData::GetAfterSurfaceTiltY ( );
__declspec(implementation_key(1611)) void ILDETiltDecenterData::PutAfterSurfaceTiltY ( double pRetVal );
__declspec(implementation_key(1612)) double ILDETiltDecenterData::GetAfterSurfaceTiltZ ( );
__declspec(implementation_key(1613)) void ILDETiltDecenterData::PutAfterSurfaceTiltZ ( double pRetVal );
__declspec(implementation_key(1614)) VARIANT_BOOL ILDETiltDecenterData::GetBeforeAfterSurfaceEnabled ( );
__declspec(implementation_key(1615)) VARIANT_BOOL ILDETiltDecenterData::GetCoordinateReturnEnabled ( );
__declspec(implementation_key(1616)) enum CoordinateReturnType ILDETiltDecenterData::GetCoordinateReturn ( );
__declspec(implementation_key(1617)) void ILDETiltDecenterData::PutCoordinateReturn ( enum CoordinateReturnType pRetVal );
__declspec(implementation_key(1618)) long ILDETiltDecenterData::GetCoordinateReturnToSurface ( );
__declspec(implementation_key(1619)) void ILDETiltDecenterData::PutCoordinateReturnToSurface ( long pRetVal );
__declspec(implementation_key(1620)) VARIANT_BOOL ILDEPhysicalOpticsData::GetUseRaysToPropagateToNextSurface ( );
__declspec(implementation_key(1621)) void ILDEPhysicalOpticsData::PutUseRaysToPropagateToNextSurface ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1622)) VARIANT_BOOL ILDEPhysicalOpticsData::GetDoNotRescaleBeamSizeUsingRayData ( );
__declspec(implementation_key(1623)) void ILDEPhysicalOpticsData::PutDoNotRescaleBeamSizeUsingRayData ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1624)) VARIANT_BOOL ILDEPhysicalOpticsData::GetUseAngularSpectrumPropagator ( );
__declspec(implementation_key(1625)) void ILDEPhysicalOpticsData::PutUseAngularSpectrumPropagator ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1626)) VARIANT_BOOL ILDEPhysicalOpticsData::GetDrawThisLensOnShadedModel ( );
__declspec(implementation_key(1627)) void ILDEPhysicalOpticsData::PutDrawThisLensOnShadedModel ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1628)) VARIANT_BOOL ILDEPhysicalOpticsData::GetReComputePilotBeamParameters ( );
__declspec(implementation_key(1629)) void ILDEPhysicalOpticsData::PutReComputePilotBeamParameters ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1630)) VARIANT_BOOL ILDEPhysicalOpticsData::GetUseXaxisReference ( );
__declspec(implementation_key(1631)) void ILDEPhysicalOpticsData::PutUseXaxisReference ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1632)) VARIANT_BOOL ILDEPhysicalOpticsData::GetResampleAfterRefraction ( );
__declspec(implementation_key(1633)) void ILDEPhysicalOpticsData::PutResampleAfterRefraction ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1634)) VARIANT_BOOL ILDEPhysicalOpticsData::GetAutoResample ( );
__declspec(implementation_key(1635)) void ILDEPhysicalOpticsData::PutAutoResample ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1636)) enum XYSampling ILDEPhysicalOpticsData::GetXSampling ( );
__declspec(implementation_key(1637)) void ILDEPhysicalOpticsData::PutXSampling ( enum XYSampling pRetVal );
__declspec(implementation_key(1638)) enum XYSampling ILDEPhysicalOpticsData::GetYSampling ( );
__declspec(implementation_key(1639)) void ILDEPhysicalOpticsData::PutYSampling ( enum XYSampling pRetVal );
__declspec(implementation_key(1640)) double ILDEPhysicalOpticsData::GetXWidth ( );
__declspec(implementation_key(1641)) void ILDEPhysicalOpticsData::PutXWidth ( double pRetVal );
__declspec(implementation_key(1642)) double ILDEPhysicalOpticsData::GetYWidth ( );
__declspec(implementation_key(1643)) void ILDEPhysicalOpticsData::PutYWidth ( double pRetVal );
__declspec(implementation_key(1644)) enum PilotRadiusMode ILDEPhysicalOpticsData::GetOutputPilotRadius ( );
__declspec(implementation_key(1645)) void ILDEPhysicalOpticsData::PutOutputPilotRadius ( enum PilotRadiusMode pRetVal );
__declspec(implementation_key(1646)) double ILDEPhysicalOpticsData::GetXRadius ( );
__declspec(implementation_key(1647)) void ILDEPhysicalOpticsData::PutXRadius ( double pRetVal );
__declspec(implementation_key(1648)) double ILDEPhysicalOpticsData::GetYRadius ( );
__declspec(implementation_key(1649)) void ILDEPhysicalOpticsData::PutYRadius ( double pRetVal );
__declspec(implementation_key(1650)) long ILDECoatingSettings::GetLayer ( );
__declspec(implementation_key(1651)) double ILDECoatingSettings::GetThicknessMultiplier ( );
__declspec(implementation_key(1652)) void ILDECoatingSettings::PutThicknessMultiplier ( double pRetVal );
__declspec(implementation_key(1653)) enum CoatingStatusType ILDECoatingSettings::GetThicknessStatus ( );
__declspec(implementation_key(1654)) long ILDECoatingSettings::GetThicknessPickupFrom ( );
__declspec(implementation_key(1655)) HRESULT ILDECoatingSettings::SetThicknessStatusFixed ( );
__declspec(implementation_key(1656)) HRESULT ILDECoatingSettings::SetThicknessStatusVariable ( );
__declspec(implementation_key(1657)) VARIANT_BOOL ILDECoatingSettings::SetThicknessStatusPickup ( long fromLayer );
__declspec(implementation_key(1658)) double ILDECoatingSettings::GetIndexOffset ( );
__declspec(implementation_key(1659)) void ILDECoatingSettings::PutIndexOffset ( double pRetVal );
__declspec(implementation_key(1660)) enum CoatingStatusType ILDECoatingSettings::GetIndexStatus ( );
__declspec(implementation_key(1661)) long ILDECoatingSettings::GetIndexPickupFrom ( );
__declspec(implementation_key(1662)) HRESULT ILDECoatingSettings::SetIndexStatusFixed ( );
__declspec(implementation_key(1663)) HRESULT ILDECoatingSettings::SetIndexStatusVariable ( );
__declspec(implementation_key(1664)) VARIANT_BOOL ILDECoatingSettings::SetIndexStatusPickup ( long fromLayer );
__declspec(implementation_key(1665)) double ILDECoatingSettings::GetExtinctionOffset ( );
__declspec(implementation_key(1666)) void ILDECoatingSettings::PutExtinctionOffset ( double pRetVal );
__declspec(implementation_key(1667)) enum CoatingStatusType ILDECoatingSettings::GetExtinctionStatus ( );
__declspec(implementation_key(1668)) long ILDECoatingSettings::GetExtinctionPickupFrom ( );
__declspec(implementation_key(1669)) HRESULT ILDECoatingSettings::SetExtinctionStatusFixed ( );
__declspec(implementation_key(1670)) HRESULT ILDECoatingSettings::SetExtinctionStatusVariable ( );
__declspec(implementation_key(1671)) VARIANT_BOOL ILDECoatingSettings::SetExtinctionStatusPickup ( long fromLayer );
__declspec(implementation_key(1672)) _bstr_t ILDECoatingData::GetCoating ( );
__declspec(implementation_key(1673)) void ILDECoatingData::PutCoating ( _bstr_t pRetVal );
__declspec(implementation_key(1674)) SAFEARRAY * ILDECoatingData::GetAvailableCoatings ( );
__declspec(implementation_key(1675)) VARIANT_BOOL ILDECoatingData::GetUseLayerMultiplierAndOffsets ( );
__declspec(implementation_key(1676)) void ILDECoatingData::PutUseLayerMultiplierAndOffsets ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1677)) long ILDECoatingData::GetNumberOfLayers ( );
__declspec(implementation_key(1678)) ILDECoatingSettingsPtr ILDECoatingData::GetLayerSettings ( long Layer );
__declspec(implementation_key(1679)) VARIANT_BOOL ILDECoatingData::SetLayerSettings ( long Layer, struct ILDECoatingSettings * settings );
__declspec(implementation_key(1680)) HRESULT ILDECoatingData::SetAllThicknessVariable ( );
__declspec(implementation_key(1681)) HRESULT ILDECoatingData::SetAllThicknessFixed ( );
__declspec(implementation_key(1682)) HRESULT ILDECoatingData::SetAllThicknessOne ( );
__declspec(implementation_key(1683)) HRESULT ILDECoatingData::SetAllIndexVariable ( );
__declspec(implementation_key(1684)) HRESULT ILDECoatingData::SetAllIndexFixed ( );
__declspec(implementation_key(1685)) HRESULT ILDECoatingData::SetAllIndexZero ( );
__declspec(implementation_key(1686)) HRESULT ILDECoatingData::SetAllExtinctionVariable ( );
__declspec(implementation_key(1687)) HRESULT ILDECoatingData::SetAllExtinctionFixed ( );
__declspec(implementation_key(1688)) HRESULT ILDECoatingData::SetAllExtinctionZero ( );
__declspec(implementation_key(1689)) VARIANT_BOOL ILDEImportData::ImportDataFile ( _bstr_t dataFile );
__declspec(implementation_key(1690)) _bstr_t ILDEImportData::GetDefaultImportDirectory ( );
__declspec(implementation_key(1691)) SAFEARRAY * ILDEImportData::GetImportFiles ( _bstr_t directory );
__declspec(implementation_key(1692)) VARIANT_BOOL ILDEImportData::CopyImportDataFrom ( struct ILDEImportData * source );
__declspec(implementation_key(1693)) VARIANT_BOOL INCETypeData::GetAreUDASettingsAvailable ( );
__declspec(implementation_key(1694)) VARIANT_BOOL INCETypeData::GetUserDefinedAperture ( );
__declspec(implementation_key(1695)) void INCETypeData::PutUserDefinedAperture ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1696)) double INCETypeData::GetUDAScale ( );
__declspec(implementation_key(1697)) void INCETypeData::PutUDAScale ( double pRetVal );
__declspec(implementation_key(1698)) _bstr_t INCETypeData::GetUDAFile ( );
__declspec(implementation_key(1699)) void INCETypeData::PutUDAFile ( _bstr_t pRetVal );
__declspec(implementation_key(1700)) SAFEARRAY * INCETypeData::GetAvailableUDAFiles ( );
__declspec(implementation_key(1701)) _bstr_t INCETypeData::GetUDAFileFullPath ( );
__declspec(implementation_key(1702)) enum ZemaxColor INCETypeData::GetRowColor ( );
__declspec(implementation_key(1703)) void INCETypeData::PutRowColor ( enum ZemaxColor pRetVal );
__declspec(implementation_key(1704)) VARIANT_BOOL INCETypeData::GetUseGlobalXYZRotationOrder ( );
__declspec(implementation_key(1705)) void INCETypeData::PutUseGlobalXYZRotationOrder ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1706)) VARIANT_BOOL INCETypeData::GetConvertImportedFilesToZOF ( );
__declspec(implementation_key(1707)) void INCETypeData::PutConvertImportedFilesToZOF ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1708)) _bstr_t INCETypeData::GetConsiderObjects ( );
__declspec(implementation_key(1709)) void INCETypeData::PutConsiderObjects ( _bstr_t pRetVal );
__declspec(implementation_key(1710)) _bstr_t INCETypeData::GetIgnoreObjects ( );
__declspec(implementation_key(1711)) void INCETypeData::PutIgnoreObjects ( _bstr_t pRetVal );
__declspec(implementation_key(1712)) enum RaysIgnoreObjectType INCETypeData::GetRaysIgnoreObject ( );
__declspec(implementation_key(1713)) void INCETypeData::PutRaysIgnoreObject ( enum RaysIgnoreObjectType pRetVal );
__declspec(implementation_key(1714)) VARIANT_BOOL INCETypeData::GetUseConsiderIgnoreWhenSplitting ( );
__declspec(implementation_key(1715)) void INCETypeData::PutUseConsiderIgnoreWhenSplitting ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1716)) VARIANT_BOOL INCETypeData::GetFastRayTrace ( );
__declspec(implementation_key(1717)) void INCETypeData::PutFastRayTrace ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1718)) VARIANT_BOOL INCETypeData::GetUseFastApproximateRayTrace ( );
__declspec(implementation_key(1719)) void INCETypeData::PutUseFastApproximateRayTrace ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1720)) VARIANT_BOOL INCETypeData::GetObjectIsADetector ( );
__declspec(implementation_key(1721)) void INCETypeData::PutObjectIsADetector ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1722)) enum DetectorShowAsType INCETypeData::GetDetectorShowAs ( );
__declspec(implementation_key(1723)) void INCETypeData::PutDetectorShowAs ( enum DetectorShowAsType pRetVal );
__declspec(implementation_key(1724)) VARIANT_BOOL INCETypeData::GetUsePixelInterpolation ( );
__declspec(implementation_key(1725)) void INCETypeData::PutUsePixelInterpolation ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1726)) VARIANT_BOOL INCETypeData::GetNormalizeCoherentPower ( );
__declspec(implementation_key(1727)) void INCETypeData::PutNormalizeCoherentPower ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1728)) VARIANT_BOOL INCETypeData::GetRecordSpectralData ( );
__declspec(implementation_key(1729)) void INCETypeData::PutRecordSpectralData ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1730)) long INCETypeData::GetNumberOfSpectralData ( );
__declspec(implementation_key(1731)) void INCETypeData::PutNumberOfSpectralData ( long pRetVal );
__declspec(implementation_key(1732)) double INCETypeData::GetSpectralDataMinWave ( );
__declspec(implementation_key(1733)) void INCETypeData::PutSpectralDataMinWave ( double pRetVal );
__declspec(implementation_key(1734)) double INCETypeData::GetSpectralDataMaxWave ( );
__declspec(implementation_key(1735)) void INCETypeData::PutSpectralDataMaxWave ( double pRetVal );
__declspec(implementation_key(1736)) VARIANT_BOOL INCEDrawData::GetDoNotDrawObject ( );
__declspec(implementation_key(1737)) void INCEDrawData::PutDoNotDrawObject ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1738)) VARIANT_BOOL INCEDrawData::GetDrawLocalAxis ( );
__declspec(implementation_key(1739)) void INCEDrawData::PutDrawLocalAxis ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1740)) VARIANT_BOOL INCEDrawData::GetSupportsDrawingResolution ( );
__declspec(implementation_key(1741)) enum DrawingResolutionType INCEDrawData::GetDrawingResolution ( );
__declspec(implementation_key(1742)) void INCEDrawData::PutDrawingResolution ( enum DrawingResolutionType pRetVal );
__declspec(implementation_key(1743)) long INCEDrawData::GetNumSegments1 ( );
__declspec(implementation_key(1744)) void INCEDrawData::PutNumSegments1 ( long pRetVal );
__declspec(implementation_key(1745)) _bstr_t INCEDrawData::GetSegments1Type ( );
__declspec(implementation_key(1746)) long INCEDrawData::GetNumSegments2 ( );
__declspec(implementation_key(1747)) void INCEDrawData::PutNumSegments2 ( long pRetVal );
__declspec(implementation_key(1748)) _bstr_t INCEDrawData::GetSegments2Type ( );
__declspec(implementation_key(1749)) VARIANT_BOOL INCEDrawData::MakeAllObjectsDrawLikeThisOne ( );
__declspec(implementation_key(1750)) VARIANT_BOOL INCEDrawData::GetExportAsTriangles ( );
__declspec(implementation_key(1751)) void INCEDrawData::PutExportAsTriangles ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1752)) VARIANT_BOOL INCEDrawData::GetIncreaseResolutionOnShadedModelLayouts ( );
__declspec(implementation_key(1753)) void INCEDrawData::PutIncreaseResolutionOnShadedModelLayouts ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1754)) enum ZemaxOpacity INCEDrawData::GetOpacity ( );
__declspec(implementation_key(1755)) void INCEDrawData::PutOpacity ( enum ZemaxOpacity pRetVal );
__declspec(implementation_key(1756)) enum ZemaxColor INCEDrawData::GetObjectColor ( );
__declspec(implementation_key(1757)) void INCEDrawData::PutObjectColor ( enum ZemaxColor pRetVal );
__declspec(implementation_key(1758)) enum ZemaxColor ILDETypeData::GetSurfaceColor ( );
__declspec(implementation_key(1759)) void ILDETypeData::PutSurfaceColor ( enum ZemaxColor pRetVal );
__declspec(implementation_key(1760)) enum ZemaxOpacity ILDETypeData::GetSurfaceOpacity ( );
__declspec(implementation_key(1761)) void ILDETypeData::PutSurfaceOpacity ( enum ZemaxOpacity pRetVal );
__declspec(implementation_key(1762)) enum ZemaxColor ILDETypeData::GetRowColor ( );
__declspec(implementation_key(1763)) void ILDETypeData::PutRowColor ( enum ZemaxColor pRetVal );
__declspec(implementation_key(1764)) VARIANT_BOOL ILDETypeData::GetIsStop ( );
__declspec(implementation_key(1765)) void ILDETypeData::PutIsStop ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1766)) VARIANT_BOOL ILDETypeData::GetCanBeStop ( );
__declspec(implementation_key(1767)) VARIANT_BOOL ILDETypeData::GetIsGlobalCoordinateReference ( );
__declspec(implementation_key(1768)) void ILDETypeData::PutIsGlobalCoordinateReference ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1769)) VARIANT_BOOL ILDETypeData::GetCanBeGCR ( );
__declspec(implementation_key(1770)) VARIANT_BOOL ILDETypeData::GetIgnoreSurface ( );
__declspec(implementation_key(1771)) void ILDETypeData::PutIgnoreSurface ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1772)) VARIANT_BOOL ILDETypeData::GetSurfaceCannotBeHyperhemispheric ( );
__declspec(implementation_key(1773)) void ILDETypeData::PutSurfaceCannotBeHyperhemispheric ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1774)) VARIANT_BOOL IVectorData::GetIsReadOnly ( );
__declspec(implementation_key(1775)) long IVectorData::GetLength ( );
__declspec(implementation_key(1776)) SAFEARRAY * IVectorData::GetData ( );
__declspec(implementation_key(1777)) void IVectorData::PutData ( SAFEARRAY * pRetVal );
__declspec(implementation_key(1778)) HRESULT IVectorData::ReadData ( long size, double * Data );
__declspec(implementation_key(1779)) HRESULT IVectorData::WriteData ( long size, double * Data );
__declspec(implementation_key(1780)) double IVectorData::GetValueAt ( long position );
__declspec(implementation_key(1781)) HRESULT IVectorData::SetValueAt ( long position, double Value );
__declspec(implementation_key(1782)) VARIANT_BOOL IMatrixData::GetIsReadOnly ( );
__declspec(implementation_key(1783)) long IMatrixData::GetRows ( );
__declspec(implementation_key(1784)) long IMatrixData::GetCols ( );
__declspec(implementation_key(1785)) long IMatrixData::GetTotalLength ( );
__declspec(implementation_key(1786)) SAFEARRAY * IMatrixData::GetData ( );
__declspec(implementation_key(1787)) void IMatrixData::PutData ( SAFEARRAY * pRetVal );
__declspec(implementation_key(1788)) HRESULT IMatrixData::ReadData ( long size, double * Data );
__declspec(implementation_key(1789)) HRESULT IMatrixData::WriteData ( long size, double * Data );
__declspec(implementation_key(1790)) double IMatrixData::GetValueAt ( long Row, long Col );
__declspec(implementation_key(1791)) HRESULT IMatrixData::SetValueAt ( long Row, long Col, double Value );
__declspec(implementation_key(1792)) long ISettingsData::GetNumberOfSettings ( );
__declspec(implementation_key(1793)) SAFEARRAY * ISettingsData::GetKeys ( );
__declspec(implementation_key(1794)) VARIANT_BOOL ISettingsData::GetEntryType ( _bstr_t key, enum SettingsDataType * Type, VARIANT_BOOL * isArray, long * arraySize );
__declspec(implementation_key(1795)) VARIANT_BOOL ISettingsData::GetDoubleValue ( _bstr_t key, double * val );
__declspec(implementation_key(1796)) VARIANT_BOOL ISettingsData::GetIntegerValue ( _bstr_t key, long * val );
__declspec(implementation_key(1797)) VARIANT_BOOL ISettingsData::GetFloatValue ( _bstr_t key, float * val );
__declspec(implementation_key(1798)) VARIANT_BOOL ISettingsData::GetStringValue ( _bstr_t key, BSTR * val );
__declspec(implementation_key(1799)) VARIANT_BOOL ISettingsData::GetByteValue ( _bstr_t key, unsigned char * val );
__declspec(implementation_key(1800)) VARIANT_BOOL ISettingsData::GetBooleanValue ( _bstr_t key, VARIANT_BOOL * val );
__declspec(implementation_key(1801)) HRESULT ISettingsData::SetDoubleValue ( _bstr_t key, double val );
__declspec(implementation_key(1802)) HRESULT ISettingsData::SetIntegerValue ( _bstr_t key, long val );
__declspec(implementation_key(1803)) HRESULT ISettingsData::SetFloatValue ( _bstr_t key, float val );
__declspec(implementation_key(1804)) HRESULT ISettingsData::SetStringValue ( _bstr_t key, _bstr_t val );
__declspec(implementation_key(1805)) HRESULT ISettingsData::SetByteValue ( _bstr_t key, unsigned char val );
__declspec(implementation_key(1806)) HRESULT ISettingsData::SetBooleanValue ( _bstr_t key, VARIANT_BOOL val );
__declspec(implementation_key(1807)) VARIANT_BOOL ISettingsData::GetDoubleArray ( _bstr_t key, long size, double * val );
__declspec(implementation_key(1808)) VARIANT_BOOL ISettingsData::GetIntegerArray ( _bstr_t key, long size, long * val );
__declspec(implementation_key(1809)) VARIANT_BOOL ISettingsData::GetFloatArray ( _bstr_t key, long size, float * val );
__declspec(implementation_key(1810)) VARIANT_BOOL ISettingsData::GetByteArray ( _bstr_t key, long size, unsigned char * val );
__declspec(implementation_key(1811)) VARIANT_BOOL ISettingsData::GetBooleanArray ( _bstr_t key, long size, VARIANT_BOOL * val );
__declspec(implementation_key(1812)) HRESULT ISettingsData::SetDoubleArray ( _bstr_t key, long size, double * val );
__declspec(implementation_key(1813)) HRESULT ISettingsData::SetIntegerArray ( _bstr_t key, long size, long * val );
__declspec(implementation_key(1814)) HRESULT ISettingsData::SetFloatArray ( _bstr_t key, long size, float * val );
__declspec(implementation_key(1815)) HRESULT ISettingsData::SetByteArray ( _bstr_t key, long size, unsigned char * val );
__declspec(implementation_key(1816)) HRESULT ISettingsData::SetBooleanArray ( _bstr_t key, long size, VARIANT_BOOL * val );
__declspec(implementation_key(1817)) enum ErrorType INSCRayTrace::ClearDetectors ( long DetectorNumber );
__declspec(implementation_key(1818)) enum ErrorType INSCRayTrace::ClearDetectorObject ( long ObjectNumber );
__declspec(implementation_key(1819)) VARIANT_BOOL INSCRayTrace::GetAutoUpdate ( );
__declspec(implementation_key(1820)) void INSCRayTrace::PutAutoUpdate ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1821)) long INSCRayTrace::GetNumberOfCores ( );
__declspec(implementation_key(1822)) void INSCRayTrace::PutNumberOfCores ( long pRetVal );
__declspec(implementation_key(1823)) VARIANT_BOOL INSCRayTrace::GetUsePolarization ( );
__declspec(implementation_key(1824)) void INSCRayTrace::PutUsePolarization ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1825)) VARIANT_BOOL INSCRayTrace::GetIgnoreErrors ( );
__declspec(implementation_key(1826)) void INSCRayTrace::PutIgnoreErrors ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1827)) VARIANT_BOOL INSCRayTrace::GetSplitNSCRays ( );
__declspec(implementation_key(1828)) void INSCRayTrace::PutSplitNSCRays ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1829)) VARIANT_BOOL INSCRayTrace::GetScatterNSCRays ( );
__declspec(implementation_key(1830)) void INSCRayTrace::PutScatterNSCRays ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1831)) VARIANT_BOOL INSCRayTrace::GetSaveRays ( );
__declspec(implementation_key(1832)) void INSCRayTrace::PutSaveRays ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1833)) _bstr_t INSCRayTrace::GetSaveRaysFile ( );
__declspec(implementation_key(1834)) void INSCRayTrace::PutSaveRaysFile ( _bstr_t pRetVal );
__declspec(implementation_key(1835)) enum ZRDFormatType INSCRayTrace::GetZRDFormat ( );
__declspec(implementation_key(1836)) void INSCRayTrace::PutZRDFormat ( enum ZRDFormatType pRetVal );
__declspec(implementation_key(1837)) _bstr_t INSCRayTrace::GetFilter ( );
__declspec(implementation_key(1838)) void INSCRayTrace::PutFilter ( _bstr_t pRetVal );
__declspec(implementation_key(1839)) ISystemToolPtr IOpticalSystemTools::GetCurrentTool ( );
__declspec(implementation_key(1840)) long IOpticalSystemTools::GetProgress ( );
__declspec(implementation_key(1841)) _bstr_t IOpticalSystemTools::GetStatus ( );
__declspec(implementation_key(1842)) VARIANT_BOOL IOpticalSystemTools::GetIsRunning ( );
__declspec(implementation_key(1843)) IBatchRayTracePtr IOpticalSystemTools::OpenBatchRayTrace ( );
__declspec(implementation_key(1844)) INSCRayTracePtr IOpticalSystemTools::OpenNSCRayTrace ( );
__declspec(implementation_key(1845)) IQuickAdjustPtr IOpticalSystemTools::OpenQuickAdjust ( );
__declspec(implementation_key(1846)) IQuickFocusPtr IOpticalSystemTools::OpenQuickFocus ( );
__declspec(implementation_key(1847)) ILightningTracePtr IOpticalSystemTools::OpenLightningTrace ( );
__declspec(implementation_key(1848)) ILocalOptimizationPtr IOpticalSystemTools::OpenLocalOptimization ( );
__declspec(implementation_key(1849)) IGlobalOptimizationPtr IOpticalSystemTools::OpenGlobalOptimization ( );
__declspec(implementation_key(1850)) IHammerOptimizationPtr IOpticalSystemTools::OpenHammerOptimization ( );
__declspec(implementation_key(1851)) ITolerancingPtr IOpticalSystemTools::OpenTolerancing ( );
__declspec(implementation_key(1852)) IRestoreArchivePtr IOpticalSystemTools::OpenRestoreZAR ( );
__declspec(implementation_key(1853)) ICreateArchivePtr IOpticalSystemTools::OpenCreateZAR ( );
__declspec(implementation_key(1854)) IExportCADPtr IOpticalSystemTools::OpenExportCAD ( );
__declspec(implementation_key(1855)) IScalePtr IOpticalSystemTools::OpenScale ( );
__declspec(implementation_key(1856)) IMFCalculatorPtr IOpticalSystemTools::OpenMeritFunctionCalculator ( );
__declspec(implementation_key(1857)) IUnknownPtr IOpticalSystemTools::OpenLensCatalogs ( );
__declspec(implementation_key(1858)) IConvertToNSCGroupPtr IOpticalSystemTools::OpenConvertToNSCGroup ( );
__declspec(implementation_key(1859)) IDesignLockdownPtr IOpticalSystemTools::OpenDesignLockdown ( );
__declspec(implementation_key(1860)) ICriticalRaysetGeneratorPtr IOpticalSystemTools::OpenCriticalRaysetGenerator ( );
__declspec(implementation_key(1861)) VARIANT_BOOL IOpticalSystemTools::RemoveAllVariables ( );
__declspec(implementation_key(1862)) long IOpticalSystemTools::SetAllRadiiVariable ( );
__declspec(implementation_key(1863)) long IOpticalSystemTools::SetAllThicknessesVariable ( );
__declspec(implementation_key(1864)) SAFEARRAY * IOpticalSystemTools::CreateDoubleVector ( long numElements );
__declspec(implementation_key(1865)) SAFEARRAY * IOpticalSystemTools::CreateDoubleMatrix ( long Rows, long Cols );
__declspec(implementation_key(1866)) IZRDReaderPtr IOpticalSystemTools::OpenRayDatabaseReader ( );
__declspec(implementation_key(1867)) IComputeRMSSpotSizePtr IOpticalSystemTools::OpenRMSSpotRadiusCalculator ( );
__declspec(implementation_key(1868)) double IOpticalSystemTools::GetConversionToSystemUnits ( enum ZemaxSystemUnits fromUnits );
__declspec(implementation_key(1869)) double IOpticalSystemTools::GetConversionFromSystemUnits ( enum ZemaxSystemUnits toUnits );
__declspec(implementation_key(1870)) enum ErrorType IMessage::GetErrorCode ( );
__declspec(implementation_key(1871)) _bstr_t IMessage::GetText ( );
__declspec(implementation_key(1872)) HRESULT IMessages::WriteLine ( _bstr_t s, long userV, long settingsV );
__declspec(implementation_key(1873)) HRESULT IMessages::WriteLine_2 ( _bstr_t s, VARIANT_BOOL userV, VARIANT_BOOL settingsV );
__declspec(implementation_key(1874)) HRESULT IMessages::WriteLine_3 ( _bstr_t s, double userV, double settingsV );
__declspec(implementation_key(1875)) HRESULT IMessages::WriteLine_4 ( _bstr_t s, _bstr_t userV, _bstr_t settingsV );
__declspec(implementation_key(1876)) _bstr_t IMessages::AllToString ( );
__declspec(implementation_key(1877)) _bstr_t IUser2DLineData::GetPlotDescription ( );
__declspec(implementation_key(1878)) _bstr_t IUser2DLineData::GetXLabel ( );
__declspec(implementation_key(1879)) void IUser2DLineData::PutXLabel ( _bstr_t pRetVal );
__declspec(implementation_key(1880)) _bstr_t IUser2DLineData::GetYLabel ( );
__declspec(implementation_key(1881)) void IUser2DLineData::PutYLabel ( _bstr_t pRetVal );
__declspec(implementation_key(1882)) unsigned long IUser2DLineData::GetNumberOfXValues ( );
__declspec(implementation_key(1883)) unsigned long IUser2DLineData::GetNumberOfYValues ( );
__declspec(implementation_key(1884)) unsigned long IUser2DLineData::GetNumberOfSeries ( );
__declspec(implementation_key(1885)) HRESULT IUser2DLineData::AddSeries ( _bstr_t seriesName, enum ZemaxColor seriesColor, unsigned long NumberOfYValues, double * yValues );
__declspec(implementation_key(1886)) HRESULT IUser2DLineData::AddSeriesSafe ( _bstr_t seriesName, enum ZemaxColor seriesColor, SAFEARRAY * yValues );
__declspec(implementation_key(1887)) double IUser2DLineData::GetXAxisMin ( );
__declspec(implementation_key(1888)) void IUser2DLineData::PutXAxisMin ( double pRetVal );
__declspec(implementation_key(1889)) VARIANT_BOOL IUser2DLineData::GetXAxisMinAuto ( );
__declspec(implementation_key(1890)) void IUser2DLineData::PutXAxisMinAuto ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1891)) double IUser2DLineData::GetXAxisMax ( );
__declspec(implementation_key(1892)) void IUser2DLineData::PutXAxisMax ( double pRetVal );
__declspec(implementation_key(1893)) VARIANT_BOOL IUser2DLineData::GetXAxisMaxAuto ( );
__declspec(implementation_key(1894)) void IUser2DLineData::PutXAxisMaxAuto ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1895)) VARIANT_BOOL IUser2DLineData::GetXAxisLog ( );
__declspec(implementation_key(1896)) void IUser2DLineData::PutXAxisLog ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1897)) VARIANT_BOOL IUser2DLineData::GetXAxisReversed ( );
__declspec(implementation_key(1898)) void IUser2DLineData::PutXAxisReversed ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1899)) VARIANT_BOOL IUser2DLineData::GetXAxisSymmetric ( );
__declspec(implementation_key(1900)) void IUser2DLineData::PutXAxisSymmetric ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1901)) double IUser2DLineData::GetYAxisMin ( );
__declspec(implementation_key(1902)) void IUser2DLineData::PutYAxisMin ( double pRetVal );
__declspec(implementation_key(1903)) VARIANT_BOOL IUser2DLineData::GetYAxisMinAuto ( );
__declspec(implementation_key(1904)) void IUser2DLineData::PutYAxisMinAuto ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1905)) double IUser2DLineData::GetYAxisMax ( );
__declspec(implementation_key(1906)) void IUser2DLineData::PutYAxisMax ( double pRetVal );
__declspec(implementation_key(1907)) VARIANT_BOOL IUser2DLineData::GetYAxisMaxAuto ( );
__declspec(implementation_key(1908)) void IUser2DLineData::PutYAxisMaxAuto ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1909)) VARIANT_BOOL IUser2DLineData::GetYAxisLog ( );
__declspec(implementation_key(1910)) void IUser2DLineData::PutYAxisLog ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1911)) VARIANT_BOOL IUser2DLineData::GetYAxisReversed ( );
__declspec(implementation_key(1912)) void IUser2DLineData::PutYAxisReversed ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1913)) VARIANT_BOOL IUser2DLineData::GetYAxisSymmetric ( );
__declspec(implementation_key(1914)) void IUser2DLineData::PutYAxisSymmetric ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1915)) _bstr_t IUserGridData::GetPlotDescription ( );
__declspec(implementation_key(1916)) _bstr_t IUserGridData::GetXLabel ( );
__declspec(implementation_key(1917)) void IUserGridData::PutXLabel ( _bstr_t pRetVal );
__declspec(implementation_key(1918)) _bstr_t IUserGridData::GetYLabel ( );
__declspec(implementation_key(1919)) void IUserGridData::PutYLabel ( _bstr_t pRetVal );
__declspec(implementation_key(1920)) _bstr_t IUserGridData::GetValueLabel ( );
__declspec(implementation_key(1921)) void IUserGridData::PutValueLabel ( _bstr_t pRetVal );
__declspec(implementation_key(1922)) enum GridPlotType IUserGridData::GetShowAsType ( );
__declspec(implementation_key(1923)) void IUserGridData::PutShowAsType ( enum GridPlotType pRetVal );
__declspec(implementation_key(1924)) unsigned long IUserGridData::GetNumberOfXDataValues ( );
__declspec(implementation_key(1925)) double IUserGridData::GetXDataMin ( );
__declspec(implementation_key(1926)) double IUserGridData::GetXDataMax ( );
__declspec(implementation_key(1927)) double IUserGridData::GetDataDX ( );
__declspec(implementation_key(1928)) HRESULT IUserGridData::SetXDataDimensions ( double XDataMin, double XDataMax );
__declspec(implementation_key(1929)) unsigned long IUserGridData::GetNumberOfYDataValues ( );
__declspec(implementation_key(1930)) double IUserGridData::GetYDataMin ( );
__declspec(implementation_key(1931)) double IUserGridData::GetYDataMax ( );
__declspec(implementation_key(1932)) double IUserGridData::GetDataDY ( );
__declspec(implementation_key(1933)) HRESULT IUserGridData::SetYDataDimensions ( double YDataMin, double YDataMax );
__declspec(implementation_key(1934)) double IUserGridData::GetXAxisMin ( );
__declspec(implementation_key(1935)) void IUserGridData::PutXAxisMin ( double pRetVal );
__declspec(implementation_key(1936)) VARIANT_BOOL IUserGridData::GetXAxisMinAuto ( );
__declspec(implementation_key(1937)) void IUserGridData::PutXAxisMinAuto ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1938)) double IUserGridData::GetXAxisMax ( );
__declspec(implementation_key(1939)) void IUserGridData::PutXAxisMax ( double pRetVal );
__declspec(implementation_key(1940)) VARIANT_BOOL IUserGridData::GetXAxisMaxAuto ( );
__declspec(implementation_key(1941)) void IUserGridData::PutXAxisMaxAuto ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1942)) VARIANT_BOOL IUserGridData::GetXAxisSymmetric ( );
__declspec(implementation_key(1943)) void IUserGridData::PutXAxisSymmetric ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1944)) double IUserGridData::GetYAxisMin ( );
__declspec(implementation_key(1945)) void IUserGridData::PutYAxisMin ( double pRetVal );
__declspec(implementation_key(1946)) VARIANT_BOOL IUserGridData::GetYAxisMinAuto ( );
__declspec(implementation_key(1947)) void IUserGridData::PutYAxisMinAuto ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1948)) double IUserGridData::GetYAxisMax ( );
__declspec(implementation_key(1949)) void IUserGridData::PutYAxisMax ( double pRetVal );
__declspec(implementation_key(1950)) VARIANT_BOOL IUserGridData::GetYAxisMaxAuto ( );
__declspec(implementation_key(1951)) void IUserGridData::PutYAxisMaxAuto ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1952)) VARIANT_BOOL IUserGridData::GetYAxisSymmetric ( );
__declspec(implementation_key(1953)) void IUserGridData::PutYAxisSymmetric ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1954)) double IUserGridData::GetZAxisMin ( );
__declspec(implementation_key(1955)) void IUserGridData::PutZAxisMin ( double pRetVal );
__declspec(implementation_key(1956)) VARIANT_BOOL IUserGridData::GetZAxisMinAuto ( );
__declspec(implementation_key(1957)) void IUserGridData::PutZAxisMinAuto ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1958)) double IUserGridData::GetZAxisMax ( );
__declspec(implementation_key(1959)) void IUserGridData::PutZAxisMax ( double pRetVal );
__declspec(implementation_key(1960)) VARIANT_BOOL IUserGridData::GetZAxisMaxAuto ( );
__declspec(implementation_key(1961)) void IUserGridData::PutZAxisMaxAuto ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1962)) VARIANT_BOOL IUserGridData::GetZAxisLog ( );
__declspec(implementation_key(1963)) void IUserGridData::PutZAxisLog ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1964)) VARIANT_BOOL IUserGridData::GetLogColorMap ( );
__declspec(implementation_key(1965)) void IUserGridData::PutLogColorMap ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1966)) VARIANT_BOOL IUserGridData::GetInterpolateLowResolutionContours ( );
__declspec(implementation_key(1967)) void IUserGridData::PutInterpolateLowResolutionContours ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1968)) double IUserGridData::GetXYAspectRatio ( );
__declspec(implementation_key(1969)) void IUserGridData::PutXYAspectRatio ( double pRetVal );
__declspec(implementation_key(1970)) HRESULT IUserGridData::SetData ( unsigned long totalSize, unsigned long numXValues, unsigned long numYValues, double * Data );
__declspec(implementation_key(1971)) HRESULT IUserGridData::SetDataSafe ( SAFEARRAY * Data );
__declspec(implementation_key(1972)) _bstr_t IUserGridRGBData::GetPlotDescription ( );
__declspec(implementation_key(1973)) _bstr_t IUserGridRGBData::GetXLabel ( );
__declspec(implementation_key(1974)) void IUserGridRGBData::PutXLabel ( _bstr_t pRetVal );
__declspec(implementation_key(1975)) _bstr_t IUserGridRGBData::GetYLabel ( );
__declspec(implementation_key(1976)) void IUserGridRGBData::PutYLabel ( _bstr_t pRetVal );
__declspec(implementation_key(1977)) _bstr_t IUserGridRGBData::GetValueLabel ( );
__declspec(implementation_key(1978)) void IUserGridRGBData::PutValueLabel ( _bstr_t pRetVal );
__declspec(implementation_key(1979)) unsigned long IUserGridRGBData::GetNumberOfXDataValues ( );
__declspec(implementation_key(1980)) double IUserGridRGBData::GetXDataMin ( );
__declspec(implementation_key(1981)) double IUserGridRGBData::GetXDataMax ( );
__declspec(implementation_key(1982)) double IUserGridRGBData::GetDataDX ( );
__declspec(implementation_key(1983)) HRESULT IUserGridRGBData::SetXDataDimensions ( double XDataMin, double XDataMax );
__declspec(implementation_key(1984)) unsigned long IUserGridRGBData::GetNumberOfYDataValues ( );
__declspec(implementation_key(1985)) double IUserGridRGBData::GetYDataMin ( );
__declspec(implementation_key(1986)) double IUserGridRGBData::GetYDataMax ( );
__declspec(implementation_key(1987)) double IUserGridRGBData::GetDataDY ( );
__declspec(implementation_key(1988)) HRESULT IUserGridRGBData::SetYDataDimensions ( double YDataMin, double YDataMax );
__declspec(implementation_key(1989)) HRESULT IUserGridRGBData::SetDataRGB ( unsigned long fullSize, unsigned long numXValues, unsigned long numYValues, double * rData, double * gData, double * bData );
__declspec(implementation_key(1990)) HRESULT IUserGridRGBData::SetDataRGBSafe ( SAFEARRAY * rData, SAFEARRAY * gData, SAFEARRAY * bData );
__declspec(implementation_key(1991)) HRESULT IUserGridRGBData::SetData ( unsigned long fullSize, unsigned long numXValues, unsigned long numYValues, double * rgbData );
__declspec(implementation_key(1992)) HRESULT IUserGridRGBData::SetDataSafe ( SAFEARRAY * rgbData );
__declspec(implementation_key(1993)) double IUserGridRGBData::GetXAxisMin ( );
__declspec(implementation_key(1994)) void IUserGridRGBData::PutXAxisMin ( double pRetVal );
__declspec(implementation_key(1995)) VARIANT_BOOL IUserGridRGBData::GetXAxisMinAuto ( );
__declspec(implementation_key(1996)) void IUserGridRGBData::PutXAxisMinAuto ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1997)) double IUserGridRGBData::GetXAxisMax ( );
__declspec(implementation_key(1998)) void IUserGridRGBData::PutXAxisMax ( double pRetVal );
__declspec(implementation_key(1999)) VARIANT_BOOL IUserGridRGBData::GetXAxisMaxAuto ( );
__declspec(implementation_key(2000)) void IUserGridRGBData::PutXAxisMaxAuto ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2001)) VARIANT_BOOL IUserGridRGBData::GetXAxisSymmetric ( );
__declspec(implementation_key(2002)) void IUserGridRGBData::PutXAxisSymmetric ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2003)) double IUserGridRGBData::GetYAxisMin ( );
__declspec(implementation_key(2004)) void IUserGridRGBData::PutYAxisMin ( double pRetVal );
__declspec(implementation_key(2005)) VARIANT_BOOL IUserGridRGBData::GetYAxisMinAuto ( );
__declspec(implementation_key(2006)) void IUserGridRGBData::PutYAxisMinAuto ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2007)) double IUserGridRGBData::GetYAxisMax ( );
__declspec(implementation_key(2008)) void IUserGridRGBData::PutYAxisMax ( double pRetVal );
__declspec(implementation_key(2009)) VARIANT_BOOL IUserGridRGBData::GetYAxisMaxAuto ( );
__declspec(implementation_key(2010)) void IUserGridRGBData::PutYAxisMaxAuto ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2011)) VARIANT_BOOL IUserGridRGBData::GetYAxisSymmetric ( );
__declspec(implementation_key(2012)) void IUserGridRGBData::PutYAxisSymmetric ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2013)) double IUserGridRGBData::GetXYAspectRatio ( );
__declspec(implementation_key(2014)) void IUserGridRGBData::PutXYAspectRatio ( double pRetVal );
__declspec(implementation_key(2015)) _bstr_t IUserTextData::GetData ( );
__declspec(implementation_key(2016)) void IUserTextData::PutData ( _bstr_t pRetVal );
__declspec(implementation_key(2017)) long IUserAnalysisData::GetAnalysisNumber ( );
__declspec(implementation_key(2018)) enum UserAnalysisDataType IUserAnalysisData::GetPlotType ( );
__declspec(implementation_key(2019)) _bstr_t IUserAnalysisData::GetWindowTitle ( );
__declspec(implementation_key(2020)) void IUserAnalysisData::PutWindowTitle ( _bstr_t pRetVal );
__declspec(implementation_key(2021)) _bstr_t IUserAnalysisData::GetFeatureDescription ( );
__declspec(implementation_key(2022)) void IUserAnalysisData::PutFeatureDescription ( _bstr_t pRetVal );
__declspec(implementation_key(2023)) SAFEARRAY * IUserAnalysisData::GetHeaderData ( );
__declspec(implementation_key(2024)) void IUserAnalysisData::PutHeaderData ( SAFEARRAY * pRetVal );
__declspec(implementation_key(2025)) VARIANT_BOOL IUserAnalysisData::GetShowLegend ( );
__declspec(implementation_key(2026)) void IUserAnalysisData::PutShowLegend ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2027)) ISettingsDataPtr IUserAnalysisData::GetUserSettings ( );
__declspec(implementation_key(2028)) VARIANT_BOOL IUserAnalysisData::GetRunAnalysisOnSettingsClosed ( );
__declspec(implementation_key(2029)) void IUserAnalysisData::PutRunAnalysisOnSettingsClosed ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2030)) IUser2DLineDataPtr IUserAnalysisData::Make2DLinePlot ( _bstr_t PlotDescription, unsigned long numValues, double * xValues );
__declspec(implementation_key(2031)) IUser2DLineDataPtr IUserAnalysisData::Make2DLinePlotSafe ( _bstr_t PlotDescription, SAFEARRAY * xValues );
__declspec(implementation_key(2032)) IUserGridDataPtr IUserAnalysisData::MakeGridPlot ( _bstr_t PlotDescription );
__declspec(implementation_key(2033)) IUserGridRGBDataPtr IUserAnalysisData::MakeGridRGBPlot ( _bstr_t PlotDescription );
__declspec(implementation_key(2034)) IUserTextDataPtr IUserAnalysisData::MakeText ( );
__declspec(implementation_key(2035)) float IAR_Rgb::GetR ( );
__declspec(implementation_key(2036)) float IAR_Rgb::GetG ( );
__declspec(implementation_key(2037)) float IAR_Rgb::GetB ( );
__declspec(implementation_key(2038)) double IAR_ScatterPoint::GetX ( );
__declspec(implementation_key(2039)) double IAR_ScatterPoint::GetY ( );
__declspec(implementation_key(2040)) double IAR_ScatterPoint::GetValue ( );
__declspec(implementation_key(2041)) double IAR_ScatterPointRgb::GetX ( );
__declspec(implementation_key(2042)) double IAR_ScatterPointRgb::GetY ( );
__declspec(implementation_key(2043)) IAR_RgbPtr IAR_ScatterPointRgb::GetValue ( );
__declspec(implementation_key(2044)) _bstr_t IAR_MetaData::GetFeatureDescription ( );
__declspec(implementation_key(2045)) _bstr_t IAR_MetaData::GetLensFile ( );
__declspec(implementation_key(2046)) _bstr_t IAR_MetaData::GetLensTitle ( );
__declspec(implementation_key(2047)) DATE IAR_MetaData::GetDate ( );
__declspec(implementation_key(2048)) SAFEARRAY * IAR_HeaderData::GetLines ( );
__declspec(implementation_key(2049)) double IAR_XYZ::GetX ( );
__declspec(implementation_key(2050)) double IAR_XYZ::GetY ( );
__declspec(implementation_key(2051)) double IAR_XYZ::GetZ ( );
__declspec(implementation_key(2052)) _bstr_t IAR_DataGrid::GetDescription ( );
__declspec(implementation_key(2053)) _bstr_t IAR_DataGrid::GetXLabel ( );
__declspec(implementation_key(2054)) _bstr_t IAR_DataGrid::GetYLabel ( );
__declspec(implementation_key(2055)) _bstr_t IAR_DataGrid::GetValueLabel ( );
__declspec(implementation_key(2056)) unsigned long IAR_DataGrid::GetNx ( );
__declspec(implementation_key(2057)) unsigned long IAR_DataGrid::GetNy ( );
__declspec(implementation_key(2058)) double IAR_DataGrid::GetDx ( );
__declspec(implementation_key(2059)) double IAR_DataGrid::GetDy ( );
__declspec(implementation_key(2060)) double IAR_DataGrid::GetMinX ( );
__declspec(implementation_key(2061)) double IAR_DataGrid::GetMinY ( );
__declspec(implementation_key(2062)) SAFEARRAY * IAR_DataGrid::GetValues ( );
__declspec(implementation_key(2063)) IMatrixDataPtr IAR_DataGrid::GetValueData ( );
__declspec(implementation_key(2064)) double IAR_DataGrid::X ( long rowX );
__declspec(implementation_key(2065)) double IAR_DataGrid::Y ( long colY );
__declspec(implementation_key(2066)) double IAR_DataGrid::Z ( long rowX, long colY );
__declspec(implementation_key(2067)) IAR_XYZPtr IAR_DataGrid::XYZ ( long rowX, long colY );
__declspec(implementation_key(2068)) _bstr_t IAR_DataGridRgb::GetDescription ( );
__declspec(implementation_key(2069)) _bstr_t IAR_DataGridRgb::GetXLabel ( );
__declspec(implementation_key(2070)) _bstr_t IAR_DataGridRgb::GetYLabel ( );
__declspec(implementation_key(2071)) _bstr_t IAR_DataGridRgb::GetValueLabel ( );
__declspec(implementation_key(2072)) unsigned long IAR_DataGridRgb::GetNx ( );
__declspec(implementation_key(2073)) unsigned long IAR_DataGridRgb::GetNy ( );
__declspec(implementation_key(2074)) double IAR_DataGridRgb::GetDx ( );
__declspec(implementation_key(2075)) double IAR_DataGridRgb::GetDy ( );
__declspec(implementation_key(2076)) double IAR_DataGridRgb::GetMinX ( );
__declspec(implementation_key(2077)) double IAR_DataGridRgb::GetMinY ( );
__declspec(implementation_key(2078)) SAFEARRAY * IAR_DataGridRgb::GetValues ( );
__declspec(implementation_key(2079)) IAR_RgbPtr IAR_DataGridRgb::GetValue ( long X, long Y );
__declspec(implementation_key(2080)) HRESULT IAR_DataGridRgb::FillValues ( unsigned long fullSize, float * rData, float * gData, float * bData );
__declspec(implementation_key(2081)) _bstr_t IAR_DataSeries::GetDescription ( );
__declspec(implementation_key(2082)) _bstr_t IAR_DataSeries::GetXLabel ( );
__declspec(implementation_key(2083)) IVectorDataPtr IAR_DataSeries::GetXData ( );
__declspec(implementation_key(2084)) SAFEARRAY * IAR_DataSeries::GetSeriesLabels ( );
__declspec(implementation_key(2085)) long IAR_DataSeries::GetNumSeries ( );
__declspec(implementation_key(2086)) IMatrixDataPtr IAR_DataSeries::GetYData ( );
__declspec(implementation_key(2087)) _bstr_t IAR_DataSeriesRgb::GetDescription ( );
__declspec(implementation_key(2088)) unsigned long IAR_DataSeriesRgb::GetNumSeries ( );
__declspec(implementation_key(2089)) IVectorDataPtr IAR_DataSeriesRgb::GetXData ( );
__declspec(implementation_key(2090)) unsigned long IAR_DataSeriesRgb::GetNumberOfRows ( );
__declspec(implementation_key(2091)) SAFEARRAY * IAR_DataSeriesRgb::GetYVals ( );
__declspec(implementation_key(2092)) IAR_RgbPtr IAR_DataSeriesRgb::GetYPoint ( long Row, long Col );
__declspec(implementation_key(2093)) HRESULT IAR_DataSeriesRgb::FillYValues ( unsigned long fullSize, float * rData, float * gData, float * bData );
__declspec(implementation_key(2094)) _bstr_t IAR_DataSeriesRgb::GetXLabel ( );
__declspec(implementation_key(2095)) SAFEARRAY * IAR_DataSeriesRgb::GetSeriesLabels ( );
__declspec(implementation_key(2096)) _bstr_t IAR_DataScatterPoints::GetDescription ( );
__declspec(implementation_key(2097)) unsigned long IAR_DataScatterPoints::GetNumPoints ( );
__declspec(implementation_key(2098)) SAFEARRAY * IAR_DataScatterPoints::GetPoints ( );
__declspec(implementation_key(2099)) IAR_ScatterPointPtr IAR_DataScatterPoints::GetPoint ( long idx );
__declspec(implementation_key(2100)) HRESULT IAR_DataScatterPoints::FillPointValues ( unsigned long fullSize, double * XData, double * YData, double * ValueData );
__declspec(implementation_key(2101)) _bstr_t IAR_DataScatterPoints::GetXLabel ( );
__declspec(implementation_key(2102)) _bstr_t IAR_DataScatterPoints::GetYLabel ( );
__declspec(implementation_key(2103)) _bstr_t IAR_DataScatterPoints::GetValueLabel ( );
__declspec(implementation_key(2104)) _bstr_t IAR_DataScatterPointsRgb::GetDescription ( );
__declspec(implementation_key(2105)) unsigned long IAR_DataScatterPointsRgb::GetNumPoints ( );
__declspec(implementation_key(2106)) SAFEARRAY * IAR_DataScatterPointsRgb::GetPoints ( );
__declspec(implementation_key(2107)) IAR_ScatterPointRgbPtr IAR_DataScatterPointsRgb::GetPoint ( long idx );
__declspec(implementation_key(2108)) HRESULT IAR_DataScatterPointsRgb::FillPointValues ( unsigned long fullSize, double * XData, double * YData, float * rData, float * gData, float * bData );
__declspec(implementation_key(2109)) _bstr_t IAR_DataScatterPointsRgb::GetXLabel ( );
__declspec(implementation_key(2110)) _bstr_t IAR_DataScatterPointsRgb::GetYLabel ( );
__declspec(implementation_key(2111)) _bstr_t IAR_DataScatterPointsRgb::GetValueLabel ( );
__declspec(implementation_key(2112)) long IAR_RayInfo::GetrayIndex ( );
__declspec(implementation_key(2113)) long IAR_RayInfo::GetSegment ( );
__declspec(implementation_key(2114)) long IAR_RayInfo::Getparent ( );
__declspec(implementation_key(2115)) long IAR_RayInfo::Getlevel ( );
__declspec(implementation_key(2116)) long IAR_RayInfo::Getin_object ( );
__declspec(implementation_key(2117)) long IAR_RayInfo::Gethit_object ( );
__declspec(implementation_key(2118)) long IAR_RayInfo::Gethit_face ( );
__declspec(implementation_key(2119)) double IAR_RayInfo::GetX ( );
__declspec(implementation_key(2120)) double IAR_RayInfo::GetY ( );
__declspec(implementation_key(2121)) double IAR_RayInfo::GetZ ( );
__declspec(implementation_key(2122)) double IAR_RayInfo::GetL ( );
__declspec(implementation_key(2123)) double IAR_RayInfo::GetM ( );
__declspec(implementation_key(2124)) double IAR_RayInfo::GetN ( );
__declspec(implementation_key(2125)) double IAR_RayInfo::GetNx ( );
__declspec(implementation_key(2126)) double IAR_RayInfo::GetNy ( );
__declspec(implementation_key(2127)) double IAR_RayInfo::GetNz ( );
__declspec(implementation_key(2128)) double IAR_RayInfo::GetEx ( );
__declspec(implementation_key(2129)) double IAR_RayInfo::GetEy ( );
__declspec(implementation_key(2130)) double IAR_RayInfo::GetEz ( );
__declspec(implementation_key(2131)) double IAR_RayInfo::GetpathLength ( );
__declspec(implementation_key(2132)) double IAR_RayInfo::GetOpticalPathLength ( );
__declspec(implementation_key(2133)) double IAR_RayInfo::GetWavelength ( );
__declspec(implementation_key(2134)) long IAR_RayInfo::GetVignetted ( );
__declspec(implementation_key(2135)) long IAR_RayInfo::Geterror ( );
__declspec(implementation_key(2136)) _bstr_t IAR_RayData::GetDescription ( );
__declspec(implementation_key(2137)) unsigned long IAR_RayData::GetNumRays ( );
__declspec(implementation_key(2138)) SAFEARRAY * IAR_RayData::GetRays ( );
__declspec(implementation_key(2139)) IAR_RayInfoPtr IAR_RayData::GetRay ( long idx );
__declspec(implementation_key(2140)) long IAR_CriticalRayInfo::GetFieldPoint ( );
__declspec(implementation_key(2141)) enum CriticalRayType IAR_CriticalRayInfo::GetrayType ( );
__declspec(implementation_key(2142)) VARIANT_BOOL IAR_CriticalRayInfo::GetPass ( );
__declspec(implementation_key(2143)) long IAR_CriticalRayInfo::GetTerminationObject ( );
__declspec(implementation_key(2144)) double IAR_CriticalRayInfo::GetWavelength ( );
__declspec(implementation_key(2145)) double IAR_CriticalRayInfo::GetXIn ( );
__declspec(implementation_key(2146)) double IAR_CriticalRayInfo::GetYIn ( );
__declspec(implementation_key(2147)) double IAR_CriticalRayInfo::GetZIn ( );
__declspec(implementation_key(2148)) double IAR_CriticalRayInfo::GetLIn ( );
__declspec(implementation_key(2149)) double IAR_CriticalRayInfo::GetMin ( );
__declspec(implementation_key(2150)) double IAR_CriticalRayInfo::GetNIn ( );
__declspec(implementation_key(2151)) double IAR_CriticalRayInfo::GetXTarget ( );
__declspec(implementation_key(2152)) double IAR_CriticalRayInfo::GetYTarget ( );
__declspec(implementation_key(2153)) double IAR_CriticalRayInfo::GetZTarget ( );
__declspec(implementation_key(2154)) double IAR_CriticalRayInfo::GetLTarget ( );
__declspec(implementation_key(2155)) double IAR_CriticalRayInfo::GetMTarget ( );
__declspec(implementation_key(2156)) double IAR_CriticalRayInfo::GetNTarget ( );
__declspec(implementation_key(2157)) double IAR_CriticalRayInfo::GetXActual ( );
__declspec(implementation_key(2158)) double IAR_CriticalRayInfo::GetYActual ( );
__declspec(implementation_key(2159)) double IAR_CriticalRayInfo::GetZActual ( );
__declspec(implementation_key(2160)) double IAR_CriticalRayInfo::GetLActual ( );
__declspec(implementation_key(2161)) double IAR_CriticalRayInfo::GetMActual ( );
__declspec(implementation_key(2162)) double IAR_CriticalRayInfo::GetNActual ( );
__declspec(implementation_key(2163)) unsigned long IAR_CriticalRayData::GetNumRays ( );
__declspec(implementation_key(2164)) SAFEARRAY * IAR_CriticalRayData::GetHeaderLabels ( );
__declspec(implementation_key(2165)) SAFEARRAY * IAR_CriticalRayData::GetRays ( );
__declspec(implementation_key(2166)) IAR_CriticalRayInfoPtr IAR_CriticalRayData::GetRay ( unsigned long idx );
__declspec(implementation_key(2167)) double IAR_SpotDataResult::GetX ( );
__declspec(implementation_key(2168)) void IAR_SpotDataResult::PutX ( double pRetVal );
__declspec(implementation_key(2169)) double IAR_SpotDataResult::GetY ( );
__declspec(implementation_key(2170)) void IAR_SpotDataResult::PutY ( double pRetVal );
__declspec(implementation_key(2171)) double IAR_SpotDataResult::GetZ ( );
__declspec(implementation_key(2172)) void IAR_SpotDataResult::PutZ ( double pRetVal );
__declspec(implementation_key(2173)) double IAR_SpotDataResult::GetL ( );
__declspec(implementation_key(2174)) void IAR_SpotDataResult::PutL ( double pRetVal );
__declspec(implementation_key(2175)) double IAR_SpotDataResult::GetM ( );
__declspec(implementation_key(2176)) void IAR_SpotDataResult::PutM ( double pRetVal );
__declspec(implementation_key(2177)) double IAR_SpotDataResult::GetN ( );
__declspec(implementation_key(2178)) void IAR_SpotDataResult::PutN ( double pRetVal );
__declspec(implementation_key(2179)) double IAR_SpotDataResult::GetDetector_X ( );
__declspec(implementation_key(2180)) void IAR_SpotDataResult::PutDetector_X ( double pRetVal );
__declspec(implementation_key(2181)) double IAR_SpotDataResult::GetDetector_Y ( );
__declspec(implementation_key(2182)) void IAR_SpotDataResult::PutDetector_Y ( double pRetVal );
__declspec(implementation_key(2183)) double IAR_SpotDataResult::GetDetector_Z ( );
__declspec(implementation_key(2184)) void IAR_SpotDataResult::PutDetector_Z ( double pRetVal );
__declspec(implementation_key(2185)) double IAR_SpotDataResult::GetRefCoord_X ( );
__declspec(implementation_key(2186)) void IAR_SpotDataResult::PutRefCoord_X ( double pRetVal );
__declspec(implementation_key(2187)) double IAR_SpotDataResult::GetRefCoord_Y ( );
__declspec(implementation_key(2188)) void IAR_SpotDataResult::PutRefCoord_Y ( double pRetVal );
__declspec(implementation_key(2189)) double IAR_SpotDataResult::GetRMSSpot_X ( );
__declspec(implementation_key(2190)) void IAR_SpotDataResult::PutRMSSpot_X ( double pRetVal );
__declspec(implementation_key(2191)) double IAR_SpotDataResult::GetRMSSpot_Y ( );
__declspec(implementation_key(2192)) void IAR_SpotDataResult::PutRMSSpot_Y ( double pRetVal );
__declspec(implementation_key(2193)) double IAR_SpotDataResult::GetRMSSpotSize ( );
__declspec(implementation_key(2194)) void IAR_SpotDataResult::PutRMSSpotSize ( double pRetVal );
__declspec(implementation_key(2195)) double IAR_SpotDataResult::GetGeoSpotSize ( );
__declspec(implementation_key(2196)) void IAR_SpotDataResult::PutGeoSpotSize ( double pRetVal );
__declspec(implementation_key(2197)) double IAR_SpotDataResultMatrix::Get_X_For ( long fieldN, long waveN );
__declspec(implementation_key(2198)) double IAR_SpotDataResultMatrix::Get_Y_For ( long fieldN, long waveN );
__declspec(implementation_key(2199)) double IAR_SpotDataResultMatrix::Get_Z_For ( long fieldN, long waveN );
__declspec(implementation_key(2200)) double IAR_SpotDataResultMatrix::Get_L_For ( long fieldN, long waveN );
__declspec(implementation_key(2201)) double IAR_SpotDataResultMatrix::Get_M_For ( long fieldN, long waveN );
__declspec(implementation_key(2202)) double IAR_SpotDataResultMatrix::Get_N_For ( long fieldN, long waveN );
__declspec(implementation_key(2203)) double IAR_SpotDataResultMatrix::GetDetector_X_For ( long fieldN, long waveN );
__declspec(implementation_key(2204)) double IAR_SpotDataResultMatrix::GetDetector_Y_For ( long fieldN, long waveN );
__declspec(implementation_key(2205)) double IAR_SpotDataResultMatrix::GetDetector_Z_For ( long fieldN, long waveN );
__declspec(implementation_key(2206)) double IAR_SpotDataResultMatrix::GetGeoSpotSizeFor ( long fieldN, long waveN );
__declspec(implementation_key(2207)) double IAR_SpotDataResultMatrix::GetRMSSpotSizeFor ( long fieldN, long waveN );
__declspec(implementation_key(2208)) double IAR_SpotDataResultMatrix::GetRMSSpot_X_For ( long fieldN, long waveN );
__declspec(implementation_key(2209)) double IAR_SpotDataResultMatrix::GetRMSSpot_Y_For ( long fieldN, long waveN );
__declspec(implementation_key(2210)) double IAR_SpotDataResultMatrix::GetReferenceCoordinate_X_For ( long fieldN, long waveN );
__declspec(implementation_key(2211)) double IAR_SpotDataResultMatrix::GetReferenceCoordinate_Y_For ( long fieldN, long waveN );
__declspec(implementation_key(2212)) double IAR_SpotDataResultMatrix::GetHalfWidth_X ( );
__declspec(implementation_key(2213)) double IAR_SpotDataResultMatrix::GetHalfWidth_Y ( );
__declspec(implementation_key(2214)) double IAR_SpotDataResultMatrix::GetMaxRadius ( );
__declspec(implementation_key(2215)) double IAR_SpotDataResultMatrix::GetMeanRadius ( );
__declspec(implementation_key(2216)) long IAR_SpotDataResultMatrix::GetNumberOfFields ( );
__declspec(implementation_key(2217)) long IAR_SpotDataResultMatrix::GetNumberOfWavelengths ( );
__declspec(implementation_key(2218)) unsigned long IAR_PathAnalysisEntry::GetPathNumber ( );
__declspec(implementation_key(2219)) unsigned __int64 IAR_PathAnalysisEntry::GetRaysInPath ( );
__declspec(implementation_key(2220)) unsigned long IAR_PathAnalysisEntry::GetHitsInPath ( );
__declspec(implementation_key(2221)) unsigned long IAR_PathAnalysisEntry::GetGhostsInPath ( );
__declspec(implementation_key(2222)) unsigned long IAR_PathAnalysisEntry::GetUniqueObjectsInPath ( );
__declspec(implementation_key(2223)) double IAR_PathAnalysisEntry::GetTotalPathFlux ( );
__declspec(implementation_key(2224)) unsigned long IAR_PathAnalysisEntry::GetNumberOfObjectsInPath ( );
__declspec(implementation_key(2225)) SAFEARRAY * IAR_PathAnalysisEntry::GetPathObjectList ( );
__declspec(implementation_key(2226)) long IAR_PathAnalysisEntry::GetPathObjectNumber ( long ObjectNumber );
__declspec(implementation_key(2227)) long IAR_PathAnalysisEntry::GetPathSource ( );
__declspec(implementation_key(2228)) double IAR_PathAnalysisData::GetTotalFluxIn ( );
__declspec(implementation_key(2229)) double IAR_PathAnalysisData::GetTotalFluxOut ( );
__declspec(implementation_key(2230)) unsigned long IAR_PathAnalysisData::GetTotalRays ( );
__declspec(implementation_key(2231)) unsigned long IAR_PathAnalysisData::GetTotalHits ( );
__declspec(implementation_key(2232)) unsigned long IAR_PathAnalysisData::GetNumPaths ( );
__declspec(implementation_key(2233)) SAFEARRAY * IAR_PathAnalysisData::GetPaths ( );
__declspec(implementation_key(2234)) IAR_PathAnalysisEntryPtr IAR_PathAnalysisData::GetPathNumber ( unsigned long idx );
__declspec(implementation_key(2235)) IAR_MetaDataPtr IAR_::GetMetaData ( );
__declspec(implementation_key(2236)) IAR_HeaderDataPtr IAR_::GetHeaderData ( );
__declspec(implementation_key(2237)) long IAR_::GetNumberOfDataGrids ( );
__declspec(implementation_key(2238)) IAR_DataGridPtr IAR_::GetDataGrid ( long index );
__declspec(implementation_key(2239)) SAFEARRAY * IAR_::GetDataGrids ( );
__declspec(implementation_key(2240)) long IAR_::GetNumberOfDataGridsRgb ( );
__declspec(implementation_key(2241)) IAR_DataGridRgbPtr IAR_::GetDataGridRgb ( long index );
__declspec(implementation_key(2242)) SAFEARRAY * IAR_::GetDataGridsRgb ( );
__declspec(implementation_key(2243)) long IAR_::GetNumberOfDataSeries ( );
__declspec(implementation_key(2244)) IAR_DataSeriesPtr IAR_::GetDataSeries ( long index );
__declspec(implementation_key(2245)) SAFEARRAY * IAR_::GetDataSeries ( );
__declspec(implementation_key(2246)) long IAR_::GetNumberOfDataSeriesRgb ( );
__declspec(implementation_key(2247)) IAR_DataSeriesRgbPtr IAR_::GetDataSeriesRgb ( long index );
__declspec(implementation_key(2248)) SAFEARRAY * IAR_::GetDataSeriesRgb ( );
__declspec(implementation_key(2249)) long IAR_::GetNumberOfDataScatterPoints ( );
__declspec(implementation_key(2250)) IAR_DataScatterPointsPtr IAR_::GetDataScatterPoint ( long index );
__declspec(implementation_key(2251)) SAFEARRAY * IAR_::GetDataScatterPoints ( );
__declspec(implementation_key(2252)) long IAR_::GetNumberOfDataScatterPointsRgb ( );
__declspec(implementation_key(2253)) IAR_DataScatterPointsRgbPtr IAR_::GetDataScatterPointRgb ( long index );
__declspec(implementation_key(2254)) SAFEARRAY * IAR_::GetDataScatterPointsRgb ( );
__declspec(implementation_key(2255)) long IAR_::GetNumberOfRayData ( );
__declspec(implementation_key(2256)) IAR_RayDataPtr IAR_::GetRayData ( long index );
__declspec(implementation_key(2257)) SAFEARRAY * IAR_::GetRayData ( );
__declspec(implementation_key(2258)) IAR_CriticalRayDataPtr IAR_::GetCriticalRayData ( );
__declspec(implementation_key(2259)) IAR_PathAnalysisDataPtr IAR_::GetPathAnalysisData ( );
__declspec(implementation_key(2260)) IAR_SpotDataResultMatrixPtr IAR_::GetSpotData ( );
__declspec(implementation_key(2261)) long IAR_::GetNumberOfMessages ( );
__declspec(implementation_key(2262)) IMessagePtr IAR_::GetMessageAt ( long index );
__declspec(implementation_key(2263)) SAFEARRAY * IAR_::GetMessages ( );
__declspec(implementation_key(2264)) VARIANT_BOOL IAR_::GetTextFile ( _bstr_t fileName );
__declspec(implementation_key(2265)) IMessagesPtr IAS_::verify ( );
__declspec(implementation_key(2266)) HRESULT IAS_::Save ( );
__declspec(implementation_key(2267)) HRESULT IAS_::Load ( );
__declspec(implementation_key(2268)) HRESULT IAS_::Reset ( );
__declspec(implementation_key(2269)) VARIANT_BOOL IAS_::SaveTo ( _bstr_t settingsFile );
__declspec(implementation_key(2270)) VARIANT_BOOL IAS_::LoadFrom ( _bstr_t settingsFile );
__declspec(implementation_key(2271)) VARIANT_BOOL IAS_::ModifySettings ( _bstr_t settingsFile, _bstr_t typeCode, _bstr_t newValue );
__declspec(implementation_key(2272)) _bstr_t IA_::GetTitle ( );
__declspec(implementation_key(2273)) _bstr_t IA_::GetGetAnalysisName ( );
__declspec(implementation_key(2274)) enum AnalysisIDM IA_::GetAnalysisType ( );
__declspec(implementation_key(2275)) IMessagesPtr IA_::GetStatusMessages ( );
__declspec(implementation_key(2276)) VARIANT_BOOL IA_::GetHasAnalysisSpecificSettings ( );
__declspec(implementation_key(2277)) IAS_Ptr IA_::GetSettings ( );
__declspec(implementation_key(2278)) IAR_Ptr IA_::GetResults ( );
__declspec(implementation_key(2279)) VARIANT_BOOL IA_::IsRunning ( );
__declspec(implementation_key(2280)) IMessagePtr IA_::Apply ( );
__declspec(implementation_key(2281)) IMessagePtr IA_::ApplyAndWaitForCompletion ( );
__declspec(implementation_key(2282)) VARIANT_BOOL IA_::Terminate ( );
__declspec(implementation_key(2283)) HRESULT IA_::WaitForCompletion ( );
__declspec(implementation_key(2284)) HRESULT IA_::Close ( );
__declspec(implementation_key(2285)) HRESULT IA_::Release_2 ( );
__declspec(implementation_key(2286)) HRESULT IA_::ToFile ( _bstr_t fileName, VARIANT_BOOL showSettings, VARIANT_BOOL verify );
__declspec(implementation_key(2287)) long I_Analyses::GetNumberOfAnalyses ( );
__declspec(implementation_key(2288)) VARIANT_BOOL I_Analyses::CloseAnalysis ( long index );
__declspec(implementation_key(2289)) VARIANT_BOOL I_Analyses::CloseAnalysis_2 ( struct IA_ * analysis );
__declspec(implementation_key(2290)) IA_Ptr I_Analyses::Get_AnalysisAtIndex ( long index );
__declspec(implementation_key(2291)) IA_Ptr I_Analyses::New_Analysis ( enum AnalysisIDM AnalysisType );
__declspec(implementation_key(2292)) IA_Ptr I_Analyses::New_Analysis_SettingsFirst ( enum AnalysisIDM AnalysisType );
__declspec(implementation_key(2293)) IA_Ptr I_Analyses::New_RayFan ( );
__declspec(implementation_key(2294)) IA_Ptr I_Analyses::New_OpticalPathFan ( );
__declspec(implementation_key(2295)) IA_Ptr I_Analyses::New_PupilAberrationFan ( );
__declspec(implementation_key(2296)) IA_Ptr I_Analyses::New_FieldCurvatureAndDistortion ( );
__declspec(implementation_key(2297)) IA_Ptr I_Analyses::New_FocalShiftDiagram ( );
__declspec(implementation_key(2298)) IA_Ptr I_Analyses::New_GridDistortion ( );
__declspec(implementation_key(2299)) IA_Ptr I_Analyses::New_LateralColor ( );
__declspec(implementation_key(2300)) IA_Ptr I_Analyses::New_LongitudinalAberration ( );
__declspec(implementation_key(2301)) IA_Ptr I_Analyses::New_RayTrace ( );
__declspec(implementation_key(2302)) IA_Ptr I_Analyses::New_SeidelCoefficients ( );
__declspec(implementation_key(2303)) IA_Ptr I_Analyses::New_SeidelDiagram ( );
__declspec(implementation_key(2304)) IA_Ptr I_Analyses::New_ZernikeAnnularCoefficients ( );
__declspec(implementation_key(2305)) IA_Ptr I_Analyses::New_ZernikeCoefficientsVsField ( );
__declspec(implementation_key(2306)) IA_Ptr I_Analyses::New_ZernikeFringeCoefficients ( );
__declspec(implementation_key(2307)) IA_Ptr I_Analyses::New_ZernikeStandardCoefficients ( );
__declspec(implementation_key(2308)) IA_Ptr I_Analyses::New_FftMtf ( );
__declspec(implementation_key(2309)) IA_Ptr I_Analyses::New_FftThroughFocusMtf ( );
__declspec(implementation_key(2310)) IA_Ptr I_Analyses::New_GeometricThroughFocusMtf ( );
__declspec(implementation_key(2311)) IA_Ptr I_Analyses::New_GeometricMtf ( );
__declspec(implementation_key(2312)) IA_Ptr I_Analyses::New_FftMtfMap ( );
__declspec(implementation_key(2313)) IA_Ptr I_Analyses::New_GeometricMtfMap ( );
__declspec(implementation_key(2314)) IA_Ptr I_Analyses::New_FftSurfaceMtf ( );
__declspec(implementation_key(2315)) IA_Ptr I_Analyses::New_FftMtfvsField ( );
__declspec(implementation_key(2316)) IA_Ptr I_Analyses::New_GeometricMtfvsField ( );
__declspec(implementation_key(2317)) IA_Ptr I_Analyses::New_HuygensMtfvsField ( );
__declspec(implementation_key(2318)) IA_Ptr I_Analyses::New_HuygensMtf ( );
__declspec(implementation_key(2319)) IA_Ptr I_Analyses::New_HuygensSurfaceMtf ( );
__declspec(implementation_key(2320)) IA_Ptr I_Analyses::New_HuygensThroughFocusMtf ( );
__declspec(implementation_key(2321)) IA_Ptr I_Analyses::New_FftPsf ( );
__declspec(implementation_key(2322)) IA_Ptr I_Analyses::New_FftPsfCrossSection ( );
__declspec(implementation_key(2323)) IA_Ptr I_Analyses::New_FftPsfLineEdgeSpread ( );
__declspec(implementation_key(2324)) IA_Ptr I_Analyses::New_HuygensPsfCrossSection ( );
__declspec(implementation_key(2325)) IA_Ptr I_Analyses::New_HuygensPsf ( );
__declspec(implementation_key(2326)) IA_Ptr I_Analyses::New_DiffractionEncircledEnergy ( );
__declspec(implementation_key(2327)) IA_Ptr I_Analyses::New_GeometricEncircledEnergy ( );
__declspec(implementation_key(2328)) IA_Ptr I_Analyses::New_GeometricLineEdgeSpread ( );
__declspec(implementation_key(2329)) IA_Ptr I_Analyses::New_ExtendedSourceEncircledEnergy ( );
__declspec(implementation_key(2330)) IA_Ptr I_Analyses::New_SurfaceCurvatureCross ( );
__declspec(implementation_key(2331)) IA_Ptr I_Analyses::New_SurfacePhaseCross ( );
__declspec(implementation_key(2332)) IA_Ptr I_Analyses::New_SurfaceSagCross ( );
__declspec(implementation_key(2333)) IA_Ptr I_Analyses::New_SurfaceCurvature ( );
__declspec(implementation_key(2334)) IA_Ptr I_Analyses::New_SurfacePhase ( );
__declspec(implementation_key(2335)) IA_Ptr I_Analyses::New_SurfaceSag ( );
__declspec(implementation_key(2336)) IA_Ptr I_Analyses::New_StandardSpot ( );
__declspec(implementation_key(2337)) IA_Ptr I_Analyses::New_ThroughFocusSpot ( );
__declspec(implementation_key(2338)) IA_Ptr I_Analyses::New_FullFieldSpot ( );
__declspec(implementation_key(2339)) IA_Ptr I_Analyses::New_MatrixSpot ( );
__declspec(implementation_key(2340)) IA_Ptr I_Analyses::New_ConfigurationMatrixSpot ( );
__declspec(implementation_key(2341)) IA_Ptr I_Analyses::New_RMSField ( );
__declspec(implementation_key(2342)) IA_Ptr I_Analyses::New_RMSFieldMap ( );
__declspec(implementation_key(2343)) IA_Ptr I_Analyses::New_RMSLambdaDiagram ( );
__declspec(implementation_key(2344)) IA_Ptr I_Analyses::New_RMSFocus ( );
__declspec(implementation_key(2345)) IA_Ptr I_Analyses::New_Foucault ( );
__declspec(implementation_key(2346)) IA_Ptr I_Analyses::New_Interferogram ( );
__declspec(implementation_key(2347)) IA_Ptr I_Analyses::New_WavefrontMap ( );
__declspec(implementation_key(2348)) IA_Ptr I_Analyses::New_DetectorViewer ( );
__declspec(implementation_key(2349)) IA_Ptr I_Analyses::New_CriticalRayTracer ( );
__declspec(implementation_key(2350)) IA_Ptr I_Analyses::New_PathAnalysis ( );
__declspec(implementation_key(2351)) long IAS_Field::GetFieldNumber ( );
__declspec(implementation_key(2352)) IMessagePtr IAS_Field::SetFieldNumber ( long N );
__declspec(implementation_key(2353)) IMessagePtr IAS_Field::UseAllFields ( );
__declspec(implementation_key(2354)) long IAS_Surface::GetSurfaceNumber ( );
__declspec(implementation_key(2355)) IMessagePtr IAS_Surface::SetSurfaceNumber ( long N );
__declspec(implementation_key(2356)) IMessagePtr IAS_Surface::UseImageSurface ( );
__declspec(implementation_key(2357)) IMessagePtr IAS_Surface::UseObjectiveSurface ( );
__declspec(implementation_key(2358)) long IAS_Detector::GetDetectorNumber ( );
__declspec(implementation_key(2359)) IMessagePtr IAS_Detector::SetDetectorNumber ( long N );
__declspec(implementation_key(2360)) IMessagePtr IAS_Detector::SummarizeAll ( );
__declspec(implementation_key(2361)) long IAS_Wavelength::GetWavelengthNumber ( );
__declspec(implementation_key(2362)) IMessagePtr IAS_Wavelength::SetWavelengthNumber ( long N );
__declspec(implementation_key(2363)) IMessagePtr IAS_Wavelength::UseAllWavelengths ( );
__declspec(implementation_key(2364)) double IAS_CriticalRayTracer::GetPositionTolerance ( );
__declspec(implementation_key(2365)) void IAS_CriticalRayTracer::PutPositionTolerance ( double pRetVal );
__declspec(implementation_key(2366)) double IAS_CriticalRayTracer::GetAngleTolerance ( );
__declspec(implementation_key(2367)) void IAS_CriticalRayTracer::PutAngleTolerance ( double pRetVal );
__declspec(implementation_key(2368)) _bstr_t IAS_CriticalRayTracer::GetfileName ( );
__declspec(implementation_key(2369)) void IAS_CriticalRayTracer::PutfileName ( _bstr_t pRetVal );
__declspec(implementation_key(2370)) enum DisplayOption IAS_CriticalRayTracer::GetRaysToDisplay ( );
__declspec(implementation_key(2371)) void IAS_CriticalRayTracer::PutRaysToDisplay ( enum DisplayOption pRetVal );
__declspec(implementation_key(2372)) VARIANT_BOOL IAS_CriticalRayTracer::GetDisplayXYZ ( );
__declspec(implementation_key(2373)) void IAS_CriticalRayTracer::PutDisplayXYZ ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2374)) VARIANT_BOOL IAS_CriticalRayTracer::GetDisplayLMN ( );
__declspec(implementation_key(2375)) void IAS_CriticalRayTracer::PutDisplayLMN ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2376)) VARIANT_BOOL IAS_CriticalRayTracer::GetDisplayActualEndData ( );
__declspec(implementation_key(2377)) void IAS_CriticalRayTracer::PutDisplayActualEndData ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2378)) VARIANT_BOOL IAS_CriticalRayTracer::GetDisplayTargetEndData ( );
__declspec(implementation_key(2379)) void IAS_CriticalRayTracer::PutDisplayTargetEndData ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2380)) VARIANT_BOOL IAS_CriticalRayTracer::GetDisplayStartData ( );
__declspec(implementation_key(2381)) void IAS_CriticalRayTracer::PutDisplayStartData ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2382)) IAS_FieldPtr IAS_Interferogram::GetField ( );
__declspec(implementation_key(2383)) IAS_SurfacePtr IAS_Interferogram::GetSurface ( );
__declspec(implementation_key(2384)) IAS_WavelengthPtr IAS_Interferogram::GetWavelength ( );
__declspec(implementation_key(2385)) enum SampleSizes IAS_Interferogram::GetSampling ( );
__declspec(implementation_key(2386)) void IAS_Interferogram::PutSampling ( enum SampleSizes pRetVal );
__declspec(implementation_key(2387)) enum ShowAs IAS_Interferogram::GetShowAs ( );
__declspec(implementation_key(2388)) void IAS_Interferogram::PutShowAs ( enum ShowAs pRetVal );
__declspec(implementation_key(2389)) enum Beam IAS_Interferogram::GetBeam_1 ( );
__declspec(implementation_key(2390)) void IAS_Interferogram::PutBeam_1 ( enum Beam pRetVal );
__declspec(implementation_key(2391)) enum Beam IAS_Interferogram::GetBeam_2 ( );
__declspec(implementation_key(2392)) void IAS_Interferogram::PutBeam_2 ( enum Beam pRetVal );
__declspec(implementation_key(2393)) VARIANT_BOOL IAS_Interferogram::GetRef_Beam_1_To_Vertex ( );
__declspec(implementation_key(2394)) void IAS_Interferogram::PutRef_Beam_1_To_Vertex ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2395)) VARIANT_BOOL IAS_Interferogram::GetRef_Beam_2_To_Vertex ( );
__declspec(implementation_key(2396)) void IAS_Interferogram::PutRef_Beam_2_To_Vertex ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2397)) VARIANT_BOOL IAS_Interferogram::GetUseExitPupil ( );
__declspec(implementation_key(2398)) void IAS_Interferogram::PutUseExitPupil ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2399)) VARIANT_BOOL IAS_Interferogram::GetConsiderOPL ( );
__declspec(implementation_key(2400)) void IAS_Interferogram::PutConsiderOPL ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2401)) double IAS_Interferogram::GetScaleFactor ( );
__declspec(implementation_key(2402)) void IAS_Interferogram::PutScaleFactor ( double pRetVal );
__declspec(implementation_key(2403)) double IAS_Interferogram::GetX_Tilt ( );
__declspec(implementation_key(2404)) void IAS_Interferogram::PutX_Tilt ( double pRetVal );
__declspec(implementation_key(2405)) double IAS_Interferogram::GetY_Tilt ( );
__declspec(implementation_key(2406)) void IAS_Interferogram::PutY_Tilt ( double pRetVal );
__declspec(implementation_key(2407)) double IAS_Interferogram::GetSubaperture_X ( );
__declspec(implementation_key(2408)) void IAS_Interferogram::PutSubaperture_X ( double pRetVal );
__declspec(implementation_key(2409)) double IAS_Interferogram::GetSubaperture_Y ( );
__declspec(implementation_key(2410)) void IAS_Interferogram::PutSubaperture_Y ( double pRetVal );
__declspec(implementation_key(2411)) double IAS_Interferogram::GetSubaperture_R ( );
__declspec(implementation_key(2412)) void IAS_Interferogram::PutSubaperture_R ( double pRetVal );
__declspec(implementation_key(2413)) _bstr_t IAS_Interferogram::GetContourFormat ( );
__declspec(implementation_key(2414)) void IAS_Interferogram::PutContourFormat ( _bstr_t pRetVal );
__declspec(implementation_key(2415)) IAS_FieldPtr IAS_WavefrontMap::GetField ( );
__declspec(implementation_key(2416)) IAS_SurfacePtr IAS_WavefrontMap::GetSurface ( );
__declspec(implementation_key(2417)) IAS_WavelengthPtr IAS_WavefrontMap::GetWavelength ( );
__declspec(implementation_key(2418)) enum ShowAs IAS_WavefrontMap::GetShowAs ( );
__declspec(implementation_key(2419)) void IAS_WavefrontMap::PutShowAs ( enum ShowAs pRetVal );
__declspec(implementation_key(2420)) enum Rotations IAS_WavefrontMap::GetRotation ( );
__declspec(implementation_key(2421)) void IAS_WavefrontMap::PutRotation ( enum Rotations pRetVal );
__declspec(implementation_key(2422)) enum SampleSizes IAS_WavefrontMap::GetSampling ( );
__declspec(implementation_key(2423)) void IAS_WavefrontMap::PutSampling ( enum SampleSizes pRetVal );
__declspec(implementation_key(2424)) enum Polarizations IAS_WavefrontMap::GetPolarization ( );
__declspec(implementation_key(2425)) void IAS_WavefrontMap::PutPolarization ( enum Polarizations pRetVal );
__declspec(implementation_key(2426)) VARIANT_BOOL IAS_WavefrontMap::GetReferenceToPrimary ( );
__declspec(implementation_key(2427)) void IAS_WavefrontMap::PutReferenceToPrimary ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2428)) VARIANT_BOOL IAS_WavefrontMap::GetUseExitPupil ( );
__declspec(implementation_key(2429)) void IAS_WavefrontMap::PutUseExitPupil ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2430)) VARIANT_BOOL IAS_WavefrontMap::GetRemoveTilt ( );
__declspec(implementation_key(2431)) void IAS_WavefrontMap::PutRemoveTilt ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2432)) double IAS_WavefrontMap::GetScale ( );
__declspec(implementation_key(2433)) void IAS_WavefrontMap::PutScale ( double pRetVal );
__declspec(implementation_key(2434)) double IAS_WavefrontMap::GetSubaperture_X ( );
__declspec(implementation_key(2435)) void IAS_WavefrontMap::PutSubaperture_X ( double pRetVal );
__declspec(implementation_key(2436)) double IAS_WavefrontMap::GetSubaperture_Y ( );
__declspec(implementation_key(2437)) void IAS_WavefrontMap::PutSubaperture_Y ( double pRetVal );
__declspec(implementation_key(2438)) double IAS_WavefrontMap::GetSubaperture_R ( );
__declspec(implementation_key(2439)) void IAS_WavefrontMap::PutSubaperture_R ( double pRetVal );
__declspec(implementation_key(2440)) _bstr_t IAS_WavefrontMap::GetContourFormat ( );
__declspec(implementation_key(2441)) void IAS_WavefrontMap::PutContourFormat ( _bstr_t pRetVal );
__declspec(implementation_key(2442)) IAS_FieldPtr IAS_Foucault::GetField ( );
__declspec(implementation_key(2443)) IAS_WavelengthPtr IAS_Foucault::GetWavelength ( );
__declspec(implementation_key(2444)) enum Types IAS_Foucault::GetType ( );
__declspec(implementation_key(2445)) void IAS_Foucault::PutType ( enum Types pRetVal );
__declspec(implementation_key(2446)) enum SampleSizes IAS_Foucault::GetSampling ( );
__declspec(implementation_key(2447)) void IAS_Foucault::PutSampling ( enum SampleSizes pRetVal );
__declspec(implementation_key(2448)) enum FoucaultShowAs IAS_Foucault::GetShowAs ( );
__declspec(implementation_key(2449)) void IAS_Foucault::PutShowAs ( enum FoucaultShowAs pRetVal );
__declspec(implementation_key(2450)) enum KnifeType IAS_Foucault::GetKnife ( );
__declspec(implementation_key(2451)) void IAS_Foucault::PutKnife ( enum KnifeType pRetVal );
__declspec(implementation_key(2452)) enum ZOSAPI_Analysis_Settings_Wavefront_DataType IAS_Foucault::GetData ( );
__declspec(implementation_key(2453)) void IAS_Foucault::PutData ( enum ZOSAPI_Analysis_Settings_Wavefront_DataType pRetVal );
__declspec(implementation_key(2454)) long IAS_Foucault::GetRowColumn ( );
__declspec(implementation_key(2455)) void IAS_Foucault::PutRowColumn ( long pRetVal );
__declspec(implementation_key(2456)) VARIANT_BOOL IAS_Foucault::GetUsePolarization ( );
__declspec(implementation_key(2457)) void IAS_Foucault::PutUsePolarization ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2458)) double IAS_Foucault::GetY_Position ( );
__declspec(implementation_key(2459)) void IAS_Foucault::PutY_Position ( double pRetVal );
__declspec(implementation_key(2460)) double IAS_Foucault::GetDecenter_X ( );
__declspec(implementation_key(2461)) void IAS_Foucault::PutDecenter_X ( double pRetVal );
__declspec(implementation_key(2462)) double IAS_Foucault::GetDecenter_Y ( );
__declspec(implementation_key(2463)) void IAS_Foucault::PutDecenter_Y ( double pRetVal );
__declspec(implementation_key(2464)) double IAS_Foucault::GetScale_X ( );
__declspec(implementation_key(2465)) void IAS_Foucault::PutScale_X ( double pRetVal );
__declspec(implementation_key(2466)) double IAS_Foucault::GetScale_Y ( );
__declspec(implementation_key(2467)) void IAS_Foucault::PutScale_Y ( double pRetVal );
__declspec(implementation_key(2468)) _bstr_t IAS_Foucault::Getsource ( );
__declspec(implementation_key(2469)) void IAS_Foucault::Putsource ( _bstr_t pRetVal );
__declspec(implementation_key(2470)) _bstr_t IAS_Foucault::GetSaveBMP ( );
__declspec(implementation_key(2471)) void IAS_Foucault::PutSaveBMP ( _bstr_t pRetVal );
__declspec(implementation_key(2472)) IAS_SurfacePtr IAS_SurfaceSag::GetSurface ( );
__declspec(implementation_key(2473)) enum SampleSizes_Pow2Plus1_X IAS_SurfaceSag::GetSampling ( );
__declspec(implementation_key(2474)) void IAS_SurfaceSag::PutSampling ( enum SampleSizes_Pow2Plus1_X pRetVal );
__declspec(implementation_key(2475)) enum SurfaceSagData IAS_SurfaceSag::GetData ( );
__declspec(implementation_key(2476)) void IAS_SurfaceSag::PutData ( enum SurfaceSagData pRetVal );
__declspec(implementation_key(2477)) enum ShowAs IAS_SurfaceSag::GetShowAs ( );
__declspec(implementation_key(2478)) void IAS_SurfaceSag::PutShowAs ( enum ShowAs pRetVal );
__declspec(implementation_key(2479)) _bstr_t IAS_SurfaceSag::GetContourFormat ( );
__declspec(implementation_key(2480)) void IAS_SurfaceSag::PutContourFormat ( _bstr_t pRetVal );
__declspec(implementation_key(2481)) IAS_SurfacePtr IAS_SurfacePhase::GetSurface ( );
__declspec(implementation_key(2482)) enum SampleSizes_Pow2Plus1_X IAS_SurfacePhase::GetSampling ( );
__declspec(implementation_key(2483)) void IAS_SurfacePhase::PutSampling ( enum SampleSizes_Pow2Plus1_X pRetVal );
__declspec(implementation_key(2484)) enum SurfacePhaseData IAS_SurfacePhase::GetData ( );
__declspec(implementation_key(2485)) void IAS_SurfacePhase::PutData ( enum SurfacePhaseData pRetVal );
__declspec(implementation_key(2486)) enum ShowAs IAS_SurfacePhase::GetShowAs ( );
__declspec(implementation_key(2487)) void IAS_SurfacePhase::PutShowAs ( enum ShowAs pRetVal );
__declspec(implementation_key(2488)) _bstr_t IAS_SurfacePhase::GetContourFormat ( );
__declspec(implementation_key(2489)) void IAS_SurfacePhase::PutContourFormat ( _bstr_t pRetVal );
__declspec(implementation_key(2490)) IAS_SurfacePtr IAS_SurfaceCurvature::GetSurface ( );
__declspec(implementation_key(2491)) enum SampleSizes_Pow2Plus1_X IAS_SurfaceCurvature::GetSampling ( );
__declspec(implementation_key(2492)) void IAS_SurfaceCurvature::PutSampling ( enum SampleSizes_Pow2Plus1_X pRetVal );
__declspec(implementation_key(2493)) enum SurfaceCurvatureData IAS_SurfaceCurvature::GetData ( );
__declspec(implementation_key(2494)) void IAS_SurfaceCurvature::PutData ( enum SurfaceCurvatureData pRetVal );
__declspec(implementation_key(2495)) enum ShowAs IAS_SurfaceCurvature::GetShowAs ( );
__declspec(implementation_key(2496)) void IAS_SurfaceCurvature::PutShowAs ( enum ShowAs pRetVal );
__declspec(implementation_key(2497)) _bstr_t IAS_SurfaceCurvature::GetContourFormat ( );
__declspec(implementation_key(2498)) void IAS_SurfaceCurvature::PutContourFormat ( _bstr_t pRetVal );
__declspec(implementation_key(2499)) IAS_SurfacePtr IAS_SurfaceSagCross::GetSurface ( );
__declspec(implementation_key(2500)) enum SurfaceSagData IAS_SurfaceSagCross::GetData ( );
__declspec(implementation_key(2501)) void IAS_SurfaceSagCross::PutData ( enum SurfaceSagData pRetVal );
__declspec(implementation_key(2502)) enum SampleSizes_Pow2Plus1 IAS_SurfaceSagCross::GetSampling ( );
__declspec(implementation_key(2503)) void IAS_SurfaceSagCross::PutSampling ( enum SampleSizes_Pow2Plus1 pRetVal );
__declspec(implementation_key(2504)) double IAS_SurfaceSagCross::GetAngle ( );
__declspec(implementation_key(2505)) void IAS_SurfaceSagCross::PutAngle ( double pRetVal );
__declspec(implementation_key(2506)) IAS_SurfacePtr IAS_SurfacePhaseCross::GetSurface ( );
__declspec(implementation_key(2507)) enum SurfacePhaseData IAS_SurfacePhaseCross::GetData ( );
__declspec(implementation_key(2508)) void IAS_SurfacePhaseCross::PutData ( enum SurfacePhaseData pRetVal );
__declspec(implementation_key(2509)) enum SampleSizes_Pow2Plus1 IAS_SurfacePhaseCross::GetSampling ( );
__declspec(implementation_key(2510)) void IAS_SurfacePhaseCross::PutSampling ( enum SampleSizes_Pow2Plus1 pRetVal );
__declspec(implementation_key(2511)) double IAS_SurfacePhaseCross::GetAngle ( );
__declspec(implementation_key(2512)) void IAS_SurfacePhaseCross::PutAngle ( double pRetVal );
__declspec(implementation_key(2513)) IAS_SurfacePtr IAS_SurfaceCurvatureCross::GetSurface ( );
__declspec(implementation_key(2514)) enum SurfaceCurvatureCrossData IAS_SurfaceCurvatureCross::GetData ( );
__declspec(implementation_key(2515)) void IAS_SurfaceCurvatureCross::PutData ( enum SurfaceCurvatureCrossData pRetVal );
__declspec(implementation_key(2516)) enum SampleSizes_Pow2Plus1 IAS_SurfaceCurvatureCross::GetSampling ( );
__declspec(implementation_key(2517)) void IAS_SurfaceCurvatureCross::PutSampling ( enum SampleSizes_Pow2Plus1 pRetVal );
__declspec(implementation_key(2518)) double IAS_SurfaceCurvatureCross::GetAngle ( );
__declspec(implementation_key(2519)) void IAS_SurfaceCurvatureCross::PutAngle ( double pRetVal );
__declspec(implementation_key(2520)) IAS_FieldPtr IAS_Spot::GetField ( );
__declspec(implementation_key(2521)) IAS_SurfacePtr IAS_Spot::GetSurface ( );
__declspec(implementation_key(2522)) IAS_WavelengthPtr IAS_Spot::GetWavelength ( );
__declspec(implementation_key(2523)) enum Patterns IAS_Spot::GetPattern ( );
__declspec(implementation_key(2524)) void IAS_Spot::PutPattern ( enum Patterns pRetVal );
__declspec(implementation_key(2525)) enum Reference IAS_Spot::GetReferTo ( );
__declspec(implementation_key(2526)) void IAS_Spot::PutReferTo ( enum Reference pRetVal );
__declspec(implementation_key(2527)) enum ShowScales IAS_Spot::GetShowScale ( );
__declspec(implementation_key(2528)) void IAS_Spot::PutShowScale ( enum ShowScales pRetVal );
__declspec(implementation_key(2529)) enum ColorRaysBy IAS_Spot::GetColorRaysBy ( );
__declspec(implementation_key(2530)) void IAS_Spot::PutColorRaysBy ( enum ColorRaysBy pRetVal );
__declspec(implementation_key(2531)) long IAS_Spot::GetRayDensity ( );
__declspec(implementation_key(2532)) void IAS_Spot::PutRayDensity ( long pRetVal );
__declspec(implementation_key(2533)) long IAS_Spot::GetConfiguration ( );
__declspec(implementation_key(2534)) void IAS_Spot::PutConfiguration ( long pRetVal );
__declspec(implementation_key(2535)) VARIANT_BOOL IAS_Spot::GetDirectionCosines ( );
__declspec(implementation_key(2536)) void IAS_Spot::PutDirectionCosines ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2537)) VARIANT_BOOL IAS_Spot::GetUseSymbols ( );
__declspec(implementation_key(2538)) void IAS_Spot::PutUseSymbols ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2539)) VARIANT_BOOL IAS_Spot::GetUsePolarization ( );
__declspec(implementation_key(2540)) void IAS_Spot::PutUsePolarization ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2541)) VARIANT_BOOL IAS_Spot::GetScatterRays ( );
__declspec(implementation_key(2542)) void IAS_Spot::PutScatterRays ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2543)) VARIANT_BOOL IAS_Spot::GetShowAiryDisk ( );
__declspec(implementation_key(2544)) void IAS_Spot::PutShowAiryDisk ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2545)) VARIANT_BOOL IAS_Spot::GetIgnoreLateralColor ( );
__declspec(implementation_key(2546)) void IAS_Spot::PutIgnoreLateralColor ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2547)) double IAS_Spot::GetPlotScale ( );
__declspec(implementation_key(2548)) void IAS_Spot::PutPlotScale ( double pRetVal );
__declspec(implementation_key(2549)) double IAS_Spot::GetDeltaFocus ( );
__declspec(implementation_key(2550)) void IAS_Spot::PutDeltaFocus ( double pRetVal );
__declspec(implementation_key(2551)) double IAS_Spot::GetExaggerate ( );
__declspec(implementation_key(2552)) void IAS_Spot::PutExaggerate ( double pRetVal );
__declspec(implementation_key(2553)) IAS_WavelengthPtr IAS_RMSField::GetWavelength ( );
__declspec(implementation_key(2554)) enum ZOSAPI_Analysis_Settings_RMS_RMSField_DataType IAS_RMSField::GetData ( );
__declspec(implementation_key(2555)) void IAS_RMSField::PutData ( enum ZOSAPI_Analysis_Settings_RMS_RMSField_DataType pRetVal );
__declspec(implementation_key(2556)) enum FieldDensities IAS_RMSField::GetFieldDensity ( );
__declspec(implementation_key(2557)) void IAS_RMSField::PutFieldDensity ( enum FieldDensities pRetVal );
__declspec(implementation_key(2558)) enum RayDensities IAS_RMSField::GetRayDensity ( );
__declspec(implementation_key(2559)) void IAS_RMSField::PutRayDensity ( enum RayDensities pRetVal );
__declspec(implementation_key(2560)) enum ReferTo IAS_RMSField::GetReferTo ( );
__declspec(implementation_key(2561)) void IAS_RMSField::PutReferTo ( enum ReferTo pRetVal );
__declspec(implementation_key(2562)) enum Method IAS_RMSField::GetMethod ( );
__declspec(implementation_key(2563)) void IAS_RMSField::PutMethod ( enum Method pRetVal );
__declspec(implementation_key(2564)) enum Orientations IAS_RMSField::GetOrientation ( );
__declspec(implementation_key(2565)) void IAS_RMSField::PutOrientation ( enum Orientations pRetVal );
__declspec(implementation_key(2566)) VARIANT_BOOL IAS_RMSField::GetShowDiffractionLimit ( );
__declspec(implementation_key(2567)) void IAS_RMSField::PutShowDiffractionLimit ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2568)) VARIANT_BOOL IAS_RMSField::GetUseDashes ( );
__declspec(implementation_key(2569)) void IAS_RMSField::PutUseDashes ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2570)) VARIANT_BOOL IAS_RMSField::GetUsePolarization ( );
__declspec(implementation_key(2571)) void IAS_RMSField::PutUsePolarization ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2572)) VARIANT_BOOL IAS_RMSField::GetRemoveVignettingFactors ( );
__declspec(implementation_key(2573)) void IAS_RMSField::PutRemoveVignettingFactors ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2574)) double IAS_RMSField::GetPlotScale ( );
__declspec(implementation_key(2575)) void IAS_RMSField::PutPlotScale ( double pRetVal );
__declspec(implementation_key(2576)) IAS_FieldPtr IAS_RMSLambdaDiagram::GetField ( );
__declspec(implementation_key(2577)) enum RayDensities IAS_RMSLambdaDiagram::GetRayDensity ( );
__declspec(implementation_key(2578)) void IAS_RMSLambdaDiagram::PutRayDensity ( enum RayDensities pRetVal );
__declspec(implementation_key(2579)) enum WaveDensities IAS_RMSLambdaDiagram::GetWaveDensity ( );
__declspec(implementation_key(2580)) void IAS_RMSLambdaDiagram::PutWaveDensity ( enum WaveDensities pRetVal );
__declspec(implementation_key(2581)) enum ZOSAPI_Analysis_Settings_RMS_RMSField_DataType IAS_RMSLambdaDiagram::GetData ( );
__declspec(implementation_key(2582)) void IAS_RMSLambdaDiagram::PutData ( enum ZOSAPI_Analysis_Settings_RMS_RMSField_DataType pRetVal );
__declspec(implementation_key(2583)) enum ReferTo IAS_RMSLambdaDiagram::GetReferTo ( );
__declspec(implementation_key(2584)) void IAS_RMSLambdaDiagram::PutReferTo ( enum ReferTo pRetVal );
__declspec(implementation_key(2585)) enum Method IAS_RMSLambdaDiagram::GetMethod ( );
__declspec(implementation_key(2586)) void IAS_RMSLambdaDiagram::PutMethod ( enum Method pRetVal );
__declspec(implementation_key(2587)) VARIANT_BOOL IAS_RMSLambdaDiagram::GetUseDashes ( );
__declspec(implementation_key(2588)) void IAS_RMSLambdaDiagram::PutUseDashes ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2589)) VARIANT_BOOL IAS_RMSLambdaDiagram::GetShowDiffractionLimit ( );
__declspec(implementation_key(2590)) void IAS_RMSLambdaDiagram::PutShowDiffractionLimit ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2591)) VARIANT_BOOL IAS_RMSLambdaDiagram::GetUsePolarization ( );
__declspec(implementation_key(2592)) void IAS_RMSLambdaDiagram::PutUsePolarization ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2593)) double IAS_RMSLambdaDiagram::GetPlotScale ( );
__declspec(implementation_key(2594)) void IAS_RMSLambdaDiagram::PutPlotScale ( double pRetVal );
__declspec(implementation_key(2595)) IAS_WavelengthPtr IAS_RMSFocus::GetWavelength ( );
__declspec(implementation_key(2596)) enum RayDensities IAS_RMSFocus::GetRayDensity ( );
__declspec(implementation_key(2597)) void IAS_RMSFocus::PutRayDensity ( enum RayDensities pRetVal );
__declspec(implementation_key(2598)) enum FocusDensities IAS_RMSFocus::GetFocusDensity ( );
__declspec(implementation_key(2599)) void IAS_RMSFocus::PutFocusDensity ( enum FocusDensities pRetVal );
__declspec(implementation_key(2600)) enum ZOSAPI_Analysis_Settings_RMS_RMSField_DataType IAS_RMSFocus::GetData ( );
__declspec(implementation_key(2601)) void IAS_RMSFocus::PutData ( enum ZOSAPI_Analysis_Settings_RMS_RMSField_DataType pRetVal );
__declspec(implementation_key(2602)) enum ReferTo IAS_RMSFocus::GetReferTo ( );
__declspec(implementation_key(2603)) void IAS_RMSFocus::PutReferTo ( enum ReferTo pRetVal );
__declspec(implementation_key(2604)) enum Method IAS_RMSFocus::GetMethod ( );
__declspec(implementation_key(2605)) void IAS_RMSFocus::PutMethod ( enum Method pRetVal );
__declspec(implementation_key(2606)) VARIANT_BOOL IAS_RMSFocus::GetUseDashes ( );
__declspec(implementation_key(2607)) void IAS_RMSFocus::PutUseDashes ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2608)) VARIANT_BOOL IAS_RMSFocus::GetShowDiffractionLimit ( );
__declspec(implementation_key(2609)) void IAS_RMSFocus::PutShowDiffractionLimit ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2610)) VARIANT_BOOL IAS_RMSFocus::GetUsePolarization ( );
__declspec(implementation_key(2611)) void IAS_RMSFocus::PutUsePolarization ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2612)) double IAS_RMSFocus::GetPlotScale ( );
__declspec(implementation_key(2613)) void IAS_RMSFocus::PutPlotScale ( double pRetVal );
__declspec(implementation_key(2614)) double IAS_RMSFocus::GetMinimumFocus ( );
__declspec(implementation_key(2615)) void IAS_RMSFocus::PutMinimumFocus ( double pRetVal );
__declspec(implementation_key(2616)) double IAS_RMSFocus::GetMaximumFocus ( );
__declspec(implementation_key(2617)) void IAS_RMSFocus::PutMaximumFocus ( double pRetVal );
__declspec(implementation_key(2618)) IAS_FieldPtr IAS_RMSFieldMap::GetField ( );
__declspec(implementation_key(2619)) IAS_SurfacePtr IAS_RMSFieldMap::GetSurface ( );
__declspec(implementation_key(2620)) IAS_WavelengthPtr IAS_RMSFieldMap::GetWavelength ( );
__declspec(implementation_key(2621)) enum ZOSAPI_Analysis_Settings_RMS_RMSFieldMap_DataType IAS_RMSFieldMap::GetData ( );
__declspec(implementation_key(2622)) void IAS_RMSFieldMap::PutData ( enum ZOSAPI_Analysis_Settings_RMS_RMSFieldMap_DataType pRetVal );
__declspec(implementation_key(2623)) enum Method IAS_RMSFieldMap::GetMethodType ( );
__declspec(implementation_key(2624)) void IAS_RMSFieldMap::PutMethodType ( enum Method pRetVal );
__declspec(implementation_key(2625)) enum RayDensities IAS_RMSFieldMap::GetRayDensity ( );
__declspec(implementation_key(2626)) void IAS_RMSFieldMap::PutRayDensity ( enum RayDensities pRetVal );
__declspec(implementation_key(2627)) enum ReferTo IAS_RMSFieldMap::GetReferTo ( );
__declspec(implementation_key(2628)) void IAS_RMSFieldMap::PutReferTo ( enum ReferTo pRetVal );
__declspec(implementation_key(2629)) enum ShowAs IAS_RMSFieldMap::GetShowAs ( );
__declspec(implementation_key(2630)) void IAS_RMSFieldMap::PutShowAs ( enum ShowAs pRetVal );
__declspec(implementation_key(2631)) VARIANT_BOOL IAS_RMSFieldMap::GetUsePolarization ( );
__declspec(implementation_key(2632)) void IAS_RMSFieldMap::PutUsePolarization ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2633)) VARIANT_BOOL IAS_RMSFieldMap::GetRemoveVignettingFactors ( );
__declspec(implementation_key(2634)) void IAS_RMSFieldMap::PutRemoveVignettingFactors ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2635)) long IAS_RMSFieldMap::GetX_FieldSampling ( );
__declspec(implementation_key(2636)) void IAS_RMSFieldMap::PutX_FieldSampling ( long pRetVal );
__declspec(implementation_key(2637)) long IAS_RMSFieldMap::GetY_FieldSampling ( );
__declspec(implementation_key(2638)) void IAS_RMSFieldMap::PutY_FieldSampling ( long pRetVal );
__declspec(implementation_key(2639)) double IAS_RMSFieldMap::GetX_FieldSize ( );
__declspec(implementation_key(2640)) void IAS_RMSFieldMap::PutX_FieldSize ( double pRetVal );
__declspec(implementation_key(2641)) double IAS_RMSFieldMap::GetY_FieldSize ( );
__declspec(implementation_key(2642)) void IAS_RMSFieldMap::PutY_FieldSize ( double pRetVal );
__declspec(implementation_key(2643)) double IAS_RMSFieldMap::GetPlotScale ( );
__declspec(implementation_key(2644)) void IAS_RMSFieldMap::PutPlotScale ( double pRetVal );
__declspec(implementation_key(2645)) _bstr_t IAS_RMSFieldMap::GetContourFormat ( );
__declspec(implementation_key(2646)) void IAS_RMSFieldMap::PutContourFormat ( _bstr_t pRetVal );
__declspec(implementation_key(2647)) IAS_SurfacePtr IAS_DetectorViewer::GetSurface ( );
__declspec(implementation_key(2648)) IAS_DetectorPtr IAS_DetectorViewer::GetDetector ( );
__declspec(implementation_key(2649)) enum DetectorViewerShowAsTypes IAS_DetectorViewer::GetShowAs ( );
__declspec(implementation_key(2650)) void IAS_DetectorViewer::PutShowAs ( enum DetectorViewerShowAsTypes pRetVal );
__declspec(implementation_key(2651)) enum DetectorViewerScaleTypes IAS_DetectorViewer::GetScale ( );
__declspec(implementation_key(2652)) void IAS_DetectorViewer::PutScale ( enum DetectorViewerScaleTypes pRetVal );
__declspec(implementation_key(2653)) enum DetectorViewerShowDataTypes IAS_DetectorViewer::GetDataType ( );
__declspec(implementation_key(2654)) void IAS_DetectorViewer::PutDataType ( enum DetectorViewerShowDataTypes pRetVal );
__declspec(implementation_key(2655)) long IAS_DetectorViewer::GetSymbolType ( );
__declspec(implementation_key(2656)) void IAS_DetectorViewer::PutSymbolType ( long pRetVal );
__declspec(implementation_key(2657)) long IAS_DetectorViewer::GetConfiguration ( );
__declspec(implementation_key(2658)) void IAS_DetectorViewer::PutConfiguration ( long pRetVal );
__declspec(implementation_key(2659)) long IAS_DetectorViewer::GetExtraProperty ( );
__declspec(implementation_key(2660)) void IAS_DetectorViewer::PutExtraProperty ( long pRetVal );
__declspec(implementation_key(2661)) long IAS_DetectorViewer::GetSmoothing ( );
__declspec(implementation_key(2662)) void IAS_DetectorViewer::PutSmoothing ( long pRetVal );
__declspec(implementation_key(2663)) long IAS_DetectorViewer::GetRowCol ( );
__declspec(implementation_key(2664)) void IAS_DetectorViewer::PutRowCol ( long pRetVal );
__declspec(implementation_key(2665)) long IAS_DetectorViewer::GetZplane ( );
__declspec(implementation_key(2666)) void IAS_DetectorViewer::PutZplane ( long pRetVal );
__declspec(implementation_key(2667)) unsigned short IAS_DetectorViewer::GetContrast ( );
__declspec(implementation_key(2668)) void IAS_DetectorViewer::PutContrast ( unsigned short pRetVal );
__declspec(implementation_key(2669)) SAFEARRAY * IAS_DetectorViewer::GetAngleList ( );
__declspec(implementation_key(2670)) void IAS_DetectorViewer::PutAngleList ( SAFEARRAY * pRetVal );
__declspec(implementation_key(2671)) double IAS_DetectorViewer::GetPlotScaleMinimum ( );
__declspec(implementation_key(2672)) void IAS_DetectorViewer::PutPlotScaleMinimum ( double pRetVal );
__declspec(implementation_key(2673)) double IAS_DetectorViewer::GetPlotScaleMaximum ( );
__declspec(implementation_key(2674)) void IAS_DetectorViewer::PutPlotScaleMaximum ( double pRetVal );
__declspec(implementation_key(2675)) _bstr_t IAS_DetectorViewer::GetRayDatabaseFilename ( );
__declspec(implementation_key(2676)) void IAS_DetectorViewer::PutRayDatabaseFilename ( _bstr_t pRetVal );
__declspec(implementation_key(2677)) _bstr_t IAS_DetectorViewer::GetFilter ( );
__declspec(implementation_key(2678)) void IAS_DetectorViewer::PutFilter ( _bstr_t pRetVal );
__declspec(implementation_key(2679)) _bstr_t IAS_DetectorViewer::GetOutFile ( );
__declspec(implementation_key(2680)) void IAS_DetectorViewer::PutOutFile ( _bstr_t pRetVal );
__declspec(implementation_key(2681)) VARIANT_BOOL IAS_DetectorViewer::GetSuppressFrame ( );
__declspec(implementation_key(2682)) void IAS_DetectorViewer::PutSuppressFrame ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2683)) long IAS_DetectorViewer::GetNumberOfNonSequentialSurfaces ( );
__declspec(implementation_key(2684)) _bstr_t IAS_DetectorViewer::GetNonSequentialSurfaceName ( long index );
__declspec(implementation_key(2685)) long IAS_DetectorViewer::GetNonSequentialSurfaceNumber ( long index );
__declspec(implementation_key(2686)) long IAS_DetectorViewer::GetNumberOfDetectorsOnSurface ( );
__declspec(implementation_key(2687)) _bstr_t IAS_DetectorViewer::GetDetectorName ( long index );
__declspec(implementation_key(2688)) long IAS_DetectorViewer::GetDetectorObjectNumber ( long index );
__declspec(implementation_key(2689)) long IAS_DetectorViewer::GetNumberOfShowAsTypes ( );
__declspec(implementation_key(2690)) _bstr_t IAS_DetectorViewer::GetShowAsTypeNameAt ( long idx );
__declspec(implementation_key(2691)) VARIANT_BOOL IAS_DetectorViewer::IsValidDetector ( long N );
__declspec(implementation_key(2692)) IAS_FieldPtr IAS_FftPsfCrossSection::GetField ( );
__declspec(implementation_key(2693)) IAS_WavelengthPtr IAS_FftPsfCrossSection::GetWavelength ( );
__declspec(implementation_key(2694)) enum SampleSizes IAS_FftPsfCrossSection::GetSampleSize ( );
__declspec(implementation_key(2695)) void IAS_FftPsfCrossSection::PutSampleSize ( enum SampleSizes pRetVal );
__declspec(implementation_key(2696)) enum PsfTypes IAS_FftPsfCrossSection::GetType ( );
__declspec(implementation_key(2697)) void IAS_FftPsfCrossSection::PutType ( enum PsfTypes pRetVal );
__declspec(implementation_key(2698)) VARIANT_BOOL IAS_FftPsfCrossSection::GetUsePolarization ( );
__declspec(implementation_key(2699)) void IAS_FftPsfCrossSection::PutUsePolarization ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2700)) VARIANT_BOOL IAS_FftPsfCrossSection::GetNormalize ( );
__declspec(implementation_key(2701)) void IAS_FftPsfCrossSection::PutNormalize ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2702)) double IAS_FftPsfCrossSection::GetPlotScale ( );
__declspec(implementation_key(2703)) void IAS_FftPsfCrossSection::PutPlotScale ( double pRetVal );
__declspec(implementation_key(2704)) long IAS_FftPsfCrossSection::GetRowCol ( );
__declspec(implementation_key(2705)) void IAS_FftPsfCrossSection::PutRowCol ( long pRetVal );
__declspec(implementation_key(2706)) IAS_FieldPtr IAS_FftPsfLineEdgeSpread::GetField ( );
__declspec(implementation_key(2707)) IAS_WavelengthPtr IAS_FftPsfLineEdgeSpread::GetWavelength ( );
__declspec(implementation_key(2708)) enum SampleSizes IAS_FftPsfLineEdgeSpread::GetSampleSize ( );
__declspec(implementation_key(2709)) void IAS_FftPsfLineEdgeSpread::PutSampleSize ( enum SampleSizes pRetVal );
__declspec(implementation_key(2710)) enum PsfSpread IAS_FftPsfLineEdgeSpread::GetSpread ( );
__declspec(implementation_key(2711)) void IAS_FftPsfLineEdgeSpread::PutSpread ( enum PsfSpread pRetVal );
__declspec(implementation_key(2712)) enum PsfTypes IAS_FftPsfLineEdgeSpread::GetType ( );
__declspec(implementation_key(2713)) void IAS_FftPsfLineEdgeSpread::PutType ( enum PsfTypes pRetVal );
__declspec(implementation_key(2714)) VARIANT_BOOL IAS_FftPsfLineEdgeSpread::GetUseCoherentPSF ( );
__declspec(implementation_key(2715)) void IAS_FftPsfLineEdgeSpread::PutUseCoherentPSF ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2716)) VARIANT_BOOL IAS_FftPsfLineEdgeSpread::GetUsePolarization ( );
__declspec(implementation_key(2717)) void IAS_FftPsfLineEdgeSpread::PutUsePolarization ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2718)) double IAS_FftPsfLineEdgeSpread::GetPlotScale ( );
__declspec(implementation_key(2719)) void IAS_FftPsfLineEdgeSpread::PutPlotScale ( double pRetVal );
__declspec(implementation_key(2720)) IAS_FieldPtr IAS_HuygensPsfCrossSection::GetField ( );
__declspec(implementation_key(2721)) IAS_WavelengthPtr IAS_HuygensPsfCrossSection::GetWavelength ( );
__declspec(implementation_key(2722)) enum SampleSizes IAS_HuygensPsfCrossSection::GetPupilSampleSize ( );
__declspec(implementation_key(2723)) void IAS_HuygensPsfCrossSection::PutPupilSampleSize ( enum SampleSizes pRetVal );
__declspec(implementation_key(2724)) enum SampleSizes IAS_HuygensPsfCrossSection::GetImageSampleSize ( );
__declspec(implementation_key(2725)) void IAS_HuygensPsfCrossSection::PutImageSampleSize ( enum SampleSizes pRetVal );
__declspec(implementation_key(2726)) enum PsfTypes IAS_HuygensPsfCrossSection::GetType ( );
__declspec(implementation_key(2727)) void IAS_HuygensPsfCrossSection::PutType ( enum PsfTypes pRetVal );
__declspec(implementation_key(2728)) VARIANT_BOOL IAS_HuygensPsfCrossSection::GetNormalize ( );
__declspec(implementation_key(2729)) void IAS_HuygensPsfCrossSection::PutNormalize ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2730)) VARIANT_BOOL IAS_HuygensPsfCrossSection::GetUseCentroid ( );
__declspec(implementation_key(2731)) void IAS_HuygensPsfCrossSection::PutUseCentroid ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2732)) VARIANT_BOOL IAS_HuygensPsfCrossSection::GetUsePolarization ( );
__declspec(implementation_key(2733)) void IAS_HuygensPsfCrossSection::PutUsePolarization ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2734)) double IAS_HuygensPsfCrossSection::GetImageDelta ( );
__declspec(implementation_key(2735)) void IAS_HuygensPsfCrossSection::PutImageDelta ( double pRetVal );
__declspec(implementation_key(2736)) long IAS_HuygensPsfCrossSection::GetConfiguration ( );
__declspec(implementation_key(2737)) void IAS_HuygensPsfCrossSection::PutConfiguration ( long pRetVal );
__declspec(implementation_key(2738)) long IAS_HuygensPsfCrossSection::GetRowCol ( );
__declspec(implementation_key(2739)) void IAS_HuygensPsfCrossSection::PutRowCol ( long pRetVal );
__declspec(implementation_key(2740)) IAS_FieldPtr IAS_HuygensPsf::GetField ( );
__declspec(implementation_key(2741)) IAS_WavelengthPtr IAS_HuygensPsf::GetWavelength ( );
__declspec(implementation_key(2742)) enum SampleSizes IAS_HuygensPsf::GetPupilSampleSize ( );
__declspec(implementation_key(2743)) void IAS_HuygensPsf::PutPupilSampleSize ( enum SampleSizes pRetVal );
__declspec(implementation_key(2744)) enum SampleSizes IAS_HuygensPsf::GetImageSampleSize ( );
__declspec(implementation_key(2745)) void IAS_HuygensPsf::PutImageSampleSize ( enum SampleSizes pRetVal );
__declspec(implementation_key(2746)) enum HuygensPsfTypes IAS_HuygensPsf::GetType ( );
__declspec(implementation_key(2747)) void IAS_HuygensPsf::PutType ( enum HuygensPsfTypes pRetVal );
__declspec(implementation_key(2748)) enum HuygensShowAsTypes IAS_HuygensPsf::GetShowAsType ( );
__declspec(implementation_key(2749)) void IAS_HuygensPsf::PutShowAsType ( enum HuygensShowAsTypes pRetVal );
__declspec(implementation_key(2750)) enum Rotations IAS_HuygensPsf::GetRotation ( );
__declspec(implementation_key(2751)) void IAS_HuygensPsf::PutRotation ( enum Rotations pRetVal );
__declspec(implementation_key(2752)) VARIANT_BOOL IAS_HuygensPsf::GetNormalize ( );
__declspec(implementation_key(2753)) void IAS_HuygensPsf::PutNormalize ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2754)) VARIANT_BOOL IAS_HuygensPsf::GetUseCentroid ( );
__declspec(implementation_key(2755)) void IAS_HuygensPsf::PutUseCentroid ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2756)) VARIANT_BOOL IAS_HuygensPsf::GetUsePolarization ( );
__declspec(implementation_key(2757)) void IAS_HuygensPsf::PutUsePolarization ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2758)) double IAS_HuygensPsf::GetImageDelta ( );
__declspec(implementation_key(2759)) void IAS_HuygensPsf::PutImageDelta ( double pRetVal );
__declspec(implementation_key(2760)) long IAS_HuygensPsf::GetConfiguration ( );
__declspec(implementation_key(2761)) void IAS_HuygensPsf::PutConfiguration ( long pRetVal );
__declspec(implementation_key(2762)) IAS_FieldPtr IAS_FftPsf::GetField ( );
__declspec(implementation_key(2763)) IAS_SurfacePtr IAS_FftPsf::GetSurface ( );
__declspec(implementation_key(2764)) IAS_WavelengthPtr IAS_FftPsf::GetWavelength ( );
__declspec(implementation_key(2765)) enum PsfSampling IAS_FftPsf::GetSampleSize ( );
__declspec(implementation_key(2766)) void IAS_FftPsf::PutSampleSize ( enum PsfSampling pRetVal );
__declspec(implementation_key(2767)) enum PsfSampling IAS_FftPsf::GetOutputSize ( );
__declspec(implementation_key(2768)) void IAS_FftPsf::PutOutputSize ( enum PsfSampling pRetVal );
__declspec(implementation_key(2769)) enum PsfRotation IAS_FftPsf::GetRotation ( );
__declspec(implementation_key(2770)) void IAS_FftPsf::PutRotation ( enum PsfRotation pRetVal );
__declspec(implementation_key(2771)) double IAS_FftPsf::GetImageDelta ( );
__declspec(implementation_key(2772)) void IAS_FftPsf::PutImageDelta ( double pRetVal );
__declspec(implementation_key(2773)) VARIANT_BOOL IAS_FftPsf::GetUsePolarization ( );
__declspec(implementation_key(2774)) void IAS_FftPsf::PutUsePolarization ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2775)) enum FftPsfType IAS_FftPsf::GetType ( );
__declspec(implementation_key(2776)) void IAS_FftPsf::PutType ( enum FftPsfType pRetVal );
__declspec(implementation_key(2777)) VARIANT_BOOL IAS_FftPsf::GetNormalize ( );
__declspec(implementation_key(2778)) void IAS_FftPsf::PutNormalize ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2779)) IAS_WavelengthPtr IAS_HuygensMtfvsField::GetWavelength ( );
__declspec(implementation_key(2780)) enum SampleSizes IAS_HuygensMtfvsField::GetSampleSize ( );
__declspec(implementation_key(2781)) void IAS_HuygensMtfvsField::PutSampleSize ( enum SampleSizes pRetVal );
__declspec(implementation_key(2782)) enum ScanTypes IAS_HuygensMtfvsField::GetScanType ( );
__declspec(implementation_key(2783)) void IAS_HuygensMtfvsField::PutScanType ( enum ScanTypes pRetVal );
__declspec(implementation_key(2784)) VARIANT_BOOL IAS_HuygensMtfvsField::GetRemoveVignetting ( );
__declspec(implementation_key(2785)) void IAS_HuygensMtfvsField::PutRemoveVignetting ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2786)) VARIANT_BOOL IAS_HuygensMtfvsField::GetUseDashes ( );
__declspec(implementation_key(2787)) void IAS_HuygensMtfvsField::PutUseDashes ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2788)) VARIANT_BOOL IAS_HuygensMtfvsField::GetUsePolarization ( );
__declspec(implementation_key(2789)) void IAS_HuygensMtfvsField::PutUsePolarization ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2790)) double IAS_HuygensMtfvsField::GetFreq_1 ( );
__declspec(implementation_key(2791)) void IAS_HuygensMtfvsField::PutFreq_1 ( double pRetVal );
__declspec(implementation_key(2792)) double IAS_HuygensMtfvsField::GetFreq_2 ( );
__declspec(implementation_key(2793)) void IAS_HuygensMtfvsField::PutFreq_2 ( double pRetVal );
__declspec(implementation_key(2794)) double IAS_HuygensMtfvsField::GetFreq_3 ( );
__declspec(implementation_key(2795)) void IAS_HuygensMtfvsField::PutFreq_3 ( double pRetVal );
__declspec(implementation_key(2796)) double IAS_HuygensMtfvsField::GetFreq_4 ( );
__declspec(implementation_key(2797)) void IAS_HuygensMtfvsField::PutFreq_4 ( double pRetVal );
__declspec(implementation_key(2798)) double IAS_HuygensMtfvsField::GetFreq_5 ( );
__declspec(implementation_key(2799)) void IAS_HuygensMtfvsField::PutFreq_5 ( double pRetVal );
__declspec(implementation_key(2800)) double IAS_HuygensMtfvsField::GetFreq_6 ( );
__declspec(implementation_key(2801)) void IAS_HuygensMtfvsField::PutFreq_6 ( double pRetVal );
__declspec(implementation_key(2802)) long IAS_HuygensMtfvsField::GetFieldDensity ( );
__declspec(implementation_key(2803)) void IAS_HuygensMtfvsField::PutFieldDensity ( long pRetVal );
__declspec(implementation_key(2804)) IAS_WavelengthPtr IAS_GeometricMtfvsField::GetWavelength ( );
__declspec(implementation_key(2805)) enum SampleSizes IAS_GeometricMtfvsField::GetSampleSize ( );
__declspec(implementation_key(2806)) void IAS_GeometricMtfvsField::PutSampleSize ( enum SampleSizes pRetVal );
__declspec(implementation_key(2807)) enum ScanTypes IAS_GeometricMtfvsField::GetScanType ( );
__declspec(implementation_key(2808)) void IAS_GeometricMtfvsField::PutScanType ( enum ScanTypes pRetVal );
__declspec(implementation_key(2809)) VARIANT_BOOL IAS_GeometricMtfvsField::GetMultiplyByDiffractionLimit ( );
__declspec(implementation_key(2810)) void IAS_GeometricMtfvsField::PutMultiplyByDiffractionLimit ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2811)) VARIANT_BOOL IAS_GeometricMtfvsField::GetScatterRays ( );
__declspec(implementation_key(2812)) void IAS_GeometricMtfvsField::PutScatterRays ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2813)) VARIANT_BOOL IAS_GeometricMtfvsField::GetRemoveVignetting ( );
__declspec(implementation_key(2814)) void IAS_GeometricMtfvsField::PutRemoveVignetting ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2815)) VARIANT_BOOL IAS_GeometricMtfvsField::GetUseDashes ( );
__declspec(implementation_key(2816)) void IAS_GeometricMtfvsField::PutUseDashes ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2817)) VARIANT_BOOL IAS_GeometricMtfvsField::GetUsePolarization ( );
__declspec(implementation_key(2818)) void IAS_GeometricMtfvsField::PutUsePolarization ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2819)) double IAS_GeometricMtfvsField::GetFreq_1 ( );
__declspec(implementation_key(2820)) void IAS_GeometricMtfvsField::PutFreq_1 ( double pRetVal );
__declspec(implementation_key(2821)) double IAS_GeometricMtfvsField::GetFreq_2 ( );
__declspec(implementation_key(2822)) void IAS_GeometricMtfvsField::PutFreq_2 ( double pRetVal );
__declspec(implementation_key(2823)) double IAS_GeometricMtfvsField::GetFreq_3 ( );
__declspec(implementation_key(2824)) void IAS_GeometricMtfvsField::PutFreq_3 ( double pRetVal );
__declspec(implementation_key(2825)) double IAS_GeometricMtfvsField::GetFreq_4 ( );
__declspec(implementation_key(2826)) void IAS_GeometricMtfvsField::PutFreq_4 ( double pRetVal );
__declspec(implementation_key(2827)) double IAS_GeometricMtfvsField::GetFreq_5 ( );
__declspec(implementation_key(2828)) void IAS_GeometricMtfvsField::PutFreq_5 ( double pRetVal );
__declspec(implementation_key(2829)) double IAS_GeometricMtfvsField::GetFreq_6 ( );
__declspec(implementation_key(2830)) void IAS_GeometricMtfvsField::PutFreq_6 ( double pRetVal );
__declspec(implementation_key(2831)) long IAS_GeometricMtfvsField::GetFieldDensity ( );
__declspec(implementation_key(2832)) void IAS_GeometricMtfvsField::PutFieldDensity ( long pRetVal );
__declspec(implementation_key(2833)) IAS_FieldPtr IAS_GeometricMtf::GetField ( );
__declspec(implementation_key(2834)) IAS_WavelengthPtr IAS_GeometricMtf::GetWavelength ( );
__declspec(implementation_key(2835)) enum SampleSizes IAS_GeometricMtf::GetSampleSize ( );
__declspec(implementation_key(2836)) void IAS_GeometricMtf::PutSampleSize ( enum SampleSizes pRetVal );
__declspec(implementation_key(2837)) VARIANT_BOOL IAS_GeometricMtf::GetMultiplyByDiffractionLimit ( );
__declspec(implementation_key(2838)) void IAS_GeometricMtf::PutMultiplyByDiffractionLimit ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2839)) VARIANT_BOOL IAS_GeometricMtf::GetScatterRays ( );
__declspec(implementation_key(2840)) void IAS_GeometricMtf::PutScatterRays ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2841)) VARIANT_BOOL IAS_GeometricMtf::GetUseDashes ( );
__declspec(implementation_key(2842)) void IAS_GeometricMtf::PutUseDashes ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2843)) VARIANT_BOOL IAS_GeometricMtf::GetUsePolarization ( );
__declspec(implementation_key(2844)) void IAS_GeometricMtf::PutUsePolarization ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2845)) double IAS_GeometricMtf::GetMaximumFrequency ( );
__declspec(implementation_key(2846)) void IAS_GeometricMtf::PutMaximumFrequency ( double pRetVal );
__declspec(implementation_key(2847)) IAS_FieldPtr IAS_GeometricThroughFocusMtf::GetField ( );
__declspec(implementation_key(2848)) IAS_WavelengthPtr IAS_GeometricThroughFocusMtf::GetWavelength ( );
__declspec(implementation_key(2849)) enum SampleSizes IAS_GeometricThroughFocusMtf::GetSampleSize ( );
__declspec(implementation_key(2850)) void IAS_GeometricThroughFocusMtf::PutSampleSize ( enum SampleSizes pRetVal );
__declspec(implementation_key(2851)) VARIANT_BOOL IAS_GeometricThroughFocusMtf::GetMultiplyByDiffractionLimit ( );
__declspec(implementation_key(2852)) void IAS_GeometricThroughFocusMtf::PutMultiplyByDiffractionLimit ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2853)) VARIANT_BOOL IAS_GeometricThroughFocusMtf::GetScatterRays ( );
__declspec(implementation_key(2854)) void IAS_GeometricThroughFocusMtf::PutScatterRays ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2855)) VARIANT_BOOL IAS_GeometricThroughFocusMtf::GetUseDashes ( );
__declspec(implementation_key(2856)) void IAS_GeometricThroughFocusMtf::PutUseDashes ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2857)) VARIANT_BOOL IAS_GeometricThroughFocusMtf::GetUsePolarization ( );
__declspec(implementation_key(2858)) void IAS_GeometricThroughFocusMtf::PutUsePolarization ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2859)) double IAS_GeometricThroughFocusMtf::GetDeltaFocus ( );
__declspec(implementation_key(2860)) void IAS_GeometricThroughFocusMtf::PutDeltaFocus ( double pRetVal );
__declspec(implementation_key(2861)) double IAS_GeometricThroughFocusMtf::GetFrequency ( );
__declspec(implementation_key(2862)) void IAS_GeometricThroughFocusMtf::PutFrequency ( double pRetVal );
__declspec(implementation_key(2863)) long IAS_GeometricThroughFocusMtf::GetNumberOfSteps ( );
__declspec(implementation_key(2864)) void IAS_GeometricThroughFocusMtf::PutNumberOfSteps ( long pRetVal );
__declspec(implementation_key(2865)) IAS_FieldPtr IAS_FftThroughFocusMtf::GetField ( );
__declspec(implementation_key(2866)) IAS_WavelengthPtr IAS_FftThroughFocusMtf::GetWavelength ( );
__declspec(implementation_key(2867)) enum MtfTypes IAS_FftThroughFocusMtf::GetType ( );
__declspec(implementation_key(2868)) void IAS_FftThroughFocusMtf::PutType ( enum MtfTypes pRetVal );
__declspec(implementation_key(2869)) enum SampleSizes IAS_FftThroughFocusMtf::GetSampleSize ( );
__declspec(implementation_key(2870)) void IAS_FftThroughFocusMtf::PutSampleSize ( enum SampleSizes pRetVal );
__declspec(implementation_key(2871)) VARIANT_BOOL IAS_FftThroughFocusMtf::GetUseDashes ( );
__declspec(implementation_key(2872)) void IAS_FftThroughFocusMtf::PutUseDashes ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2873)) VARIANT_BOOL IAS_FftThroughFocusMtf::GetUsePolarization ( );
__declspec(implementation_key(2874)) void IAS_FftThroughFocusMtf::PutUsePolarization ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2875)) double IAS_FftThroughFocusMtf::GetDeltaFocus ( );
__declspec(implementation_key(2876)) void IAS_FftThroughFocusMtf::PutDeltaFocus ( double pRetVal );
__declspec(implementation_key(2877)) double IAS_FftThroughFocusMtf::GetFrequency ( );
__declspec(implementation_key(2878)) void IAS_FftThroughFocusMtf::PutFrequency ( double pRetVal );
__declspec(implementation_key(2879)) long IAS_FftThroughFocusMtf::GetNumberOfSteps ( );
__declspec(implementation_key(2880)) void IAS_FftThroughFocusMtf::PutNumberOfSteps ( long pRetVal );
__declspec(implementation_key(2881)) IAS_FieldPtr IAS_FftMtf::GetField ( );
__declspec(implementation_key(2882)) IAS_SurfacePtr IAS_FftMtf::GetSurface ( );
__declspec(implementation_key(2883)) IAS_WavelengthPtr IAS_FftMtf::GetWavelength ( );
__declspec(implementation_key(2884)) enum MtfTypes IAS_FftMtf::GetType ( );
__declspec(implementation_key(2885)) void IAS_FftMtf::PutType ( enum MtfTypes pRetVal );
__declspec(implementation_key(2886)) enum SampleSizes IAS_FftMtf::GetSampleSize ( );
__declspec(implementation_key(2887)) void IAS_FftMtf::PutSampleSize ( enum SampleSizes pRetVal );
__declspec(implementation_key(2888)) VARIANT_BOOL IAS_FftMtf::GetShowDiffractionLimit ( );
__declspec(implementation_key(2889)) void IAS_FftMtf::PutShowDiffractionLimit ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2890)) VARIANT_BOOL IAS_FftMtf::GetUseDashes ( );
__declspec(implementation_key(2891)) void IAS_FftMtf::PutUseDashes ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2892)) VARIANT_BOOL IAS_FftMtf::GetUsePolarization ( );
__declspec(implementation_key(2893)) void IAS_FftMtf::PutUsePolarization ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2894)) double IAS_FftMtf::GetMaximumFrequency ( );
__declspec(implementation_key(2895)) void IAS_FftMtf::PutMaximumFrequency ( double pRetVal );
__declspec(implementation_key(2896)) IAS_FieldPtr IAS_GeometricMtfMap::GetReferenceField ( );
__declspec(implementation_key(2897)) IAS_WavelengthPtr IAS_GeometricMtfMap::GetWavelength ( );
__declspec(implementation_key(2898)) enum MtfDataTypes IAS_GeometricMtfMap::GetMTF_DataType ( );
__declspec(implementation_key(2899)) void IAS_GeometricMtfMap::PutMTF_DataType ( enum MtfDataTypes pRetVal );
__declspec(implementation_key(2900)) enum SampleSizes IAS_GeometricMtfMap::GetSampleSize ( );
__declspec(implementation_key(2901)) void IAS_GeometricMtfMap::PutSampleSize ( enum SampleSizes pRetVal );
__declspec(implementation_key(2902)) enum ShowAsTypes IAS_GeometricMtfMap::GetShowAs ( );
__declspec(implementation_key(2903)) void IAS_GeometricMtfMap::PutShowAs ( enum ShowAsTypes pRetVal );
__declspec(implementation_key(2904)) VARIANT_BOOL IAS_GeometricMtfMap::GetUsePolarization ( );
__declspec(implementation_key(2905)) void IAS_GeometricMtfMap::PutUsePolarization ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2906)) VARIANT_BOOL IAS_GeometricMtfMap::GetScatterRays ( );
__declspec(implementation_key(2907)) void IAS_GeometricMtfMap::PutScatterRays ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2908)) VARIANT_BOOL IAS_GeometricMtfMap::GetRemoveVignetting ( );
__declspec(implementation_key(2909)) void IAS_GeometricMtfMap::PutRemoveVignetting ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2910)) double IAS_GeometricMtfMap::GetFrequency ( );
__declspec(implementation_key(2911)) void IAS_GeometricMtfMap::PutFrequency ( double pRetVal );
__declspec(implementation_key(2912)) double IAS_GeometricMtfMap::GetX_Field_Width ( );
__declspec(implementation_key(2913)) void IAS_GeometricMtfMap::PutX_Field_Width ( double pRetVal );
__declspec(implementation_key(2914)) double IAS_GeometricMtfMap::GetY_Field_Width ( );
__declspec(implementation_key(2915)) void IAS_GeometricMtfMap::PutY_Field_Width ( double pRetVal );
__declspec(implementation_key(2916)) long IAS_GeometricMtfMap::GetX_Pixels ( );
__declspec(implementation_key(2917)) void IAS_GeometricMtfMap::PutX_Pixels ( long pRetVal );
__declspec(implementation_key(2918)) long IAS_GeometricMtfMap::GetY_Pixels ( );
__declspec(implementation_key(2919)) void IAS_GeometricMtfMap::PutY_Pixels ( long pRetVal );
__declspec(implementation_key(2920)) IAS_FieldPtr IAS_FftMtfMap::GetReferenceField ( );
__declspec(implementation_key(2921)) IAS_WavelengthPtr IAS_FftMtfMap::GetWavelength ( );
__declspec(implementation_key(2922)) enum MtfDataTypes IAS_FftMtfMap::GetMTF_DataType ( );
__declspec(implementation_key(2923)) void IAS_FftMtfMap::PutMTF_DataType ( enum MtfDataTypes pRetVal );
__declspec(implementation_key(2924)) enum SampleSizes IAS_FftMtfMap::GetSampleSize ( );
__declspec(implementation_key(2925)) void IAS_FftMtfMap::PutSampleSize ( enum SampleSizes pRetVal );
__declspec(implementation_key(2926)) enum ShowAsTypes IAS_FftMtfMap::GetShowAs ( );
__declspec(implementation_key(2927)) void IAS_FftMtfMap::PutShowAs ( enum ShowAsTypes pRetVal );
__declspec(implementation_key(2928)) VARIANT_BOOL IAS_FftMtfMap::GetUsePolarization ( );
__declspec(implementation_key(2929)) void IAS_FftMtfMap::PutUsePolarization ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2930)) VARIANT_BOOL IAS_FftMtfMap::GetRemoveVignetting ( );
__declspec(implementation_key(2931)) void IAS_FftMtfMap::PutRemoveVignetting ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2932)) double IAS_FftMtfMap::GetFrequency ( );
__declspec(implementation_key(2933)) void IAS_FftMtfMap::PutFrequency ( double pRetVal );
__declspec(implementation_key(2934)) double IAS_FftMtfMap::GetX_Field_Width ( );
__declspec(implementation_key(2935)) void IAS_FftMtfMap::PutX_Field_Width ( double pRetVal );
__declspec(implementation_key(2936)) double IAS_FftMtfMap::GetY_Field_Width ( );
__declspec(implementation_key(2937)) void IAS_FftMtfMap::PutY_Field_Width ( double pRetVal );
__declspec(implementation_key(2938)) long IAS_FftMtfMap::GetX_Pixels ( );
__declspec(implementation_key(2939)) void IAS_FftMtfMap::PutX_Pixels ( long pRetVal );
__declspec(implementation_key(2940)) long IAS_FftMtfMap::GetY_Pixels ( );
__declspec(implementation_key(2941)) void IAS_FftMtfMap::PutY_Pixels ( long pRetVal );
__declspec(implementation_key(2942)) IAS_FieldPtr IAS_HuygensSurfaceMtf::GetField ( );
__declspec(implementation_key(2943)) IAS_WavelengthPtr IAS_HuygensSurfaceMtf::GetWavelength ( );
__declspec(implementation_key(2944)) enum SampleSizes IAS_HuygensSurfaceMtf::GetImageSampleSize ( );
__declspec(implementation_key(2945)) void IAS_HuygensSurfaceMtf::PutImageSampleSize ( enum SampleSizes pRetVal );
__declspec(implementation_key(2946)) enum SampleSizes IAS_HuygensSurfaceMtf::GetPupilSampleSize ( );
__declspec(implementation_key(2947)) void IAS_HuygensSurfaceMtf::PutPupilSampleSize ( enum SampleSizes pRetVal );
__declspec(implementation_key(2948)) enum HuygensSurfaceMftShowAsTypes IAS_HuygensSurfaceMtf::GetShowAs ( );
__declspec(implementation_key(2949)) void IAS_HuygensSurfaceMtf::PutShowAs ( enum HuygensSurfaceMftShowAsTypes pRetVal );
__declspec(implementation_key(2950)) enum SurfaceMtfTypes IAS_HuygensSurfaceMtf::GetType ( );
__declspec(implementation_key(2951)) void IAS_HuygensSurfaceMtf::PutType ( enum SurfaceMtfTypes pRetVal );
__declspec(implementation_key(2952)) VARIANT_BOOL IAS_HuygensSurfaceMtf::GetUsePolarization ( );
__declspec(implementation_key(2953)) void IAS_HuygensSurfaceMtf::PutUsePolarization ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2954)) double IAS_HuygensSurfaceMtf::GetImageDelta ( );
__declspec(implementation_key(2955)) void IAS_HuygensSurfaceMtf::PutImageDelta ( double pRetVal );
__declspec(implementation_key(2956)) long IAS_HuygensSurfaceMtf::GetConfiguration ( );
__declspec(implementation_key(2957)) void IAS_HuygensSurfaceMtf::PutConfiguration ( long pRetVal );
__declspec(implementation_key(2958)) IAS_FieldPtr IAS_FftSurfaceMtf::GetField ( );
__declspec(implementation_key(2959)) IAS_WavelengthPtr IAS_FftSurfaceMtf::GetWavelength ( );
__declspec(implementation_key(2960)) enum SurfaceMtfTypes IAS_FftSurfaceMtf::GetType ( );
__declspec(implementation_key(2961)) void IAS_FftSurfaceMtf::PutType ( enum SurfaceMtfTypes pRetVal );
__declspec(implementation_key(2962)) enum Rotations IAS_FftSurfaceMtf::GetRotation ( );
__declspec(implementation_key(2963)) void IAS_FftSurfaceMtf::PutRotation ( enum Rotations pRetVal );
__declspec(implementation_key(2964)) enum SampleSizes IAS_FftSurfaceMtf::GetSampleSize ( );
__declspec(implementation_key(2965)) void IAS_FftSurfaceMtf::PutSampleSize ( enum SampleSizes pRetVal );
__declspec(implementation_key(2966)) enum ShowAs IAS_FftSurfaceMtf::GetShowAs ( );
__declspec(implementation_key(2967)) void IAS_FftSurfaceMtf::PutShowAs ( enum ShowAs pRetVal );
__declspec(implementation_key(2968)) VARIANT_BOOL IAS_FftSurfaceMtf::GetUsePolarization ( );
__declspec(implementation_key(2969)) void IAS_FftSurfaceMtf::PutUsePolarization ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2970)) double IAS_FftSurfaceMtf::GetScaleFactor ( );
__declspec(implementation_key(2971)) void IAS_FftSurfaceMtf::PutScaleFactor ( double pRetVal );
__declspec(implementation_key(2972)) IAS_WavelengthPtr IAS_FftMtfvsField::GetWavelength ( );
__declspec(implementation_key(2973)) enum SampleSizes IAS_FftMtfvsField::GetSampleSize ( );
__declspec(implementation_key(2974)) void IAS_FftMtfvsField::PutSampleSize ( enum SampleSizes pRetVal );
__declspec(implementation_key(2975)) enum ScanTypes IAS_FftMtfvsField::GetScanType ( );
__declspec(implementation_key(2976)) void IAS_FftMtfvsField::PutScanType ( enum ScanTypes pRetVal );
__declspec(implementation_key(2977)) VARIANT_BOOL IAS_FftMtfvsField::GetRemoveVignetting ( );
__declspec(implementation_key(2978)) void IAS_FftMtfvsField::PutRemoveVignetting ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2979)) VARIANT_BOOL IAS_FftMtfvsField::GetUseDashes ( );
__declspec(implementation_key(2980)) void IAS_FftMtfvsField::PutUseDashes ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2981)) VARIANT_BOOL IAS_FftMtfvsField::GetUsePolarization ( );
__declspec(implementation_key(2982)) void IAS_FftMtfvsField::PutUsePolarization ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(2983)) double IAS_FftMtfvsField::GetFreq_1 ( );
__declspec(implementation_key(2984)) void IAS_FftMtfvsField::PutFreq_1 ( double pRetVal );
__declspec(implementation_key(2985)) double IAS_FftMtfvsField::GetFreq_2 ( );
__declspec(implementation_key(2986)) void IAS_FftMtfvsField::PutFreq_2 ( double pRetVal );
__declspec(implementation_key(2987)) double IAS_FftMtfvsField::GetFreq_3 ( );
__declspec(implementation_key(2988)) void IAS_FftMtfvsField::PutFreq_3 ( double pRetVal );
__declspec(implementation_key(2989)) double IAS_FftMtfvsField::GetFreq_4 ( );
__declspec(implementation_key(2990)) void IAS_FftMtfvsField::PutFreq_4 ( double pRetVal );
__declspec(implementation_key(2991)) double IAS_FftMtfvsField::GetFreq_5 ( );
__declspec(implementation_key(2992)) void IAS_FftMtfvsField::PutFreq_5 ( double pRetVal );
__declspec(implementation_key(2993)) double IAS_FftMtfvsField::GetFreq_6 ( );
__declspec(implementation_key(2994)) void IAS_FftMtfvsField::PutFreq_6 ( double pRetVal );
__declspec(implementation_key(2995)) long IAS_FftMtfvsField::GetFieldDensity ( );
__declspec(implementation_key(2996)) void IAS_FftMtfvsField::PutFieldDensity ( long pRetVal );
__declspec(implementation_key(2997)) IAS_FieldPtr IAS_HuygensThroughFocusMtf::GetField ( );
__declspec(implementation_key(2998)) IAS_WavelengthPtr IAS_HuygensThroughFocusMtf::GetWavelength ( );
__declspec(implementation_key(2999)) enum SampleSizes IAS_HuygensThroughFocusMtf::GetImageSampleSize ( );
__declspec(implementation_key(3000)) void IAS_HuygensThroughFocusMtf::PutImageSampleSize ( enum SampleSizes pRetVal );
__declspec(implementation_key(3001)) enum SampleSizes IAS_HuygensThroughFocusMtf::GetPupilSampleSize ( );
__declspec(implementation_key(3002)) void IAS_HuygensThroughFocusMtf::PutPupilSampleSize ( enum SampleSizes pRetVal );
__declspec(implementation_key(3003)) enum HuygensMtfTypes IAS_HuygensThroughFocusMtf::GetType ( );
__declspec(implementation_key(3004)) void IAS_HuygensThroughFocusMtf::PutType ( enum HuygensMtfTypes pRetVal );
__declspec(implementation_key(3005)) VARIANT_BOOL IAS_HuygensThroughFocusMtf::GetUseDashes ( );
__declspec(implementation_key(3006)) void IAS_HuygensThroughFocusMtf::PutUseDashes ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(3007)) VARIANT_BOOL IAS_HuygensThroughFocusMtf::GetUsePolarization ( );
__declspec(implementation_key(3008)) void IAS_HuygensThroughFocusMtf::PutUsePolarization ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(3009)) double IAS_HuygensThroughFocusMtf::GetDeltaFocus ( );
__declspec(implementation_key(3010)) void IAS_HuygensThroughFocusMtf::PutDeltaFocus ( double pRetVal );
__declspec(implementation_key(3011)) double IAS_HuygensThroughFocusMtf::GetImageDelta ( );
__declspec(implementation_key(3012)) void IAS_HuygensThroughFocusMtf::PutImageDelta ( double pRetVal );
__declspec(implementation_key(3013)) double IAS_HuygensThroughFocusMtf::GetFrequency ( );
__declspec(implementation_key(3014)) void IAS_HuygensThroughFocusMtf::PutFrequency ( double pRetVal );
__declspec(implementation_key(3015)) long IAS_HuygensThroughFocusMtf::GetConfiguration ( );
__declspec(implementation_key(3016)) void IAS_HuygensThroughFocusMtf::PutConfiguration ( long pRetVal );
__declspec(implementation_key(3017)) long IAS_HuygensThroughFocusMtf::GetNumberOfSteps ( );
__declspec(implementation_key(3018)) void IAS_HuygensThroughFocusMtf::PutNumberOfSteps ( long pRetVal );
__declspec(implementation_key(3019)) IAS_FieldPtr IAS_HuygensMtf::GetField ( );
__declspec(implementation_key(3020)) IAS_WavelengthPtr IAS_HuygensMtf::GetWavelength ( );
__declspec(implementation_key(3021)) enum SampleSizes IAS_HuygensMtf::GetImageSampleSize ( );
__declspec(implementation_key(3022)) void IAS_HuygensMtf::PutImageSampleSize ( enum SampleSizes pRetVal );
__declspec(implementation_key(3023)) enum SampleSizes IAS_HuygensMtf::GetPupilSampleSize ( );
__declspec(implementation_key(3024)) void IAS_HuygensMtf::PutPupilSampleSize ( enum SampleSizes pRetVal );
__declspec(implementation_key(3025)) enum HuygensMtfTypes IAS_HuygensMtf::GetType ( );
__declspec(implementation_key(3026)) void IAS_HuygensMtf::PutType ( enum HuygensMtfTypes pRetVal );
__declspec(implementation_key(3027)) VARIANT_BOOL IAS_HuygensMtf::GetUseDashes ( );
__declspec(implementation_key(3028)) void IAS_HuygensMtf::PutUseDashes ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(3029)) VARIANT_BOOL IAS_HuygensMtf::GetUsePolarization ( );
__declspec(implementation_key(3030)) void IAS_HuygensMtf::PutUsePolarization ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(3031)) double IAS_HuygensMtf::GetImageDelta ( );
__declspec(implementation_key(3032)) void IAS_HuygensMtf::PutImageDelta ( double pRetVal );
__declspec(implementation_key(3033)) double IAS_HuygensMtf::GetMaximumFrequency ( );
__declspec(implementation_key(3034)) void IAS_HuygensMtf::PutMaximumFrequency ( double pRetVal );
__declspec(implementation_key(3035)) long IAS_HuygensMtf::GetConfiguration ( );
__declspec(implementation_key(3036)) void IAS_HuygensMtf::PutConfiguration ( long pRetVal );
__declspec(implementation_key(3037)) IAS_FieldPtr IAS_Fan::GetField ( );
__declspec(implementation_key(3038)) IAS_SurfacePtr IAS_Fan::GetSurface ( );
__declspec(implementation_key(3039)) IAS_WavelengthPtr IAS_Fan::GetWavelength ( );
__declspec(implementation_key(3040)) long IAS_Fan::GetNumberOfRays ( );
__declspec(implementation_key(3041)) void IAS_Fan::PutNumberOfRays ( long pRetVal );
__declspec(implementation_key(3042)) double IAS_Fan::GetPlotScale ( );
__declspec(implementation_key(3043)) void IAS_Fan::PutPlotScale ( double pRetVal );
__declspec(implementation_key(3044)) VARIANT_BOOL IAS_Fan::GetCheckApertures ( );
__declspec(implementation_key(3045)) void IAS_Fan::PutCheckApertures ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(3046)) VARIANT_BOOL IAS_Fan::GetVignettedPupil ( );
__declspec(implementation_key(3047)) void IAS_Fan::PutVignettedPupil ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(3048)) VARIANT_BOOL IAS_Fan::GetUseDashes ( );
__declspec(implementation_key(3049)) void IAS_Fan::PutUseDashes ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(3050)) enum SagittalAberrationComponent IAS_Fan::GetSagittal ( );
__declspec(implementation_key(3051)) void IAS_Fan::PutSagittal ( enum SagittalAberrationComponent pRetVal );
__declspec(implementation_key(3052)) enum TangentialAberrationComponent IAS_Fan::GetTangential ( );
__declspec(implementation_key(3053)) void IAS_Fan::PutTangential ( enum TangentialAberrationComponent pRetVal );
__declspec(implementation_key(3054)) IAS_FieldPtr IAS_GeometricLineEdgeSpread::GetField ( );
__declspec(implementation_key(3055)) IAS_SurfacePtr IAS_GeometricLineEdgeSpread::GetSurface ( );
__declspec(implementation_key(3056)) IAS_WavelengthPtr IAS_GeometricLineEdgeSpread::GetWavelength ( );
__declspec(implementation_key(3057)) enum SampleSizes IAS_GeometricLineEdgeSpread::GetSampleSize ( );
__declspec(implementation_key(3058)) void IAS_GeometricLineEdgeSpread::PutSampleSize ( enum SampleSizes pRetVal );
__declspec(implementation_key(3059)) enum GeometricLineEdgeSpreadTypes IAS_GeometricLineEdgeSpread::GetType ( );
__declspec(implementation_key(3060)) void IAS_GeometricLineEdgeSpread::PutType ( enum GeometricLineEdgeSpreadTypes pRetVal );
__declspec(implementation_key(3061)) VARIANT_BOOL IAS_GeometricLineEdgeSpread::GetUsePolarization ( );
__declspec(implementation_key(3062)) void IAS_GeometricLineEdgeSpread::PutUsePolarization ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(3063)) double IAS_GeometricLineEdgeSpread::GetRadiusMaximum ( );
__declspec(implementation_key(3064)) void IAS_GeometricLineEdgeSpread::PutRadiusMaximum ( double pRetVal );
__declspec(implementation_key(3065)) IAS_FieldPtr IAS_DiffractionEncircledEnergy::GetField ( );
__declspec(implementation_key(3066)) IAS_SurfacePtr IAS_DiffractionEncircledEnergy::GetSurface ( );
__declspec(implementation_key(3067)) IAS_WavelengthPtr IAS_DiffractionEncircledEnergy::GetWavelength ( );
__declspec(implementation_key(3068)) enum SampleSizes IAS_DiffractionEncircledEnergy::GetHuygensSample ( );
__declspec(implementation_key(3069)) void IAS_DiffractionEncircledEnergy::PutHuygensSample ( enum SampleSizes pRetVal );
__declspec(implementation_key(3070)) enum SampleSizes IAS_DiffractionEncircledEnergy::GetSampleSize ( );
__declspec(implementation_key(3071)) void IAS_DiffractionEncircledEnergy::PutSampleSize ( enum SampleSizes pRetVal );
__declspec(implementation_key(3072)) enum EncircledEnergyTypes IAS_DiffractionEncircledEnergy::GetType ( );
__declspec(implementation_key(3073)) void IAS_DiffractionEncircledEnergy::PutType ( enum EncircledEnergyTypes pRetVal );
__declspec(implementation_key(3074)) enum ReferToTypes IAS_DiffractionEncircledEnergy::GetReferTo ( );
__declspec(implementation_key(3075)) void IAS_DiffractionEncircledEnergy::PutReferTo ( enum ReferToTypes pRetVal );
__declspec(implementation_key(3076)) VARIANT_BOOL IAS_DiffractionEncircledEnergy::GetScatterRays ( );
__declspec(implementation_key(3077)) void IAS_DiffractionEncircledEnergy::PutScatterRays ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(3078)) VARIANT_BOOL IAS_DiffractionEncircledEnergy::GetShowDiffractionLimit ( );
__declspec(implementation_key(3079)) void IAS_DiffractionEncircledEnergy::PutShowDiffractionLimit ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(3080)) VARIANT_BOOL IAS_DiffractionEncircledEnergy::GetUseDashes ( );
__declspec(implementation_key(3081)) void IAS_DiffractionEncircledEnergy::PutUseDashes ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(3082)) VARIANT_BOOL IAS_DiffractionEncircledEnergy::GetUseHuygensPSF ( );
__declspec(implementation_key(3083)) void IAS_DiffractionEncircledEnergy::PutUseHuygensPSF ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(3084)) VARIANT_BOOL IAS_DiffractionEncircledEnergy::GetUsePolarization ( );
__declspec(implementation_key(3085)) void IAS_DiffractionEncircledEnergy::PutUsePolarization ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(3086)) double IAS_DiffractionEncircledEnergy::GetHuygensDelta ( );
__declspec(implementation_key(3087)) void IAS_DiffractionEncircledEnergy::PutHuygensDelta ( double pRetVal );
__declspec(implementation_key(3088)) double IAS_DiffractionEncircledEnergy::GetRadiusMaximum ( );
__declspec(implementation_key(3089)) void IAS_DiffractionEncircledEnergy::PutRadiusMaximum ( double pRetVal );
__declspec(implementation_key(3090)) IAS_FieldPtr IAS_GeometricEncircledEnergy::GetField ( );
__declspec(implementation_key(3091)) IAS_SurfacePtr IAS_GeometricEncircledEnergy::GetSurface ( );
__declspec(implementation_key(3092)) IAS_WavelengthPtr IAS_GeometricEncircledEnergy::GetWavelength ( );
__declspec(implementation_key(3093)) enum SampleSizes IAS_GeometricEncircledEnergy::GetHuygensSample ( );
__declspec(implementation_key(3094)) void IAS_GeometricEncircledEnergy::PutHuygensSample ( enum SampleSizes pRetVal );
__declspec(implementation_key(3095)) enum SampleSizes IAS_GeometricEncircledEnergy::GetSampleSize ( );
__declspec(implementation_key(3096)) void IAS_GeometricEncircledEnergy::PutSampleSize ( enum SampleSizes pRetVal );
__declspec(implementation_key(3097)) enum EncircledEnergyTypes IAS_GeometricEncircledEnergy::GetType ( );
__declspec(implementation_key(3098)) void IAS_GeometricEncircledEnergy::PutType ( enum EncircledEnergyTypes pRetVal );
__declspec(implementation_key(3099)) enum ReferToTypes IAS_GeometricEncircledEnergy::GetReferTo ( );
__declspec(implementation_key(3100)) void IAS_GeometricEncircledEnergy::PutReferTo ( enum ReferToTypes pRetVal );
__declspec(implementation_key(3101)) VARIANT_BOOL IAS_GeometricEncircledEnergy::GetScatterRays ( );
__declspec(implementation_key(3102)) void IAS_GeometricEncircledEnergy::PutScatterRays ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(3103)) VARIANT_BOOL IAS_GeometricEncircledEnergy::GetShowDiffractionLimit ( );
__declspec(implementation_key(3104)) void IAS_GeometricEncircledEnergy::PutShowDiffractionLimit ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(3105)) VARIANT_BOOL IAS_GeometricEncircledEnergy::GetUseDashes ( );
__declspec(implementation_key(3106)) void IAS_GeometricEncircledEnergy::PutUseDashes ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(3107)) VARIANT_BOOL IAS_GeometricEncircledEnergy::GetUseHuygensPSF ( );
__declspec(implementation_key(3108)) void IAS_GeometricEncircledEnergy::PutUseHuygensPSF ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(3109)) VARIANT_BOOL IAS_GeometricEncircledEnergy::GetUsePolarization ( );
__declspec(implementation_key(3110)) void IAS_GeometricEncircledEnergy::PutUsePolarization ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(3111)) double IAS_GeometricEncircledEnergy::GetHuygensDelta ( );
__declspec(implementation_key(3112)) void IAS_GeometricEncircledEnergy::PutHuygensDelta ( double pRetVal );
__declspec(implementation_key(3113)) double IAS_GeometricEncircledEnergy::GetRadiusMaximum ( );
__declspec(implementation_key(3114)) void IAS_GeometricEncircledEnergy::PutRadiusMaximum ( double pRetVal );
__declspec(implementation_key(3115)) IAS_FieldPtr IAS_ExtendedSourceEncircledEnergy::GetField ( );
__declspec(implementation_key(3116)) IAS_SurfacePtr IAS_ExtendedSourceEncircledEnergy::GetSurface ( );
__declspec(implementation_key(3117)) IAS_WavelengthPtr IAS_ExtendedSourceEncircledEnergy::GetWavelength ( );
__declspec(implementation_key(3118)) enum ExtendedSourceTypes IAS_ExtendedSourceEncircledEnergy::GetType ( );
__declspec(implementation_key(3119)) void IAS_ExtendedSourceEncircledEnergy::PutType ( enum ExtendedSourceTypes pRetVal );
__declspec(implementation_key(3120)) enum ReferToTypes IAS_ExtendedSourceEncircledEnergy::GetReferTo ( );
__declspec(implementation_key(3121)) void IAS_ExtendedSourceEncircledEnergy::PutReferTo ( enum ReferToTypes pRetVal );
__declspec(implementation_key(3122)) long IAS_ExtendedSourceEncircledEnergy::GetRaysX1000 ( );
__declspec(implementation_key(3123)) void IAS_ExtendedSourceEncircledEnergy::PutRaysX1000 ( long pRetVal );
__declspec(implementation_key(3124)) VARIANT_BOOL IAS_ExtendedSourceEncircledEnergy::GetMultiplyByDiffractionLimit ( );
__declspec(implementation_key(3125)) void IAS_ExtendedSourceEncircledEnergy::PutMultiplyByDiffractionLimit ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(3126)) VARIANT_BOOL IAS_ExtendedSourceEncircledEnergy::GetRemoveVignettingFactors ( );
__declspec(implementation_key(3127)) void IAS_ExtendedSourceEncircledEnergy::PutRemoveVignettingFactors ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(3128)) VARIANT_BOOL IAS_ExtendedSourceEncircledEnergy::GetUseDashes ( );
__declspec(implementation_key(3129)) void IAS_ExtendedSourceEncircledEnergy::PutUseDashes ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(3130)) VARIANT_BOOL IAS_ExtendedSourceEncircledEnergy::GetUsePolarization ( );
__declspec(implementation_key(3131)) void IAS_ExtendedSourceEncircledEnergy::PutUsePolarization ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(3132)) double IAS_ExtendedSourceEncircledEnergy::GetMaximumDistance ( );
__declspec(implementation_key(3133)) void IAS_ExtendedSourceEncircledEnergy::PutMaximumDistance ( double pRetVal );
__declspec(implementation_key(3134)) double IAS_ExtendedSourceEncircledEnergy::GetFieldSize ( );
__declspec(implementation_key(3135)) void IAS_ExtendedSourceEncircledEnergy::PutFieldSize ( double pRetVal );
__declspec(implementation_key(3136)) double IAS_ExtendedSourceEncircledEnergy::GetRotation ( );
__declspec(implementation_key(3137)) void IAS_ExtendedSourceEncircledEnergy::PutRotation ( double pRetVal );
__declspec(implementation_key(3138)) _bstr_t IAS_ExtendedSourceEncircledEnergy::GetImageName ( );
__declspec(implementation_key(3139)) void IAS_ExtendedSourceEncircledEnergy::PutImageName ( _bstr_t pRetVal );
__declspec(implementation_key(3140)) IAS_FieldPtr IAS_ZernikeFringeCoefficients::GetField ( );
__declspec(implementation_key(3141)) IAS_SurfacePtr IAS_ZernikeFringeCoefficients::GetSurface ( );
__declspec(implementation_key(3142)) IAS_WavelengthPtr IAS_ZernikeFringeCoefficients::GetWavelength ( );
__declspec(implementation_key(3143)) enum SampleSizes IAS_ZernikeFringeCoefficients::GetSampleSize ( );
__declspec(implementation_key(3144)) void IAS_ZernikeFringeCoefficients::PutSampleSize ( enum SampleSizes pRetVal );
__declspec(implementation_key(3145)) VARIANT_BOOL IAS_ZernikeFringeCoefficients::GetReferenceOBDToVertex ( );
__declspec(implementation_key(3146)) void IAS_ZernikeFringeCoefficients::PutReferenceOBDToVertex ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(3147)) double IAS_ZernikeFringeCoefficients::GetSx ( );
__declspec(implementation_key(3148)) void IAS_ZernikeFringeCoefficients::PutSx ( double pRetVal );
__declspec(implementation_key(3149)) double IAS_ZernikeFringeCoefficients::GetSy ( );
__declspec(implementation_key(3150)) void IAS_ZernikeFringeCoefficients::PutSy ( double pRetVal );
__declspec(implementation_key(3151)) double IAS_ZernikeFringeCoefficients::GetSr ( );
__declspec(implementation_key(3152)) void IAS_ZernikeFringeCoefficients::PutSr ( double pRetVal );
__declspec(implementation_key(3153)) long IAS_ZernikeFringeCoefficients::GetMaximumNumberOfTerms ( );
__declspec(implementation_key(3154)) void IAS_ZernikeFringeCoefficients::PutMaximumNumberOfTerms ( long pRetVal );
__declspec(implementation_key(3155)) IAS_FieldPtr IAS_ZernikeAnnularCoefficients::GetField ( );
__declspec(implementation_key(3156)) IAS_SurfacePtr IAS_ZernikeAnnularCoefficients::GetSurface ( );
__declspec(implementation_key(3157)) IAS_WavelengthPtr IAS_ZernikeAnnularCoefficients::GetWavelength ( );
__declspec(implementation_key(3158)) enum SampleSizes IAS_ZernikeAnnularCoefficients::GetSampleSize ( );
__declspec(implementation_key(3159)) void IAS_ZernikeAnnularCoefficients::PutSampleSize ( enum SampleSizes pRetVal );
__declspec(implementation_key(3160)) VARIANT_BOOL IAS_ZernikeAnnularCoefficients::GetReferenceOBDToVertex ( );
__declspec(implementation_key(3161)) void IAS_ZernikeAnnularCoefficients::PutReferenceOBDToVertex ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(3162)) double IAS_ZernikeAnnularCoefficients::GetSx ( );
__declspec(implementation_key(3163)) void IAS_ZernikeAnnularCoefficients::PutSx ( double pRetVal );
__declspec(implementation_key(3164)) double IAS_ZernikeAnnularCoefficients::GetSy ( );
__declspec(implementation_key(3165)) void IAS_ZernikeAnnularCoefficients::PutSy ( double pRetVal );
__declspec(implementation_key(3166)) double IAS_ZernikeAnnularCoefficients::GetSr ( );
__declspec(implementation_key(3167)) void IAS_ZernikeAnnularCoefficients::PutSr ( double pRetVal );
__declspec(implementation_key(3168)) double IAS_ZernikeAnnularCoefficients::GetObscuration ( );
__declspec(implementation_key(3169)) void IAS_ZernikeAnnularCoefficients::PutObscuration ( double pRetVal );
__declspec(implementation_key(3170)) long IAS_ZernikeAnnularCoefficients::GetMaximumNumberOfTerms ( );
__declspec(implementation_key(3171)) void IAS_ZernikeAnnularCoefficients::PutMaximumNumberOfTerms ( long pRetVal );
__declspec(implementation_key(3172)) double IAS_FocalShiftDiagram::GetMaximumShift ( );
__declspec(implementation_key(3173)) void IAS_FocalShiftDiagram::PutMaximumShift ( double pRetVal );
__declspec(implementation_key(3174)) double IAS_FocalShiftDiagram::GetPupilZone ( );
__declspec(implementation_key(3175)) void IAS_FocalShiftDiagram::PutPupilZone ( double pRetVal );
__declspec(implementation_key(3176)) IAS_FieldPtr IAS_GridDistortion::GetField ( );
__declspec(implementation_key(3177)) IAS_WavelengthPtr IAS_GridDistortion::GetWavelength ( );
__declspec(implementation_key(3178)) VARIANT_BOOL IAS_GridDistortion::GetSymmetricMagnification ( );
__declspec(implementation_key(3179)) void IAS_GridDistortion::PutSymmetricMagnification ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(3180)) double IAS_GridDistortion::GetScaleFactor ( );
__declspec(implementation_key(3181)) void IAS_GridDistortion::PutScaleFactor ( double pRetVal );
__declspec(implementation_key(3182)) double IAS_GridDistortion::GetAspect ( );
__declspec(implementation_key(3183)) void IAS_GridDistortion::PutAspect ( double pRetVal );
__declspec(implementation_key(3184)) double IAS_GridDistortion::GetFieldWidth ( );
__declspec(implementation_key(3185)) void IAS_GridDistortion::PutFieldWidth ( double pRetVal );
__declspec(implementation_key(3186)) long IAS_GridDistortion::GetGridNumber ( );
__declspec(implementation_key(3187)) void IAS_GridDistortion::PutGridNumber ( long pRetVal );
__declspec(implementation_key(3188)) long IAS_GridDistortion::GetMethod ( );
__declspec(implementation_key(3189)) void IAS_GridDistortion::PutMethod ( long pRetVal );
__declspec(implementation_key(3190)) long IAS_GridDistortion::GetRotateText ( );
__declspec(implementation_key(3191)) void IAS_GridDistortion::PutRotateText ( long pRetVal );
__declspec(implementation_key(3192)) VARIANT_BOOL IAS_LateralColor::GetAllWavelengths ( );
__declspec(implementation_key(3193)) void IAS_LateralColor::PutAllWavelengths ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(3194)) VARIANT_BOOL IAS_LateralColor::GetShowAiryDisk ( );
__declspec(implementation_key(3195)) void IAS_LateralColor::PutShowAiryDisk ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(3196)) VARIANT_BOOL IAS_LateralColor::GetUseRealRays ( );
__declspec(implementation_key(3197)) void IAS_LateralColor::PutUseRealRays ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(3198)) double IAS_LateralColor::GetPlotScale ( );
__declspec(implementation_key(3199)) void IAS_LateralColor::PutPlotScale ( double pRetVal );
__declspec(implementation_key(3200)) VARIANT_BOOL IAS_LongitudinalAberration::GetUseDashes ( );
__declspec(implementation_key(3201)) void IAS_LongitudinalAberration::PutUseDashes ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(3202)) double IAS_LongitudinalAberration::GetPlotScale ( );
__declspec(implementation_key(3203)) void IAS_LongitudinalAberration::PutPlotScale ( double pRetVal );
__declspec(implementation_key(3204)) IAS_FieldPtr IAS_RayTrace::GetField ( );
__declspec(implementation_key(3205)) IAS_WavelengthPtr IAS_RayTrace::GetWavelength ( );
__declspec(implementation_key(3206)) VARIANT_BOOL IAS_RayTrace::GetUseGlobal ( );
__declspec(implementation_key(3207)) void IAS_RayTrace::PutUseGlobal ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(3208)) double IAS_RayTrace::GetHx ( );
__declspec(implementation_key(3209)) void IAS_RayTrace::PutHx ( double pRetVal );
__declspec(implementation_key(3210)) double IAS_RayTrace::GetHy ( );
__declspec(implementation_key(3211)) void IAS_RayTrace::PutHy ( double pRetVal );
__declspec(implementation_key(3212)) double IAS_RayTrace::GetPx ( );
__declspec(implementation_key(3213)) void IAS_RayTrace::PutPx ( double pRetVal );
__declspec(implementation_key(3214)) double IAS_RayTrace::GetPy ( );
__declspec(implementation_key(3215)) void IAS_RayTrace::PutPy ( double pRetVal );
__declspec(implementation_key(3216)) enum RayTraceType IAS_RayTrace::GetType ( );
__declspec(implementation_key(3217)) void IAS_RayTrace::PutType ( enum RayTraceType pRetVal );
__declspec(implementation_key(3218)) HRESULT IAS_RayTrace::UseArbitraryRay ( );
__declspec(implementation_key(3219)) VARIANT_BOOL IAS_SeidelDiagram::GetIgnoreChromatic ( );
__declspec(implementation_key(3220)) void IAS_SeidelDiagram::PutIgnoreChromatic ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(3221)) VARIANT_BOOL IAS_SeidelDiagram::GetIgnoreDistortion ( );
__declspec(implementation_key(3222)) void IAS_SeidelDiagram::PutIgnoreDistortion ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(3223)) VARIANT_BOOL IAS_SeidelDiagram::GetSuppressFrame ( );
__declspec(implementation_key(3224)) void IAS_SeidelDiagram::PutSuppressFrame ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(3225)) double IAS_SeidelDiagram::GetPlotScale ( );
__declspec(implementation_key(3226)) void IAS_SeidelDiagram::PutPlotScale ( double pRetVal );
__declspec(implementation_key(3227)) IAS_WavelengthPtr IAS_SeidelCoefficients::GetWavelength ( );
__declspec(implementation_key(3228)) IAS_WavelengthPtr IAS_FieldCurvatureAndDistortion::GetWavelength ( );
__declspec(implementation_key(3229)) enum DisplayAsTypes IAS_FieldCurvatureAndDistortion::GetDisplayAs ( );
__declspec(implementation_key(3230)) void IAS_FieldCurvatureAndDistortion::PutDisplayAs ( enum DisplayAsTypes pRetVal );
__declspec(implementation_key(3231)) enum Distortions IAS_FieldCurvatureAndDistortion::GetDistortion ( );
__declspec(implementation_key(3232)) void IAS_FieldCurvatureAndDistortion::PutDistortion ( enum Distortions pRetVal );
__declspec(implementation_key(3233)) enum FieldScanDirections IAS_FieldCurvatureAndDistortion::GetScanType ( );
__declspec(implementation_key(3234)) void IAS_FieldCurvatureAndDistortion::PutScanType ( enum FieldScanDirections pRetVal );
__declspec(implementation_key(3235)) VARIANT_BOOL IAS_FieldCurvatureAndDistortion::GetUseDashes ( );
__declspec(implementation_key(3236)) void IAS_FieldCurvatureAndDistortion::PutUseDashes ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(3237)) VARIANT_BOOL IAS_FieldCurvatureAndDistortion::GetIgnoreVignette ( );
__declspec(implementation_key(3238)) void IAS_FieldCurvatureAndDistortion::PutIgnoreVignette ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(3239)) double IAS_FieldCurvatureAndDistortion::GetMaximumCurvature ( );
__declspec(implementation_key(3240)) void IAS_FieldCurvatureAndDistortion::PutMaximumCurvature ( double pRetVal );
__declspec(implementation_key(3241)) double IAS_FieldCurvatureAndDistortion::GetMaximumDistortion ( );
__declspec(implementation_key(3242)) void IAS_FieldCurvatureAndDistortion::PutMaximumDistortion ( double pRetVal );
__declspec(implementation_key(3243)) IAS_WavelengthPtr IAS_ZernikeCoefficientsVsField::GetWavelength ( );
__declspec(implementation_key(3244)) enum SampleSizes IAS_ZernikeCoefficientsVsField::GetSampleSize ( );
__declspec(implementation_key(3245)) void IAS_ZernikeCoefficientsVsField::PutSampleSize ( enum SampleSizes pRetVal );
__declspec(implementation_key(3246)) enum FieldScanDirections IAS_ZernikeCoefficientsVsField::GetFieldScanDirection ( );
__declspec(implementation_key(3247)) void IAS_ZernikeCoefficientsVsField::PutFieldScanDirection ( enum FieldScanDirections pRetVal );
__declspec(implementation_key(3248)) enum ZernikeCoefficientTypes IAS_ZernikeCoefficientsVsField::GetZernikeCoefficientType ( );
__declspec(implementation_key(3249)) void IAS_ZernikeCoefficientsVsField::PutZernikeCoefficientType ( enum ZernikeCoefficientTypes pRetVal );
__declspec(implementation_key(3250)) double IAS_ZernikeCoefficientsVsField::GetScaleMinimum ( );
__declspec(implementation_key(3251)) void IAS_ZernikeCoefficientsVsField::PutScaleMinimum ( double pRetVal );
__declspec(implementation_key(3252)) double IAS_ZernikeCoefficientsVsField::GetScaleMaximum ( );
__declspec(implementation_key(3253)) void IAS_ZernikeCoefficientsVsField::PutScaleMaximum ( double pRetVal );
__declspec(implementation_key(3254)) double IAS_ZernikeCoefficientsVsField::GetObscurationFactor ( );
__declspec(implementation_key(3255)) void IAS_ZernikeCoefficientsVsField::PutObscurationFactor ( double pRetVal );
__declspec(implementation_key(3256)) long IAS_ZernikeCoefficientsVsField::GetFieldDensity ( );
__declspec(implementation_key(3257)) void IAS_ZernikeCoefficientsVsField::PutFieldDensity ( long pRetVal );
__declspec(implementation_key(3258)) _bstr_t IAS_ZernikeCoefficientsVsField::GetCoefficients ( );
__declspec(implementation_key(3259)) void IAS_ZernikeCoefficientsVsField::PutCoefficients ( _bstr_t pRetVal );
__declspec(implementation_key(3260)) IAS_FieldPtr IAS_ZernikeStandardCoefficients::GetField ( );
__declspec(implementation_key(3261)) IAS_SurfacePtr IAS_ZernikeStandardCoefficients::GetSurface ( );
__declspec(implementation_key(3262)) IAS_WavelengthPtr IAS_ZernikeStandardCoefficients::GetWavelength ( );
__declspec(implementation_key(3263)) enum SampleSizes IAS_ZernikeStandardCoefficients::GetSampleSize ( );
__declspec(implementation_key(3264)) void IAS_ZernikeStandardCoefficients::PutSampleSize ( enum SampleSizes pRetVal );
__declspec(implementation_key(3265)) VARIANT_BOOL IAS_ZernikeStandardCoefficients::GetReferenceOBDToVertex ( );
__declspec(implementation_key(3266)) void IAS_ZernikeStandardCoefficients::PutReferenceOBDToVertex ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(3267)) double IAS_ZernikeStandardCoefficients::GetSx ( );
__declspec(implementation_key(3268)) void IAS_ZernikeStandardCoefficients::PutSx ( double pRetVal );
__declspec(implementation_key(3269)) double IAS_ZernikeStandardCoefficients::GetSy ( );
__declspec(implementation_key(3270)) void IAS_ZernikeStandardCoefficients::PutSy ( double pRetVal );
__declspec(implementation_key(3271)) double IAS_ZernikeStandardCoefficients::GetSr ( );
__declspec(implementation_key(3272)) void IAS_ZernikeStandardCoefficients::PutSr ( double pRetVal );
__declspec(implementation_key(3273)) double IAS_ZernikeStandardCoefficients::GetEpsilon ( );
__declspec(implementation_key(3274)) void IAS_ZernikeStandardCoefficients::PutEpsilon ( double pRetVal );
__declspec(implementation_key(3275)) long IAS_ZernikeStandardCoefficients::GetMaximumNumberOfTerms ( );
__declspec(implementation_key(3276)) void IAS_ZernikeStandardCoefficients::PutMaximumNumberOfTerms ( long pRetVal );
__declspec(implementation_key(3277)) VARIANT_BOOL IZOSAPI_Connection::GetIsAlive ( );
__declspec(implementation_key(3278)) IZOSAPI_ApplicationPtr IZOSAPI_Connection::ConnectToApplication ( );
__declspec(implementation_key(3279)) IZOSAPI_ApplicationPtr IZOSAPI_Connection::CreateNewApplication ( );
__declspec(implementation_key(3280)) IZOSAPI_ApplicationPtr IZOSAPI_Connection::CreateZemaxServer ( _bstr_t applicationName );
__declspec(implementation_key(3281)) _bstr_t IZOSAPI_Connection::GetInitializationSettings ( );
__declspec(implementation_key(3282)) void IZOSAPI_Connection::PutInitializationSettings ( _bstr_t pRetVal );
__declspec(implementation_key(3283)) SAFEARRAY * IZOSAPI_Connection::GetIntializationProgress ( );
__declspec(implementation_key(3284)) double IZOSAPI_Connection::GetConnectionTimeoutSeconds ( );
__declspec(implementation_key(3285)) void IZOSAPI_Connection::PutConnectionTimeoutSeconds ( double pRetVal );
__declspec(implementation_key(3286)) IZOSAPI_ApplicationPtr IZOSAPI_Connection::ConnectAsExtension ( long zemaxInstance );
__declspec(implementation_key(3287)) enum LicenseStatusType IZOSAPI_Application::GetLicenseStatus ( );
__declspec(implementation_key(3288)) VARIANT_BOOL IZOSAPI_Application::GetIsValidLicenseForAPI ( );
__declspec(implementation_key(3289)) _bstr_t IZOSAPI_Application::GetInitializationErrors ( );
__declspec(implementation_key(3290)) _bstr_t IZOSAPI_Application::GetInitializationErrorCode ( );
__declspec(implementation_key(3291)) enum ZOSAPI_Mode IZOSAPI_Application::GetMode ( );
__declspec(implementation_key(3292)) _bstr_t IZOSAPI_Application::GetSerialCode ( );
__declspec(implementation_key(3293)) long IZOSAPI_Application::GetOpticStudioVersion ( );
__declspec(implementation_key(3294)) long IZOSAPI_Application::GetExpirationYear ( );
__declspec(implementation_key(3295)) long IZOSAPI_Application::GetExpirationMonth ( );
__declspec(implementation_key(3296)) long IZOSAPI_Application::GetExpirationDay ( );
__declspec(implementation_key(3297)) long IZOSAPI_Application::GetNumberOfOpticalSystems ( );
__declspec(implementation_key(3298)) IOpticalSystemPtr IZOSAPI_Application::GetPrimarySystem ( );
__declspec(implementation_key(3299)) IOpticalSystemPtr IZOSAPI_Application::GetSystemAt ( long pos );
__declspec(implementation_key(3300)) VARIANT_BOOL IZOSAPI_Application::CloseSystemAt ( long pos, VARIANT_BOOL saveIfNeeded );
__declspec(implementation_key(3301)) IOpticalSystemPtr IZOSAPI_Application::LoadNewSystem ( _bstr_t LensFile );
__declspec(implementation_key(3302)) IOpticalSystemPtr IZOSAPI_Application::CreateNewSystem ( enum SystemType Mode );
__declspec(implementation_key(3303)) long IZOSAPI_Application::GetNumberOfCPUs ( );
__declspec(implementation_key(3304)) HRESULT IZOSAPI_Application::UpdateFileLists ( );
__declspec(implementation_key(3305)) _bstr_t IZOSAPI_Application::GetProgramDir ( );
__declspec(implementation_key(3306)) _bstr_t IZOSAPI_Application::GetLensDir ( );
__declspec(implementation_key(3307)) _bstr_t IZOSAPI_Application::GetObjectsDir ( );
__declspec(implementation_key(3308)) _bstr_t IZOSAPI_Application::GetGlassDir ( );
__declspec(implementation_key(3309)) _bstr_t IZOSAPI_Application::GetZPLDir ( );
__declspec(implementation_key(3310)) _bstr_t IZOSAPI_Application::GetCoatingDir ( );
__declspec(implementation_key(3311)) _bstr_t IZOSAPI_Application::GetPOPDir ( );
__declspec(implementation_key(3312)) _bstr_t IZOSAPI_Application::GetImagesDir ( );
__declspec(implementation_key(3313)) _bstr_t IZOSAPI_Application::GetSolidWorksFilesDir ( );
__declspec(implementation_key(3314)) _bstr_t IZOSAPI_Application::GetAutodeskInventorFilesDir ( );
__declspec(implementation_key(3315)) _bstr_t IZOSAPI_Application::GetCreoParametricFilesDir ( );
__declspec(implementation_key(3316)) _bstr_t IZOSAPI_Application::GetMATLABFilesDir ( );
__declspec(implementation_key(3317)) _bstr_t IZOSAPI_Application::GetScatterDir ( );
__declspec(implementation_key(3318)) _bstr_t IZOSAPI_Application::GetUndoDir ( );
__declspec(implementation_key(3319)) _bstr_t IZOSAPI_Application::GetSamplesDir ( );
__declspec(implementation_key(3320)) _bstr_t IZOSAPI_Application::GetZemaxDataDir ( );
__declspec(implementation_key(3321)) _bstr_t IZOSAPI_Application::GetDate ( );
__declspec(implementation_key(3322)) IVectorDataPtr IZOSAPI_Application::GetOperandResults ( );
__declspec(implementation_key(3323)) double IZOSAPI_Application::GetOperandArgument1 ( );
__declspec(implementation_key(3324)) double IZOSAPI_Application::GetOperandArgument2 ( );
__declspec(implementation_key(3325)) double IZOSAPI_Application::GetOperandArgument3 ( );
__declspec(implementation_key(3326)) double IZOSAPI_Application::GetOperandArgument4 ( );
__declspec(implementation_key(3327)) IUserAnalysisDataPtr IZOSAPI_Application::GetUserAnalysisData ( );
__declspec(implementation_key(3328)) VARIANT_BOOL IZOSAPI_Application::GetTerminateRequested ( );
__declspec(implementation_key(3329)) VARIANT_BOOL IZOSAPI_Application::GetShowChangesInUI ( );
__declspec(implementation_key(3330)) void IZOSAPI_Application::PutShowChangesInUI ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(3331)) _bstr_t IZOSAPI_Application::GetProgressMessage ( );
__declspec(implementation_key(3332)) void IZOSAPI_Application::PutProgressMessage ( _bstr_t pRetVal );
__declspec(implementation_key(3333)) double IZOSAPI_Application::GetProgressPercent ( );
__declspec(implementation_key(3334)) void IZOSAPI_Application::PutProgressPercent ( double pRetVal );
__declspec(implementation_key(3335)) HRESULT IZOSAPI_Application::CloseApplication ( );
__declspec(implementation_key(3336)) enum UpdateStatus IZOSAPI_Application::GetCheckForUpdatesStatus ( );
__declspec(implementation_key(3337)) _bstr_t IZOSAPI_Application::GetCheckForUpdatesData ( );
__declspec(implementation_key(3338)) long IZOSAPI_Application::GetCheckForUpdatesVersion ( );
__declspec(implementation_key(3339)) HRESULT IZOSAPI_Application::CheckForUpdates ( );
__declspec(implementation_key(3340)) _bstr_t IOpticalSystem::GetSystemName ( );
__declspec(implementation_key(3341)) void IOpticalSystem::PutSystemName ( _bstr_t pRetVal );
__declspec(implementation_key(3342)) long IOpticalSystem::GetSystemID ( );
__declspec(implementation_key(3343)) enum SystemType IOpticalSystem::GetMode ( );
__declspec(implementation_key(3344)) _bstr_t IOpticalSystem::GetSystemFile ( );
__declspec(implementation_key(3345)) _bstr_t IOpticalSystem::GetCurrentStatus ( );
__declspec(implementation_key(3346)) _bstr_t IOpticalSystem::UpdateStatus ( );
__declspec(implementation_key(3347)) VARIANT_BOOL IOpticalSystem::GetIsNonAxial ( );
__declspec(implementation_key(3348)) VARIANT_BOOL IOpticalSystem::GetNeedsSave ( );
__declspec(implementation_key(3349)) VARIANT_BOOL IOpticalSystem::MakeSequential ( );
__declspec(implementation_key(3350)) VARIANT_BOOL IOpticalSystem::MakeNonSequential ( );
__declspec(implementation_key(3351)) VARIANT_BOOL IOpticalSystem::LoadFile ( _bstr_t LensFile, VARIANT_BOOL saveIfNeeded );
__declspec(implementation_key(3352)) HRESULT IOpticalSystem::New ( VARIANT_BOOL saveIfNeeded );
__declspec(implementation_key(3353)) HRESULT IOpticalSystem::Save ( );
__declspec(implementation_key(3354)) HRESULT IOpticalSystem::SaveAs ( _bstr_t fileName );
__declspec(implementation_key(3355)) VARIANT_BOOL IOpticalSystem::Close ( VARIANT_BOOL saveIfNeeded );
__declspec(implementation_key(3356)) ISystemDataPtr IOpticalSystem::GetSystemData ( );
__declspec(implementation_key(3357)) ILensDataEditorPtr IOpticalSystem::GetLDE ( );
__declspec(implementation_key(3358)) INonSeqEditorPtr IOpticalSystem::GetNCE ( );
__declspec(implementation_key(3359)) IToleranceDataEditorPtr IOpticalSystem::GetTDE ( );
__declspec(implementation_key(3360)) IMeritFunctionEditorPtr IOpticalSystem::GetMFE ( );
__declspec(implementation_key(3361)) IMultiConfigEditorPtr IOpticalSystem::GetMCE ( );
__declspec(implementation_key(3362)) I_AnalysesPtr IOpticalSystem::GetAnalyses ( );
__declspec(implementation_key(3363)) IOpticalSystemToolsPtr IOpticalSystem::GetTools ( );
__declspec(implementation_key(3364)) IZOSAPI_ApplicationPtr IOpticalSystem::GetTheApplication ( );
__declspec(implementation_key(3365)) IOpticalSystemPtr IOpticalSystem::CopySystem ( );
__declspec(implementation_key(3366)) enum LensUpdateMode IOpticalSystem::GetUpdateMode ( );
__declspec(implementation_key(3367)) void IOpticalSystem::PutUpdateMode ( enum LensUpdateMode pRetVal );
__declspec(implementation_key(3368)) enum EditorType IEditor::GetEditor ( );
__declspec(implementation_key(3369)) long IEditor::GetNumberOfRows ( );
__declspec(implementation_key(3370)) long IEditor::GetMinColumn ( );
__declspec(implementation_key(3371)) long IEditor::GetMaxColumn ( );
__declspec(implementation_key(3372)) IEditorRowPtr IEditor::GetRowAt ( long pos );
__declspec(implementation_key(3373)) IEditorRowPtr IEditor::InsertRowAt ( long pos );
__declspec(implementation_key(3374)) IEditorRowPtr IEditor::AddRow ( );
__declspec(implementation_key(3375)) VARIANT_BOOL IEditor::DeleteRowAt ( long pos );
__declspec(implementation_key(3376)) long IEditor::DeleteRowsAt ( long pos, long NumberOfRows );
__declspec(implementation_key(3377)) long IEditor::DeleteAllRows ( );
__declspec(implementation_key(3378)) VARIANT_BOOL IEditor::ShowEditor ( );
__declspec(implementation_key(3379)) HRESULT IEditor::HideEditor ( );
__declspec(implementation_key(3380)) IEditorPtr IEditorRow::GetEditor ( );
__declspec(implementation_key(3381)) VARIANT_BOOL IEditorRow::GetIsValidRow ( );
__declspec(implementation_key(3382)) long IEditorRow::GetRowIndex ( );
__declspec(implementation_key(3383)) _bstr_t IEditorRow::GetRowTypeName ( );
__declspec(implementation_key(3384)) IEditorCellPtr IEditorRow::GetCellAt ( long pos );
__declspec(implementation_key(3385)) IEditorRowPtr IEditorCell::GetRow ( );
__declspec(implementation_key(3386)) long IEditorCell::GetCol ( );
__declspec(implementation_key(3387)) VARIANT_BOOL IEditorCell::GetIsActive ( );
__declspec(implementation_key(3388)) VARIANT_BOOL IEditorCell::GetIsReadOnly ( );
__declspec(implementation_key(3389)) _bstr_t IEditorCell::GetHeader ( );
__declspec(implementation_key(3390)) enum CellDataType IEditorCell::GetDataType ( );
__declspec(implementation_key(3391)) long IEditorCell::GetIntegerValue ( );
__declspec(implementation_key(3392)) void IEditorCell::PutIntegerValue ( long pRetVal );
__declspec(implementation_key(3393)) double IEditorCell::GetDoubleValue ( );
__declspec(implementation_key(3394)) void IEditorCell::PutDoubleValue ( double pRetVal );
__declspec(implementation_key(3395)) _bstr_t IEditorCell::GetValue ( );
__declspec(implementation_key(3396)) void IEditorCell::PutValue ( _bstr_t pRetVal );
__declspec(implementation_key(3397)) enum SolveType IEditorCell::GetSolve ( );
__declspec(implementation_key(3398)) ISolveDataPtr IEditorCell::GetSolveData ( );
__declspec(implementation_key(3399)) long IEditorCell::GetNumberOfSolveTypes ( );
__declspec(implementation_key(3400)) VARIANT_BOOL IEditorCell::IsSolveTypeSupported ( enum SolveType st );
__declspec(implementation_key(3401)) SAFEARRAY * IEditorCell::GetAvailableSolveTypes ( );
__declspec(implementation_key(3402)) HRESULT IEditorCell::FillAvailableSolveTypes ( long Length, enum SolveType * solves );
__declspec(implementation_key(3403)) ISolveDataPtr IEditorCell::CreateSolveType ( enum SolveType Type );
__declspec(implementation_key(3404)) enum SolveStatus IEditorCell::SetSolveData ( struct ISolveData * Data );
__declspec(implementation_key(3405)) VARIANT_BOOL IEditorCell::MakeSolveVariable ( );
__declspec(implementation_key(3406)) VARIANT_BOOL IEditorCell::MakeSolveFixed ( );
__declspec(implementation_key(3407)) IEditorCellPtr IObjectAnnularAsphericLens::GetMinFrontApertureCell ( );
__declspec(implementation_key(3408)) IEditorCellPtr IObjectAnnularAsphericLens::GetMaxFrontApertureCell ( );
__declspec(implementation_key(3409)) IEditorCellPtr IObjectAnnularAsphericLens::GetMinBackApertureCell ( );
__declspec(implementation_key(3410)) IEditorCellPtr IObjectAnnularAsphericLens::GetMaxBackApertureCell ( );
__declspec(implementation_key(3411)) IEditorCellPtr IObjectAnnularAsphericLens::GetThkApertureCell ( );
__declspec(implementation_key(3412)) IEditorCellPtr IObjectAnnularAsphericLens::GetRearRadiusCell ( );
__declspec(implementation_key(3413)) IEditorCellPtr IObjectAnnularAsphericLens::GetRearConicCell ( );
__declspec(implementation_key(3414)) IEditorCellPtr IObjectAnnularAsphericLens::GetThicknessCell ( );
__declspec(implementation_key(3415)) IEditorCellPtr IObjectAnnularAsphericLens::GetRearRPower2Cell ( );
__declspec(implementation_key(3416)) IEditorCellPtr IObjectAnnularAsphericLens::GetRearRPower4Cell ( );
__declspec(implementation_key(3417)) IEditorCellPtr IObjectAnnularAsphericLens::GetRearRPower6Cell ( );
__declspec(implementation_key(3418)) IEditorCellPtr IObjectAnnularAsphericLens::GetRearRPower8Cell ( );
__declspec(implementation_key(3419)) IEditorCellPtr IObjectAnnularAsphericLens::GetRearRPower10Cell ( );
__declspec(implementation_key(3420)) IEditorCellPtr IObjectAnnularAsphericLens::GetRearRPower12Cell ( );
__declspec(implementation_key(3421)) IEditorCellPtr IObjectAnnularAsphericLens::GetRearRPower14Cell ( );
__declspec(implementation_key(3422)) IEditorCellPtr IObjectAnnularAsphericLens::GetRearRPower16Cell ( );
__declspec(implementation_key(3423)) IEditorCellPtr IObjectAnnularAsphericLens::GetFrontRadiusCell ( );
__declspec(implementation_key(3424)) IEditorCellPtr IObjectAnnularAsphericLens::GetFrontConicCell ( );
__declspec(implementation_key(3425)) IEditorCellPtr IObjectAnnularAsphericLens::GetFrontRPower2Cell ( );
__declspec(implementation_key(3426)) IEditorCellPtr IObjectAnnularAsphericLens::GetFrontRPower4Cell ( );
__declspec(implementation_key(3427)) IEditorCellPtr IObjectAnnularAsphericLens::GetFrontRPower6Cell ( );
__declspec(implementation_key(3428)) IEditorCellPtr IObjectAnnularAsphericLens::GetFrontRPower8Cell ( );
__declspec(implementation_key(3429)) IEditorCellPtr IObjectAnnularAsphericLens::GetFrontRPower10Cell ( );
__declspec(implementation_key(3430)) IEditorCellPtr IObjectAnnularAsphericLens::GetFrontRPower12Cell ( );
__declspec(implementation_key(3431)) IEditorCellPtr IObjectAnnularAsphericLens::GetFrontRPower14Cell ( );
__declspec(implementation_key(3432)) IEditorCellPtr IObjectAnnularAsphericLens::GetFrontRPower16Cell ( );
__declspec(implementation_key(3433)) double IObjectAnnularAsphericLens::GetMinFrontAperture ( );
__declspec(implementation_key(3434)) void IObjectAnnularAsphericLens::PutMinFrontAperture ( double pRetVal );
__declspec(implementation_key(3435)) double IObjectAnnularAsphericLens::GetMaxFrontAperture ( );
__declspec(implementation_key(3436)) void IObjectAnnularAsphericLens::PutMaxFrontAperture ( double pRetVal );
__declspec(implementation_key(3437)) double IObjectAnnularAsphericLens::GetMinBackAperture ( );
__declspec(implementation_key(3438)) void IObjectAnnularAsphericLens::PutMinBackAperture ( double pRetVal );
__declspec(implementation_key(3439)) double IObjectAnnularAsphericLens::GetMaxBackAperture ( );
__declspec(implementation_key(3440)) void IObjectAnnularAsphericLens::PutMaxBackAperture ( double pRetVal );
__declspec(implementation_key(3441)) double IObjectAnnularAsphericLens::GetThkAperture ( );
__declspec(implementation_key(3442)) void IObjectAnnularAsphericLens::PutThkAperture ( double pRetVal );
__declspec(implementation_key(3443)) double IObjectAnnularAsphericLens::GetRearRadius ( );
__declspec(implementation_key(3444)) void IObjectAnnularAsphericLens::PutRearRadius ( double pRetVal );
__declspec(implementation_key(3445)) double IObjectAnnularAsphericLens::GetRearConic ( );
__declspec(implementation_key(3446)) void IObjectAnnularAsphericLens::PutRearConic ( double pRetVal );
__declspec(implementation_key(3447)) double IObjectAnnularAsphericLens::GetThickness ( );
__declspec(implementation_key(3448)) void IObjectAnnularAsphericLens::PutThickness ( double pRetVal );
__declspec(implementation_key(3449)) double IObjectAnnularAsphericLens::GetRearRPower2 ( );
__declspec(implementation_key(3450)) void IObjectAnnularAsphericLens::PutRearRPower2 ( double pRetVal );
__declspec(implementation_key(3451)) double IObjectAnnularAsphericLens::GetRearRPower4 ( );
__declspec(implementation_key(3452)) void IObjectAnnularAsphericLens::PutRearRPower4 ( double pRetVal );
__declspec(implementation_key(3453)) double IObjectAnnularAsphericLens::GetRearRPower6 ( );
__declspec(implementation_key(3454)) void IObjectAnnularAsphericLens::PutRearRPower6 ( double pRetVal );
__declspec(implementation_key(3455)) double IObjectAnnularAsphericLens::GetRearRPower8 ( );
__declspec(implementation_key(3456)) void IObjectAnnularAsphericLens::PutRearRPower8 ( double pRetVal );
__declspec(implementation_key(3457)) double IObjectAnnularAsphericLens::GetRearRPower10 ( );
__declspec(implementation_key(3458)) void IObjectAnnularAsphericLens::PutRearRPower10 ( double pRetVal );
__declspec(implementation_key(3459)) double IObjectAnnularAsphericLens::GetRearRPower12 ( );
__declspec(implementation_key(3460)) void IObjectAnnularAsphericLens::PutRearRPower12 ( double pRetVal );
__declspec(implementation_key(3461)) double IObjectAnnularAsphericLens::GetRearRPower14 ( );
__declspec(implementation_key(3462)) void IObjectAnnularAsphericLens::PutRearRPower14 ( double pRetVal );
__declspec(implementation_key(3463)) double IObjectAnnularAsphericLens::GetRearRPower16 ( );
__declspec(implementation_key(3464)) void IObjectAnnularAsphericLens::PutRearRPower16 ( double pRetVal );
__declspec(implementation_key(3465)) double IObjectAnnularAsphericLens::GetFrontRadius ( );
__declspec(implementation_key(3466)) void IObjectAnnularAsphericLens::PutFrontRadius ( double pRetVal );
__declspec(implementation_key(3467)) double IObjectAnnularAsphericLens::GetFrontConic ( );
__declspec(implementation_key(3468)) void IObjectAnnularAsphericLens::PutFrontConic ( double pRetVal );
__declspec(implementation_key(3469)) double IObjectAnnularAsphericLens::GetFrontRPower2 ( );
__declspec(implementation_key(3470)) void IObjectAnnularAsphericLens::PutFrontRPower2 ( double pRetVal );
__declspec(implementation_key(3471)) double IObjectAnnularAsphericLens::GetFrontRPower4 ( );
__declspec(implementation_key(3472)) void IObjectAnnularAsphericLens::PutFrontRPower4 ( double pRetVal );
__declspec(implementation_key(3473)) double IObjectAnnularAsphericLens::GetFrontRPower6 ( );
__declspec(implementation_key(3474)) void IObjectAnnularAsphericLens::PutFrontRPower6 ( double pRetVal );
__declspec(implementation_key(3475)) double IObjectAnnularAsphericLens::GetFrontRPower8 ( );
__declspec(implementation_key(3476)) void IObjectAnnularAsphericLens::PutFrontRPower8 ( double pRetVal );
__declspec(implementation_key(3477)) double IObjectAnnularAsphericLens::GetFrontRPower10 ( );
__declspec(implementation_key(3478)) void IObjectAnnularAsphericLens::PutFrontRPower10 ( double pRetVal );
__declspec(implementation_key(3479)) double IObjectAnnularAsphericLens::GetFrontRPower12 ( );
__declspec(implementation_key(3480)) void IObjectAnnularAsphericLens::PutFrontRPower12 ( double pRetVal );
__declspec(implementation_key(3481)) double IObjectAnnularAsphericLens::GetFrontRPower14 ( );
__declspec(implementation_key(3482)) void IObjectAnnularAsphericLens::PutFrontRPower14 ( double pRetVal );
__declspec(implementation_key(3483)) double IObjectAnnularAsphericLens::GetFrontRPower16 ( );
__declspec(implementation_key(3484)) void IObjectAnnularAsphericLens::PutFrontRPower16 ( double pRetVal );
__declspec(implementation_key(3485)) IEditorCellPtr IObjectAnnularAxialLens::GetFrontRadiusCell ( );
__declspec(implementation_key(3486)) IEditorCellPtr IObjectAnnularAxialLens::GetFrontConicCell ( );
__declspec(implementation_key(3487)) IEditorCellPtr IObjectAnnularAxialLens::GetRearRadiusCell ( );
__declspec(implementation_key(3488)) IEditorCellPtr IObjectAnnularAxialLens::GetRearConicCell ( );
__declspec(implementation_key(3489)) IEditorCellPtr IObjectAnnularAxialLens::GetThicknessCell ( );
__declspec(implementation_key(3490)) IEditorCellPtr IObjectAnnularAxialLens::GetApertureCell ( );
__declspec(implementation_key(3491)) IEditorCellPtr IObjectAnnularAxialLens::GetRevolutionCell ( );
__declspec(implementation_key(3492)) IEditorCellPtr IObjectAnnularAxialLens::GetDecenterCell ( );
__declspec(implementation_key(3493)) IEditorCellPtr IObjectAnnularAxialLens::GetFrontRPower2Cell ( );
__declspec(implementation_key(3494)) IEditorCellPtr IObjectAnnularAxialLens::GetFrontRPower4Cell ( );
__declspec(implementation_key(3495)) IEditorCellPtr IObjectAnnularAxialLens::GetFrontRPower6Cell ( );
__declspec(implementation_key(3496)) IEditorCellPtr IObjectAnnularAxialLens::GetFrontRPower8Cell ( );
__declspec(implementation_key(3497)) IEditorCellPtr IObjectAnnularAxialLens::GetFrontRPower10Cell ( );
__declspec(implementation_key(3498)) IEditorCellPtr IObjectAnnularAxialLens::GetFrontRPower12Cell ( );
__declspec(implementation_key(3499)) IEditorCellPtr IObjectAnnularAxialLens::GetFrontRPower14Cell ( );
__declspec(implementation_key(3500)) IEditorCellPtr IObjectAnnularAxialLens::GetFrontRPower16Cell ( );
__declspec(implementation_key(3501)) IEditorCellPtr IObjectAnnularAxialLens::GetRearRPower2Cell ( );
__declspec(implementation_key(3502)) IEditorCellPtr IObjectAnnularAxialLens::GetRearRPower4Cell ( );
__declspec(implementation_key(3503)) IEditorCellPtr IObjectAnnularAxialLens::GetRearRPower6Cell ( );
__declspec(implementation_key(3504)) IEditorCellPtr IObjectAnnularAxialLens::GetRearRPower8Cell ( );
__declspec(implementation_key(3505)) IEditorCellPtr IObjectAnnularAxialLens::GetRearRPower10Cell ( );
__declspec(implementation_key(3506)) IEditorCellPtr IObjectAnnularAxialLens::GetRearRPower12Cell ( );
__declspec(implementation_key(3507)) IEditorCellPtr IObjectAnnularAxialLens::GetRearRPower14Cell ( );
__declspec(implementation_key(3508)) IEditorCellPtr IObjectAnnularAxialLens::GetRearRPower16Cell ( );
__declspec(implementation_key(3509)) double IObjectAnnularAxialLens::GetFrontRadius ( );
__declspec(implementation_key(3510)) void IObjectAnnularAxialLens::PutFrontRadius ( double pRetVal );
__declspec(implementation_key(3511)) double IObjectAnnularAxialLens::GetFrontConic ( );
__declspec(implementation_key(3512)) void IObjectAnnularAxialLens::PutFrontConic ( double pRetVal );
__declspec(implementation_key(3513)) double IObjectAnnularAxialLens::GetRearRadius ( );
__declspec(implementation_key(3514)) void IObjectAnnularAxialLens::PutRearRadius ( double pRetVal );
__declspec(implementation_key(3515)) double IObjectAnnularAxialLens::GetRearConic ( );
__declspec(implementation_key(3516)) void IObjectAnnularAxialLens::PutRearConic ( double pRetVal );
__declspec(implementation_key(3517)) double IObjectAnnularAxialLens::GetThickness ( );
__declspec(implementation_key(3518)) void IObjectAnnularAxialLens::PutThickness ( double pRetVal );
__declspec(implementation_key(3519)) double IObjectAnnularAxialLens::GetAperture ( );
__declspec(implementation_key(3520)) void IObjectAnnularAxialLens::PutAperture ( double pRetVal );
__declspec(implementation_key(3521)) double IObjectAnnularAxialLens::GetRevolution ( );
__declspec(implementation_key(3522)) void IObjectAnnularAxialLens::PutRevolution ( double pRetVal );
__declspec(implementation_key(3523)) double IObjectAnnularAxialLens::GetDecenter ( );
__declspec(implementation_key(3524)) void IObjectAnnularAxialLens::PutDecenter ( double pRetVal );
__declspec(implementation_key(3525)) double IObjectAnnularAxialLens::GetFrontRPower2 ( );
__declspec(implementation_key(3526)) void IObjectAnnularAxialLens::PutFrontRPower2 ( double pRetVal );
__declspec(implementation_key(3527)) double IObjectAnnularAxialLens::GetFrontRPower4 ( );
__declspec(implementation_key(3528)) void IObjectAnnularAxialLens::PutFrontRPower4 ( double pRetVal );
__declspec(implementation_key(3529)) double IObjectAnnularAxialLens::GetFrontRPower6 ( );
__declspec(implementation_key(3530)) void IObjectAnnularAxialLens::PutFrontRPower6 ( double pRetVal );
__declspec(implementation_key(3531)) double IObjectAnnularAxialLens::GetFrontRPower8 ( );
__declspec(implementation_key(3532)) void IObjectAnnularAxialLens::PutFrontRPower8 ( double pRetVal );
__declspec(implementation_key(3533)) double IObjectAnnularAxialLens::GetFrontRPower10 ( );
__declspec(implementation_key(3534)) void IObjectAnnularAxialLens::PutFrontRPower10 ( double pRetVal );
__declspec(implementation_key(3535)) double IObjectAnnularAxialLens::GetFrontRPower12 ( );
__declspec(implementation_key(3536)) void IObjectAnnularAxialLens::PutFrontRPower12 ( double pRetVal );
__declspec(implementation_key(3537)) double IObjectAnnularAxialLens::GetFrontRPower14 ( );
__declspec(implementation_key(3538)) void IObjectAnnularAxialLens::PutFrontRPower14 ( double pRetVal );
__declspec(implementation_key(3539)) double IObjectAnnularAxialLens::GetFrontRPower16 ( );
__declspec(implementation_key(3540)) void IObjectAnnularAxialLens::PutFrontRPower16 ( double pRetVal );
__declspec(implementation_key(3541)) double IObjectAnnularAxialLens::GetRearRPower2 ( );
__declspec(implementation_key(3542)) void IObjectAnnularAxialLens::PutRearRPower2 ( double pRetVal );
__declspec(implementation_key(3543)) double IObjectAnnularAxialLens::GetRearRPower4 ( );
__declspec(implementation_key(3544)) void IObjectAnnularAxialLens::PutRearRPower4 ( double pRetVal );
__declspec(implementation_key(3545)) double IObjectAnnularAxialLens::GetRearRPower6 ( );
__declspec(implementation_key(3546)) void IObjectAnnularAxialLens::PutRearRPower6 ( double pRetVal );
__declspec(implementation_key(3547)) double IObjectAnnularAxialLens::GetRearRPower8 ( );
__declspec(implementation_key(3548)) void IObjectAnnularAxialLens::PutRearRPower8 ( double pRetVal );
__declspec(implementation_key(3549)) double IObjectAnnularAxialLens::GetRearRPower10 ( );
__declspec(implementation_key(3550)) void IObjectAnnularAxialLens::PutRearRPower10 ( double pRetVal );
__declspec(implementation_key(3551)) double IObjectAnnularAxialLens::GetRearRPower12 ( );
__declspec(implementation_key(3552)) void IObjectAnnularAxialLens::PutRearRPower12 ( double pRetVal );
__declspec(implementation_key(3553)) double IObjectAnnularAxialLens::GetRearRPower14 ( );
__declspec(implementation_key(3554)) void IObjectAnnularAxialLens::PutRearRPower14 ( double pRetVal );
__declspec(implementation_key(3555)) double IObjectAnnularAxialLens::GetRearRPower16 ( );
__declspec(implementation_key(3556)) void IObjectAnnularAxialLens::PutRearRPower16 ( double pRetVal );
__declspec(implementation_key(3557)) IEditorCellPtr IObjectAnnularVolume::GetFrontXMinCell ( );
__declspec(implementation_key(3558)) IEditorCellPtr IObjectAnnularVolume::GetFrontYMinCell ( );
__declspec(implementation_key(3559)) IEditorCellPtr IObjectAnnularVolume::GetRearXMinCell ( );
__declspec(implementation_key(3560)) IEditorCellPtr IObjectAnnularVolume::GetRearYMinCell ( );
__declspec(implementation_key(3561)) IEditorCellPtr IObjectAnnularVolume::GetFrontXMaxCell ( );
__declspec(implementation_key(3562)) IEditorCellPtr IObjectAnnularVolume::GetFrontYMaxCell ( );
__declspec(implementation_key(3563)) IEditorCellPtr IObjectAnnularVolume::GetRearXMaxCell ( );
__declspec(implementation_key(3564)) IEditorCellPtr IObjectAnnularVolume::GetRearYMaxCell ( );
__declspec(implementation_key(3565)) IEditorCellPtr IObjectAnnularVolume::GetZLengthCell ( );
__declspec(implementation_key(3566)) IEditorCellPtr IObjectAnnularVolume::GetFrontXAngleCell ( );
__declspec(implementation_key(3567)) IEditorCellPtr IObjectAnnularVolume::GetFrontYAngleCell ( );
__declspec(implementation_key(3568)) IEditorCellPtr IObjectAnnularVolume::GetBackXAngleCell ( );
__declspec(implementation_key(3569)) IEditorCellPtr IObjectAnnularVolume::GetBackYAngleCell ( );
__declspec(implementation_key(3570)) double IObjectAnnularVolume::GetFrontXMin ( );
__declspec(implementation_key(3571)) void IObjectAnnularVolume::PutFrontXMin ( double pRetVal );
__declspec(implementation_key(3572)) double IObjectAnnularVolume::GetFrontYMin ( );
__declspec(implementation_key(3573)) void IObjectAnnularVolume::PutFrontYMin ( double pRetVal );
__declspec(implementation_key(3574)) double IObjectAnnularVolume::GetRearXMin ( );
__declspec(implementation_key(3575)) void IObjectAnnularVolume::PutRearXMin ( double pRetVal );
__declspec(implementation_key(3576)) double IObjectAnnularVolume::GetRearYMin ( );
__declspec(implementation_key(3577)) void IObjectAnnularVolume::PutRearYMin ( double pRetVal );
__declspec(implementation_key(3578)) double IObjectAnnularVolume::GetFrontXMax ( );
__declspec(implementation_key(3579)) void IObjectAnnularVolume::PutFrontXMax ( double pRetVal );
__declspec(implementation_key(3580)) double IObjectAnnularVolume::GetFrontYMax ( );
__declspec(implementation_key(3581)) void IObjectAnnularVolume::PutFrontYMax ( double pRetVal );
__declspec(implementation_key(3582)) double IObjectAnnularVolume::GetRearXMax ( );
__declspec(implementation_key(3583)) void IObjectAnnularVolume::PutRearXMax ( double pRetVal );
__declspec(implementation_key(3584)) double IObjectAnnularVolume::GetRearYMax ( );
__declspec(implementation_key(3585)) void IObjectAnnularVolume::PutRearYMax ( double pRetVal );
__declspec(implementation_key(3586)) double IObjectAnnularVolume::GetZLength ( );
__declspec(implementation_key(3587)) void IObjectAnnularVolume::PutZLength ( double pRetVal );
__declspec(implementation_key(3588)) double IObjectAnnularVolume::GetFrontXAngle ( );
__declspec(implementation_key(3589)) void IObjectAnnularVolume::PutFrontXAngle ( double pRetVal );
__declspec(implementation_key(3590)) double IObjectAnnularVolume::GetFrontYAngle ( );
__declspec(implementation_key(3591)) void IObjectAnnularVolume::PutFrontYAngle ( double pRetVal );
__declspec(implementation_key(3592)) double IObjectAnnularVolume::GetBackXAngle ( );
__declspec(implementation_key(3593)) void IObjectAnnularVolume::PutBackXAngle ( double pRetVal );
__declspec(implementation_key(3594)) double IObjectAnnularVolume::GetBackYAngle ( );
__declspec(implementation_key(3595)) void IObjectAnnularVolume::PutBackYAngle ( double pRetVal );
__declspec(implementation_key(3596)) IEditorCellPtr IObjectAnnulus::GetMaxXHalfWidthCell ( );
__declspec(implementation_key(3597)) IEditorCellPtr IObjectAnnulus::GetMaxYHalfWidthCell ( );
__declspec(implementation_key(3598)) IEditorCellPtr IObjectAnnulus::GetMinXHalfWidthCell ( );
__declspec(implementation_key(3599)) IEditorCellPtr IObjectAnnulus::GetMinYHalfWidthCell ( );
__declspec(implementation_key(3600)) double IObjectAnnulus::GetMaxXHalfWidth ( );
__declspec(implementation_key(3601)) void IObjectAnnulus::PutMaxXHalfWidth ( double pRetVal );
__declspec(implementation_key(3602)) double IObjectAnnulus::GetMaxYHalfWidth ( );
__declspec(implementation_key(3603)) void IObjectAnnulus::PutMaxYHalfWidth ( double pRetVal );
__declspec(implementation_key(3604)) double IObjectAnnulus::GetMinXHalfWidth ( );
__declspec(implementation_key(3605)) void IObjectAnnulus::PutMinXHalfWidth ( double pRetVal );
__declspec(implementation_key(3606)) double IObjectAnnulus::GetMinYHalfWidth ( );
__declspec(implementation_key(3607)) void IObjectAnnulus::PutMinYHalfWidth ( double pRetVal );
__declspec(implementation_key(3608)) IEditorCellPtr IObjectArray::GetParentObjectNumberCell ( );
__declspec(implementation_key(3609)) IEditorCellPtr IObjectArray::GetNumberXCell ( );
__declspec(implementation_key(3610)) IEditorCellPtr IObjectArray::GetNumberYCell ( );
__declspec(implementation_key(3611)) IEditorCellPtr IObjectArray::GetNumberZCell ( );
__declspec(implementation_key(3612)) IEditorCellPtr IObjectArray::GetDelta1XCell ( );
__declspec(implementation_key(3613)) IEditorCellPtr IObjectArray::GetDelta1YCell ( );
__declspec(implementation_key(3614)) IEditorCellPtr IObjectArray::GetDelta1ZCell ( );
__declspec(implementation_key(3615)) IEditorCellPtr IObjectArray::GetXminusXCell ( );
__declspec(implementation_key(3616)) IEditorCellPtr IObjectArray::GetXminusYCell ( );
__declspec(implementation_key(3617)) IEditorCellPtr IObjectArray::GetXminusZCell ( );
__declspec(implementation_key(3618)) IEditorCellPtr IObjectArray::GetYminusXCell ( );
__declspec(implementation_key(3619)) IEditorCellPtr IObjectArray::GetYminusYCell ( );
__declspec(implementation_key(3620)) IEditorCellPtr IObjectArray::GetYminusZCell ( );
__declspec(implementation_key(3621)) IEditorCellPtr IObjectArray::GetZminusXCell ( );
__declspec(implementation_key(3622)) IEditorCellPtr IObjectArray::GetZminusYCell ( );
__declspec(implementation_key(3623)) IEditorCellPtr IObjectArray::GetZminusZCell ( );
__declspec(implementation_key(3624)) IEditorCellPtr IObjectArray::GetTiltXCell ( );
__declspec(implementation_key(3625)) IEditorCellPtr IObjectArray::GetTiltYCell ( );
__declspec(implementation_key(3626)) IEditorCellPtr IObjectArray::GetTiltZCell ( );
__declspec(implementation_key(3627)) IEditorCellPtr IObjectArray::GetDrawLimitCell ( );
__declspec(implementation_key(3628)) IEditorCellPtr IObjectArray::GetDrawBoundaryCell ( );
__declspec(implementation_key(3629)) IEditorCellPtr IObjectArray::GetDelta2XCell ( );
__declspec(implementation_key(3630)) IEditorCellPtr IObjectArray::GetDelta2YCell ( );
__declspec(implementation_key(3631)) IEditorCellPtr IObjectArray::GetDelta2ZCell ( );
__declspec(implementation_key(3632)) IEditorCellPtr IObjectArray::GetDelta3XCell ( );
__declspec(implementation_key(3633)) IEditorCellPtr IObjectArray::GetDelta3YCell ( );
__declspec(implementation_key(3634)) IEditorCellPtr IObjectArray::GetDelta3ZCell ( );
__declspec(implementation_key(3635)) IEditorCellPtr IObjectArray::GetDelta4XCell ( );
__declspec(implementation_key(3636)) IEditorCellPtr IObjectArray::GetDelta4YCell ( );
__declspec(implementation_key(3637)) IEditorCellPtr IObjectArray::GetDelta4ZCell ( );
__declspec(implementation_key(3638)) IEditorCellPtr IObjectArray::GetMaximumXCell ( );
__declspec(implementation_key(3639)) IEditorCellPtr IObjectArray::GetMaximumYCell ( );
__declspec(implementation_key(3640)) IEditorCellPtr IObjectArray::GetMaximumZCell ( );
__declspec(implementation_key(3641)) long IObjectArray::GetParentObjectNumber ( );
__declspec(implementation_key(3642)) void IObjectArray::PutParentObjectNumber ( long pRetVal );
__declspec(implementation_key(3643)) long IObjectArray::GetNumberX ( );
__declspec(implementation_key(3644)) void IObjectArray::PutNumberX ( long pRetVal );
__declspec(implementation_key(3645)) long IObjectArray::GetNumberY ( );
__declspec(implementation_key(3646)) void IObjectArray::PutNumberY ( long pRetVal );
__declspec(implementation_key(3647)) long IObjectArray::GetNumberZ ( );
__declspec(implementation_key(3648)) void IObjectArray::PutNumberZ ( long pRetVal );
__declspec(implementation_key(3649)) double IObjectArray::GetDelta1X ( );
__declspec(implementation_key(3650)) void IObjectArray::PutDelta1X ( double pRetVal );
__declspec(implementation_key(3651)) double IObjectArray::GetDelta1Y ( );
__declspec(implementation_key(3652)) void IObjectArray::PutDelta1Y ( double pRetVal );
__declspec(implementation_key(3653)) double IObjectArray::GetDelta1Z ( );
__declspec(implementation_key(3654)) void IObjectArray::PutDelta1Z ( double pRetVal );
__declspec(implementation_key(3655)) double IObjectArray::GetXminusX ( );
__declspec(implementation_key(3656)) void IObjectArray::PutXminusX ( double pRetVal );
__declspec(implementation_key(3657)) double IObjectArray::GetXminusY ( );
__declspec(implementation_key(3658)) void IObjectArray::PutXminusY ( double pRetVal );
__declspec(implementation_key(3659)) double IObjectArray::GetXminusZ ( );
__declspec(implementation_key(3660)) void IObjectArray::PutXminusZ ( double pRetVal );
__declspec(implementation_key(3661)) double IObjectArray::GetYminusX ( );
__declspec(implementation_key(3662)) void IObjectArray::PutYminusX ( double pRetVal );
__declspec(implementation_key(3663)) double IObjectArray::GetYminusY ( );
__declspec(implementation_key(3664)) void IObjectArray::PutYminusY ( double pRetVal );
__declspec(implementation_key(3665)) double IObjectArray::GetYminusZ ( );
__declspec(implementation_key(3666)) void IObjectArray::PutYminusZ ( double pRetVal );
__declspec(implementation_key(3667)) double IObjectArray::GetZminusX ( );
__declspec(implementation_key(3668)) void IObjectArray::PutZminusX ( double pRetVal );
__declspec(implementation_key(3669)) double IObjectArray::GetZminusY ( );
__declspec(implementation_key(3670)) void IObjectArray::PutZminusY ( double pRetVal );
__declspec(implementation_key(3671)) double IObjectArray::GetZminusZ ( );
__declspec(implementation_key(3672)) void IObjectArray::PutZminusZ ( double pRetVal );
__declspec(implementation_key(3673)) double IObjectArray::GetTiltX ( );
__declspec(implementation_key(3674)) void IObjectArray::PutTiltX ( double pRetVal );
__declspec(implementation_key(3675)) double IObjectArray::GetTiltY ( );
__declspec(implementation_key(3676)) void IObjectArray::PutTiltY ( double pRetVal );
__declspec(implementation_key(3677)) double IObjectArray::GetTiltZ ( );
__declspec(implementation_key(3678)) void IObjectArray::PutTiltZ ( double pRetVal );
__declspec(implementation_key(3679)) long IObjectArray::GetDrawLimit ( );
__declspec(implementation_key(3680)) void IObjectArray::PutDrawLimit ( long pRetVal );
__declspec(implementation_key(3681)) long IObjectArray::GetDrawBoundary ( );
__declspec(implementation_key(3682)) void IObjectArray::PutDrawBoundary ( long pRetVal );
__declspec(implementation_key(3683)) double IObjectArray::GetDelta2X ( );
__declspec(implementation_key(3684)) void IObjectArray::PutDelta2X ( double pRetVal );
__declspec(implementation_key(3685)) double IObjectArray::GetDelta2Y ( );
__declspec(implementation_key(3686)) void IObjectArray::PutDelta2Y ( double pRetVal );
__declspec(implementation_key(3687)) double IObjectArray::GetDelta2Z ( );
__declspec(implementation_key(3688)) void IObjectArray::PutDelta2Z ( double pRetVal );
__declspec(implementation_key(3689)) double IObjectArray::GetDelta3X ( );
__declspec(implementation_key(3690)) void IObjectArray::PutDelta3X ( double pRetVal );
__declspec(implementation_key(3691)) double IObjectArray::GetDelta3Y ( );
__declspec(implementation_key(3692)) void IObjectArray::PutDelta3Y ( double pRetVal );
__declspec(implementation_key(3693)) double IObjectArray::GetDelta3Z ( );
__declspec(implementation_key(3694)) void IObjectArray::PutDelta3Z ( double pRetVal );
__declspec(implementation_key(3695)) double IObjectArray::GetDelta4X ( );
__declspec(implementation_key(3696)) void IObjectArray::PutDelta4X ( double pRetVal );
__declspec(implementation_key(3697)) double IObjectArray::GetDelta4Y ( );
__declspec(implementation_key(3698)) void IObjectArray::PutDelta4Y ( double pRetVal );
__declspec(implementation_key(3699)) double IObjectArray::GetDelta4Z ( );
__declspec(implementation_key(3700)) void IObjectArray::PutDelta4Z ( double pRetVal );
__declspec(implementation_key(3701)) double IObjectArray::GetMaximumX ( );
__declspec(implementation_key(3702)) void IObjectArray::PutMaximumX ( double pRetVal );
__declspec(implementation_key(3703)) double IObjectArray::GetMaximumY ( );
__declspec(implementation_key(3704)) void IObjectArray::PutMaximumY ( double pRetVal );
__declspec(implementation_key(3705)) double IObjectArray::GetMaximumZ ( );
__declspec(implementation_key(3706)) void IObjectArray::PutMaximumZ ( double pRetVal );
__declspec(implementation_key(3707)) IEditorCellPtr IObjectArrayRing::GetParentObjectNumberCell ( );
__declspec(implementation_key(3708)) IEditorCellPtr IObjectArrayRing::GetModeCell ( );
__declspec(implementation_key(3709)) IEditorCellPtr IObjectArrayRing::GetNumberOfElementsCell ( );
__declspec(implementation_key(3710)) IEditorCellPtr IObjectArrayRing::GetRadiusACell ( );
__declspec(implementation_key(3711)) IEditorCellPtr IObjectArrayRing::GetAlphaCell ( );
__declspec(implementation_key(3712)) IEditorCellPtr IObjectArrayRing::GetBetaCell ( );
__declspec(implementation_key(3713)) IEditorCellPtr IObjectArrayRing::GetGammaCell ( );
__declspec(implementation_key(3714)) IEditorCellPtr IObjectArrayRing::GetDeltaCell ( );
__declspec(implementation_key(3715)) IEditorCellPtr IObjectArrayRing::GetEpsilonCell ( );
__declspec(implementation_key(3716)) long IObjectArrayRing::GetParentObjectNumber ( );
__declspec(implementation_key(3717)) void IObjectArrayRing::PutParentObjectNumber ( long pRetVal );
__declspec(implementation_key(3718)) long IObjectArrayRing::GetMode ( );
__declspec(implementation_key(3719)) void IObjectArrayRing::PutMode ( long pRetVal );
__declspec(implementation_key(3720)) long IObjectArrayRing::GetNumberOfElements ( );
__declspec(implementation_key(3721)) void IObjectArrayRing::PutNumberOfElements ( long pRetVal );
__declspec(implementation_key(3722)) double IObjectArrayRing::GetRadiusA ( );
__declspec(implementation_key(3723)) void IObjectArrayRing::PutRadiusA ( double pRetVal );
__declspec(implementation_key(3724)) double IObjectArrayRing::GetAlpha ( );
__declspec(implementation_key(3725)) void IObjectArrayRing::PutAlpha ( double pRetVal );
__declspec(implementation_key(3726)) double IObjectArrayRing::GetBeta ( );
__declspec(implementation_key(3727)) void IObjectArrayRing::PutBeta ( double pRetVal );
__declspec(implementation_key(3728)) double IObjectArrayRing::GetGamma ( );
__declspec(implementation_key(3729)) void IObjectArrayRing::PutGamma ( double pRetVal );
__declspec(implementation_key(3730)) double IObjectArrayRing::GetDelta ( );
__declspec(implementation_key(3731)) void IObjectArrayRing::PutDelta ( double pRetVal );
__declspec(implementation_key(3732)) double IObjectArrayRing::GetEpsilon ( );
__declspec(implementation_key(3733)) void IObjectArrayRing::PutEpsilon ( double pRetVal );
__declspec(implementation_key(3734)) IEditorCellPtr IObjectAsphericSurface::GetRadiusCell ( );
__declspec(implementation_key(3735)) IEditorCellPtr IObjectAsphericSurface::GetConicCell ( );
__declspec(implementation_key(3736)) IEditorCellPtr IObjectAsphericSurface::GetMaxApertureCell ( );
__declspec(implementation_key(3737)) IEditorCellPtr IObjectAsphericSurface::GetMinApertureCell ( );
__declspec(implementation_key(3738)) IEditorCellPtr IObjectAsphericSurface::GetNumberOfTermsCell ( );
__declspec(implementation_key(3739)) IEditorCellPtr IObjectAsphericSurface::RPowerICell ( long i );
__declspec(implementation_key(3740)) double IObjectAsphericSurface::GetRadius ( );
__declspec(implementation_key(3741)) void IObjectAsphericSurface::PutRadius ( double pRetVal );
__declspec(implementation_key(3742)) double IObjectAsphericSurface::GetConic ( );
__declspec(implementation_key(3743)) void IObjectAsphericSurface::PutConic ( double pRetVal );
__declspec(implementation_key(3744)) double IObjectAsphericSurface::GetMaxAperture ( );
__declspec(implementation_key(3745)) void IObjectAsphericSurface::PutMaxAperture ( double pRetVal );
__declspec(implementation_key(3746)) double IObjectAsphericSurface::GetMinAperture ( );
__declspec(implementation_key(3747)) void IObjectAsphericSurface::PutMinAperture ( double pRetVal );
__declspec(implementation_key(3748)) long IObjectAsphericSurface::GetNumberOfTerms ( );
__declspec(implementation_key(3749)) void IObjectAsphericSurface::PutNumberOfTerms ( long pRetVal );
__declspec(implementation_key(3750)) double IObjectAsphericSurface::GetRPowerI ( long i );
__declspec(implementation_key(3751)) HRESULT IObjectAsphericSurface::SetRPowerI ( long i, double v );
__declspec(implementation_key(3752)) IEditorCellPtr IObjectAsphericSurface2::GetRadiusCell ( );
__declspec(implementation_key(3753)) IEditorCellPtr IObjectAsphericSurface2::GetConicCell ( );
__declspec(implementation_key(3754)) IEditorCellPtr IObjectAsphericSurface2::GetMaxXCell ( );
__declspec(implementation_key(3755)) IEditorCellPtr IObjectAsphericSurface2::GetMaxYCell ( );
__declspec(implementation_key(3756)) IEditorCellPtr IObjectAsphericSurface2::GetMinXCell ( );
__declspec(implementation_key(3757)) IEditorCellPtr IObjectAsphericSurface2::GetMinYCell ( );
__declspec(implementation_key(3758)) IEditorCellPtr IObjectAsphericSurface2::GetDecenterXCell ( );
__declspec(implementation_key(3759)) IEditorCellPtr IObjectAsphericSurface2::GetDecenterYCell ( );
__declspec(implementation_key(3760)) IEditorCellPtr IObjectAsphericSurface2::GetIsRectangleCell ( );
__declspec(implementation_key(3761)) IEditorCellPtr IObjectAsphericSurface2::GetNumberOfTermsCell ( );
__declspec(implementation_key(3762)) IEditorCellPtr IObjectAsphericSurface2::RPowerICell ( long i );
__declspec(implementation_key(3763)) double IObjectAsphericSurface2::GetRadius ( );
__declspec(implementation_key(3764)) void IObjectAsphericSurface2::PutRadius ( double pRetVal );
__declspec(implementation_key(3765)) double IObjectAsphericSurface2::GetConic ( );
__declspec(implementation_key(3766)) void IObjectAsphericSurface2::PutConic ( double pRetVal );
__declspec(implementation_key(3767)) double IObjectAsphericSurface2::GetMaxX ( );
__declspec(implementation_key(3768)) void IObjectAsphericSurface2::PutMaxX ( double pRetVal );
__declspec(implementation_key(3769)) double IObjectAsphericSurface2::GetMaxY ( );
__declspec(implementation_key(3770)) void IObjectAsphericSurface2::PutMaxY ( double pRetVal );
__declspec(implementation_key(3771)) double IObjectAsphericSurface2::GetMinX ( );
__declspec(implementation_key(3772)) void IObjectAsphericSurface2::PutMinX ( double pRetVal );
__declspec(implementation_key(3773)) double IObjectAsphericSurface2::GetMinY ( );
__declspec(implementation_key(3774)) void IObjectAsphericSurface2::PutMinY ( double pRetVal );
__declspec(implementation_key(3775)) double IObjectAsphericSurface2::GetDecenterX ( );
__declspec(implementation_key(3776)) void IObjectAsphericSurface2::PutDecenterX ( double pRetVal );
__declspec(implementation_key(3777)) double IObjectAsphericSurface2::GetDecenterY ( );
__declspec(implementation_key(3778)) void IObjectAsphericSurface2::PutDecenterY ( double pRetVal );
__declspec(implementation_key(3779)) VARIANT_BOOL IObjectAsphericSurface2::GetIsRectangle ( );
__declspec(implementation_key(3780)) void IObjectAsphericSurface2::PutIsRectangle ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(3781)) long IObjectAsphericSurface2::GetNumberOfTerms ( );
__declspec(implementation_key(3782)) void IObjectAsphericSurface2::PutNumberOfTerms ( long pRetVal );
__declspec(implementation_key(3783)) double IObjectAsphericSurface2::GetRPowerI ( long i );
__declspec(implementation_key(3784)) HRESULT IObjectAsphericSurface2::SetRPowerI ( long i, double v );
__declspec(implementation_key(3785)) IEditorCellPtr IObjectAxiconSurface::GetLengthCell ( );
__declspec(implementation_key(3786)) IEditorCellPtr IObjectAxiconSurface::GetCzCell ( );
__declspec(implementation_key(3787)) IEditorCellPtr IObjectAxiconSurface::GetCyCell ( );
__declspec(implementation_key(3788)) double IObjectAxiconSurface::GetLength ( );
__declspec(implementation_key(3789)) void IObjectAxiconSurface::PutLength ( double pRetVal );
__declspec(implementation_key(3790)) double IObjectAxiconSurface::GetCz ( );
__declspec(implementation_key(3791)) void IObjectAxiconSurface::PutCz ( double pRetVal );
__declspec(implementation_key(3792)) double IObjectAxiconSurface::GetCy ( );
__declspec(implementation_key(3793)) void IObjectAxiconSurface::PutCy ( double pRetVal );
__declspec(implementation_key(3794)) IEditorCellPtr IObjectBiconicLens::GetRadialHeightCell ( );
__declspec(implementation_key(3795)) IEditorCellPtr IObjectBiconicLens::GetXHalfWidthCell ( );
__declspec(implementation_key(3796)) IEditorCellPtr IObjectBiconicLens::GetThicknessCell ( );
__declspec(implementation_key(3797)) IEditorCellPtr IObjectBiconicLens::GetRX1Cell ( );
__declspec(implementation_key(3798)) IEditorCellPtr IObjectBiconicLens::GetRY1Cell ( );
__declspec(implementation_key(3799)) IEditorCellPtr IObjectBiconicLens::GetKX1Cell ( );
__declspec(implementation_key(3800)) IEditorCellPtr IObjectBiconicLens::GetKY1Cell ( );
__declspec(implementation_key(3801)) IEditorCellPtr IObjectBiconicLens::GetRX2Cell ( );
__declspec(implementation_key(3802)) IEditorCellPtr IObjectBiconicLens::GetRY2Cell ( );
__declspec(implementation_key(3803)) IEditorCellPtr IObjectBiconicLens::GetKX2Cell ( );
__declspec(implementation_key(3804)) IEditorCellPtr IObjectBiconicLens::GetKY2Cell ( );
__declspec(implementation_key(3805)) double IObjectBiconicLens::GetRadialHeight ( );
__declspec(implementation_key(3806)) void IObjectBiconicLens::PutRadialHeight ( double pRetVal );
__declspec(implementation_key(3807)) double IObjectBiconicLens::GetXHalfWidth ( );
__declspec(implementation_key(3808)) void IObjectBiconicLens::PutXHalfWidth ( double pRetVal );
__declspec(implementation_key(3809)) double IObjectBiconicLens::GetThickness ( );
__declspec(implementation_key(3810)) void IObjectBiconicLens::PutThickness ( double pRetVal );
__declspec(implementation_key(3811)) double IObjectBiconicLens::GetRX1 ( );
__declspec(implementation_key(3812)) void IObjectBiconicLens::PutRX1 ( double pRetVal );
__declspec(implementation_key(3813)) double IObjectBiconicLens::GetRY1 ( );
__declspec(implementation_key(3814)) void IObjectBiconicLens::PutRY1 ( double pRetVal );
__declspec(implementation_key(3815)) double IObjectBiconicLens::GetKX1 ( );
__declspec(implementation_key(3816)) void IObjectBiconicLens::PutKX1 ( double pRetVal );
__declspec(implementation_key(3817)) double IObjectBiconicLens::GetKY1 ( );
__declspec(implementation_key(3818)) void IObjectBiconicLens::PutKY1 ( double pRetVal );
__declspec(implementation_key(3819)) double IObjectBiconicLens::GetRX2 ( );
__declspec(implementation_key(3820)) void IObjectBiconicLens::PutRX2 ( double pRetVal );
__declspec(implementation_key(3821)) double IObjectBiconicLens::GetRY2 ( );
__declspec(implementation_key(3822)) void IObjectBiconicLens::PutRY2 ( double pRetVal );
__declspec(implementation_key(3823)) double IObjectBiconicLens::GetKX2 ( );
__declspec(implementation_key(3824)) void IObjectBiconicLens::PutKX2 ( double pRetVal );
__declspec(implementation_key(3825)) double IObjectBiconicLens::GetKY2 ( );
__declspec(implementation_key(3826)) void IObjectBiconicLens::PutKY2 ( double pRetVal );
__declspec(implementation_key(3827)) IEditorCellPtr IObjectBiconicSurface::GetRadiusXCell ( );
__declspec(implementation_key(3828)) IEditorCellPtr IObjectBiconicSurface::GetRadiusYCell ( );
__declspec(implementation_key(3829)) IEditorCellPtr IObjectBiconicSurface::GetConicXCell ( );
__declspec(implementation_key(3830)) IEditorCellPtr IObjectBiconicSurface::GetConicYCell ( );
__declspec(implementation_key(3831)) IEditorCellPtr IObjectBiconicSurface::GetMaxXApertureCell ( );
__declspec(implementation_key(3832)) IEditorCellPtr IObjectBiconicSurface::GetMaxYApertureCell ( );
__declspec(implementation_key(3833)) IEditorCellPtr IObjectBiconicSurface::GetMinXApertureCell ( );
__declspec(implementation_key(3834)) IEditorCellPtr IObjectBiconicSurface::GetMinYApertureCell ( );
__declspec(implementation_key(3835)) IEditorCellPtr IObjectBiconicSurface::GetIsRectangleCell ( );
__declspec(implementation_key(3836)) IEditorCellPtr IObjectBiconicSurface::GetIsTopHyperCell ( );
__declspec(implementation_key(3837)) IEditorCellPtr IObjectBiconicSurface::GetIsBottomHyperCell ( );
__declspec(implementation_key(3838)) double IObjectBiconicSurface::GetRadiusX ( );
__declspec(implementation_key(3839)) void IObjectBiconicSurface::PutRadiusX ( double pRetVal );
__declspec(implementation_key(3840)) double IObjectBiconicSurface::GetRadiusY ( );
__declspec(implementation_key(3841)) void IObjectBiconicSurface::PutRadiusY ( double pRetVal );
__declspec(implementation_key(3842)) double IObjectBiconicSurface::GetConicX ( );
__declspec(implementation_key(3843)) void IObjectBiconicSurface::PutConicX ( double pRetVal );
__declspec(implementation_key(3844)) double IObjectBiconicSurface::GetConicY ( );
__declspec(implementation_key(3845)) void IObjectBiconicSurface::PutConicY ( double pRetVal );
__declspec(implementation_key(3846)) double IObjectBiconicSurface::GetMaxXAperture ( );
__declspec(implementation_key(3847)) void IObjectBiconicSurface::PutMaxXAperture ( double pRetVal );
__declspec(implementation_key(3848)) double IObjectBiconicSurface::GetMaxYAperture ( );
__declspec(implementation_key(3849)) void IObjectBiconicSurface::PutMaxYAperture ( double pRetVal );
__declspec(implementation_key(3850)) double IObjectBiconicSurface::GetMinXAperture ( );
__declspec(implementation_key(3851)) void IObjectBiconicSurface::PutMinXAperture ( double pRetVal );
__declspec(implementation_key(3852)) double IObjectBiconicSurface::GetMinYAperture ( );
__declspec(implementation_key(3853)) void IObjectBiconicSurface::PutMinYAperture ( double pRetVal );
__declspec(implementation_key(3854)) VARIANT_BOOL IObjectBiconicSurface::GetIsRectangle ( );
__declspec(implementation_key(3855)) void IObjectBiconicSurface::PutIsRectangle ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(3856)) VARIANT_BOOL IObjectBiconicSurface::GetIsTopHyper ( );
__declspec(implementation_key(3857)) void IObjectBiconicSurface::PutIsTopHyper ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(3858)) VARIANT_BOOL IObjectBiconicSurface::GetIsBottomHyper ( );
__declspec(implementation_key(3859)) void IObjectBiconicSurface::PutIsBottomHyper ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(3860)) IEditorCellPtr IObjectBiconicZernike::GetRadialHeightCell ( );
__declspec(implementation_key(3861)) IEditorCellPtr IObjectBiconicZernike::GetXHalfWidthCell ( );
__declspec(implementation_key(3862)) IEditorCellPtr IObjectBiconicZernike::GetThicknessCell ( );
__declspec(implementation_key(3863)) IEditorCellPtr IObjectBiconicZernike::GetFrontRadiusCell ( );
__declspec(implementation_key(3864)) IEditorCellPtr IObjectBiconicZernike::GetFrontConicCell ( );
__declspec(implementation_key(3865)) IEditorCellPtr IObjectBiconicZernike::GetRearRadiusXCell ( );
__declspec(implementation_key(3866)) IEditorCellPtr IObjectBiconicZernike::GetRearRadiusYCell ( );
__declspec(implementation_key(3867)) IEditorCellPtr IObjectBiconicZernike::GetRearConicXCell ( );
__declspec(implementation_key(3868)) IEditorCellPtr IObjectBiconicZernike::GetRearConicYCell ( );
__declspec(implementation_key(3869)) IEditorCellPtr IObjectBiconicZernike::GetNumberZernikeTermsCell ( );
__declspec(implementation_key(3870)) IEditorCellPtr IObjectBiconicZernike::GetNormRadiusCell ( );
__declspec(implementation_key(3871)) IEditorCellPtr IObjectBiconicZernike::XPowerICell ( long i );
__declspec(implementation_key(3872)) IEditorCellPtr IObjectBiconicZernike::YPowerICell ( long i );
__declspec(implementation_key(3873)) IEditorCellPtr IObjectBiconicZernike::ZPowerICell ( long i );
__declspec(implementation_key(3874)) double IObjectBiconicZernike::GetRadialHeight ( );
__declspec(implementation_key(3875)) void IObjectBiconicZernike::PutRadialHeight ( double pRetVal );
__declspec(implementation_key(3876)) double IObjectBiconicZernike::GetXHalfWidth ( );
__declspec(implementation_key(3877)) void IObjectBiconicZernike::PutXHalfWidth ( double pRetVal );
__declspec(implementation_key(3878)) double IObjectBiconicZernike::GetThickness ( );
__declspec(implementation_key(3879)) void IObjectBiconicZernike::PutThickness ( double pRetVal );
__declspec(implementation_key(3880)) double IObjectBiconicZernike::GetFrontRadius ( );
__declspec(implementation_key(3881)) void IObjectBiconicZernike::PutFrontRadius ( double pRetVal );
__declspec(implementation_key(3882)) double IObjectBiconicZernike::GetFrontConic ( );
__declspec(implementation_key(3883)) void IObjectBiconicZernike::PutFrontConic ( double pRetVal );
__declspec(implementation_key(3884)) double IObjectBiconicZernike::GetRearRadiusX ( );
__declspec(implementation_key(3885)) void IObjectBiconicZernike::PutRearRadiusX ( double pRetVal );
__declspec(implementation_key(3886)) double IObjectBiconicZernike::GetRearRadiusY ( );
__declspec(implementation_key(3887)) void IObjectBiconicZernike::PutRearRadiusY ( double pRetVal );
__declspec(implementation_key(3888)) double IObjectBiconicZernike::GetRearConicX ( );
__declspec(implementation_key(3889)) void IObjectBiconicZernike::PutRearConicX ( double pRetVal );
__declspec(implementation_key(3890)) double IObjectBiconicZernike::GetRearConicY ( );
__declspec(implementation_key(3891)) void IObjectBiconicZernike::PutRearConicY ( double pRetVal );
__declspec(implementation_key(3892)) long IObjectBiconicZernike::GetNumberZernikeTerms ( );
__declspec(implementation_key(3893)) void IObjectBiconicZernike::PutNumberZernikeTerms ( long pRetVal );
__declspec(implementation_key(3894)) double IObjectBiconicZernike::GetNormRadius ( );
__declspec(implementation_key(3895)) void IObjectBiconicZernike::PutNormRadius ( double pRetVal );
__declspec(implementation_key(3896)) double IObjectBiconicZernike::GetXPowerI ( long i );
__declspec(implementation_key(3897)) HRESULT IObjectBiconicZernike::SetXPowerI ( long i, double v );
__declspec(implementation_key(3898)) double IObjectBiconicZernike::GetYPowerI ( long i );
__declspec(implementation_key(3899)) HRESULT IObjectBiconicZernike::SetYPowerI ( long i, double v );
__declspec(implementation_key(3900)) double IObjectBiconicZernike::GetZPowerI ( long i );
__declspec(implementation_key(3901)) HRESULT IObjectBiconicZernike::SetZPowerI ( long i, double v );
__declspec(implementation_key(3902)) IEditorCellPtr IObjectBiconicZernikeSurface::GetXHalfWidthCell ( );
__declspec(implementation_key(3903)) IEditorCellPtr IObjectBiconicZernikeSurface::GetYHalfWidthCell ( );
__declspec(implementation_key(3904)) IEditorCellPtr IObjectBiconicZernikeSurface::GetRadiusXCell ( );
__declspec(implementation_key(3905)) IEditorCellPtr IObjectBiconicZernikeSurface::GetRadiusYCell ( );
__declspec(implementation_key(3906)) IEditorCellPtr IObjectBiconicZernikeSurface::GetConicXCell ( );
__declspec(implementation_key(3907)) IEditorCellPtr IObjectBiconicZernikeSurface::GetConicYCell ( );
__declspec(implementation_key(3908)) IEditorCellPtr IObjectBiconicZernikeSurface::GetBiconicDecXCell ( );
__declspec(implementation_key(3909)) IEditorCellPtr IObjectBiconicZernikeSurface::GetBiconicDecYCell ( );
__declspec(implementation_key(3910)) IEditorCellPtr IObjectBiconicZernikeSurface::GetZernikeDecXCell ( );
__declspec(implementation_key(3911)) IEditorCellPtr IObjectBiconicZernikeSurface::GetZernikeDecYCell ( );
__declspec(implementation_key(3912)) IEditorCellPtr IObjectBiconicZernikeSurface::GetNumberZernikeTermsCell ( );
__declspec(implementation_key(3913)) IEditorCellPtr IObjectBiconicZernikeSurface::GetNormRadiusCell ( );
__declspec(implementation_key(3914)) IEditorCellPtr IObjectBiconicZernikeSurface::XPowerICell ( long i );
__declspec(implementation_key(3915)) IEditorCellPtr IObjectBiconicZernikeSurface::YPowerICell ( long i );
__declspec(implementation_key(3916)) IEditorCellPtr IObjectBiconicZernikeSurface::ZPowerICell ( long i );
__declspec(implementation_key(3917)) double IObjectBiconicZernikeSurface::GetXHalfWidth ( );
__declspec(implementation_key(3918)) void IObjectBiconicZernikeSurface::PutXHalfWidth ( double pRetVal );
__declspec(implementation_key(3919)) double IObjectBiconicZernikeSurface::GetYHalfWidth ( );
__declspec(implementation_key(3920)) void IObjectBiconicZernikeSurface::PutYHalfWidth ( double pRetVal );
__declspec(implementation_key(3921)) double IObjectBiconicZernikeSurface::GetRadiusX ( );
__declspec(implementation_key(3922)) void IObjectBiconicZernikeSurface::PutRadiusX ( double pRetVal );
__declspec(implementation_key(3923)) double IObjectBiconicZernikeSurface::GetRadiusY ( );
__declspec(implementation_key(3924)) void IObjectBiconicZernikeSurface::PutRadiusY ( double pRetVal );
__declspec(implementation_key(3925)) double IObjectBiconicZernikeSurface::GetConicX ( );
__declspec(implementation_key(3926)) void IObjectBiconicZernikeSurface::PutConicX ( double pRetVal );
__declspec(implementation_key(3927)) double IObjectBiconicZernikeSurface::GetConicY ( );
__declspec(implementation_key(3928)) void IObjectBiconicZernikeSurface::PutConicY ( double pRetVal );
__declspec(implementation_key(3929)) double IObjectBiconicZernikeSurface::GetBiconicDecX ( );
__declspec(implementation_key(3930)) void IObjectBiconicZernikeSurface::PutBiconicDecX ( double pRetVal );
__declspec(implementation_key(3931)) double IObjectBiconicZernikeSurface::GetBiconicDecY ( );
__declspec(implementation_key(3932)) void IObjectBiconicZernikeSurface::PutBiconicDecY ( double pRetVal );
__declspec(implementation_key(3933)) double IObjectBiconicZernikeSurface::GetZernikeDecX ( );
__declspec(implementation_key(3934)) void IObjectBiconicZernikeSurface::PutZernikeDecX ( double pRetVal );
__declspec(implementation_key(3935)) double IObjectBiconicZernikeSurface::GetZernikeDecY ( );
__declspec(implementation_key(3936)) void IObjectBiconicZernikeSurface::PutZernikeDecY ( double pRetVal );
__declspec(implementation_key(3937)) long IObjectBiconicZernikeSurface::GetNumberZernikeTerms ( );
__declspec(implementation_key(3938)) void IObjectBiconicZernikeSurface::PutNumberZernikeTerms ( long pRetVal );
__declspec(implementation_key(3939)) double IObjectBiconicZernikeSurface::GetNormRadius ( );
__declspec(implementation_key(3940)) void IObjectBiconicZernikeSurface::PutNormRadius ( double pRetVal );
__declspec(implementation_key(3941)) double IObjectBiconicZernikeSurface::GetXPowerI ( long i );
__declspec(implementation_key(3942)) HRESULT IObjectBiconicZernikeSurface::SetXPowerI ( long i, double v );
__declspec(implementation_key(3943)) double IObjectBiconicZernikeSurface::GetYPowerI ( long i );
__declspec(implementation_key(3944)) HRESULT IObjectBiconicZernikeSurface::SetYPowerI ( long i, double v );
__declspec(implementation_key(3945)) double IObjectBiconicZernikeSurface::GetZPowerI ( long i );
__declspec(implementation_key(3946)) HRESULT IObjectBiconicZernikeSurface::SetZPowerI ( long i, double v );
__declspec(implementation_key(3947)) IEditorCellPtr IObjectXYPolynomial::GetX1Y0Cell ( );
__declspec(implementation_key(3948)) IEditorCellPtr IObjectXYPolynomial::GetX0Y1Cell ( );
__declspec(implementation_key(3949)) IEditorCellPtr IObjectXYPolynomial::GetX2Y0Cell ( );
__declspec(implementation_key(3950)) IEditorCellPtr IObjectXYPolynomial::GetX1Y1Cell ( );
__declspec(implementation_key(3951)) IEditorCellPtr IObjectXYPolynomial::GetX0Y2Cell ( );
__declspec(implementation_key(3952)) IEditorCellPtr IObjectXYPolynomial::GetX3Y0Cell ( );
__declspec(implementation_key(3953)) IEditorCellPtr IObjectXYPolynomial::GetX2Y1Cell ( );
__declspec(implementation_key(3954)) IEditorCellPtr IObjectXYPolynomial::GetX1Y2Cell ( );
__declspec(implementation_key(3955)) IEditorCellPtr IObjectXYPolynomial::GetX0Y3Cell ( );
__declspec(implementation_key(3956)) IEditorCellPtr IObjectXYPolynomial::GetX4Y0Cell ( );
__declspec(implementation_key(3957)) IEditorCellPtr IObjectXYPolynomial::GetX3Y1Cell ( );
__declspec(implementation_key(3958)) IEditorCellPtr IObjectXYPolynomial::GetX2Y2Cell ( );
__declspec(implementation_key(3959)) IEditorCellPtr IObjectXYPolynomial::GetX1Y3Cell ( );
__declspec(implementation_key(3960)) IEditorCellPtr IObjectXYPolynomial::GetX0Y4Cell ( );
__declspec(implementation_key(3961)) IEditorCellPtr IObjectXYPolynomial::GetX5Y0Cell ( );
__declspec(implementation_key(3962)) IEditorCellPtr IObjectXYPolynomial::GetX4Y1Cell ( );
__declspec(implementation_key(3963)) IEditorCellPtr IObjectXYPolynomial::GetX3Y2Cell ( );
__declspec(implementation_key(3964)) IEditorCellPtr IObjectXYPolynomial::GetX2Y3Cell ( );
__declspec(implementation_key(3965)) IEditorCellPtr IObjectXYPolynomial::GetX1Y4Cell ( );
__declspec(implementation_key(3966)) IEditorCellPtr IObjectXYPolynomial::GetX0Y5Cell ( );
__declspec(implementation_key(3967)) IEditorCellPtr IObjectXYPolynomial::GetX6Y0Cell ( );
__declspec(implementation_key(3968)) IEditorCellPtr IObjectXYPolynomial::GetX5Y1Cell ( );
__declspec(implementation_key(3969)) IEditorCellPtr IObjectXYPolynomial::GetX4Y2Cell ( );
__declspec(implementation_key(3970)) IEditorCellPtr IObjectXYPolynomial::GetX3Y3Cell ( );
__declspec(implementation_key(3971)) IEditorCellPtr IObjectXYPolynomial::GetX2Y4Cell ( );
__declspec(implementation_key(3972)) IEditorCellPtr IObjectXYPolynomial::GetX1Y5Cell ( );
__declspec(implementation_key(3973)) IEditorCellPtr IObjectXYPolynomial::GetX0Y6Cell ( );
__declspec(implementation_key(3974)) IEditorCellPtr IObjectXYPolynomial::GetX7Y0Cell ( );
__declspec(implementation_key(3975)) IEditorCellPtr IObjectXYPolynomial::GetX6Y1Cell ( );
__declspec(implementation_key(3976)) IEditorCellPtr IObjectXYPolynomial::GetX5Y2Cell ( );
__declspec(implementation_key(3977)) IEditorCellPtr IObjectXYPolynomial::GetX4Y3Cell ( );
__declspec(implementation_key(3978)) IEditorCellPtr IObjectXYPolynomial::GetX3Y4Cell ( );
__declspec(implementation_key(3979)) IEditorCellPtr IObjectXYPolynomial::GetX2Y5Cell ( );
__declspec(implementation_key(3980)) IEditorCellPtr IObjectXYPolynomial::GetX1Y6Cell ( );
__declspec(implementation_key(3981)) IEditorCellPtr IObjectXYPolynomial::GetX0Y7Cell ( );
__declspec(implementation_key(3982)) IEditorCellPtr IObjectXYPolynomial::GetX8Y0Cell ( );
__declspec(implementation_key(3983)) IEditorCellPtr IObjectXYPolynomial::GetX7Y1Cell ( );
__declspec(implementation_key(3984)) IEditorCellPtr IObjectXYPolynomial::GetX6Y2Cell ( );
__declspec(implementation_key(3985)) IEditorCellPtr IObjectXYPolynomial::GetX5Y3Cell ( );
__declspec(implementation_key(3986)) IEditorCellPtr IObjectXYPolynomial::GetX4Y4Cell ( );
__declspec(implementation_key(3987)) IEditorCellPtr IObjectXYPolynomial::GetX3Y5Cell ( );
__declspec(implementation_key(3988)) IEditorCellPtr IObjectXYPolynomial::GetX2Y6Cell ( );
__declspec(implementation_key(3989)) IEditorCellPtr IObjectXYPolynomial::GetX1Y7Cell ( );
__declspec(implementation_key(3990)) IEditorCellPtr IObjectXYPolynomial::GetX0Y8Cell ( );
__declspec(implementation_key(3991)) IEditorCellPtr IObjectXYPolynomial::GetX9Y0Cell ( );
__declspec(implementation_key(3992)) IEditorCellPtr IObjectXYPolynomial::GetX8Y1Cell ( );
__declspec(implementation_key(3993)) IEditorCellPtr IObjectXYPolynomial::GetX7Y2Cell ( );
__declspec(implementation_key(3994)) IEditorCellPtr IObjectXYPolynomial::GetX6Y3Cell ( );
__declspec(implementation_key(3995)) IEditorCellPtr IObjectXYPolynomial::GetX5Y4Cell ( );
__declspec(implementation_key(3996)) IEditorCellPtr IObjectXYPolynomial::GetX4Y5Cell ( );
__declspec(implementation_key(3997)) IEditorCellPtr IObjectXYPolynomial::GetX3Y6Cell ( );
__declspec(implementation_key(3998)) IEditorCellPtr IObjectXYPolynomial::GetX2Y7Cell ( );
__declspec(implementation_key(3999)) IEditorCellPtr IObjectXYPolynomial::GetX1Y8Cell ( );
__declspec(implementation_key(4000)) IEditorCellPtr IObjectXYPolynomial::GetX0Y9Cell ( );
__declspec(implementation_key(4001)) IEditorCellPtr IObjectXYPolynomial::GetX10Y0Cell ( );
__declspec(implementation_key(4002)) IEditorCellPtr IObjectXYPolynomial::GetX9Y1Cell ( );
__declspec(implementation_key(4003)) IEditorCellPtr IObjectXYPolynomial::GetX8Y2Cell ( );
__declspec(implementation_key(4004)) IEditorCellPtr IObjectXYPolynomial::GetX7Y3Cell ( );
__declspec(implementation_key(4005)) IEditorCellPtr IObjectXYPolynomial::GetX6Y4Cell ( );
__declspec(implementation_key(4006)) IEditorCellPtr IObjectXYPolynomial::GetX5Y5Cell ( );
__declspec(implementation_key(4007)) IEditorCellPtr IObjectXYPolynomial::GetX4Y6Cell ( );
__declspec(implementation_key(4008)) IEditorCellPtr IObjectXYPolynomial::GetX3Y7Cell ( );
__declspec(implementation_key(4009)) IEditorCellPtr IObjectXYPolynomial::GetX2Y8Cell ( );
__declspec(implementation_key(4010)) IEditorCellPtr IObjectXYPolynomial::GetX1Y9Cell ( );
__declspec(implementation_key(4011)) IEditorCellPtr IObjectXYPolynomial::GetX0Y10Cell ( );
__declspec(implementation_key(4012)) IEditorCellPtr IObjectXYPolynomial::GetX11Y0Cell ( );
__declspec(implementation_key(4013)) IEditorCellPtr IObjectXYPolynomial::GetX10Y1Cell ( );
__declspec(implementation_key(4014)) IEditorCellPtr IObjectXYPolynomial::GetX9Y2Cell ( );
__declspec(implementation_key(4015)) IEditorCellPtr IObjectXYPolynomial::GetX8Y3Cell ( );
__declspec(implementation_key(4016)) IEditorCellPtr IObjectXYPolynomial::GetX7Y4Cell ( );
__declspec(implementation_key(4017)) IEditorCellPtr IObjectXYPolynomial::GetX6Y5Cell ( );
__declspec(implementation_key(4018)) IEditorCellPtr IObjectXYPolynomial::GetX5Y6Cell ( );
__declspec(implementation_key(4019)) IEditorCellPtr IObjectXYPolynomial::GetX4Y7Cell ( );
__declspec(implementation_key(4020)) IEditorCellPtr IObjectXYPolynomial::GetX3Y8Cell ( );
__declspec(implementation_key(4021)) IEditorCellPtr IObjectXYPolynomial::GetX2Y9Cell ( );
__declspec(implementation_key(4022)) IEditorCellPtr IObjectXYPolynomial::GetX1Y10Cell ( );
__declspec(implementation_key(4023)) IEditorCellPtr IObjectXYPolynomial::GetX0Y11Cell ( );
__declspec(implementation_key(4024)) IEditorCellPtr IObjectXYPolynomial::GetX12Y0Cell ( );
__declspec(implementation_key(4025)) IEditorCellPtr IObjectXYPolynomial::GetX11Y1Cell ( );
__declspec(implementation_key(4026)) IEditorCellPtr IObjectXYPolynomial::GetX10Y2Cell ( );
__declspec(implementation_key(4027)) IEditorCellPtr IObjectXYPolynomial::GetX9Y3Cell ( );
__declspec(implementation_key(4028)) IEditorCellPtr IObjectXYPolynomial::GetX8Y4Cell ( );
__declspec(implementation_key(4029)) IEditorCellPtr IObjectXYPolynomial::GetX7Y5Cell ( );
__declspec(implementation_key(4030)) IEditorCellPtr IObjectXYPolynomial::GetX6Y6Cell ( );
__declspec(implementation_key(4031)) IEditorCellPtr IObjectXYPolynomial::GetX5Y7Cell ( );
__declspec(implementation_key(4032)) IEditorCellPtr IObjectXYPolynomial::GetX4Y8Cell ( );
__declspec(implementation_key(4033)) IEditorCellPtr IObjectXYPolynomial::GetX3Y9Cell ( );
__declspec(implementation_key(4034)) IEditorCellPtr IObjectXYPolynomial::GetX2Y10Cell ( );
__declspec(implementation_key(4035)) IEditorCellPtr IObjectXYPolynomial::GetX1Y11Cell ( );
__declspec(implementation_key(4036)) IEditorCellPtr IObjectXYPolynomial::GetX0Y12Cell ( );
__declspec(implementation_key(4037)) IEditorCellPtr IObjectXYPolynomial::GetX13Y0Cell ( );
__declspec(implementation_key(4038)) IEditorCellPtr IObjectXYPolynomial::GetX12Y1Cell ( );
__declspec(implementation_key(4039)) IEditorCellPtr IObjectXYPolynomial::GetX11Y2Cell ( );
__declspec(implementation_key(4040)) IEditorCellPtr IObjectXYPolynomial::GetX10Y3Cell ( );
__declspec(implementation_key(4041)) IEditorCellPtr IObjectXYPolynomial::GetX9Y4Cell ( );
__declspec(implementation_key(4042)) IEditorCellPtr IObjectXYPolynomial::GetX8Y5Cell ( );
__declspec(implementation_key(4043)) IEditorCellPtr IObjectXYPolynomial::GetX7Y6Cell ( );
__declspec(implementation_key(4044)) IEditorCellPtr IObjectXYPolynomial::GetX6Y7Cell ( );
__declspec(implementation_key(4045)) IEditorCellPtr IObjectXYPolynomial::GetX5Y8Cell ( );
__declspec(implementation_key(4046)) IEditorCellPtr IObjectXYPolynomial::GetX4Y9Cell ( );
__declspec(implementation_key(4047)) IEditorCellPtr IObjectXYPolynomial::GetX3Y10Cell ( );
__declspec(implementation_key(4048)) IEditorCellPtr IObjectXYPolynomial::GetX2Y11Cell ( );
__declspec(implementation_key(4049)) IEditorCellPtr IObjectXYPolynomial::GetX1Y12Cell ( );
__declspec(implementation_key(4050)) IEditorCellPtr IObjectXYPolynomial::GetX0Y13Cell ( );
__declspec(implementation_key(4051)) IEditorCellPtr IObjectXYPolynomial::GetX14Y0Cell ( );
__declspec(implementation_key(4052)) IEditorCellPtr IObjectXYPolynomial::GetX13Y1Cell ( );
__declspec(implementation_key(4053)) IEditorCellPtr IObjectXYPolynomial::GetX12Y2Cell ( );
__declspec(implementation_key(4054)) IEditorCellPtr IObjectXYPolynomial::GetX11Y3Cell ( );
__declspec(implementation_key(4055)) IEditorCellPtr IObjectXYPolynomial::GetX10Y4Cell ( );
__declspec(implementation_key(4056)) IEditorCellPtr IObjectXYPolynomial::GetX9Y5Cell ( );
__declspec(implementation_key(4057)) IEditorCellPtr IObjectXYPolynomial::GetX8Y6Cell ( );
__declspec(implementation_key(4058)) IEditorCellPtr IObjectXYPolynomial::GetX7Y7Cell ( );
__declspec(implementation_key(4059)) IEditorCellPtr IObjectXYPolynomial::GetX6Y8Cell ( );
__declspec(implementation_key(4060)) IEditorCellPtr IObjectXYPolynomial::GetX5Y9Cell ( );
__declspec(implementation_key(4061)) IEditorCellPtr IObjectXYPolynomial::GetX4Y10Cell ( );
__declspec(implementation_key(4062)) IEditorCellPtr IObjectXYPolynomial::GetX3Y11Cell ( );
__declspec(implementation_key(4063)) IEditorCellPtr IObjectXYPolynomial::GetX2Y12Cell ( );
__declspec(implementation_key(4064)) IEditorCellPtr IObjectXYPolynomial::GetX1Y13Cell ( );
__declspec(implementation_key(4065)) IEditorCellPtr IObjectXYPolynomial::GetX0Y14Cell ( );
__declspec(implementation_key(4066)) IEditorCellPtr IObjectXYPolynomial::GetX15Y0Cell ( );
__declspec(implementation_key(4067)) IEditorCellPtr IObjectXYPolynomial::GetX14Y1Cell ( );
__declspec(implementation_key(4068)) IEditorCellPtr IObjectXYPolynomial::GetX13Y2Cell ( );
__declspec(implementation_key(4069)) IEditorCellPtr IObjectXYPolynomial::GetX12Y3Cell ( );
__declspec(implementation_key(4070)) IEditorCellPtr IObjectXYPolynomial::GetX11Y4Cell ( );
__declspec(implementation_key(4071)) IEditorCellPtr IObjectXYPolynomial::GetX10Y5Cell ( );
__declspec(implementation_key(4072)) IEditorCellPtr IObjectXYPolynomial::GetX9Y6Cell ( );
__declspec(implementation_key(4073)) IEditorCellPtr IObjectXYPolynomial::GetX8Y7Cell ( );
__declspec(implementation_key(4074)) IEditorCellPtr IObjectXYPolynomial::GetX7Y8Cell ( );
__declspec(implementation_key(4075)) IEditorCellPtr IObjectXYPolynomial::GetX6Y9Cell ( );
__declspec(implementation_key(4076)) IEditorCellPtr IObjectXYPolynomial::GetX5Y10Cell ( );
__declspec(implementation_key(4077)) IEditorCellPtr IObjectXYPolynomial::GetX4Y11Cell ( );
__declspec(implementation_key(4078)) IEditorCellPtr IObjectXYPolynomial::GetX3Y12Cell ( );
__declspec(implementation_key(4079)) IEditorCellPtr IObjectXYPolynomial::GetX2Y13Cell ( );
__declspec(implementation_key(4080)) IEditorCellPtr IObjectXYPolynomial::GetX1Y14Cell ( );
__declspec(implementation_key(4081)) IEditorCellPtr IObjectXYPolynomial::GetX0Y15Cell ( );
__declspec(implementation_key(4082)) IEditorCellPtr IObjectXYPolynomial::GetX16Y0Cell ( );
__declspec(implementation_key(4083)) IEditorCellPtr IObjectXYPolynomial::GetX15Y1Cell ( );
__declspec(implementation_key(4084)) IEditorCellPtr IObjectXYPolynomial::GetX14Y2Cell ( );
__declspec(implementation_key(4085)) IEditorCellPtr IObjectXYPolynomial::GetX13Y3Cell ( );
__declspec(implementation_key(4086)) IEditorCellPtr IObjectXYPolynomial::GetX12Y4Cell ( );
__declspec(implementation_key(4087)) IEditorCellPtr IObjectXYPolynomial::GetX11Y5Cell ( );
__declspec(implementation_key(4088)) IEditorCellPtr IObjectXYPolynomial::GetX10Y6Cell ( );
__declspec(implementation_key(4089)) IEditorCellPtr IObjectXYPolynomial::GetX9Y7Cell ( );
__declspec(implementation_key(4090)) IEditorCellPtr IObjectXYPolynomial::GetX8Y8Cell ( );
__declspec(implementation_key(4091)) IEditorCellPtr IObjectXYPolynomial::GetX7Y9Cell ( );
__declspec(implementation_key(4092)) IEditorCellPtr IObjectXYPolynomial::GetX6Y10Cell ( );
__declspec(implementation_key(4093)) IEditorCellPtr IObjectXYPolynomial::GetX5Y11Cell ( );
__declspec(implementation_key(4094)) IEditorCellPtr IObjectXYPolynomial::GetX4Y12Cell ( );
__declspec(implementation_key(4095)) IEditorCellPtr IObjectXYPolynomial::GetX3Y13Cell ( );
__declspec(implementation_key(4096)) IEditorCellPtr IObjectXYPolynomial::GetX2Y14Cell ( );
__declspec(implementation_key(4097)) IEditorCellPtr IObjectXYPolynomial::GetX1Y15Cell ( );
__declspec(implementation_key(4098)) IEditorCellPtr IObjectXYPolynomial::GetX0Y16Cell ( );
__declspec(implementation_key(4099)) IEditorCellPtr IObjectXYPolynomial::GetX17Y0Cell ( );
__declspec(implementation_key(4100)) IEditorCellPtr IObjectXYPolynomial::GetX16Y1Cell ( );
__declspec(implementation_key(4101)) IEditorCellPtr IObjectXYPolynomial::GetX15Y2Cell ( );
__declspec(implementation_key(4102)) IEditorCellPtr IObjectXYPolynomial::GetX14Y3Cell ( );
__declspec(implementation_key(4103)) IEditorCellPtr IObjectXYPolynomial::GetX13Y4Cell ( );
__declspec(implementation_key(4104)) IEditorCellPtr IObjectXYPolynomial::GetX12Y5Cell ( );
__declspec(implementation_key(4105)) IEditorCellPtr IObjectXYPolynomial::GetX11Y6Cell ( );
__declspec(implementation_key(4106)) IEditorCellPtr IObjectXYPolynomial::GetX10Y7Cell ( );
__declspec(implementation_key(4107)) IEditorCellPtr IObjectXYPolynomial::GetX9Y8Cell ( );
__declspec(implementation_key(4108)) IEditorCellPtr IObjectXYPolynomial::GetX8Y9Cell ( );
__declspec(implementation_key(4109)) IEditorCellPtr IObjectXYPolynomial::GetX7Y10Cell ( );
__declspec(implementation_key(4110)) IEditorCellPtr IObjectXYPolynomial::GetX6Y11Cell ( );
__declspec(implementation_key(4111)) IEditorCellPtr IObjectXYPolynomial::GetX5Y12Cell ( );
__declspec(implementation_key(4112)) IEditorCellPtr IObjectXYPolynomial::GetX4Y13Cell ( );
__declspec(implementation_key(4113)) IEditorCellPtr IObjectXYPolynomial::GetX3Y14Cell ( );
__declspec(implementation_key(4114)) IEditorCellPtr IObjectXYPolynomial::GetX2Y15Cell ( );
__declspec(implementation_key(4115)) IEditorCellPtr IObjectXYPolynomial::GetX1Y16Cell ( );
__declspec(implementation_key(4116)) IEditorCellPtr IObjectXYPolynomial::GetX0Y17Cell ( );
__declspec(implementation_key(4117)) IEditorCellPtr IObjectXYPolynomial::GetX18Y0Cell ( );
__declspec(implementation_key(4118)) IEditorCellPtr IObjectXYPolynomial::GetX17Y1Cell ( );
__declspec(implementation_key(4119)) IEditorCellPtr IObjectXYPolynomial::GetX16Y2Cell ( );
__declspec(implementation_key(4120)) IEditorCellPtr IObjectXYPolynomial::GetX15Y3Cell ( );
__declspec(implementation_key(4121)) IEditorCellPtr IObjectXYPolynomial::GetX14Y4Cell ( );
__declspec(implementation_key(4122)) IEditorCellPtr IObjectXYPolynomial::GetX13Y5Cell ( );
__declspec(implementation_key(4123)) IEditorCellPtr IObjectXYPolynomial::GetX12Y6Cell ( );
__declspec(implementation_key(4124)) IEditorCellPtr IObjectXYPolynomial::GetX11Y7Cell ( );
__declspec(implementation_key(4125)) IEditorCellPtr IObjectXYPolynomial::GetX10Y8Cell ( );
__declspec(implementation_key(4126)) IEditorCellPtr IObjectXYPolynomial::GetX9Y9Cell ( );
__declspec(implementation_key(4127)) IEditorCellPtr IObjectXYPolynomial::GetX8Y10Cell ( );
__declspec(implementation_key(4128)) IEditorCellPtr IObjectXYPolynomial::GetX7Y11Cell ( );
__declspec(implementation_key(4129)) IEditorCellPtr IObjectXYPolynomial::GetX6Y12Cell ( );
__declspec(implementation_key(4130)) IEditorCellPtr IObjectXYPolynomial::GetX5Y13Cell ( );
__declspec(implementation_key(4131)) IEditorCellPtr IObjectXYPolynomial::GetX4Y14Cell ( );
__declspec(implementation_key(4132)) IEditorCellPtr IObjectXYPolynomial::GetX3Y15Cell ( );
__declspec(implementation_key(4133)) IEditorCellPtr IObjectXYPolynomial::GetX2Y16Cell ( );
__declspec(implementation_key(4134)) IEditorCellPtr IObjectXYPolynomial::GetX1Y17Cell ( );
__declspec(implementation_key(4135)) IEditorCellPtr IObjectXYPolynomial::GetX0Y18Cell ( );
__declspec(implementation_key(4136)) IEditorCellPtr IObjectXYPolynomial::GetX19Y0Cell ( );
__declspec(implementation_key(4137)) IEditorCellPtr IObjectXYPolynomial::GetX18Y1Cell ( );
__declspec(implementation_key(4138)) IEditorCellPtr IObjectXYPolynomial::GetX17Y2Cell ( );
__declspec(implementation_key(4139)) IEditorCellPtr IObjectXYPolynomial::GetX16Y3Cell ( );
__declspec(implementation_key(4140)) IEditorCellPtr IObjectXYPolynomial::GetX15Y4Cell ( );
__declspec(implementation_key(4141)) IEditorCellPtr IObjectXYPolynomial::GetX14Y5Cell ( );
__declspec(implementation_key(4142)) IEditorCellPtr IObjectXYPolynomial::GetX13Y6Cell ( );
__declspec(implementation_key(4143)) IEditorCellPtr IObjectXYPolynomial::GetX12Y7Cell ( );
__declspec(implementation_key(4144)) IEditorCellPtr IObjectXYPolynomial::GetX11Y8Cell ( );
__declspec(implementation_key(4145)) IEditorCellPtr IObjectXYPolynomial::GetX10Y9Cell ( );
__declspec(implementation_key(4146)) IEditorCellPtr IObjectXYPolynomial::GetX9Y10Cell ( );
__declspec(implementation_key(4147)) IEditorCellPtr IObjectXYPolynomial::GetX8Y11Cell ( );
__declspec(implementation_key(4148)) IEditorCellPtr IObjectXYPolynomial::GetX7Y12Cell ( );
__declspec(implementation_key(4149)) IEditorCellPtr IObjectXYPolynomial::GetX6Y13Cell ( );
__declspec(implementation_key(4150)) IEditorCellPtr IObjectXYPolynomial::GetX5Y14Cell ( );
__declspec(implementation_key(4151)) IEditorCellPtr IObjectXYPolynomial::GetX4Y15Cell ( );
__declspec(implementation_key(4152)) IEditorCellPtr IObjectXYPolynomial::GetX3Y16Cell ( );
__declspec(implementation_key(4153)) IEditorCellPtr IObjectXYPolynomial::GetX2Y17Cell ( );
__declspec(implementation_key(4154)) IEditorCellPtr IObjectXYPolynomial::GetX1Y18Cell ( );
__declspec(implementation_key(4155)) IEditorCellPtr IObjectXYPolynomial::GetX0Y19Cell ( );
__declspec(implementation_key(4156)) IEditorCellPtr IObjectXYPolynomial::GetX20Y0Cell ( );
__declspec(implementation_key(4157)) IEditorCellPtr IObjectXYPolynomial::GetX19Y1Cell ( );
__declspec(implementation_key(4158)) IEditorCellPtr IObjectXYPolynomial::GetX18Y2Cell ( );
__declspec(implementation_key(4159)) IEditorCellPtr IObjectXYPolynomial::GetX17Y3Cell ( );
__declspec(implementation_key(4160)) IEditorCellPtr IObjectXYPolynomial::GetX16Y4Cell ( );
__declspec(implementation_key(4161)) IEditorCellPtr IObjectXYPolynomial::GetX15Y5Cell ( );
__declspec(implementation_key(4162)) IEditorCellPtr IObjectXYPolynomial::GetX14Y6Cell ( );
__declspec(implementation_key(4163)) IEditorCellPtr IObjectXYPolynomial::GetX13Y7Cell ( );
__declspec(implementation_key(4164)) IEditorCellPtr IObjectXYPolynomial::GetX12Y8Cell ( );
__declspec(implementation_key(4165)) IEditorCellPtr IObjectXYPolynomial::GetX11Y9Cell ( );
__declspec(implementation_key(4166)) IEditorCellPtr IObjectXYPolynomial::GetX10Y10Cell ( );
__declspec(implementation_key(4167)) IEditorCellPtr IObjectXYPolynomial::GetX9Y11Cell ( );
__declspec(implementation_key(4168)) IEditorCellPtr IObjectXYPolynomial::GetX8Y12Cell ( );
__declspec(implementation_key(4169)) IEditorCellPtr IObjectXYPolynomial::GetX7Y13Cell ( );
__declspec(implementation_key(4170)) IEditorCellPtr IObjectXYPolynomial::GetX6Y14Cell ( );
__declspec(implementation_key(4171)) IEditorCellPtr IObjectXYPolynomial::GetX5Y15Cell ( );
__declspec(implementation_key(4172)) IEditorCellPtr IObjectXYPolynomial::GetX4Y16Cell ( );
__declspec(implementation_key(4173)) IEditorCellPtr IObjectXYPolynomial::GetX3Y17Cell ( );
__declspec(implementation_key(4174)) IEditorCellPtr IObjectXYPolynomial::GetX2Y18Cell ( );
__declspec(implementation_key(4175)) IEditorCellPtr IObjectXYPolynomial::GetX1Y19Cell ( );
__declspec(implementation_key(4176)) IEditorCellPtr IObjectXYPolynomial::GetX0Y20Cell ( );
__declspec(implementation_key(4177)) IEditorCellPtr IObjectXYPolynomial::GetX21Y0Cell ( );
__declspec(implementation_key(4178)) IEditorCellPtr IObjectXYPolynomial::GetX20Y1Cell ( );
__declspec(implementation_key(4179)) IEditorCellPtr IObjectXYPolynomial::GetX19Y2Cell ( );
__declspec(implementation_key(4180)) IEditorCellPtr IObjectXYPolynomial::GetX18Y3Cell ( );
__declspec(implementation_key(4181)) IEditorCellPtr IObjectXYPolynomial::GetX17Y4Cell ( );
__declspec(implementation_key(4182)) IEditorCellPtr IObjectXYPolynomial::GetX16Y5Cell ( );
__declspec(implementation_key(4183)) IEditorCellPtr IObjectXYPolynomial::GetX15Y6Cell ( );
__declspec(implementation_key(4184)) IEditorCellPtr IObjectXYPolynomial::GetX14Y7Cell ( );
__declspec(implementation_key(4185)) IEditorCellPtr IObjectXYPolynomial::GetX13Y8Cell ( );
__declspec(implementation_key(4186)) IEditorCellPtr IObjectXYPolynomial::GetX12Y9Cell ( );
__declspec(implementation_key(4187)) IEditorCellPtr IObjectXYPolynomial::GetX11Y10Cell ( );
__declspec(implementation_key(4188)) IEditorCellPtr IObjectXYPolynomial::GetX10Y11Cell ( );
__declspec(implementation_key(4189)) IEditorCellPtr IObjectXYPolynomial::GetX9Y12Cell ( );
__declspec(implementation_key(4190)) IEditorCellPtr IObjectXYPolynomial::GetX8Y13Cell ( );
__declspec(implementation_key(4191)) IEditorCellPtr IObjectXYPolynomial::GetX7Y14Cell ( );
__declspec(implementation_key(4192)) IEditorCellPtr IObjectXYPolynomial::GetX6Y15Cell ( );
__declspec(implementation_key(4193)) IEditorCellPtr IObjectXYPolynomial::GetX5Y16Cell ( );
__declspec(implementation_key(4194)) IEditorCellPtr IObjectXYPolynomial::GetX4Y17Cell ( );
__declspec(implementation_key(4195)) IEditorCellPtr IObjectXYPolynomial::GetX3Y18Cell ( );
__declspec(implementation_key(4196)) IEditorCellPtr IObjectXYPolynomial::GetX2Y19Cell ( );
__declspec(implementation_key(4197)) double IObjectXYPolynomial::GetX1Y0 ( );
__declspec(implementation_key(4198)) void IObjectXYPolynomial::PutX1Y0 ( double pRetVal );
__declspec(implementation_key(4199)) double IObjectXYPolynomial::GetX0Y1 ( );
__declspec(implementation_key(4200)) void IObjectXYPolynomial::PutX0Y1 ( double pRetVal );
__declspec(implementation_key(4201)) double IObjectXYPolynomial::GetX2Y0 ( );
__declspec(implementation_key(4202)) void IObjectXYPolynomial::PutX2Y0 ( double pRetVal );
__declspec(implementation_key(4203)) double IObjectXYPolynomial::GetX1Y1 ( );
__declspec(implementation_key(4204)) void IObjectXYPolynomial::PutX1Y1 ( double pRetVal );
__declspec(implementation_key(4205)) double IObjectXYPolynomial::GetX0Y2 ( );
__declspec(implementation_key(4206)) void IObjectXYPolynomial::PutX0Y2 ( double pRetVal );
__declspec(implementation_key(4207)) double IObjectXYPolynomial::GetX3Y0 ( );
__declspec(implementation_key(4208)) void IObjectXYPolynomial::PutX3Y0 ( double pRetVal );
__declspec(implementation_key(4209)) double IObjectXYPolynomial::GetX2Y1 ( );
__declspec(implementation_key(4210)) void IObjectXYPolynomial::PutX2Y1 ( double pRetVal );
__declspec(implementation_key(4211)) double IObjectXYPolynomial::GetX1Y2 ( );
__declspec(implementation_key(4212)) void IObjectXYPolynomial::PutX1Y2 ( double pRetVal );
__declspec(implementation_key(4213)) double IObjectXYPolynomial::GetX0Y3 ( );
__declspec(implementation_key(4214)) void IObjectXYPolynomial::PutX0Y3 ( double pRetVal );
__declspec(implementation_key(4215)) double IObjectXYPolynomial::GetX4Y0 ( );
__declspec(implementation_key(4216)) void IObjectXYPolynomial::PutX4Y0 ( double pRetVal );
__declspec(implementation_key(4217)) double IObjectXYPolynomial::GetX3Y1 ( );
__declspec(implementation_key(4218)) void IObjectXYPolynomial::PutX3Y1 ( double pRetVal );
__declspec(implementation_key(4219)) double IObjectXYPolynomial::GetX2Y2 ( );
__declspec(implementation_key(4220)) void IObjectXYPolynomial::PutX2Y2 ( double pRetVal );
__declspec(implementation_key(4221)) double IObjectXYPolynomial::GetX1Y3 ( );
__declspec(implementation_key(4222)) void IObjectXYPolynomial::PutX1Y3 ( double pRetVal );
__declspec(implementation_key(4223)) double IObjectXYPolynomial::GetX0Y4 ( );
__declspec(implementation_key(4224)) void IObjectXYPolynomial::PutX0Y4 ( double pRetVal );
__declspec(implementation_key(4225)) double IObjectXYPolynomial::GetX5Y0 ( );
__declspec(implementation_key(4226)) void IObjectXYPolynomial::PutX5Y0 ( double pRetVal );
__declspec(implementation_key(4227)) double IObjectXYPolynomial::GetX4Y1 ( );
__declspec(implementation_key(4228)) void IObjectXYPolynomial::PutX4Y1 ( double pRetVal );
__declspec(implementation_key(4229)) double IObjectXYPolynomial::GetX3Y2 ( );
__declspec(implementation_key(4230)) void IObjectXYPolynomial::PutX3Y2 ( double pRetVal );
__declspec(implementation_key(4231)) double IObjectXYPolynomial::GetX2Y3 ( );
__declspec(implementation_key(4232)) void IObjectXYPolynomial::PutX2Y3 ( double pRetVal );
__declspec(implementation_key(4233)) double IObjectXYPolynomial::GetX1Y4 ( );
__declspec(implementation_key(4234)) void IObjectXYPolynomial::PutX1Y4 ( double pRetVal );
__declspec(implementation_key(4235)) double IObjectXYPolynomial::GetX0Y5 ( );
__declspec(implementation_key(4236)) void IObjectXYPolynomial::PutX0Y5 ( double pRetVal );
__declspec(implementation_key(4237)) double IObjectXYPolynomial::GetX6Y0 ( );
__declspec(implementation_key(4238)) void IObjectXYPolynomial::PutX6Y0 ( double pRetVal );
__declspec(implementation_key(4239)) double IObjectXYPolynomial::GetX5Y1 ( );
__declspec(implementation_key(4240)) void IObjectXYPolynomial::PutX5Y1 ( double pRetVal );
__declspec(implementation_key(4241)) double IObjectXYPolynomial::GetX4Y2 ( );
__declspec(implementation_key(4242)) void IObjectXYPolynomial::PutX4Y2 ( double pRetVal );
__declspec(implementation_key(4243)) double IObjectXYPolynomial::GetX3Y3 ( );
__declspec(implementation_key(4244)) void IObjectXYPolynomial::PutX3Y3 ( double pRetVal );
__declspec(implementation_key(4245)) double IObjectXYPolynomial::GetX2Y4 ( );
__declspec(implementation_key(4246)) void IObjectXYPolynomial::PutX2Y4 ( double pRetVal );
__declspec(implementation_key(4247)) double IObjectXYPolynomial::GetX1Y5 ( );
__declspec(implementation_key(4248)) void IObjectXYPolynomial::PutX1Y5 ( double pRetVal );
__declspec(implementation_key(4249)) double IObjectXYPolynomial::GetX0Y6 ( );
__declspec(implementation_key(4250)) void IObjectXYPolynomial::PutX0Y6 ( double pRetVal );
__declspec(implementation_key(4251)) double IObjectXYPolynomial::GetX7Y0 ( );
__declspec(implementation_key(4252)) void IObjectXYPolynomial::PutX7Y0 ( double pRetVal );
__declspec(implementation_key(4253)) double IObjectXYPolynomial::GetX6Y1 ( );
__declspec(implementation_key(4254)) void IObjectXYPolynomial::PutX6Y1 ( double pRetVal );
__declspec(implementation_key(4255)) double IObjectXYPolynomial::GetX5Y2 ( );
__declspec(implementation_key(4256)) void IObjectXYPolynomial::PutX5Y2 ( double pRetVal );
__declspec(implementation_key(4257)) double IObjectXYPolynomial::GetX4Y3 ( );
__declspec(implementation_key(4258)) void IObjectXYPolynomial::PutX4Y3 ( double pRetVal );
__declspec(implementation_key(4259)) double IObjectXYPolynomial::GetX3Y4 ( );
__declspec(implementation_key(4260)) void IObjectXYPolynomial::PutX3Y4 ( double pRetVal );
__declspec(implementation_key(4261)) double IObjectXYPolynomial::GetX2Y5 ( );
__declspec(implementation_key(4262)) void IObjectXYPolynomial::PutX2Y5 ( double pRetVal );
__declspec(implementation_key(4263)) double IObjectXYPolynomial::GetX1Y6 ( );
__declspec(implementation_key(4264)) void IObjectXYPolynomial::PutX1Y6 ( double pRetVal );
__declspec(implementation_key(4265)) double IObjectXYPolynomial::GetX0Y7 ( );
__declspec(implementation_key(4266)) void IObjectXYPolynomial::PutX0Y7 ( double pRetVal );
__declspec(implementation_key(4267)) double IObjectXYPolynomial::GetX8Y0 ( );
__declspec(implementation_key(4268)) void IObjectXYPolynomial::PutX8Y0 ( double pRetVal );
__declspec(implementation_key(4269)) double IObjectXYPolynomial::GetX7Y1 ( );
__declspec(implementation_key(4270)) void IObjectXYPolynomial::PutX7Y1 ( double pRetVal );
__declspec(implementation_key(4271)) double IObjectXYPolynomial::GetX6Y2 ( );
__declspec(implementation_key(4272)) void IObjectXYPolynomial::PutX6Y2 ( double pRetVal );
__declspec(implementation_key(4273)) double IObjectXYPolynomial::GetX5Y3 ( );
__declspec(implementation_key(4274)) void IObjectXYPolynomial::PutX5Y3 ( double pRetVal );
__declspec(implementation_key(4275)) double IObjectXYPolynomial::GetX4Y4 ( );
__declspec(implementation_key(4276)) void IObjectXYPolynomial::PutX4Y4 ( double pRetVal );
__declspec(implementation_key(4277)) double IObjectXYPolynomial::GetX3Y5 ( );
__declspec(implementation_key(4278)) void IObjectXYPolynomial::PutX3Y5 ( double pRetVal );
__declspec(implementation_key(4279)) double IObjectXYPolynomial::GetX2Y6 ( );
__declspec(implementation_key(4280)) void IObjectXYPolynomial::PutX2Y6 ( double pRetVal );
__declspec(implementation_key(4281)) double IObjectXYPolynomial::GetX1Y7 ( );
__declspec(implementation_key(4282)) void IObjectXYPolynomial::PutX1Y7 ( double pRetVal );
__declspec(implementation_key(4283)) double IObjectXYPolynomial::GetX0Y8 ( );
__declspec(implementation_key(4284)) void IObjectXYPolynomial::PutX0Y8 ( double pRetVal );
__declspec(implementation_key(4285)) double IObjectXYPolynomial::GetX9Y0 ( );
__declspec(implementation_key(4286)) void IObjectXYPolynomial::PutX9Y0 ( double pRetVal );
__declspec(implementation_key(4287)) double IObjectXYPolynomial::GetX8Y1 ( );
__declspec(implementation_key(4288)) void IObjectXYPolynomial::PutX8Y1 ( double pRetVal );
__declspec(implementation_key(4289)) double IObjectXYPolynomial::GetX7Y2 ( );
__declspec(implementation_key(4290)) void IObjectXYPolynomial::PutX7Y2 ( double pRetVal );
__declspec(implementation_key(4291)) double IObjectXYPolynomial::GetX6Y3 ( );
__declspec(implementation_key(4292)) void IObjectXYPolynomial::PutX6Y3 ( double pRetVal );
__declspec(implementation_key(4293)) double IObjectXYPolynomial::GetX5Y4 ( );
__declspec(implementation_key(4294)) void IObjectXYPolynomial::PutX5Y4 ( double pRetVal );
__declspec(implementation_key(4295)) double IObjectXYPolynomial::GetX4Y5 ( );
__declspec(implementation_key(4296)) void IObjectXYPolynomial::PutX4Y5 ( double pRetVal );
__declspec(implementation_key(4297)) double IObjectXYPolynomial::GetX3Y6 ( );
__declspec(implementation_key(4298)) void IObjectXYPolynomial::PutX3Y6 ( double pRetVal );
__declspec(implementation_key(4299)) double IObjectXYPolynomial::GetX2Y7 ( );
__declspec(implementation_key(4300)) void IObjectXYPolynomial::PutX2Y7 ( double pRetVal );
__declspec(implementation_key(4301)) double IObjectXYPolynomial::GetX1Y8 ( );
__declspec(implementation_key(4302)) void IObjectXYPolynomial::PutX1Y8 ( double pRetVal );
__declspec(implementation_key(4303)) double IObjectXYPolynomial::GetX0Y9 ( );
__declspec(implementation_key(4304)) void IObjectXYPolynomial::PutX0Y9 ( double pRetVal );
__declspec(implementation_key(4305)) double IObjectXYPolynomial::GetX10Y0 ( );
__declspec(implementation_key(4306)) void IObjectXYPolynomial::PutX10Y0 ( double pRetVal );
__declspec(implementation_key(4307)) double IObjectXYPolynomial::GetX9Y1 ( );
__declspec(implementation_key(4308)) void IObjectXYPolynomial::PutX9Y1 ( double pRetVal );
__declspec(implementation_key(4309)) double IObjectXYPolynomial::GetX8Y2 ( );
__declspec(implementation_key(4310)) void IObjectXYPolynomial::PutX8Y2 ( double pRetVal );
__declspec(implementation_key(4311)) double IObjectXYPolynomial::GetX7Y3 ( );
__declspec(implementation_key(4312)) void IObjectXYPolynomial::PutX7Y3 ( double pRetVal );
__declspec(implementation_key(4313)) double IObjectXYPolynomial::GetX6Y4 ( );
__declspec(implementation_key(4314)) void IObjectXYPolynomial::PutX6Y4 ( double pRetVal );
__declspec(implementation_key(4315)) double IObjectXYPolynomial::GetX5Y5 ( );
__declspec(implementation_key(4316)) void IObjectXYPolynomial::PutX5Y5 ( double pRetVal );
__declspec(implementation_key(4317)) double IObjectXYPolynomial::GetX4Y6 ( );
__declspec(implementation_key(4318)) void IObjectXYPolynomial::PutX4Y6 ( double pRetVal );
__declspec(implementation_key(4319)) double IObjectXYPolynomial::GetX3Y7 ( );
__declspec(implementation_key(4320)) void IObjectXYPolynomial::PutX3Y7 ( double pRetVal );
__declspec(implementation_key(4321)) double IObjectXYPolynomial::GetX2Y8 ( );
__declspec(implementation_key(4322)) void IObjectXYPolynomial::PutX2Y8 ( double pRetVal );
__declspec(implementation_key(4323)) double IObjectXYPolynomial::GetX1Y9 ( );
__declspec(implementation_key(4324)) void IObjectXYPolynomial::PutX1Y9 ( double pRetVal );
__declspec(implementation_key(4325)) double IObjectXYPolynomial::GetX0Y10 ( );
__declspec(implementation_key(4326)) void IObjectXYPolynomial::PutX0Y10 ( double pRetVal );
__declspec(implementation_key(4327)) double IObjectXYPolynomial::GetX11Y0 ( );
__declspec(implementation_key(4328)) void IObjectXYPolynomial::PutX11Y0 ( double pRetVal );
__declspec(implementation_key(4329)) double IObjectXYPolynomial::GetX10Y1 ( );
__declspec(implementation_key(4330)) void IObjectXYPolynomial::PutX10Y1 ( double pRetVal );
__declspec(implementation_key(4331)) double IObjectXYPolynomial::GetX9Y2 ( );
__declspec(implementation_key(4332)) void IObjectXYPolynomial::PutX9Y2 ( double pRetVal );
__declspec(implementation_key(4333)) double IObjectXYPolynomial::GetX8Y3 ( );
__declspec(implementation_key(4334)) void IObjectXYPolynomial::PutX8Y3 ( double pRetVal );
__declspec(implementation_key(4335)) double IObjectXYPolynomial::GetX7Y4 ( );
__declspec(implementation_key(4336)) void IObjectXYPolynomial::PutX7Y4 ( double pRetVal );
__declspec(implementation_key(4337)) double IObjectXYPolynomial::GetX6Y5 ( );
__declspec(implementation_key(4338)) void IObjectXYPolynomial::PutX6Y5 ( double pRetVal );
__declspec(implementation_key(4339)) double IObjectXYPolynomial::GetX5Y6 ( );
__declspec(implementation_key(4340)) void IObjectXYPolynomial::PutX5Y6 ( double pRetVal );
__declspec(implementation_key(4341)) double IObjectXYPolynomial::GetX4Y7 ( );
__declspec(implementation_key(4342)) void IObjectXYPolynomial::PutX4Y7 ( double pRetVal );
__declspec(implementation_key(4343)) double IObjectXYPolynomial::GetX3Y8 ( );
__declspec(implementation_key(4344)) void IObjectXYPolynomial::PutX3Y8 ( double pRetVal );
__declspec(implementation_key(4345)) double IObjectXYPolynomial::GetX2Y9 ( );
__declspec(implementation_key(4346)) void IObjectXYPolynomial::PutX2Y9 ( double pRetVal );
__declspec(implementation_key(4347)) double IObjectXYPolynomial::GetX1Y10 ( );
__declspec(implementation_key(4348)) void IObjectXYPolynomial::PutX1Y10 ( double pRetVal );
__declspec(implementation_key(4349)) double IObjectXYPolynomial::GetX0Y11 ( );
__declspec(implementation_key(4350)) void IObjectXYPolynomial::PutX0Y11 ( double pRetVal );
__declspec(implementation_key(4351)) double IObjectXYPolynomial::GetX12Y0 ( );
__declspec(implementation_key(4352)) void IObjectXYPolynomial::PutX12Y0 ( double pRetVal );
__declspec(implementation_key(4353)) double IObjectXYPolynomial::GetX11Y1 ( );
__declspec(implementation_key(4354)) void IObjectXYPolynomial::PutX11Y1 ( double pRetVal );
__declspec(implementation_key(4355)) double IObjectXYPolynomial::GetX10Y2 ( );
__declspec(implementation_key(4356)) void IObjectXYPolynomial::PutX10Y2 ( double pRetVal );
__declspec(implementation_key(4357)) double IObjectXYPolynomial::GetX9Y3 ( );
__declspec(implementation_key(4358)) void IObjectXYPolynomial::PutX9Y3 ( double pRetVal );
__declspec(implementation_key(4359)) double IObjectXYPolynomial::GetX8Y4 ( );
__declspec(implementation_key(4360)) void IObjectXYPolynomial::PutX8Y4 ( double pRetVal );
__declspec(implementation_key(4361)) double IObjectXYPolynomial::GetX7Y5 ( );
__declspec(implementation_key(4362)) void IObjectXYPolynomial::PutX7Y5 ( double pRetVal );
__declspec(implementation_key(4363)) double IObjectXYPolynomial::GetX6Y6 ( );
__declspec(implementation_key(4364)) void IObjectXYPolynomial::PutX6Y6 ( double pRetVal );
__declspec(implementation_key(4365)) double IObjectXYPolynomial::GetX5Y7 ( );
__declspec(implementation_key(4366)) void IObjectXYPolynomial::PutX5Y7 ( double pRetVal );
__declspec(implementation_key(4367)) double IObjectXYPolynomial::GetX4Y8 ( );
__declspec(implementation_key(4368)) void IObjectXYPolynomial::PutX4Y8 ( double pRetVal );
__declspec(implementation_key(4369)) double IObjectXYPolynomial::GetX3Y9 ( );
__declspec(implementation_key(4370)) void IObjectXYPolynomial::PutX3Y9 ( double pRetVal );
__declspec(implementation_key(4371)) double IObjectXYPolynomial::GetX2Y10 ( );
__declspec(implementation_key(4372)) void IObjectXYPolynomial::PutX2Y10 ( double pRetVal );
__declspec(implementation_key(4373)) double IObjectXYPolynomial::GetX1Y11 ( );
__declspec(implementation_key(4374)) void IObjectXYPolynomial::PutX1Y11 ( double pRetVal );
__declspec(implementation_key(4375)) double IObjectXYPolynomial::GetX0Y12 ( );
__declspec(implementation_key(4376)) void IObjectXYPolynomial::PutX0Y12 ( double pRetVal );
__declspec(implementation_key(4377)) double IObjectXYPolynomial::GetX13Y0 ( );
__declspec(implementation_key(4378)) void IObjectXYPolynomial::PutX13Y0 ( double pRetVal );
__declspec(implementation_key(4379)) double IObjectXYPolynomial::GetX12Y1 ( );
__declspec(implementation_key(4380)) void IObjectXYPolynomial::PutX12Y1 ( double pRetVal );
__declspec(implementation_key(4381)) double IObjectXYPolynomial::GetX11Y2 ( );
__declspec(implementation_key(4382)) void IObjectXYPolynomial::PutX11Y2 ( double pRetVal );
__declspec(implementation_key(4383)) double IObjectXYPolynomial::GetX10Y3 ( );
__declspec(implementation_key(4384)) void IObjectXYPolynomial::PutX10Y3 ( double pRetVal );
__declspec(implementation_key(4385)) double IObjectXYPolynomial::GetX9Y4 ( );
__declspec(implementation_key(4386)) void IObjectXYPolynomial::PutX9Y4 ( double pRetVal );
__declspec(implementation_key(4387)) double IObjectXYPolynomial::GetX8Y5 ( );
__declspec(implementation_key(4388)) void IObjectXYPolynomial::PutX8Y5 ( double pRetVal );
__declspec(implementation_key(4389)) double IObjectXYPolynomial::GetX7Y6 ( );
__declspec(implementation_key(4390)) void IObjectXYPolynomial::PutX7Y6 ( double pRetVal );
__declspec(implementation_key(4391)) double IObjectXYPolynomial::GetX6Y7 ( );
__declspec(implementation_key(4392)) void IObjectXYPolynomial::PutX6Y7 ( double pRetVal );
__declspec(implementation_key(4393)) double IObjectXYPolynomial::GetX5Y8 ( );
__declspec(implementation_key(4394)) void IObjectXYPolynomial::PutX5Y8 ( double pRetVal );
__declspec(implementation_key(4395)) double IObjectXYPolynomial::GetX4Y9 ( );
__declspec(implementation_key(4396)) void IObjectXYPolynomial::PutX4Y9 ( double pRetVal );
__declspec(implementation_key(4397)) double IObjectXYPolynomial::GetX3Y10 ( );
__declspec(implementation_key(4398)) void IObjectXYPolynomial::PutX3Y10 ( double pRetVal );
__declspec(implementation_key(4399)) double IObjectXYPolynomial::GetX2Y11 ( );
__declspec(implementation_key(4400)) void IObjectXYPolynomial::PutX2Y11 ( double pRetVal );
__declspec(implementation_key(4401)) double IObjectXYPolynomial::GetX1Y12 ( );
__declspec(implementation_key(4402)) void IObjectXYPolynomial::PutX1Y12 ( double pRetVal );
__declspec(implementation_key(4403)) double IObjectXYPolynomial::GetX0Y13 ( );
__declspec(implementation_key(4404)) void IObjectXYPolynomial::PutX0Y13 ( double pRetVal );
__declspec(implementation_key(4405)) double IObjectXYPolynomial::GetX14Y0 ( );
__declspec(implementation_key(4406)) void IObjectXYPolynomial::PutX14Y0 ( double pRetVal );
__declspec(implementation_key(4407)) double IObjectXYPolynomial::GetX13Y1 ( );
__declspec(implementation_key(4408)) void IObjectXYPolynomial::PutX13Y1 ( double pRetVal );
__declspec(implementation_key(4409)) double IObjectXYPolynomial::GetX12Y2 ( );
__declspec(implementation_key(4410)) void IObjectXYPolynomial::PutX12Y2 ( double pRetVal );
__declspec(implementation_key(4411)) double IObjectXYPolynomial::GetX11Y3 ( );
__declspec(implementation_key(4412)) void IObjectXYPolynomial::PutX11Y3 ( double pRetVal );
__declspec(implementation_key(4413)) double IObjectXYPolynomial::GetX10Y4 ( );
__declspec(implementation_key(4414)) void IObjectXYPolynomial::PutX10Y4 ( double pRetVal );
__declspec(implementation_key(4415)) double IObjectXYPolynomial::GetX9Y5 ( );
__declspec(implementation_key(4416)) void IObjectXYPolynomial::PutX9Y5 ( double pRetVal );
__declspec(implementation_key(4417)) double IObjectXYPolynomial::GetX8Y6 ( );
__declspec(implementation_key(4418)) void IObjectXYPolynomial::PutX8Y6 ( double pRetVal );
__declspec(implementation_key(4419)) double IObjectXYPolynomial::GetX7Y7 ( );
__declspec(implementation_key(4420)) void IObjectXYPolynomial::PutX7Y7 ( double pRetVal );
__declspec(implementation_key(4421)) double IObjectXYPolynomial::GetX6Y8 ( );
__declspec(implementation_key(4422)) void IObjectXYPolynomial::PutX6Y8 ( double pRetVal );
__declspec(implementation_key(4423)) double IObjectXYPolynomial::GetX5Y9 ( );
__declspec(implementation_key(4424)) void IObjectXYPolynomial::PutX5Y9 ( double pRetVal );
__declspec(implementation_key(4425)) double IObjectXYPolynomial::GetX4Y10 ( );
__declspec(implementation_key(4426)) void IObjectXYPolynomial::PutX4Y10 ( double pRetVal );
__declspec(implementation_key(4427)) double IObjectXYPolynomial::GetX3Y11 ( );
__declspec(implementation_key(4428)) void IObjectXYPolynomial::PutX3Y11 ( double pRetVal );
__declspec(implementation_key(4429)) double IObjectXYPolynomial::GetX2Y12 ( );
__declspec(implementation_key(4430)) void IObjectXYPolynomial::PutX2Y12 ( double pRetVal );
__declspec(implementation_key(4431)) double IObjectXYPolynomial::GetX1Y13 ( );
__declspec(implementation_key(4432)) void IObjectXYPolynomial::PutX1Y13 ( double pRetVal );
__declspec(implementation_key(4433)) double IObjectXYPolynomial::GetX0Y14 ( );
__declspec(implementation_key(4434)) void IObjectXYPolynomial::PutX0Y14 ( double pRetVal );
__declspec(implementation_key(4435)) double IObjectXYPolynomial::GetX15Y0 ( );
__declspec(implementation_key(4436)) void IObjectXYPolynomial::PutX15Y0 ( double pRetVal );
__declspec(implementation_key(4437)) double IObjectXYPolynomial::GetX14Y1 ( );
__declspec(implementation_key(4438)) void IObjectXYPolynomial::PutX14Y1 ( double pRetVal );
__declspec(implementation_key(4439)) double IObjectXYPolynomial::GetX13Y2 ( );
__declspec(implementation_key(4440)) void IObjectXYPolynomial::PutX13Y2 ( double pRetVal );
__declspec(implementation_key(4441)) double IObjectXYPolynomial::GetX12Y3 ( );
__declspec(implementation_key(4442)) void IObjectXYPolynomial::PutX12Y3 ( double pRetVal );
__declspec(implementation_key(4443)) double IObjectXYPolynomial::GetX11Y4 ( );
__declspec(implementation_key(4444)) void IObjectXYPolynomial::PutX11Y4 ( double pRetVal );
__declspec(implementation_key(4445)) double IObjectXYPolynomial::GetX10Y5 ( );
__declspec(implementation_key(4446)) void IObjectXYPolynomial::PutX10Y5 ( double pRetVal );
__declspec(implementation_key(4447)) double IObjectXYPolynomial::GetX9Y6 ( );
__declspec(implementation_key(4448)) void IObjectXYPolynomial::PutX9Y6 ( double pRetVal );
__declspec(implementation_key(4449)) double IObjectXYPolynomial::GetX8Y7 ( );
__declspec(implementation_key(4450)) void IObjectXYPolynomial::PutX8Y7 ( double pRetVal );
__declspec(implementation_key(4451)) double IObjectXYPolynomial::GetX7Y8 ( );
__declspec(implementation_key(4452)) void IObjectXYPolynomial::PutX7Y8 ( double pRetVal );
__declspec(implementation_key(4453)) double IObjectXYPolynomial::GetX6Y9 ( );
__declspec(implementation_key(4454)) void IObjectXYPolynomial::PutX6Y9 ( double pRetVal );
__declspec(implementation_key(4455)) double IObjectXYPolynomial::GetX5Y10 ( );
__declspec(implementation_key(4456)) void IObjectXYPolynomial::PutX5Y10 ( double pRetVal );
__declspec(implementation_key(4457)) double IObjectXYPolynomial::GetX4Y11 ( );
__declspec(implementation_key(4458)) void IObjectXYPolynomial::PutX4Y11 ( double pRetVal );
__declspec(implementation_key(4459)) double IObjectXYPolynomial::GetX3Y12 ( );
__declspec(implementation_key(4460)) void IObjectXYPolynomial::PutX3Y12 ( double pRetVal );
__declspec(implementation_key(4461)) double IObjectXYPolynomial::GetX2Y13 ( );
__declspec(implementation_key(4462)) void IObjectXYPolynomial::PutX2Y13 ( double pRetVal );
__declspec(implementation_key(4463)) double IObjectXYPolynomial::GetX1Y14 ( );
__declspec(implementation_key(4464)) void IObjectXYPolynomial::PutX1Y14 ( double pRetVal );
__declspec(implementation_key(4465)) double IObjectXYPolynomial::GetX0Y15 ( );
__declspec(implementation_key(4466)) void IObjectXYPolynomial::PutX0Y15 ( double pRetVal );
__declspec(implementation_key(4467)) double IObjectXYPolynomial::GetX16Y0 ( );
__declspec(implementation_key(4468)) void IObjectXYPolynomial::PutX16Y0 ( double pRetVal );
__declspec(implementation_key(4469)) double IObjectXYPolynomial::GetX15Y1 ( );
__declspec(implementation_key(4470)) void IObjectXYPolynomial::PutX15Y1 ( double pRetVal );
__declspec(implementation_key(4471)) double IObjectXYPolynomial::GetX14Y2 ( );
__declspec(implementation_key(4472)) void IObjectXYPolynomial::PutX14Y2 ( double pRetVal );
__declspec(implementation_key(4473)) double IObjectXYPolynomial::GetX13Y3 ( );
__declspec(implementation_key(4474)) void IObjectXYPolynomial::PutX13Y3 ( double pRetVal );
__declspec(implementation_key(4475)) double IObjectXYPolynomial::GetX12Y4 ( );
__declspec(implementation_key(4476)) void IObjectXYPolynomial::PutX12Y4 ( double pRetVal );
__declspec(implementation_key(4477)) double IObjectXYPolynomial::GetX11Y5 ( );
__declspec(implementation_key(4478)) void IObjectXYPolynomial::PutX11Y5 ( double pRetVal );
__declspec(implementation_key(4479)) double IObjectXYPolynomial::GetX10Y6 ( );
__declspec(implementation_key(4480)) void IObjectXYPolynomial::PutX10Y6 ( double pRetVal );
__declspec(implementation_key(4481)) double IObjectXYPolynomial::GetX9Y7 ( );
__declspec(implementation_key(4482)) void IObjectXYPolynomial::PutX9Y7 ( double pRetVal );
__declspec(implementation_key(4483)) double IObjectXYPolynomial::GetX8Y8 ( );
__declspec(implementation_key(4484)) void IObjectXYPolynomial::PutX8Y8 ( double pRetVal );
__declspec(implementation_key(4485)) double IObjectXYPolynomial::GetX7Y9 ( );
__declspec(implementation_key(4486)) void IObjectXYPolynomial::PutX7Y9 ( double pRetVal );
__declspec(implementation_key(4487)) double IObjectXYPolynomial::GetX6Y10 ( );
__declspec(implementation_key(4488)) void IObjectXYPolynomial::PutX6Y10 ( double pRetVal );
__declspec(implementation_key(4489)) double IObjectXYPolynomial::GetX5Y11 ( );
__declspec(implementation_key(4490)) void IObjectXYPolynomial::PutX5Y11 ( double pRetVal );
__declspec(implementation_key(4491)) double IObjectXYPolynomial::GetX4Y12 ( );
__declspec(implementation_key(4492)) void IObjectXYPolynomial::PutX4Y12 ( double pRetVal );
__declspec(implementation_key(4493)) double IObjectXYPolynomial::GetX3Y13 ( );
__declspec(implementation_key(4494)) void IObjectXYPolynomial::PutX3Y13 ( double pRetVal );
__declspec(implementation_key(4495)) double IObjectXYPolynomial::GetX2Y14 ( );
__declspec(implementation_key(4496)) void IObjectXYPolynomial::PutX2Y14 ( double pRetVal );
__declspec(implementation_key(4497)) double IObjectXYPolynomial::GetX1Y15 ( );
__declspec(implementation_key(4498)) void IObjectXYPolynomial::PutX1Y15 ( double pRetVal );
__declspec(implementation_key(4499)) double IObjectXYPolynomial::GetX0Y16 ( );
__declspec(implementation_key(4500)) void IObjectXYPolynomial::PutX0Y16 ( double pRetVal );
__declspec(implementation_key(4501)) double IObjectXYPolynomial::GetX17Y0 ( );
__declspec(implementation_key(4502)) void IObjectXYPolynomial::PutX17Y0 ( double pRetVal );
__declspec(implementation_key(4503)) double IObjectXYPolynomial::GetX16Y1 ( );
__declspec(implementation_key(4504)) void IObjectXYPolynomial::PutX16Y1 ( double pRetVal );
__declspec(implementation_key(4505)) double IObjectXYPolynomial::GetX15Y2 ( );
__declspec(implementation_key(4506)) void IObjectXYPolynomial::PutX15Y2 ( double pRetVal );
__declspec(implementation_key(4507)) double IObjectXYPolynomial::GetX14Y3 ( );
__declspec(implementation_key(4508)) void IObjectXYPolynomial::PutX14Y3 ( double pRetVal );
__declspec(implementation_key(4509)) double IObjectXYPolynomial::GetX13Y4 ( );
__declspec(implementation_key(4510)) void IObjectXYPolynomial::PutX13Y4 ( double pRetVal );
__declspec(implementation_key(4511)) double IObjectXYPolynomial::GetX12Y5 ( );
__declspec(implementation_key(4512)) void IObjectXYPolynomial::PutX12Y5 ( double pRetVal );
__declspec(implementation_key(4513)) double IObjectXYPolynomial::GetX11Y6 ( );
__declspec(implementation_key(4514)) void IObjectXYPolynomial::PutX11Y6 ( double pRetVal );
__declspec(implementation_key(4515)) double IObjectXYPolynomial::GetX10Y7 ( );
__declspec(implementation_key(4516)) void IObjectXYPolynomial::PutX10Y7 ( double pRetVal );
__declspec(implementation_key(4517)) double IObjectXYPolynomial::GetX9Y8 ( );
__declspec(implementation_key(4518)) void IObjectXYPolynomial::PutX9Y8 ( double pRetVal );
__declspec(implementation_key(4519)) double IObjectXYPolynomial::GetX8Y9 ( );
__declspec(implementation_key(4520)) void IObjectXYPolynomial::PutX8Y9 ( double pRetVal );
__declspec(implementation_key(4521)) double IObjectXYPolynomial::GetX7Y10 ( );
__declspec(implementation_key(4522)) void IObjectXYPolynomial::PutX7Y10 ( double pRetVal );
__declspec(implementation_key(4523)) double IObjectXYPolynomial::GetX6Y11 ( );
__declspec(implementation_key(4524)) void IObjectXYPolynomial::PutX6Y11 ( double pRetVal );
__declspec(implementation_key(4525)) double IObjectXYPolynomial::GetX5Y12 ( );
__declspec(implementation_key(4526)) void IObjectXYPolynomial::PutX5Y12 ( double pRetVal );
__declspec(implementation_key(4527)) double IObjectXYPolynomial::GetX4Y13 ( );
__declspec(implementation_key(4528)) void IObjectXYPolynomial::PutX4Y13 ( double pRetVal );
__declspec(implementation_key(4529)) double IObjectXYPolynomial::GetX3Y14 ( );
__declspec(implementation_key(4530)) void IObjectXYPolynomial::PutX3Y14 ( double pRetVal );
__declspec(implementation_key(4531)) double IObjectXYPolynomial::GetX2Y15 ( );
__declspec(implementation_key(4532)) void IObjectXYPolynomial::PutX2Y15 ( double pRetVal );
__declspec(implementation_key(4533)) double IObjectXYPolynomial::GetX1Y16 ( );
__declspec(implementation_key(4534)) void IObjectXYPolynomial::PutX1Y16 ( double pRetVal );
__declspec(implementation_key(4535)) double IObjectXYPolynomial::GetX0Y17 ( );
__declspec(implementation_key(4536)) void IObjectXYPolynomial::PutX0Y17 ( double pRetVal );
__declspec(implementation_key(4537)) double IObjectXYPolynomial::GetX18Y0 ( );
__declspec(implementation_key(4538)) void IObjectXYPolynomial::PutX18Y0 ( double pRetVal );
__declspec(implementation_key(4539)) double IObjectXYPolynomial::GetX17Y1 ( );
__declspec(implementation_key(4540)) void IObjectXYPolynomial::PutX17Y1 ( double pRetVal );
__declspec(implementation_key(4541)) double IObjectXYPolynomial::GetX16Y2 ( );
__declspec(implementation_key(4542)) void IObjectXYPolynomial::PutX16Y2 ( double pRetVal );
__declspec(implementation_key(4543)) double IObjectXYPolynomial::GetX15Y3 ( );
__declspec(implementation_key(4544)) void IObjectXYPolynomial::PutX15Y3 ( double pRetVal );
__declspec(implementation_key(4545)) double IObjectXYPolynomial::GetX14Y4 ( );
__declspec(implementation_key(4546)) void IObjectXYPolynomial::PutX14Y4 ( double pRetVal );
__declspec(implementation_key(4547)) double IObjectXYPolynomial::GetX13Y5 ( );
__declspec(implementation_key(4548)) void IObjectXYPolynomial::PutX13Y5 ( double pRetVal );
__declspec(implementation_key(4549)) double IObjectXYPolynomial::GetX12Y6 ( );
__declspec(implementation_key(4550)) void IObjectXYPolynomial::PutX12Y6 ( double pRetVal );
__declspec(implementation_key(4551)) double IObjectXYPolynomial::GetX11Y7 ( );
__declspec(implementation_key(4552)) void IObjectXYPolynomial::PutX11Y7 ( double pRetVal );
__declspec(implementation_key(4553)) double IObjectXYPolynomial::GetX10Y8 ( );
__declspec(implementation_key(4554)) void IObjectXYPolynomial::PutX10Y8 ( double pRetVal );
__declspec(implementation_key(4555)) double IObjectXYPolynomial::GetX9Y9 ( );
__declspec(implementation_key(4556)) void IObjectXYPolynomial::PutX9Y9 ( double pRetVal );
__declspec(implementation_key(4557)) double IObjectXYPolynomial::GetX8Y10 ( );
__declspec(implementation_key(4558)) void IObjectXYPolynomial::PutX8Y10 ( double pRetVal );
__declspec(implementation_key(4559)) double IObjectXYPolynomial::GetX7Y11 ( );
__declspec(implementation_key(4560)) void IObjectXYPolynomial::PutX7Y11 ( double pRetVal );
__declspec(implementation_key(4561)) double IObjectXYPolynomial::GetX6Y12 ( );
__declspec(implementation_key(4562)) void IObjectXYPolynomial::PutX6Y12 ( double pRetVal );
__declspec(implementation_key(4563)) double IObjectXYPolynomial::GetX5Y13 ( );
__declspec(implementation_key(4564)) void IObjectXYPolynomial::PutX5Y13 ( double pRetVal );
__declspec(implementation_key(4565)) double IObjectXYPolynomial::GetX4Y14 ( );
__declspec(implementation_key(4566)) void IObjectXYPolynomial::PutX4Y14 ( double pRetVal );
__declspec(implementation_key(4567)) double IObjectXYPolynomial::GetX3Y15 ( );
__declspec(implementation_key(4568)) void IObjectXYPolynomial::PutX3Y15 ( double pRetVal );
__declspec(implementation_key(4569)) double IObjectXYPolynomial::GetX2Y16 ( );
__declspec(implementation_key(4570)) void IObjectXYPolynomial::PutX2Y16 ( double pRetVal );
__declspec(implementation_key(4571)) double IObjectXYPolynomial::GetX1Y17 ( );
__declspec(implementation_key(4572)) void IObjectXYPolynomial::PutX1Y17 ( double pRetVal );
__declspec(implementation_key(4573)) double IObjectXYPolynomial::GetX0Y18 ( );
__declspec(implementation_key(4574)) void IObjectXYPolynomial::PutX0Y18 ( double pRetVal );
__declspec(implementation_key(4575)) double IObjectXYPolynomial::GetX19Y0 ( );
__declspec(implementation_key(4576)) void IObjectXYPolynomial::PutX19Y0 ( double pRetVal );
__declspec(implementation_key(4577)) double IObjectXYPolynomial::GetX18Y1 ( );
__declspec(implementation_key(4578)) void IObjectXYPolynomial::PutX18Y1 ( double pRetVal );
__declspec(implementation_key(4579)) double IObjectXYPolynomial::GetX17Y2 ( );
__declspec(implementation_key(4580)) void IObjectXYPolynomial::PutX17Y2 ( double pRetVal );
__declspec(implementation_key(4581)) double IObjectXYPolynomial::GetX16Y3 ( );
__declspec(implementation_key(4582)) void IObjectXYPolynomial::PutX16Y3 ( double pRetVal );
__declspec(implementation_key(4583)) double IObjectXYPolynomial::GetX15Y4 ( );
__declspec(implementation_key(4584)) void IObjectXYPolynomial::PutX15Y4 ( double pRetVal );
__declspec(implementation_key(4585)) double IObjectXYPolynomial::GetX14Y5 ( );
__declspec(implementation_key(4586)) void IObjectXYPolynomial::PutX14Y5 ( double pRetVal );
__declspec(implementation_key(4587)) double IObjectXYPolynomial::GetX13Y6 ( );
__declspec(implementation_key(4588)) void IObjectXYPolynomial::PutX13Y6 ( double pRetVal );
__declspec(implementation_key(4589)) double IObjectXYPolynomial::GetX12Y7 ( );
__declspec(implementation_key(4590)) void IObjectXYPolynomial::PutX12Y7 ( double pRetVal );
__declspec(implementation_key(4591)) double IObjectXYPolynomial::GetX11Y8 ( );
__declspec(implementation_key(4592)) void IObjectXYPolynomial::PutX11Y8 ( double pRetVal );
__declspec(implementation_key(4593)) double IObjectXYPolynomial::GetX10Y9 ( );
__declspec(implementation_key(4594)) void IObjectXYPolynomial::PutX10Y9 ( double pRetVal );
__declspec(implementation_key(4595)) double IObjectXYPolynomial::GetX9Y10 ( );
__declspec(implementation_key(4596)) void IObjectXYPolynomial::PutX9Y10 ( double pRetVal );
__declspec(implementation_key(4597)) double IObjectXYPolynomial::GetX8Y11 ( );
__declspec(implementation_key(4598)) void IObjectXYPolynomial::PutX8Y11 ( double pRetVal );
__declspec(implementation_key(4599)) double IObjectXYPolynomial::GetX7Y12 ( );
__declspec(implementation_key(4600)) void IObjectXYPolynomial::PutX7Y12 ( double pRetVal );
__declspec(implementation_key(4601)) double IObjectXYPolynomial::GetX6Y13 ( );
__declspec(implementation_key(4602)) void IObjectXYPolynomial::PutX6Y13 ( double pRetVal );
__declspec(implementation_key(4603)) double IObjectXYPolynomial::GetX5Y14 ( );
__declspec(implementation_key(4604)) void IObjectXYPolynomial::PutX5Y14 ( double pRetVal );
__declspec(implementation_key(4605)) double IObjectXYPolynomial::GetX4Y15 ( );
__declspec(implementation_key(4606)) void IObjectXYPolynomial::PutX4Y15 ( double pRetVal );
__declspec(implementation_key(4607)) double IObjectXYPolynomial::GetX3Y16 ( );
__declspec(implementation_key(4608)) void IObjectXYPolynomial::PutX3Y16 ( double pRetVal );
__declspec(implementation_key(4609)) double IObjectXYPolynomial::GetX2Y17 ( );
__declspec(implementation_key(4610)) void IObjectXYPolynomial::PutX2Y17 ( double pRetVal );
__declspec(implementation_key(4611)) double IObjectXYPolynomial::GetX1Y18 ( );
__declspec(implementation_key(4612)) void IObjectXYPolynomial::PutX1Y18 ( double pRetVal );
__declspec(implementation_key(4613)) double IObjectXYPolynomial::GetX0Y19 ( );
__declspec(implementation_key(4614)) void IObjectXYPolynomial::PutX0Y19 ( double pRetVal );
__declspec(implementation_key(4615)) double IObjectXYPolynomial::GetX20Y0 ( );
__declspec(implementation_key(4616)) void IObjectXYPolynomial::PutX20Y0 ( double pRetVal );
__declspec(implementation_key(4617)) double IObjectXYPolynomial::GetX19Y1 ( );
__declspec(implementation_key(4618)) void IObjectXYPolynomial::PutX19Y1 ( double pRetVal );
__declspec(implementation_key(4619)) double IObjectXYPolynomial::GetX18Y2 ( );
__declspec(implementation_key(4620)) void IObjectXYPolynomial::PutX18Y2 ( double pRetVal );
__declspec(implementation_key(4621)) double IObjectXYPolynomial::GetX17Y3 ( );
__declspec(implementation_key(4622)) void IObjectXYPolynomial::PutX17Y3 ( double pRetVal );
__declspec(implementation_key(4623)) double IObjectXYPolynomial::GetX16Y4 ( );
__declspec(implementation_key(4624)) void IObjectXYPolynomial::PutX16Y4 ( double pRetVal );
__declspec(implementation_key(4625)) double IObjectXYPolynomial::GetX15Y5 ( );
__declspec(implementation_key(4626)) void IObjectXYPolynomial::PutX15Y5 ( double pRetVal );
__declspec(implementation_key(4627)) double IObjectXYPolynomial::GetX14Y6 ( );
__declspec(implementation_key(4628)) void IObjectXYPolynomial::PutX14Y6 ( double pRetVal );
__declspec(implementation_key(4629)) double IObjectXYPolynomial::GetX13Y7 ( );
__declspec(implementation_key(4630)) void IObjectXYPolynomial::PutX13Y7 ( double pRetVal );
__declspec(implementation_key(4631)) double IObjectXYPolynomial::GetX12Y8 ( );
__declspec(implementation_key(4632)) void IObjectXYPolynomial::PutX12Y8 ( double pRetVal );
__declspec(implementation_key(4633)) double IObjectXYPolynomial::GetX11Y9 ( );
__declspec(implementation_key(4634)) void IObjectXYPolynomial::PutX11Y9 ( double pRetVal );
__declspec(implementation_key(4635)) double IObjectXYPolynomial::GetX10Y10 ( );
__declspec(implementation_key(4636)) void IObjectXYPolynomial::PutX10Y10 ( double pRetVal );
__declspec(implementation_key(4637)) double IObjectXYPolynomial::GetX9Y11 ( );
__declspec(implementation_key(4638)) void IObjectXYPolynomial::PutX9Y11 ( double pRetVal );
__declspec(implementation_key(4639)) double IObjectXYPolynomial::GetX8Y12 ( );
__declspec(implementation_key(4640)) void IObjectXYPolynomial::PutX8Y12 ( double pRetVal );
__declspec(implementation_key(4641)) double IObjectXYPolynomial::GetX7Y13 ( );
__declspec(implementation_key(4642)) void IObjectXYPolynomial::PutX7Y13 ( double pRetVal );
__declspec(implementation_key(4643)) double IObjectXYPolynomial::GetX6Y14 ( );
__declspec(implementation_key(4644)) void IObjectXYPolynomial::PutX6Y14 ( double pRetVal );
__declspec(implementation_key(4645)) double IObjectXYPolynomial::GetX5Y15 ( );
__declspec(implementation_key(4646)) void IObjectXYPolynomial::PutX5Y15 ( double pRetVal );
__declspec(implementation_key(4647)) double IObjectXYPolynomial::GetX4Y16 ( );
__declspec(implementation_key(4648)) void IObjectXYPolynomial::PutX4Y16 ( double pRetVal );
__declspec(implementation_key(4649)) double IObjectXYPolynomial::GetX3Y17 ( );
__declspec(implementation_key(4650)) void IObjectXYPolynomial::PutX3Y17 ( double pRetVal );
__declspec(implementation_key(4651)) double IObjectXYPolynomial::GetX2Y18 ( );
__declspec(implementation_key(4652)) void IObjectXYPolynomial::PutX2Y18 ( double pRetVal );
__declspec(implementation_key(4653)) double IObjectXYPolynomial::GetX1Y19 ( );
__declspec(implementation_key(4654)) void IObjectXYPolynomial::PutX1Y19 ( double pRetVal );
__declspec(implementation_key(4655)) double IObjectXYPolynomial::GetX0Y20 ( );
__declspec(implementation_key(4656)) void IObjectXYPolynomial::PutX0Y20 ( double pRetVal );
__declspec(implementation_key(4657)) double IObjectXYPolynomial::GetX21Y0 ( );
__declspec(implementation_key(4658)) void IObjectXYPolynomial::PutX21Y0 ( double pRetVal );
__declspec(implementation_key(4659)) double IObjectXYPolynomial::GetX20Y1 ( );
__declspec(implementation_key(4660)) void IObjectXYPolynomial::PutX20Y1 ( double pRetVal );
__declspec(implementation_key(4661)) double IObjectXYPolynomial::GetX19Y2 ( );
__declspec(implementation_key(4662)) void IObjectXYPolynomial::PutX19Y2 ( double pRetVal );
__declspec(implementation_key(4663)) double IObjectXYPolynomial::GetX18Y3 ( );
__declspec(implementation_key(4664)) void IObjectXYPolynomial::PutX18Y3 ( double pRetVal );
__declspec(implementation_key(4665)) double IObjectXYPolynomial::GetX17Y4 ( );
__declspec(implementation_key(4666)) void IObjectXYPolynomial::PutX17Y4 ( double pRetVal );
__declspec(implementation_key(4667)) double IObjectXYPolynomial::GetX16Y5 ( );
__declspec(implementation_key(4668)) void IObjectXYPolynomial::PutX16Y5 ( double pRetVal );
__declspec(implementation_key(4669)) double IObjectXYPolynomial::GetX15Y6 ( );
__declspec(implementation_key(4670)) void IObjectXYPolynomial::PutX15Y6 ( double pRetVal );
__declspec(implementation_key(4671)) double IObjectXYPolynomial::GetX14Y7 ( );
__declspec(implementation_key(4672)) void IObjectXYPolynomial::PutX14Y7 ( double pRetVal );
__declspec(implementation_key(4673)) double IObjectXYPolynomial::GetX13Y8 ( );
__declspec(implementation_key(4674)) void IObjectXYPolynomial::PutX13Y8 ( double pRetVal );
__declspec(implementation_key(4675)) double IObjectXYPolynomial::GetX12Y9 ( );
__declspec(implementation_key(4676)) void IObjectXYPolynomial::PutX12Y9 ( double pRetVal );
__declspec(implementation_key(4677)) double IObjectXYPolynomial::GetX11Y10 ( );
__declspec(implementation_key(4678)) void IObjectXYPolynomial::PutX11Y10 ( double pRetVal );
__declspec(implementation_key(4679)) double IObjectXYPolynomial::GetX10Y11 ( );
__declspec(implementation_key(4680)) void IObjectXYPolynomial::PutX10Y11 ( double pRetVal );
__declspec(implementation_key(4681)) double IObjectXYPolynomial::GetX9Y12 ( );
__declspec(implementation_key(4682)) void IObjectXYPolynomial::PutX9Y12 ( double pRetVal );
__declspec(implementation_key(4683)) double IObjectXYPolynomial::GetX8Y13 ( );
__declspec(implementation_key(4684)) void IObjectXYPolynomial::PutX8Y13 ( double pRetVal );
__declspec(implementation_key(4685)) double IObjectXYPolynomial::GetX7Y14 ( );
__declspec(implementation_key(4686)) void IObjectXYPolynomial::PutX7Y14 ( double pRetVal );
__declspec(implementation_key(4687)) double IObjectXYPolynomial::GetX6Y15 ( );
__declspec(implementation_key(4688)) void IObjectXYPolynomial::PutX6Y15 ( double pRetVal );
__declspec(implementation_key(4689)) double IObjectXYPolynomial::GetX5Y16 ( );
__declspec(implementation_key(4690)) void IObjectXYPolynomial::PutX5Y16 ( double pRetVal );
__declspec(implementation_key(4691)) double IObjectXYPolynomial::GetX4Y17 ( );
__declspec(implementation_key(4692)) void IObjectXYPolynomial::PutX4Y17 ( double pRetVal );
__declspec(implementation_key(4693)) double IObjectXYPolynomial::GetX3Y18 ( );
__declspec(implementation_key(4694)) void IObjectXYPolynomial::PutX3Y18 ( double pRetVal );
__declspec(implementation_key(4695)) double IObjectXYPolynomial::GetX2Y19 ( );
__declspec(implementation_key(4696)) void IObjectXYPolynomial::PutX2Y19 ( double pRetVal );
__declspec(implementation_key(4697)) IEditorCellPtr IObjectBinary1::GetRadius1Cell ( );
__declspec(implementation_key(4698)) IEditorCellPtr IObjectBinary1::GetConic1Cell ( );
__declspec(implementation_key(4699)) IEditorCellPtr IObjectBinary1::GetClear1Cell ( );
__declspec(implementation_key(4700)) IEditorCellPtr IObjectBinary1::GetEdge1Cell ( );
__declspec(implementation_key(4701)) IEditorCellPtr IObjectBinary1::GetThicknessCell ( );
__declspec(implementation_key(4702)) IEditorCellPtr IObjectBinary1::GetRadius2Cell ( );
__declspec(implementation_key(4703)) IEditorCellPtr IObjectBinary1::GetConic2Cell ( );
__declspec(implementation_key(4704)) IEditorCellPtr IObjectBinary1::GetClear2Cell ( );
__declspec(implementation_key(4705)) IEditorCellPtr IObjectBinary1::GetEdge2Cell ( );
__declspec(implementation_key(4706)) IEditorCellPtr IObjectBinary1::GetOrderCell ( );
__declspec(implementation_key(4707)) IEditorCellPtr IObjectBinary1::GetNormRadiusCell ( );
__declspec(implementation_key(4708)) IEditorCellPtr IObjectBinary1::GetMaxTermNumberCell ( );
__declspec(implementation_key(4709)) double IObjectBinary1::GetRadius1 ( );
__declspec(implementation_key(4710)) void IObjectBinary1::PutRadius1 ( double pRetVal );
__declspec(implementation_key(4711)) double IObjectBinary1::GetConic1 ( );
__declspec(implementation_key(4712)) void IObjectBinary1::PutConic1 ( double pRetVal );
__declspec(implementation_key(4713)) double IObjectBinary1::GetClear1 ( );
__declspec(implementation_key(4714)) void IObjectBinary1::PutClear1 ( double pRetVal );
__declspec(implementation_key(4715)) double IObjectBinary1::GetEdge1 ( );
__declspec(implementation_key(4716)) void IObjectBinary1::PutEdge1 ( double pRetVal );
__declspec(implementation_key(4717)) double IObjectBinary1::GetThickness ( );
__declspec(implementation_key(4718)) void IObjectBinary1::PutThickness ( double pRetVal );
__declspec(implementation_key(4719)) double IObjectBinary1::GetRadius2 ( );
__declspec(implementation_key(4720)) void IObjectBinary1::PutRadius2 ( double pRetVal );
__declspec(implementation_key(4721)) double IObjectBinary1::GetConic2 ( );
__declspec(implementation_key(4722)) void IObjectBinary1::PutConic2 ( double pRetVal );
__declspec(implementation_key(4723)) double IObjectBinary1::GetClear2 ( );
__declspec(implementation_key(4724)) void IObjectBinary1::PutClear2 ( double pRetVal );
__declspec(implementation_key(4725)) double IObjectBinary1::GetEdge2 ( );
__declspec(implementation_key(4726)) void IObjectBinary1::PutEdge2 ( double pRetVal );
__declspec(implementation_key(4727)) double IObjectBinary1::GetOrder ( );
__declspec(implementation_key(4728)) void IObjectBinary1::PutOrder ( double pRetVal );
__declspec(implementation_key(4729)) double IObjectBinary1::GetNormRadius ( );
__declspec(implementation_key(4730)) void IObjectBinary1::PutNormRadius ( double pRetVal );
__declspec(implementation_key(4731)) long IObjectBinary1::GetMaxTermNumber ( );
__declspec(implementation_key(4732)) void IObjectBinary1::PutMaxTermNumber ( long pRetVal );
__declspec(implementation_key(4733)) IEditorCellPtr IObjectBinary2::GetRadius1Cell ( );
__declspec(implementation_key(4734)) IEditorCellPtr IObjectBinary2::GetConic1Cell ( );
__declspec(implementation_key(4735)) IEditorCellPtr IObjectBinary2::GetClear1Cell ( );
__declspec(implementation_key(4736)) IEditorCellPtr IObjectBinary2::GetEdge1Cell ( );
__declspec(implementation_key(4737)) IEditorCellPtr IObjectBinary2::GetThicknessCell ( );
__declspec(implementation_key(4738)) IEditorCellPtr IObjectBinary2::GetRadius2Cell ( );
__declspec(implementation_key(4739)) IEditorCellPtr IObjectBinary2::GetConic2Cell ( );
__declspec(implementation_key(4740)) IEditorCellPtr IObjectBinary2::GetClear2Cell ( );
__declspec(implementation_key(4741)) IEditorCellPtr IObjectBinary2::GetEdge2Cell ( );
__declspec(implementation_key(4742)) IEditorCellPtr IObjectBinary2::GetOrderCell ( );
__declspec(implementation_key(4743)) IEditorCellPtr IObjectBinary2::GetNormRadiusCell ( );
__declspec(implementation_key(4744)) IEditorCellPtr IObjectBinary2::GetMaxTermNumberCell ( );
__declspec(implementation_key(4745)) IEditorCellPtr IObjectBinary2::GetCoeffOnPPower2Cell ( );
__declspec(implementation_key(4746)) IEditorCellPtr IObjectBinary2::GetCoeffOnPPower4Cell ( );
__declspec(implementation_key(4747)) IEditorCellPtr IObjectBinary2::GetCoeffOnPPower6Cell ( );
__declspec(implementation_key(4748)) IEditorCellPtr IObjectBinary2::GetCoeffOnPPower8Cell ( );
__declspec(implementation_key(4749)) IEditorCellPtr IObjectBinary2::GetCoeffOnPPower10Cell ( );
__declspec(implementation_key(4750)) IEditorCellPtr IObjectBinary2::GetCoeffOnPPower12Cell ( );
__declspec(implementation_key(4751)) IEditorCellPtr IObjectBinary2::GetCoeffOnPPower14Cell ( );
__declspec(implementation_key(4752)) IEditorCellPtr IObjectBinary2::GetCoeffOnPPower16Cell ( );
__declspec(implementation_key(4753)) IEditorCellPtr IObjectBinary2::GetCoeffOnPPower18Cell ( );
__declspec(implementation_key(4754)) IEditorCellPtr IObjectBinary2::GetCoeffOnPPower20Cell ( );
__declspec(implementation_key(4755)) IEditorCellPtr IObjectBinary2::GetCoeffOnPPower22Cell ( );
__declspec(implementation_key(4756)) IEditorCellPtr IObjectBinary2::GetCoeffOnPPower24Cell ( );
__declspec(implementation_key(4757)) IEditorCellPtr IObjectBinary2::GetCoeffOnPPower26Cell ( );
__declspec(implementation_key(4758)) IEditorCellPtr IObjectBinary2::GetCoeffOnPPower28Cell ( );
__declspec(implementation_key(4759)) IEditorCellPtr IObjectBinary2::GetCoeffOnPPower30Cell ( );
__declspec(implementation_key(4760)) IEditorCellPtr IObjectBinary2::GetCoeffOnPPower32Cell ( );
__declspec(implementation_key(4761)) double IObjectBinary2::GetRadius1 ( );
__declspec(implementation_key(4762)) void IObjectBinary2::PutRadius1 ( double pRetVal );
__declspec(implementation_key(4763)) double IObjectBinary2::GetConic1 ( );
__declspec(implementation_key(4764)) void IObjectBinary2::PutConic1 ( double pRetVal );
__declspec(implementation_key(4765)) double IObjectBinary2::GetClear1 ( );
__declspec(implementation_key(4766)) void IObjectBinary2::PutClear1 ( double pRetVal );
__declspec(implementation_key(4767)) double IObjectBinary2::GetEdge1 ( );
__declspec(implementation_key(4768)) void IObjectBinary2::PutEdge1 ( double pRetVal );
__declspec(implementation_key(4769)) double IObjectBinary2::GetThickness ( );
__declspec(implementation_key(4770)) void IObjectBinary2::PutThickness ( double pRetVal );
__declspec(implementation_key(4771)) double IObjectBinary2::GetRadius2 ( );
__declspec(implementation_key(4772)) void IObjectBinary2::PutRadius2 ( double pRetVal );
__declspec(implementation_key(4773)) double IObjectBinary2::GetConic2 ( );
__declspec(implementation_key(4774)) void IObjectBinary2::PutConic2 ( double pRetVal );
__declspec(implementation_key(4775)) double IObjectBinary2::GetClear2 ( );
__declspec(implementation_key(4776)) void IObjectBinary2::PutClear2 ( double pRetVal );
__declspec(implementation_key(4777)) double IObjectBinary2::GetEdge2 ( );
__declspec(implementation_key(4778)) void IObjectBinary2::PutEdge2 ( double pRetVal );
__declspec(implementation_key(4779)) double IObjectBinary2::GetOrder ( );
__declspec(implementation_key(4780)) void IObjectBinary2::PutOrder ( double pRetVal );
__declspec(implementation_key(4781)) double IObjectBinary2::GetNormRadius ( );
__declspec(implementation_key(4782)) void IObjectBinary2::PutNormRadius ( double pRetVal );
__declspec(implementation_key(4783)) long IObjectBinary2::GetMaxTermNumber ( );
__declspec(implementation_key(4784)) void IObjectBinary2::PutMaxTermNumber ( long pRetVal );
__declspec(implementation_key(4785)) double IObjectBinary2::GetCoeffOnPPower2 ( );
__declspec(implementation_key(4786)) void IObjectBinary2::PutCoeffOnPPower2 ( double pRetVal );
__declspec(implementation_key(4787)) double IObjectBinary2::GetCoeffOnPPower4 ( );
__declspec(implementation_key(4788)) void IObjectBinary2::PutCoeffOnPPower4 ( double pRetVal );
__declspec(implementation_key(4789)) double IObjectBinary2::GetCoeffOnPPower6 ( );
__declspec(implementation_key(4790)) void IObjectBinary2::PutCoeffOnPPower6 ( double pRetVal );
__declspec(implementation_key(4791)) double IObjectBinary2::GetCoeffOnPPower8 ( );
__declspec(implementation_key(4792)) void IObjectBinary2::PutCoeffOnPPower8 ( double pRetVal );
__declspec(implementation_key(4793)) double IObjectBinary2::GetCoeffOnPPower10 ( );
__declspec(implementation_key(4794)) void IObjectBinary2::PutCoeffOnPPower10 ( double pRetVal );
__declspec(implementation_key(4795)) double IObjectBinary2::GetCoeffOnPPower12 ( );
__declspec(implementation_key(4796)) void IObjectBinary2::PutCoeffOnPPower12 ( double pRetVal );
__declspec(implementation_key(4797)) double IObjectBinary2::GetCoeffOnPPower14 ( );
__declspec(implementation_key(4798)) void IObjectBinary2::PutCoeffOnPPower14 ( double pRetVal );
__declspec(implementation_key(4799)) double IObjectBinary2::GetCoeffOnPPower16 ( );
__declspec(implementation_key(4800)) void IObjectBinary2::PutCoeffOnPPower16 ( double pRetVal );
__declspec(implementation_key(4801)) double IObjectBinary2::GetCoeffOnPPower18 ( );
__declspec(implementation_key(4802)) void IObjectBinary2::PutCoeffOnPPower18 ( double pRetVal );
__declspec(implementation_key(4803)) double IObjectBinary2::GetCoeffOnPPower20 ( );
__declspec(implementation_key(4804)) void IObjectBinary2::PutCoeffOnPPower20 ( double pRetVal );
__declspec(implementation_key(4805)) double IObjectBinary2::GetCoeffOnPPower22 ( );
__declspec(implementation_key(4806)) void IObjectBinary2::PutCoeffOnPPower22 ( double pRetVal );
__declspec(implementation_key(4807)) double IObjectBinary2::GetCoeffOnPPower24 ( );
__declspec(implementation_key(4808)) void IObjectBinary2::PutCoeffOnPPower24 ( double pRetVal );
__declspec(implementation_key(4809)) double IObjectBinary2::GetCoeffOnPPower26 ( );
__declspec(implementation_key(4810)) void IObjectBinary2::PutCoeffOnPPower26 ( double pRetVal );
__declspec(implementation_key(4811)) double IObjectBinary2::GetCoeffOnPPower28 ( );
__declspec(implementation_key(4812)) void IObjectBinary2::PutCoeffOnPPower28 ( double pRetVal );
__declspec(implementation_key(4813)) double IObjectBinary2::GetCoeffOnPPower30 ( );
__declspec(implementation_key(4814)) void IObjectBinary2::PutCoeffOnPPower30 ( double pRetVal );
__declspec(implementation_key(4815)) double IObjectBinary2::GetCoeffOnPPower32 ( );
__declspec(implementation_key(4816)) void IObjectBinary2::PutCoeffOnPPower32 ( double pRetVal );
__declspec(implementation_key(4817)) IEditorCellPtr IObjectBinary2A::GetRadialApertureCell ( );
__declspec(implementation_key(4818)) IEditorCellPtr IObjectBinary2A::GetThicknessCell ( );
__declspec(implementation_key(4819)) IEditorCellPtr IObjectBinary2A::GetRadius1Cell ( );
__declspec(implementation_key(4820)) IEditorCellPtr IObjectBinary2A::GetConic1Cell ( );
__declspec(implementation_key(4821)) IEditorCellPtr IObjectBinary2A::GetCoeff1OnRPower2Cell ( );
__declspec(implementation_key(4822)) IEditorCellPtr IObjectBinary2A::GetCoeff1OnRPower4Cell ( );
__declspec(implementation_key(4823)) IEditorCellPtr IObjectBinary2A::GetCoeff1OnRPower6Cell ( );
__declspec(implementation_key(4824)) IEditorCellPtr IObjectBinary2A::GetCoeff1OnRPower8Cell ( );
__declspec(implementation_key(4825)) IEditorCellPtr IObjectBinary2A::GetCoeff1OnRPower10Cell ( );
__declspec(implementation_key(4826)) IEditorCellPtr IObjectBinary2A::GetCoeff1OnRPower12Cell ( );
__declspec(implementation_key(4827)) IEditorCellPtr IObjectBinary2A::GetCoeff1OnRPower14Cell ( );
__declspec(implementation_key(4828)) IEditorCellPtr IObjectBinary2A::GetCoeff1OnRPower16Cell ( );
__declspec(implementation_key(4829)) IEditorCellPtr IObjectBinary2A::GetCoeff1OnRPower18Cell ( );
__declspec(implementation_key(4830)) IEditorCellPtr IObjectBinary2A::GetCoeff1OnRPower20Cell ( );
__declspec(implementation_key(4831)) IEditorCellPtr IObjectBinary2A::GetCoeff1OnRPower22Cell ( );
__declspec(implementation_key(4832)) IEditorCellPtr IObjectBinary2A::GetCoeff1OnRPower24Cell ( );
__declspec(implementation_key(4833)) IEditorCellPtr IObjectBinary2A::GetRadius2Cell ( );
__declspec(implementation_key(4834)) IEditorCellPtr IObjectBinary2A::GetConic2Cell ( );
__declspec(implementation_key(4835)) IEditorCellPtr IObjectBinary2A::GetCoeff2OnRPower2Cell ( );
__declspec(implementation_key(4836)) IEditorCellPtr IObjectBinary2A::GetCoeff2OnRPower4Cell ( );
__declspec(implementation_key(4837)) IEditorCellPtr IObjectBinary2A::GetCoeff2OnRPower6Cell ( );
__declspec(implementation_key(4838)) IEditorCellPtr IObjectBinary2A::GetCoeff2OnRPower8Cell ( );
__declspec(implementation_key(4839)) IEditorCellPtr IObjectBinary2A::GetCoeff2OnRPower10Cell ( );
__declspec(implementation_key(4840)) IEditorCellPtr IObjectBinary2A::GetCoeff2OnRPower12Cell ( );
__declspec(implementation_key(4841)) IEditorCellPtr IObjectBinary2A::GetCoeff2OnRPower14Cell ( );
__declspec(implementation_key(4842)) IEditorCellPtr IObjectBinary2A::GetCoeff2OnRPower16Cell ( );
__declspec(implementation_key(4843)) IEditorCellPtr IObjectBinary2A::GetCoeff2OnRPower18Cell ( );
__declspec(implementation_key(4844)) IEditorCellPtr IObjectBinary2A::GetCoeff2OnRPower20Cell ( );
__declspec(implementation_key(4845)) IEditorCellPtr IObjectBinary2A::GetCoeff2OnRPower22Cell ( );
__declspec(implementation_key(4846)) IEditorCellPtr IObjectBinary2A::GetCoeff2OnRPower24Cell ( );
__declspec(implementation_key(4847)) IEditorCellPtr IObjectBinary2A::GetOrderCell ( );
__declspec(implementation_key(4848)) IEditorCellPtr IObjectBinary2A::GetNormRadiusCell ( );
__declspec(implementation_key(4849)) IEditorCellPtr IObjectBinary2A::GetMaxTermNumberCell ( );
__declspec(implementation_key(4850)) IEditorCellPtr IObjectBinary2A::GetCoeffOnPPower2Cell ( );
__declspec(implementation_key(4851)) IEditorCellPtr IObjectBinary2A::GetCoeffOnPPower4Cell ( );
__declspec(implementation_key(4852)) IEditorCellPtr IObjectBinary2A::GetCoeffOnPPower6Cell ( );
__declspec(implementation_key(4853)) IEditorCellPtr IObjectBinary2A::GetCoeffOnPPower8Cell ( );
__declspec(implementation_key(4854)) IEditorCellPtr IObjectBinary2A::GetCoeffOnPPower10Cell ( );
__declspec(implementation_key(4855)) IEditorCellPtr IObjectBinary2A::GetCoeffOnPPower12Cell ( );
__declspec(implementation_key(4856)) IEditorCellPtr IObjectBinary2A::GetCoeffOnPPower14Cell ( );
__declspec(implementation_key(4857)) IEditorCellPtr IObjectBinary2A::GetCoeffOnPPower16Cell ( );
__declspec(implementation_key(4858)) IEditorCellPtr IObjectBinary2A::GetCoeffOnPPower18Cell ( );
__declspec(implementation_key(4859)) IEditorCellPtr IObjectBinary2A::GetCoeffOnPPower20Cell ( );
__declspec(implementation_key(4860)) IEditorCellPtr IObjectBinary2A::GetCoeffOnPPower22Cell ( );
__declspec(implementation_key(4861)) IEditorCellPtr IObjectBinary2A::GetCoeffOnPPower24Cell ( );
__declspec(implementation_key(4862)) double IObjectBinary2A::GetRadialAperture ( );
__declspec(implementation_key(4863)) void IObjectBinary2A::PutRadialAperture ( double pRetVal );
__declspec(implementation_key(4864)) double IObjectBinary2A::GetThickness ( );
__declspec(implementation_key(4865)) void IObjectBinary2A::PutThickness ( double pRetVal );
__declspec(implementation_key(4866)) double IObjectBinary2A::GetRadius1 ( );
__declspec(implementation_key(4867)) void IObjectBinary2A::PutRadius1 ( double pRetVal );
__declspec(implementation_key(4868)) double IObjectBinary2A::GetConic1 ( );
__declspec(implementation_key(4869)) void IObjectBinary2A::PutConic1 ( double pRetVal );
__declspec(implementation_key(4870)) double IObjectBinary2A::GetCoeff1OnRPower2 ( );
__declspec(implementation_key(4871)) void IObjectBinary2A::PutCoeff1OnRPower2 ( double pRetVal );
__declspec(implementation_key(4872)) double IObjectBinary2A::GetCoeff1OnRPower4 ( );
__declspec(implementation_key(4873)) void IObjectBinary2A::PutCoeff1OnRPower4 ( double pRetVal );
__declspec(implementation_key(4874)) double IObjectBinary2A::GetCoeff1OnRPower6 ( );
__declspec(implementation_key(4875)) void IObjectBinary2A::PutCoeff1OnRPower6 ( double pRetVal );
__declspec(implementation_key(4876)) double IObjectBinary2A::GetCoeff1OnRPower8 ( );
__declspec(implementation_key(4877)) void IObjectBinary2A::PutCoeff1OnRPower8 ( double pRetVal );
__declspec(implementation_key(4878)) double IObjectBinary2A::GetCoeff1OnRPower10 ( );
__declspec(implementation_key(4879)) void IObjectBinary2A::PutCoeff1OnRPower10 ( double pRetVal );
__declspec(implementation_key(4880)) double IObjectBinary2A::GetCoeff1OnRPower12 ( );
__declspec(implementation_key(4881)) void IObjectBinary2A::PutCoeff1OnRPower12 ( double pRetVal );
__declspec(implementation_key(4882)) double IObjectBinary2A::GetCoeff1OnRPower14 ( );
__declspec(implementation_key(4883)) void IObjectBinary2A::PutCoeff1OnRPower14 ( double pRetVal );
__declspec(implementation_key(4884)) double IObjectBinary2A::GetCoeff1OnRPower16 ( );
__declspec(implementation_key(4885)) void IObjectBinary2A::PutCoeff1OnRPower16 ( double pRetVal );
__declspec(implementation_key(4886)) double IObjectBinary2A::GetCoeff1OnRPower18 ( );
__declspec(implementation_key(4887)) void IObjectBinary2A::PutCoeff1OnRPower18 ( double pRetVal );
__declspec(implementation_key(4888)) double IObjectBinary2A::GetCoeff1OnRPower20 ( );
__declspec(implementation_key(4889)) void IObjectBinary2A::PutCoeff1OnRPower20 ( double pRetVal );
__declspec(implementation_key(4890)) double IObjectBinary2A::GetCoeff1OnRPower22 ( );
__declspec(implementation_key(4891)) void IObjectBinary2A::PutCoeff1OnRPower22 ( double pRetVal );
__declspec(implementation_key(4892)) double IObjectBinary2A::GetCoeff1OnRPower24 ( );
__declspec(implementation_key(4893)) void IObjectBinary2A::PutCoeff1OnRPower24 ( double pRetVal );
__declspec(implementation_key(4894)) double IObjectBinary2A::GetRadius2 ( );
__declspec(implementation_key(4895)) void IObjectBinary2A::PutRadius2 ( double pRetVal );
__declspec(implementation_key(4896)) double IObjectBinary2A::GetConic2 ( );
__declspec(implementation_key(4897)) void IObjectBinary2A::PutConic2 ( double pRetVal );
__declspec(implementation_key(4898)) double IObjectBinary2A::GetCoeff2OnRPower2 ( );
__declspec(implementation_key(4899)) void IObjectBinary2A::PutCoeff2OnRPower2 ( double pRetVal );
__declspec(implementation_key(4900)) double IObjectBinary2A::GetCoeff2OnRPower4 ( );
__declspec(implementation_key(4901)) void IObjectBinary2A::PutCoeff2OnRPower4 ( double pRetVal );
__declspec(implementation_key(4902)) double IObjectBinary2A::GetCoeff2OnRPower6 ( );
__declspec(implementation_key(4903)) void IObjectBinary2A::PutCoeff2OnRPower6 ( double pRetVal );
__declspec(implementation_key(4904)) double IObjectBinary2A::GetCoeff2OnRPower8 ( );
__declspec(implementation_key(4905)) void IObjectBinary2A::PutCoeff2OnRPower8 ( double pRetVal );
__declspec(implementation_key(4906)) double IObjectBinary2A::GetCoeff2OnRPower10 ( );
__declspec(implementation_key(4907)) void IObjectBinary2A::PutCoeff2OnRPower10 ( double pRetVal );
__declspec(implementation_key(4908)) double IObjectBinary2A::GetCoeff2OnRPower12 ( );
__declspec(implementation_key(4909)) void IObjectBinary2A::PutCoeff2OnRPower12 ( double pRetVal );
__declspec(implementation_key(4910)) double IObjectBinary2A::GetCoeff2OnRPower14 ( );
__declspec(implementation_key(4911)) void IObjectBinary2A::PutCoeff2OnRPower14 ( double pRetVal );
__declspec(implementation_key(4912)) double IObjectBinary2A::GetCoeff2OnRPower16 ( );
__declspec(implementation_key(4913)) void IObjectBinary2A::PutCoeff2OnRPower16 ( double pRetVal );
__declspec(implementation_key(4914)) double IObjectBinary2A::GetCoeff2OnRPower18 ( );
__declspec(implementation_key(4915)) void IObjectBinary2A::PutCoeff2OnRPower18 ( double pRetVal );
__declspec(implementation_key(4916)) double IObjectBinary2A::GetCoeff2OnRPower20 ( );
__declspec(implementation_key(4917)) void IObjectBinary2A::PutCoeff2OnRPower20 ( double pRetVal );
__declspec(implementation_key(4918)) double IObjectBinary2A::GetCoeff2OnRPower22 ( );
__declspec(implementation_key(4919)) void IObjectBinary2A::PutCoeff2OnRPower22 ( double pRetVal );
__declspec(implementation_key(4920)) double IObjectBinary2A::GetCoeff2OnRPower24 ( );
__declspec(implementation_key(4921)) void IObjectBinary2A::PutCoeff2OnRPower24 ( double pRetVal );
__declspec(implementation_key(4922)) double IObjectBinary2A::GetOrder ( );
__declspec(implementation_key(4923)) void IObjectBinary2A::PutOrder ( double pRetVal );
__declspec(implementation_key(4924)) double IObjectBinary2A::GetNormRadius ( );
__declspec(implementation_key(4925)) void IObjectBinary2A::PutNormRadius ( double pRetVal );
__declspec(implementation_key(4926)) long IObjectBinary2A::GetMaxTermNumber ( );
__declspec(implementation_key(4927)) void IObjectBinary2A::PutMaxTermNumber ( long pRetVal );
__declspec(implementation_key(4928)) double IObjectBinary2A::GetCoeffOnPPower2 ( );
__declspec(implementation_key(4929)) void IObjectBinary2A::PutCoeffOnPPower2 ( double pRetVal );
__declspec(implementation_key(4930)) double IObjectBinary2A::GetCoeffOnPPower4 ( );
__declspec(implementation_key(4931)) void IObjectBinary2A::PutCoeffOnPPower4 ( double pRetVal );
__declspec(implementation_key(4932)) double IObjectBinary2A::GetCoeffOnPPower6 ( );
__declspec(implementation_key(4933)) void IObjectBinary2A::PutCoeffOnPPower6 ( double pRetVal );
__declspec(implementation_key(4934)) double IObjectBinary2A::GetCoeffOnPPower8 ( );
__declspec(implementation_key(4935)) void IObjectBinary2A::PutCoeffOnPPower8 ( double pRetVal );
__declspec(implementation_key(4936)) double IObjectBinary2A::GetCoeffOnPPower10 ( );
__declspec(implementation_key(4937)) void IObjectBinary2A::PutCoeffOnPPower10 ( double pRetVal );
__declspec(implementation_key(4938)) double IObjectBinary2A::GetCoeffOnPPower12 ( );
__declspec(implementation_key(4939)) void IObjectBinary2A::PutCoeffOnPPower12 ( double pRetVal );
__declspec(implementation_key(4940)) double IObjectBinary2A::GetCoeffOnPPower14 ( );
__declspec(implementation_key(4941)) void IObjectBinary2A::PutCoeffOnPPower14 ( double pRetVal );
__declspec(implementation_key(4942)) double IObjectBinary2A::GetCoeffOnPPower16 ( );
__declspec(implementation_key(4943)) void IObjectBinary2A::PutCoeffOnPPower16 ( double pRetVal );
__declspec(implementation_key(4944)) double IObjectBinary2A::GetCoeffOnPPower18 ( );
__declspec(implementation_key(4945)) void IObjectBinary2A::PutCoeffOnPPower18 ( double pRetVal );
__declspec(implementation_key(4946)) double IObjectBinary2A::GetCoeffOnPPower20 ( );
__declspec(implementation_key(4947)) void IObjectBinary2A::PutCoeffOnPPower20 ( double pRetVal );
__declspec(implementation_key(4948)) double IObjectBinary2A::GetCoeffOnPPower22 ( );
__declspec(implementation_key(4949)) void IObjectBinary2A::PutCoeffOnPPower22 ( double pRetVal );
__declspec(implementation_key(4950)) double IObjectBinary2A::GetCoeffOnPPower24 ( );
__declspec(implementation_key(4951)) void IObjectBinary2A::PutCoeffOnPPower24 ( double pRetVal );
__declspec(implementation_key(4952)) IEditorCellPtr IObjectBoolean::GetSplineCell ( );
__declspec(implementation_key(4953)) IEditorCellPtr IObjectBoolean::GetModeCell ( );
__declspec(implementation_key(4954)) IEditorCellPtr IObjectBoolean::GetNumberXminusVoxels_Cell ( );
__declspec(implementation_key(4955)) IEditorCellPtr IObjectBoolean::GetNumberYminusVoxels_Cell ( );
__declspec(implementation_key(4956)) IEditorCellPtr IObjectBoolean::GetNumberZminusVoxels_Cell ( );
__declspec(implementation_key(4957)) IEditorCellPtr IObjectBoolean::GetObjectACell ( );
__declspec(implementation_key(4958)) IEditorCellPtr IObjectBoolean::GetObjectBCell ( );
__declspec(implementation_key(4959)) IEditorCellPtr IObjectBoolean::GetObjectCCell ( );
__declspec(implementation_key(4960)) IEditorCellPtr IObjectBoolean::GetObjectDCell ( );
__declspec(implementation_key(4961)) IEditorCellPtr IObjectBoolean::GetObjectECell ( );
__declspec(implementation_key(4962)) IEditorCellPtr IObjectBoolean::GetObjectFCell ( );
__declspec(implementation_key(4963)) IEditorCellPtr IObjectBoolean::GetObjectGCell ( );
__declspec(implementation_key(4964)) IEditorCellPtr IObjectBoolean::GetObjectHCell ( );
__declspec(implementation_key(4965)) IEditorCellPtr IObjectBoolean::GetObjectICell ( );
__declspec(implementation_key(4966)) IEditorCellPtr IObjectBoolean::GetObjectJCell ( );
__declspec(implementation_key(4967)) long IObjectBoolean::GetSpline ( );
__declspec(implementation_key(4968)) void IObjectBoolean::PutSpline ( long pRetVal );
__declspec(implementation_key(4969)) long IObjectBoolean::GetMode ( );
__declspec(implementation_key(4970)) void IObjectBoolean::PutMode ( long pRetVal );
__declspec(implementation_key(4971)) long IObjectBoolean::GetNumberXminusVoxels ( );
__declspec(implementation_key(4972)) void IObjectBoolean::PutNumberXminusVoxels ( long pRetVal );
__declspec(implementation_key(4973)) long IObjectBoolean::GetNumberYminusVoxels ( );
__declspec(implementation_key(4974)) void IObjectBoolean::PutNumberYminusVoxels ( long pRetVal );
__declspec(implementation_key(4975)) long IObjectBoolean::GetNumberZminusVoxels ( );
__declspec(implementation_key(4976)) void IObjectBoolean::PutNumberZminusVoxels ( long pRetVal );
__declspec(implementation_key(4977)) long IObjectBoolean::GetObjectA ( );
__declspec(implementation_key(4978)) void IObjectBoolean::PutObjectA ( long pRetVal );
__declspec(implementation_key(4979)) long IObjectBoolean::GetObjectB ( );
__declspec(implementation_key(4980)) void IObjectBoolean::PutObjectB ( long pRetVal );
__declspec(implementation_key(4981)) long IObjectBoolean::GetObjectC ( );
__declspec(implementation_key(4982)) void IObjectBoolean::PutObjectC ( long pRetVal );
__declspec(implementation_key(4983)) long IObjectBoolean::GetObjectD ( );
__declspec(implementation_key(4984)) void IObjectBoolean::PutObjectD ( long pRetVal );
__declspec(implementation_key(4985)) long IObjectBoolean::GetObjectE ( );
__declspec(implementation_key(4986)) void IObjectBoolean::PutObjectE ( long pRetVal );
__declspec(implementation_key(4987)) long IObjectBoolean::GetObjectF ( );
__declspec(implementation_key(4988)) void IObjectBoolean::PutObjectF ( long pRetVal );
__declspec(implementation_key(4989)) long IObjectBoolean::GetObjectG ( );
__declspec(implementation_key(4990)) void IObjectBoolean::PutObjectG ( long pRetVal );
__declspec(implementation_key(4991)) long IObjectBoolean::GetObjectH ( );
__declspec(implementation_key(4992)) void IObjectBoolean::PutObjectH ( long pRetVal );
__declspec(implementation_key(4993)) long IObjectBoolean::GetObjectI ( );
__declspec(implementation_key(4994)) void IObjectBoolean::PutObjectI ( long pRetVal );
__declspec(implementation_key(4995)) long IObjectBoolean::GetObjectJ ( );
__declspec(implementation_key(4996)) void IObjectBoolean::PutObjectJ ( long pRetVal );
__declspec(implementation_key(4997)) IEditorCellPtr IObjectCADAssemblyAutodeskInventor::GetExplodeCell ( );
__declspec(implementation_key(4998)) VARIANT_BOOL IObjectCADAssemblyAutodeskInventor::GetExplode ( );
__declspec(implementation_key(4999)) void IObjectCADAssemblyAutodeskInventor::PutExplode ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(5000)) IEditorCellPtr IObjectCADAssemblyCreoParametric::GetExplodeCell ( );
__declspec(implementation_key(5001)) VARIANT_BOOL IObjectCADAssemblyCreoParametric::GetExplode ( );
__declspec(implementation_key(5002)) void IObjectCADAssemblyCreoParametric::PutExplode ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(5003)) IEditorCellPtr IObjectCADAssemblySolidWorks::GetExplodeCell ( );
__declspec(implementation_key(5004)) VARIANT_BOOL IObjectCADAssemblySolidWorks::GetExplode ( );
__declspec(implementation_key(5005)) void IObjectCADAssemblySolidWorks::PutExplode ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(5006)) IEditorCellPtr IObjectCADPartSTEPIGESSAT::GetScaleCell ( );
__declspec(implementation_key(5007)) IEditorCellPtr IObjectCADPartSTEPIGESSAT::GetModeCell ( );
__declspec(implementation_key(5008)) IEditorCellPtr IObjectCADPartSTEPIGESSAT::GetNumberXMinusVoxelsCell ( );
__declspec(implementation_key(5009)) IEditorCellPtr IObjectCADPartSTEPIGESSAT::GetNumberYMinusVoxelsCell ( );
__declspec(implementation_key(5010)) IEditorCellPtr IObjectCADPartSTEPIGESSAT::GetNumberZMinusVoxelsCell ( );
__declspec(implementation_key(5011)) IEditorCellPtr IObjectCADPartSTEPIGESSAT::GetExplodeCell ( );
__declspec(implementation_key(5012)) double IObjectCADPartSTEPIGESSAT::GetScale ( );
__declspec(implementation_key(5013)) void IObjectCADPartSTEPIGESSAT::PutScale ( double pRetVal );
__declspec(implementation_key(5014)) long IObjectCADPartSTEPIGESSAT::GetMode ( );
__declspec(implementation_key(5015)) void IObjectCADPartSTEPIGESSAT::PutMode ( long pRetVal );
__declspec(implementation_key(5016)) long IObjectCADPartSTEPIGESSAT::GetNumberXminusVoxels ( );
__declspec(implementation_key(5017)) void IObjectCADPartSTEPIGESSAT::PutNumberXminusVoxels ( long pRetVal );
__declspec(implementation_key(5018)) long IObjectCADPartSTEPIGESSAT::GetNumberYminusVoxels ( );
__declspec(implementation_key(5019)) void IObjectCADPartSTEPIGESSAT::PutNumberYminusVoxels ( long pRetVal );
__declspec(implementation_key(5020)) long IObjectCADPartSTEPIGESSAT::GetNumberZminusVoxels ( );
__declspec(implementation_key(5021)) void IObjectCADPartSTEPIGESSAT::PutNumberZminusVoxels ( long pRetVal );
__declspec(implementation_key(5022)) VARIANT_BOOL IObjectCADPartSTEPIGESSAT::GetExplode ( );
__declspec(implementation_key(5023)) void IObjectCADPartSTEPIGESSAT::PutExplode ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(5024)) IEditorCellPtr IObjectCADPartSTL::GetScaleCell ( );
__declspec(implementation_key(5025)) IEditorCellPtr IObjectCADPartSTL::GetIsVolumeCell ( );
__declspec(implementation_key(5026)) double IObjectCADPartSTL::GetScale ( );
__declspec(implementation_key(5027)) void IObjectCADPartSTL::PutScale ( double pRetVal );
__declspec(implementation_key(5028)) VARIANT_BOOL IObjectCADPartSTL::GetIsVolume ( );
__declspec(implementation_key(5029)) void IObjectCADPartSTL::PutIsVolume ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(5030)) IEditorCellPtr IObjectCone::GetZ1Cell ( );
__declspec(implementation_key(5031)) IEditorCellPtr IObjectCone::GetRadius1Cell ( );
__declspec(implementation_key(5032)) IEditorCellPtr IObjectCone::GetZ2Cell ( );
__declspec(implementation_key(5033)) IEditorCellPtr IObjectCone::GetRadius2Cell ( );
__declspec(implementation_key(5034)) double IObjectCone::GetZ1 ( );
__declspec(implementation_key(5035)) void IObjectCone::PutZ1 ( double pRetVal );
__declspec(implementation_key(5036)) double IObjectCone::GetRadius1 ( );
__declspec(implementation_key(5037)) void IObjectCone::PutRadius1 ( double pRetVal );
__declspec(implementation_key(5038)) double IObjectCone::GetZ2 ( );
__declspec(implementation_key(5039)) void IObjectCone::PutZ2 ( double pRetVal );
__declspec(implementation_key(5040)) double IObjectCone::GetRadius2 ( );
__declspec(implementation_key(5041)) void IObjectCone::PutRadius2 ( double pRetVal );
__declspec(implementation_key(5042)) IEditorCellPtr IObjectCPC::GetRadialApertureCell ( );
__declspec(implementation_key(5043)) IEditorCellPtr IObjectCPC::GetAngleDegreesCell ( );
__declspec(implementation_key(5044)) IEditorCellPtr IObjectCPC::GetLengthCell ( );
__declspec(implementation_key(5045)) IEditorCellPtr IObjectCPC::GetIsVolumeCell ( );
__declspec(implementation_key(5046)) IEditorCellPtr IObjectCPC::GetVolumeIndexCell ( );
__declspec(implementation_key(5047)) double IObjectCPC::GetRadialAperture ( );
__declspec(implementation_key(5048)) void IObjectCPC::PutRadialAperture ( double pRetVal );
__declspec(implementation_key(5049)) double IObjectCPC::GetAngleDegrees ( );
__declspec(implementation_key(5050)) void IObjectCPC::PutAngleDegrees ( double pRetVal );
__declspec(implementation_key(5051)) double IObjectCPC::GetLength ( );
__declspec(implementation_key(5052)) void IObjectCPC::PutLength ( double pRetVal );
__declspec(implementation_key(5053)) VARIANT_BOOL IObjectCPC::GetIsVolume ( );
__declspec(implementation_key(5054)) void IObjectCPC::PutIsVolume ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(5055)) double IObjectCPC::GetVolumeIndex ( );
__declspec(implementation_key(5056)) void IObjectCPC::PutVolumeIndex ( double pRetVal );
__declspec(implementation_key(5057)) IEditorCellPtr IObjectCPCRectangular::GetXApertureCell ( );
__declspec(implementation_key(5058)) IEditorCellPtr IObjectCPCRectangular::GetXAngleDegreesCell ( );
__declspec(implementation_key(5059)) IEditorCellPtr IObjectCPCRectangular::GetYApertureCell ( );
__declspec(implementation_key(5060)) IEditorCellPtr IObjectCPCRectangular::GetYAngleDegreesCell ( );
__declspec(implementation_key(5061)) IEditorCellPtr IObjectCPCRectangular::GetLengthCell ( );
__declspec(implementation_key(5062)) IEditorCellPtr IObjectCPCRectangular::GetIsVolumeCell ( );
__declspec(implementation_key(5063)) IEditorCellPtr IObjectCPCRectangular::GetVolumeIndexCell ( );
__declspec(implementation_key(5064)) double IObjectCPCRectangular::GetXAperture ( );
__declspec(implementation_key(5065)) void IObjectCPCRectangular::PutXAperture ( double pRetVal );
__declspec(implementation_key(5066)) double IObjectCPCRectangular::GetXAngleDegrees ( );
__declspec(implementation_key(5067)) void IObjectCPCRectangular::PutXAngleDegrees ( double pRetVal );
__declspec(implementation_key(5068)) double IObjectCPCRectangular::GetYAperture ( );
__declspec(implementation_key(5069)) void IObjectCPCRectangular::PutYAperture ( double pRetVal );
__declspec(implementation_key(5070)) double IObjectCPCRectangular::GetYAngleDegrees ( );
__declspec(implementation_key(5071)) void IObjectCPCRectangular::PutYAngleDegrees ( double pRetVal );
__declspec(implementation_key(5072)) double IObjectCPCRectangular::GetLength ( );
__declspec(implementation_key(5073)) void IObjectCPCRectangular::PutLength ( double pRetVal );
__declspec(implementation_key(5074)) VARIANT_BOOL IObjectCPCRectangular::GetIsVolume ( );
__declspec(implementation_key(5075)) void IObjectCPCRectangular::PutIsVolume ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(5076)) double IObjectCPCRectangular::GetVolumeIndex ( );
__declspec(implementation_key(5077)) void IObjectCPCRectangular::PutVolumeIndex ( double pRetVal );
__declspec(implementation_key(5078)) IEditorCellPtr IObjectCylinderPipe::GetFrontRCell ( );
__declspec(implementation_key(5079)) IEditorCellPtr IObjectCylinderPipe::GetZLengthCell ( );
__declspec(implementation_key(5080)) IEditorCellPtr IObjectCylinderPipe::GetBackRCell ( );
__declspec(implementation_key(5081)) double IObjectCylinderPipe::GetFrontR ( );
__declspec(implementation_key(5082)) void IObjectCylinderPipe::PutFrontR ( double pRetVal );
__declspec(implementation_key(5083)) double IObjectCylinderPipe::GetZLength ( );
__declspec(implementation_key(5084)) void IObjectCylinderPipe::PutZLength ( double pRetVal );
__declspec(implementation_key(5085)) double IObjectCylinderPipe::GetBackR ( );
__declspec(implementation_key(5086)) void IObjectCylinderPipe::PutBackR ( double pRetVal );
__declspec(implementation_key(5087)) IEditorCellPtr IObjectCylinderVolume::GetFrontRCell ( );
__declspec(implementation_key(5088)) IEditorCellPtr IObjectCylinderVolume::GetZLengthCell ( );
__declspec(implementation_key(5089)) IEditorCellPtr IObjectCylinderVolume::GetBackRCell ( );
__declspec(implementation_key(5090)) double IObjectCylinderVolume::GetFrontR ( );
__declspec(implementation_key(5091)) void IObjectCylinderVolume::PutFrontR ( double pRetVal );
__declspec(implementation_key(5092)) double IObjectCylinderVolume::GetZLength ( );
__declspec(implementation_key(5093)) void IObjectCylinderVolume::PutZLength ( double pRetVal );
__declspec(implementation_key(5094)) double IObjectCylinderVolume::GetBackR ( );
__declspec(implementation_key(5095)) void IObjectCylinderVolume::PutBackR ( double pRetVal );
__declspec(implementation_key(5096)) IEditorCellPtr IObjectCylinder2Pipe::GetRadiusACell ( );
__declspec(implementation_key(5097)) IEditorCellPtr IObjectCylinder2Pipe::GetZLengthCell ( );
__declspec(implementation_key(5098)) IEditorCellPtr IObjectCylinder2Pipe::GetFrontAngleAlongYCell ( );
__declspec(implementation_key(5099)) IEditorCellPtr IObjectCylinder2Pipe::GetBackAngleAlongYCell ( );
__declspec(implementation_key(5100)) IEditorCellPtr IObjectCylinder2Pipe::GetFrontAngleAlongXCell ( );
__declspec(implementation_key(5101)) IEditorCellPtr IObjectCylinder2Pipe::GetBackAngleAlongXCell ( );
__declspec(implementation_key(5102)) double IObjectCylinder2Pipe::GetRadiusA ( );
__declspec(implementation_key(5103)) void IObjectCylinder2Pipe::PutRadiusA ( double pRetVal );
__declspec(implementation_key(5104)) double IObjectCylinder2Pipe::GetZLength ( );
__declspec(implementation_key(5105)) void IObjectCylinder2Pipe::PutZLength ( double pRetVal );
__declspec(implementation_key(5106)) double IObjectCylinder2Pipe::GetFrontAngleAlongY ( );
__declspec(implementation_key(5107)) void IObjectCylinder2Pipe::PutFrontAngleAlongY ( double pRetVal );
__declspec(implementation_key(5108)) double IObjectCylinder2Pipe::GetBackAngleAlongY ( );
__declspec(implementation_key(5109)) void IObjectCylinder2Pipe::PutBackAngleAlongY ( double pRetVal );
__declspec(implementation_key(5110)) double IObjectCylinder2Pipe::GetFrontAngleAlongX ( );
__declspec(implementation_key(5111)) void IObjectCylinder2Pipe::PutFrontAngleAlongX ( double pRetVal );
__declspec(implementation_key(5112)) double IObjectCylinder2Pipe::GetBackAngleAlongX ( );
__declspec(implementation_key(5113)) void IObjectCylinder2Pipe::PutBackAngleAlongX ( double pRetVal );
__declspec(implementation_key(5114)) IEditorCellPtr IObjectCylinder2Volume::GetRadiusACell ( );
__declspec(implementation_key(5115)) IEditorCellPtr IObjectCylinder2Volume::GetZLengthCell ( );
__declspec(implementation_key(5116)) IEditorCellPtr IObjectCylinder2Volume::GetFrontAngleAlongYCell ( );
__declspec(implementation_key(5117)) IEditorCellPtr IObjectCylinder2Volume::GetBackAngleAlongYCell ( );
__declspec(implementation_key(5118)) IEditorCellPtr IObjectCylinder2Volume::GetFrontAngleAlongXCell ( );
__declspec(implementation_key(5119)) IEditorCellPtr IObjectCylinder2Volume::GetBackAngleAlongXCell ( );
__declspec(implementation_key(5120)) double IObjectCylinder2Volume::GetRadiusA ( );
__declspec(implementation_key(5121)) void IObjectCylinder2Volume::PutRadiusA ( double pRetVal );
__declspec(implementation_key(5122)) double IObjectCylinder2Volume::GetZLength ( );
__declspec(implementation_key(5123)) void IObjectCylinder2Volume::PutZLength ( double pRetVal );
__declspec(implementation_key(5124)) double IObjectCylinder2Volume::GetFrontAngleAlongY ( );
__declspec(implementation_key(5125)) void IObjectCylinder2Volume::PutFrontAngleAlongY ( double pRetVal );
__declspec(implementation_key(5126)) double IObjectCylinder2Volume::GetBackAngleAlongY ( );
__declspec(implementation_key(5127)) void IObjectCylinder2Volume::PutBackAngleAlongY ( double pRetVal );
__declspec(implementation_key(5128)) double IObjectCylinder2Volume::GetFrontAngleAlongX ( );
__declspec(implementation_key(5129)) void IObjectCylinder2Volume::PutFrontAngleAlongX ( double pRetVal );
__declspec(implementation_key(5130)) double IObjectCylinder2Volume::GetBackAngleAlongX ( );
__declspec(implementation_key(5131)) void IObjectCylinder2Volume::PutBackAngleAlongX ( double pRetVal );
__declspec(implementation_key(5132)) IEditorCellPtr IObjectDetectorColor::GetXHalfWidthCell ( );
__declspec(implementation_key(5133)) IEditorCellPtr IObjectDetectorColor::GetYHalfWidthCell ( );
__declspec(implementation_key(5134)) IEditorCellPtr IObjectDetectorColor::GetNumberXPixelsCell ( );
__declspec(implementation_key(5135)) IEditorCellPtr IObjectDetectorColor::GetNumberYPixelsCell ( );
__declspec(implementation_key(5136)) IEditorCellPtr IObjectDetectorColor::GetDataTypeCell ( );
__declspec(implementation_key(5137)) IEditorCellPtr IObjectDetectorColor::GetColorCell ( );
__declspec(implementation_key(5138)) IEditorCellPtr IObjectDetectorColor::GetSmoothingCell ( );
__declspec(implementation_key(5139)) IEditorCellPtr IObjectDetectorColor::GetScaleCell ( );
__declspec(implementation_key(5140)) IEditorCellPtr IObjectDetectorColor::GetPlotScaleCell ( );
__declspec(implementation_key(5141)) IEditorCellPtr IObjectDetectorColor::GetFrontOnlyCell ( );
__declspec(implementation_key(5142)) IEditorCellPtr IObjectDetectorColor::GetXAngleMinCell ( );
__declspec(implementation_key(5143)) IEditorCellPtr IObjectDetectorColor::GetXAngleMaxCell ( );
__declspec(implementation_key(5144)) IEditorCellPtr IObjectDetectorColor::GetYAngleMinCell ( );
__declspec(implementation_key(5145)) IEditorCellPtr IObjectDetectorColor::GetYAngleMaxCell ( );
__declspec(implementation_key(5146)) IEditorCellPtr IObjectDetectorColor::GetPolarizationCell ( );
__declspec(implementation_key(5147)) IEditorCellPtr IObjectDetectorColor::GetMirroringCell ( );
__declspec(implementation_key(5148)) double IObjectDetectorColor::GetXHalfWidth ( );
__declspec(implementation_key(5149)) void IObjectDetectorColor::PutXHalfWidth ( double pRetVal );
__declspec(implementation_key(5150)) double IObjectDetectorColor::GetYHalfWidth ( );
__declspec(implementation_key(5151)) void IObjectDetectorColor::PutYHalfWidth ( double pRetVal );
__declspec(implementation_key(5152)) long IObjectDetectorColor::GetNumberXPixels ( );
__declspec(implementation_key(5153)) void IObjectDetectorColor::PutNumberXPixels ( long pRetVal );
__declspec(implementation_key(5154)) long IObjectDetectorColor::GetNumberYPixels ( );
__declspec(implementation_key(5155)) void IObjectDetectorColor::PutNumberYPixels ( long pRetVal );
__declspec(implementation_key(5156)) long IObjectDetectorColor::GetDataType ( );
__declspec(implementation_key(5157)) void IObjectDetectorColor::PutDataType ( long pRetVal );
__declspec(implementation_key(5158)) long IObjectDetectorColor::GetColor ( );
__declspec(implementation_key(5159)) void IObjectDetectorColor::PutColor ( long pRetVal );
__declspec(implementation_key(5160)) long IObjectDetectorColor::GetSmoothing ( );
__declspec(implementation_key(5161)) void IObjectDetectorColor::PutSmoothing ( long pRetVal );
__declspec(implementation_key(5162)) long IObjectDetectorColor::GetScale ( );
__declspec(implementation_key(5163)) void IObjectDetectorColor::PutScale ( long pRetVal );
__declspec(implementation_key(5164)) double IObjectDetectorColor::GetPlotScale ( );
__declspec(implementation_key(5165)) void IObjectDetectorColor::PutPlotScale ( double pRetVal );
__declspec(implementation_key(5166)) long IObjectDetectorColor::GetFrontOnly ( );
__declspec(implementation_key(5167)) void IObjectDetectorColor::PutFrontOnly ( long pRetVal );
__declspec(implementation_key(5168)) double IObjectDetectorColor::GetXAngleMin ( );
__declspec(implementation_key(5169)) void IObjectDetectorColor::PutXAngleMin ( double pRetVal );
__declspec(implementation_key(5170)) double IObjectDetectorColor::GetXAngleMax ( );
__declspec(implementation_key(5171)) void IObjectDetectorColor::PutXAngleMax ( double pRetVal );
__declspec(implementation_key(5172)) double IObjectDetectorColor::GetYAngleMin ( );
__declspec(implementation_key(5173)) void IObjectDetectorColor::PutYAngleMin ( double pRetVal );
__declspec(implementation_key(5174)) double IObjectDetectorColor::GetYAngleMax ( );
__declspec(implementation_key(5175)) void IObjectDetectorColor::PutYAngleMax ( double pRetVal );
__declspec(implementation_key(5176)) long IObjectDetectorColor::GetPolarization ( );
__declspec(implementation_key(5177)) void IObjectDetectorColor::PutPolarization ( long pRetVal );
__declspec(implementation_key(5178)) long IObjectDetectorColor::GetMirroring ( );
__declspec(implementation_key(5179)) void IObjectDetectorColor::PutMirroring ( long pRetVal );
__declspec(implementation_key(5180)) IEditorCellPtr IObjectDetectorPolar::GetMaxAngleCell ( );
__declspec(implementation_key(5181)) IEditorCellPtr IObjectDetectorPolar::GetRadialSizeCell ( );
__declspec(implementation_key(5182)) IEditorCellPtr IObjectDetectorPolar::GetNumberPPixelsCell ( );
__declspec(implementation_key(5183)) IEditorCellPtr IObjectDetectorPolar::GetNumberAPixelsCell ( );
__declspec(implementation_key(5184)) IEditorCellPtr IObjectDetectorPolar::GetMirroringCell ( );
__declspec(implementation_key(5185)) double IObjectDetectorPolar::GetMaxAngle ( );
__declspec(implementation_key(5186)) void IObjectDetectorPolar::PutMaxAngle ( double pRetVal );
__declspec(implementation_key(5187)) double IObjectDetectorPolar::GetRadialSize ( );
__declspec(implementation_key(5188)) void IObjectDetectorPolar::PutRadialSize ( double pRetVal );
__declspec(implementation_key(5189)) long IObjectDetectorPolar::GetNumberPPixels ( );
__declspec(implementation_key(5190)) void IObjectDetectorPolar::PutNumberPPixels ( long pRetVal );
__declspec(implementation_key(5191)) long IObjectDetectorPolar::GetNumberAPixels ( );
__declspec(implementation_key(5192)) void IObjectDetectorPolar::PutNumberAPixels ( long pRetVal );
__declspec(implementation_key(5193)) VARIANT_BOOL IObjectDetectorPolar::GetMirroring ( );
__declspec(implementation_key(5194)) void IObjectDetectorPolar::PutMirroring ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(5195)) IEditorCellPtr IObjectDetectorRectangle::GetXHalfWidthCell ( );
__declspec(implementation_key(5196)) IEditorCellPtr IObjectDetectorRectangle::GetYHalfWidthCell ( );
__declspec(implementation_key(5197)) IEditorCellPtr IObjectDetectorRectangle::GetNumberXPixelsCell ( );
__declspec(implementation_key(5198)) IEditorCellPtr IObjectDetectorRectangle::GetNumberYPixelsCell ( );
__declspec(implementation_key(5199)) IEditorCellPtr IObjectDetectorRectangle::GetDataTypeCell ( );
__declspec(implementation_key(5200)) IEditorCellPtr IObjectDetectorRectangle::GetColorCell ( );
__declspec(implementation_key(5201)) IEditorCellPtr IObjectDetectorRectangle::GetSmoothingCell ( );
__declspec(implementation_key(5202)) IEditorCellPtr IObjectDetectorRectangle::GetScaleCell ( );
__declspec(implementation_key(5203)) IEditorCellPtr IObjectDetectorRectangle::GetPlotScaleCell ( );
__declspec(implementation_key(5204)) IEditorCellPtr IObjectDetectorRectangle::GetFrontOnlyCell ( );
__declspec(implementation_key(5205)) IEditorCellPtr IObjectDetectorRectangle::GetPsfWaveNumberCell ( );
__declspec(implementation_key(5206)) IEditorCellPtr IObjectDetectorRectangle::GetXAngleMinCell ( );
__declspec(implementation_key(5207)) IEditorCellPtr IObjectDetectorRectangle::GetXAngleMaxCell ( );
__declspec(implementation_key(5208)) IEditorCellPtr IObjectDetectorRectangle::GetYAngleMinCell ( );
__declspec(implementation_key(5209)) IEditorCellPtr IObjectDetectorRectangle::GetYAngleMaxCell ( );
__declspec(implementation_key(5210)) IEditorCellPtr IObjectDetectorRectangle::GetPolarizationCell ( );
__declspec(implementation_key(5211)) IEditorCellPtr IObjectDetectorRectangle::GetMirroringCell ( );
__declspec(implementation_key(5212)) double IObjectDetectorRectangle::GetXHalfWidth ( );
__declspec(implementation_key(5213)) void IObjectDetectorRectangle::PutXHalfWidth ( double pRetVal );
__declspec(implementation_key(5214)) double IObjectDetectorRectangle::GetYHalfWidth ( );
__declspec(implementation_key(5215)) void IObjectDetectorRectangle::PutYHalfWidth ( double pRetVal );
__declspec(implementation_key(5216)) long IObjectDetectorRectangle::GetNumberXPixels ( );
__declspec(implementation_key(5217)) void IObjectDetectorRectangle::PutNumberXPixels ( long pRetVal );
__declspec(implementation_key(5218)) long IObjectDetectorRectangle::GetNumberYPixels ( );
__declspec(implementation_key(5219)) void IObjectDetectorRectangle::PutNumberYPixels ( long pRetVal );
__declspec(implementation_key(5220)) long IObjectDetectorRectangle::GetDataType ( );
__declspec(implementation_key(5221)) void IObjectDetectorRectangle::PutDataType ( long pRetVal );
__declspec(implementation_key(5222)) long IObjectDetectorRectangle::GetColor ( );
__declspec(implementation_key(5223)) void IObjectDetectorRectangle::PutColor ( long pRetVal );
__declspec(implementation_key(5224)) long IObjectDetectorRectangle::GetSmoothing ( );
__declspec(implementation_key(5225)) void IObjectDetectorRectangle::PutSmoothing ( long pRetVal );
__declspec(implementation_key(5226)) long IObjectDetectorRectangle::GetScale ( );
__declspec(implementation_key(5227)) void IObjectDetectorRectangle::PutScale ( long pRetVal );
__declspec(implementation_key(5228)) double IObjectDetectorRectangle::GetPlotScale ( );
__declspec(implementation_key(5229)) void IObjectDetectorRectangle::PutPlotScale ( double pRetVal );
__declspec(implementation_key(5230)) long IObjectDetectorRectangle::GetFrontOnly ( );
__declspec(implementation_key(5231)) void IObjectDetectorRectangle::PutFrontOnly ( long pRetVal );
__declspec(implementation_key(5232)) long IObjectDetectorRectangle::GetPsfWaveNumber ( );
__declspec(implementation_key(5233)) void IObjectDetectorRectangle::PutPsfWaveNumber ( long pRetVal );
__declspec(implementation_key(5234)) double IObjectDetectorRectangle::GetXAngleMin ( );
__declspec(implementation_key(5235)) void IObjectDetectorRectangle::PutXAngleMin ( double pRetVal );
__declspec(implementation_key(5236)) double IObjectDetectorRectangle::GetXAngleMax ( );
__declspec(implementation_key(5237)) void IObjectDetectorRectangle::PutXAngleMax ( double pRetVal );
__declspec(implementation_key(5238)) double IObjectDetectorRectangle::GetYAngleMin ( );
__declspec(implementation_key(5239)) void IObjectDetectorRectangle::PutYAngleMin ( double pRetVal );
__declspec(implementation_key(5240)) double IObjectDetectorRectangle::GetYAngleMax ( );
__declspec(implementation_key(5241)) void IObjectDetectorRectangle::PutYAngleMax ( double pRetVal );
__declspec(implementation_key(5242)) long IObjectDetectorRectangle::GetPolarization ( );
__declspec(implementation_key(5243)) void IObjectDetectorRectangle::PutPolarization ( long pRetVal );
__declspec(implementation_key(5244)) long IObjectDetectorRectangle::GetMirroring ( );
__declspec(implementation_key(5245)) void IObjectDetectorRectangle::PutMirroring ( long pRetVal );
__declspec(implementation_key(5246)) IEditorCellPtr IObjectDetectorSurface::GetRadiusCell ( );
__declspec(implementation_key(5247)) IEditorCellPtr IObjectDetectorSurface::GetConicCell ( );
__declspec(implementation_key(5248)) IEditorCellPtr IObjectDetectorSurface::GetMaxApertureCell ( );
__declspec(implementation_key(5249)) IEditorCellPtr IObjectDetectorSurface::GetMinApertureCell ( );
__declspec(implementation_key(5250)) IEditorCellPtr IObjectDetectorSurface::GetNumberAZonesCell ( );
__declspec(implementation_key(5251)) IEditorCellPtr IObjectDetectorSurface::GetNumberRZonesCell ( );
__declspec(implementation_key(5252)) IEditorCellPtr IObjectDetectorSurface::GetDataTypeCell ( );
__declspec(implementation_key(5253)) IEditorCellPtr IObjectDetectorSurface::GetColorCell ( );
__declspec(implementation_key(5254)) IEditorCellPtr IObjectDetectorSurface::GetScaleCell ( );
__declspec(implementation_key(5255)) IEditorCellPtr IObjectDetectorSurface::GetMaxScaleCell ( );
__declspec(implementation_key(5256)) IEditorCellPtr IObjectDetectorSurface::GetFrontOnlyCell ( );
__declspec(implementation_key(5257)) IEditorCellPtr IObjectDetectorSurface::GetNumberOfTermsCell ( );
__declspec(implementation_key(5258)) IEditorCellPtr IObjectDetectorSurface::RPowerICell ( long i );
__declspec(implementation_key(5259)) double IObjectDetectorSurface::GetRadius ( );
__declspec(implementation_key(5260)) void IObjectDetectorSurface::PutRadius ( double pRetVal );
__declspec(implementation_key(5261)) double IObjectDetectorSurface::GetConic ( );
__declspec(implementation_key(5262)) void IObjectDetectorSurface::PutConic ( double pRetVal );
__declspec(implementation_key(5263)) double IObjectDetectorSurface::GetMaxAperture ( );
__declspec(implementation_key(5264)) void IObjectDetectorSurface::PutMaxAperture ( double pRetVal );
__declspec(implementation_key(5265)) double IObjectDetectorSurface::GetMinAperture ( );
__declspec(implementation_key(5266)) void IObjectDetectorSurface::PutMinAperture ( double pRetVal );
__declspec(implementation_key(5267)) long IObjectDetectorSurface::GetNumberAZones ( );
__declspec(implementation_key(5268)) void IObjectDetectorSurface::PutNumberAZones ( long pRetVal );
__declspec(implementation_key(5269)) long IObjectDetectorSurface::GetNumberRZones ( );
__declspec(implementation_key(5270)) void IObjectDetectorSurface::PutNumberRZones ( long pRetVal );
__declspec(implementation_key(5271)) long IObjectDetectorSurface::GetDataType ( );
__declspec(implementation_key(5272)) void IObjectDetectorSurface::PutDataType ( long pRetVal );
__declspec(implementation_key(5273)) long IObjectDetectorSurface::GetColor ( );
__declspec(implementation_key(5274)) void IObjectDetectorSurface::PutColor ( long pRetVal );
__declspec(implementation_key(5275)) long IObjectDetectorSurface::GetScale ( );
__declspec(implementation_key(5276)) void IObjectDetectorSurface::PutScale ( long pRetVal );
__declspec(implementation_key(5277)) double IObjectDetectorSurface::GetMaxScale ( );
__declspec(implementation_key(5278)) void IObjectDetectorSurface::PutMaxScale ( double pRetVal );
__declspec(implementation_key(5279)) VARIANT_BOOL IObjectDetectorSurface::GetFrontOnly ( );
__declspec(implementation_key(5280)) void IObjectDetectorSurface::PutFrontOnly ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(5281)) long IObjectDetectorSurface::GetNumberOfTerms ( );
__declspec(implementation_key(5282)) void IObjectDetectorSurface::PutNumberOfTerms ( long pRetVal );
__declspec(implementation_key(5283)) double IObjectDetectorSurface::GetRPowerI ( long i );
__declspec(implementation_key(5284)) HRESULT IObjectDetectorSurface::SetRPowerI ( long i, double v );
__declspec(implementation_key(5285)) IEditorCellPtr IObjectDetectorVolume::GetXHalfWidthCell ( );
__declspec(implementation_key(5286)) IEditorCellPtr IObjectDetectorVolume::GetYHalfWidthCell ( );
__declspec(implementation_key(5287)) IEditorCellPtr IObjectDetectorVolume::GetZHalfWidthCell ( );
__declspec(implementation_key(5288)) IEditorCellPtr IObjectDetectorVolume::GetNumberXPixelsCell ( );
__declspec(implementation_key(5289)) IEditorCellPtr IObjectDetectorVolume::GetNumberYPixelsCell ( );
__declspec(implementation_key(5290)) IEditorCellPtr IObjectDetectorVolume::GetNumberZPixelsCell ( );
__declspec(implementation_key(5291)) double IObjectDetectorVolume::GetXHalfWidth ( );
__declspec(implementation_key(5292)) void IObjectDetectorVolume::PutXHalfWidth ( double pRetVal );
__declspec(implementation_key(5293)) double IObjectDetectorVolume::GetYHalfWidth ( );
__declspec(implementation_key(5294)) void IObjectDetectorVolume::PutYHalfWidth ( double pRetVal );
__declspec(implementation_key(5295)) double IObjectDetectorVolume::GetZHalfWidth ( );
__declspec(implementation_key(5296)) void IObjectDetectorVolume::PutZHalfWidth ( double pRetVal );
__declspec(implementation_key(5297)) long IObjectDetectorVolume::GetNumberXPixels ( );
__declspec(implementation_key(5298)) void IObjectDetectorVolume::PutNumberXPixels ( long pRetVal );
__declspec(implementation_key(5299)) long IObjectDetectorVolume::GetNumberYPixels ( );
__declspec(implementation_key(5300)) void IObjectDetectorVolume::PutNumberYPixels ( long pRetVal );
__declspec(implementation_key(5301)) long IObjectDetectorVolume::GetNumberZPixels ( );
__declspec(implementation_key(5302)) void IObjectDetectorVolume::PutNumberZPixels ( long pRetVal );
__declspec(implementation_key(5303)) IEditorCellPtr IObjectDiffractionGrating::GetRadius1Cell ( );
__declspec(implementation_key(5304)) IEditorCellPtr IObjectDiffractionGrating::GetConic1Cell ( );
__declspec(implementation_key(5305)) IEditorCellPtr IObjectDiffractionGrating::GetClear1Cell ( );
__declspec(implementation_key(5306)) IEditorCellPtr IObjectDiffractionGrating::GetEdge1Cell ( );
__declspec(implementation_key(5307)) IEditorCellPtr IObjectDiffractionGrating::GetThicknessCell ( );
__declspec(implementation_key(5308)) IEditorCellPtr IObjectDiffractionGrating::GetRadius2Cell ( );
__declspec(implementation_key(5309)) IEditorCellPtr IObjectDiffractionGrating::GetConic2Cell ( );
__declspec(implementation_key(5310)) IEditorCellPtr IObjectDiffractionGrating::GetClear2Cell ( );
__declspec(implementation_key(5311)) IEditorCellPtr IObjectDiffractionGrating::GetEdge2Cell ( );
__declspec(implementation_key(5312)) IEditorCellPtr IObjectDiffractionGrating::GetLinesPerMicronCell ( );
__declspec(implementation_key(5313)) IEditorCellPtr IObjectDiffractionGrating::GetDiffOrderCell ( );
__declspec(implementation_key(5314)) IEditorCellPtr IObjectDiffractionGrating::GetFormulaCell ( );
__declspec(implementation_key(5315)) IEditorCellPtr IObjectDiffractionGrating::GetCoeffOnYPower1Cell ( );
__declspec(implementation_key(5316)) IEditorCellPtr IObjectDiffractionGrating::GetCoeffOnYPower2Cell ( );
__declspec(implementation_key(5317)) IEditorCellPtr IObjectDiffractionGrating::GetCoeffOnYPower3Cell ( );
__declspec(implementation_key(5318)) IEditorCellPtr IObjectDiffractionGrating::GetCoeffOnYPower4Cell ( );
__declspec(implementation_key(5319)) double IObjectDiffractionGrating::GetRadius1 ( );
__declspec(implementation_key(5320)) void IObjectDiffractionGrating::PutRadius1 ( double pRetVal );
__declspec(implementation_key(5321)) double IObjectDiffractionGrating::GetConic1 ( );
__declspec(implementation_key(5322)) void IObjectDiffractionGrating::PutConic1 ( double pRetVal );
__declspec(implementation_key(5323)) double IObjectDiffractionGrating::GetClear1 ( );
__declspec(implementation_key(5324)) void IObjectDiffractionGrating::PutClear1 ( double pRetVal );
__declspec(implementation_key(5325)) double IObjectDiffractionGrating::GetEdge1 ( );
__declspec(implementation_key(5326)) void IObjectDiffractionGrating::PutEdge1 ( double pRetVal );
__declspec(implementation_key(5327)) double IObjectDiffractionGrating::GetThickness ( );
__declspec(implementation_key(5328)) void IObjectDiffractionGrating::PutThickness ( double pRetVal );
__declspec(implementation_key(5329)) double IObjectDiffractionGrating::GetRadius2 ( );
__declspec(implementation_key(5330)) void IObjectDiffractionGrating::PutRadius2 ( double pRetVal );
__declspec(implementation_key(5331)) double IObjectDiffractionGrating::GetConic2 ( );
__declspec(implementation_key(5332)) void IObjectDiffractionGrating::PutConic2 ( double pRetVal );
__declspec(implementation_key(5333)) double IObjectDiffractionGrating::GetClear2 ( );
__declspec(implementation_key(5334)) void IObjectDiffractionGrating::PutClear2 ( double pRetVal );
__declspec(implementation_key(5335)) double IObjectDiffractionGrating::GetEdge2 ( );
__declspec(implementation_key(5336)) void IObjectDiffractionGrating::PutEdge2 ( double pRetVal );
__declspec(implementation_key(5337)) double IObjectDiffractionGrating::GetLinesPerMicron ( );
__declspec(implementation_key(5338)) void IObjectDiffractionGrating::PutLinesPerMicron ( double pRetVal );
__declspec(implementation_key(5339)) double IObjectDiffractionGrating::GetDiffOrder ( );
__declspec(implementation_key(5340)) void IObjectDiffractionGrating::PutDiffOrder ( double pRetVal );
__declspec(implementation_key(5341)) long IObjectDiffractionGrating::GetFormula ( );
__declspec(implementation_key(5342)) void IObjectDiffractionGrating::PutFormula ( long pRetVal );
__declspec(implementation_key(5343)) double IObjectDiffractionGrating::GetCoeffOnYPower1 ( );
__declspec(implementation_key(5344)) void IObjectDiffractionGrating::PutCoeffOnYPower1 ( double pRetVal );
__declspec(implementation_key(5345)) double IObjectDiffractionGrating::GetCoeffOnYPower2 ( );
__declspec(implementation_key(5346)) void IObjectDiffractionGrating::PutCoeffOnYPower2 ( double pRetVal );
__declspec(implementation_key(5347)) double IObjectDiffractionGrating::GetCoeffOnYPower3 ( );
__declspec(implementation_key(5348)) void IObjectDiffractionGrating::PutCoeffOnYPower3 ( double pRetVal );
__declspec(implementation_key(5349)) double IObjectDiffractionGrating::GetCoeffOnYPower4 ( );
__declspec(implementation_key(5350)) void IObjectDiffractionGrating::PutCoeffOnYPower4 ( double pRetVal );
__declspec(implementation_key(5351)) IEditorCellPtr IObjectDualBEFSurface::GetXHalfWidthCell ( );
__declspec(implementation_key(5352)) IEditorCellPtr IObjectDualBEFSurface::GetYHalfWidthCell ( );
__declspec(implementation_key(5353)) IEditorCellPtr IObjectDualBEFSurface::GetRXCell ( );
__declspec(implementation_key(5354)) IEditorCellPtr IObjectDualBEFSurface::GetRYCell ( );
__declspec(implementation_key(5355)) IEditorCellPtr IObjectDualBEFSurface::GetTXCell ( );
__declspec(implementation_key(5356)) IEditorCellPtr IObjectDualBEFSurface::GetTYCell ( );
__declspec(implementation_key(5357)) double IObjectDualBEFSurface::GetXHalfWidth ( );
__declspec(implementation_key(5358)) void IObjectDualBEFSurface::PutXHalfWidth ( double pRetVal );
__declspec(implementation_key(5359)) double IObjectDualBEFSurface::GetYHalfWidth ( );
__declspec(implementation_key(5360)) void IObjectDualBEFSurface::PutYHalfWidth ( double pRetVal );
__declspec(implementation_key(5361)) double IObjectDualBEFSurface::GetRX ( );
__declspec(implementation_key(5362)) void IObjectDualBEFSurface::PutRX ( double pRetVal );
__declspec(implementation_key(5363)) double IObjectDualBEFSurface::GetRY ( );
__declspec(implementation_key(5364)) void IObjectDualBEFSurface::PutRY ( double pRetVal );
__declspec(implementation_key(5365)) double IObjectDualBEFSurface::GetTX ( );
__declspec(implementation_key(5366)) void IObjectDualBEFSurface::PutTX ( double pRetVal );
__declspec(implementation_key(5367)) double IObjectDualBEFSurface::GetTY ( );
__declspec(implementation_key(5368)) void IObjectDualBEFSurface::PutTY ( double pRetVal );
__declspec(implementation_key(5369)) IEditorCellPtr IObjectEllipse::GetXHalfWidthCell ( );
__declspec(implementation_key(5370)) IEditorCellPtr IObjectEllipse::GetYHalfWidthCell ( );
__declspec(implementation_key(5371)) double IObjectEllipse::GetXHalfWidth ( );
__declspec(implementation_key(5372)) void IObjectEllipse::PutXHalfWidth ( double pRetVal );
__declspec(implementation_key(5373)) double IObjectEllipse::GetYHalfWidth ( );
__declspec(implementation_key(5374)) void IObjectEllipse::PutYHalfWidth ( double pRetVal );
__declspec(implementation_key(5375)) IEditorCellPtr IObjectEllipticalVolume::GetFrontXHalfWidthCell ( );
__declspec(implementation_key(5376)) IEditorCellPtr IObjectEllipticalVolume::GetFrontYHalfWidthCell ( );
__declspec(implementation_key(5377)) IEditorCellPtr IObjectEllipticalVolume::GetBackXHalfWidthCell ( );
__declspec(implementation_key(5378)) IEditorCellPtr IObjectEllipticalVolume::GetBackYHalfWidthCell ( );
__declspec(implementation_key(5379)) IEditorCellPtr IObjectEllipticalVolume::GetLengthCell ( );
__declspec(implementation_key(5380)) IEditorCellPtr IObjectEllipticalVolume::GetIsVolumeCell ( );
__declspec(implementation_key(5381)) double IObjectEllipticalVolume::GetFrontXHalfWidth ( );
__declspec(implementation_key(5382)) void IObjectEllipticalVolume::PutFrontXHalfWidth ( double pRetVal );
__declspec(implementation_key(5383)) double IObjectEllipticalVolume::GetFrontYHalfWidth ( );
__declspec(implementation_key(5384)) void IObjectEllipticalVolume::PutFrontYHalfWidth ( double pRetVal );
__declspec(implementation_key(5385)) double IObjectEllipticalVolume::GetBackXHalfWidth ( );
__declspec(implementation_key(5386)) void IObjectEllipticalVolume::PutBackXHalfWidth ( double pRetVal );
__declspec(implementation_key(5387)) double IObjectEllipticalVolume::GetBackYHalfWidth ( );
__declspec(implementation_key(5388)) void IObjectEllipticalVolume::PutBackYHalfWidth ( double pRetVal );
__declspec(implementation_key(5389)) double IObjectEllipticalVolume::GetLength ( );
__declspec(implementation_key(5390)) void IObjectEllipticalVolume::PutLength ( double pRetVal );
__declspec(implementation_key(5391)) VARIANT_BOOL IObjectEllipticalVolume::GetIsVolume ( );
__declspec(implementation_key(5392)) void IObjectEllipticalVolume::PutIsVolume ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(5393)) IEditorCellPtr IObjectEvenAsphereLens::GetClear1Cell ( );
__declspec(implementation_key(5394)) IEditorCellPtr IObjectEvenAsphereLens::GetThicknessCell ( );
__declspec(implementation_key(5395)) IEditorCellPtr IObjectEvenAsphereLens::GetRadius1Cell ( );
__declspec(implementation_key(5396)) IEditorCellPtr IObjectEvenAsphereLens::GetConic1Cell ( );
__declspec(implementation_key(5397)) IEditorCellPtr IObjectEvenAsphereLens::GetCoeff1OnRPower2Cell ( );
__declspec(implementation_key(5398)) IEditorCellPtr IObjectEvenAsphereLens::GetCoeff1OnRPower4Cell ( );
__declspec(implementation_key(5399)) IEditorCellPtr IObjectEvenAsphereLens::GetCoeff1OnRPower6Cell ( );
__declspec(implementation_key(5400)) IEditorCellPtr IObjectEvenAsphereLens::GetCoeff1OnRPower8Cell ( );
__declspec(implementation_key(5401)) IEditorCellPtr IObjectEvenAsphereLens::GetCoeff1OnRPower10Cell ( );
__declspec(implementation_key(5402)) IEditorCellPtr IObjectEvenAsphereLens::GetCoeff1OnRPower12Cell ( );
__declspec(implementation_key(5403)) IEditorCellPtr IObjectEvenAsphereLens::GetCoeff1OnRPower14Cell ( );
__declspec(implementation_key(5404)) IEditorCellPtr IObjectEvenAsphereLens::GetCoeff1OnRPower16Cell ( );
__declspec(implementation_key(5405)) IEditorCellPtr IObjectEvenAsphereLens::GetRadius2Cell ( );
__declspec(implementation_key(5406)) IEditorCellPtr IObjectEvenAsphereLens::GetConic2Cell ( );
__declspec(implementation_key(5407)) IEditorCellPtr IObjectEvenAsphereLens::GetCoeff2OnRPower2Cell ( );
__declspec(implementation_key(5408)) IEditorCellPtr IObjectEvenAsphereLens::GetCoeff2OnRPower4Cell ( );
__declspec(implementation_key(5409)) IEditorCellPtr IObjectEvenAsphereLens::GetCoeff2OnRPower6Cell ( );
__declspec(implementation_key(5410)) IEditorCellPtr IObjectEvenAsphereLens::GetCoeff2OnRPower8Cell ( );
__declspec(implementation_key(5411)) IEditorCellPtr IObjectEvenAsphereLens::GetCoeff2OnRPower10Cell ( );
__declspec(implementation_key(5412)) IEditorCellPtr IObjectEvenAsphereLens::GetCoeff2OnRPower12Cell ( );
__declspec(implementation_key(5413)) IEditorCellPtr IObjectEvenAsphereLens::GetCoeff2OnRPower14Cell ( );
__declspec(implementation_key(5414)) IEditorCellPtr IObjectEvenAsphereLens::GetCoeff2OnRPower16Cell ( );
__declspec(implementation_key(5415)) IEditorCellPtr IObjectEvenAsphereLens::GetEdge1Cell ( );
__declspec(implementation_key(5416)) IEditorCellPtr IObjectEvenAsphereLens::GetClear2Cell ( );
__declspec(implementation_key(5417)) IEditorCellPtr IObjectEvenAsphereLens::GetEdge2Cell ( );
__declspec(implementation_key(5418)) double IObjectEvenAsphereLens::GetClear1 ( );
__declspec(implementation_key(5419)) void IObjectEvenAsphereLens::PutClear1 ( double pRetVal );
__declspec(implementation_key(5420)) double IObjectEvenAsphereLens::GetThickness ( );
__declspec(implementation_key(5421)) void IObjectEvenAsphereLens::PutThickness ( double pRetVal );
__declspec(implementation_key(5422)) double IObjectEvenAsphereLens::GetRadius1 ( );
__declspec(implementation_key(5423)) void IObjectEvenAsphereLens::PutRadius1 ( double pRetVal );
__declspec(implementation_key(5424)) double IObjectEvenAsphereLens::GetConic1 ( );
__declspec(implementation_key(5425)) void IObjectEvenAsphereLens::PutConic1 ( double pRetVal );
__declspec(implementation_key(5426)) double IObjectEvenAsphereLens::GetCoeff1OnRPower2 ( );
__declspec(implementation_key(5427)) void IObjectEvenAsphereLens::PutCoeff1OnRPower2 ( double pRetVal );
__declspec(implementation_key(5428)) double IObjectEvenAsphereLens::GetCoeff1OnRPower4 ( );
__declspec(implementation_key(5429)) void IObjectEvenAsphereLens::PutCoeff1OnRPower4 ( double pRetVal );
__declspec(implementation_key(5430)) double IObjectEvenAsphereLens::GetCoeff1OnRPower6 ( );
__declspec(implementation_key(5431)) void IObjectEvenAsphereLens::PutCoeff1OnRPower6 ( double pRetVal );
__declspec(implementation_key(5432)) double IObjectEvenAsphereLens::GetCoeff1OnRPower8 ( );
__declspec(implementation_key(5433)) void IObjectEvenAsphereLens::PutCoeff1OnRPower8 ( double pRetVal );
__declspec(implementation_key(5434)) double IObjectEvenAsphereLens::GetCoeff1OnRPower10 ( );
__declspec(implementation_key(5435)) void IObjectEvenAsphereLens::PutCoeff1OnRPower10 ( double pRetVal );
__declspec(implementation_key(5436)) double IObjectEvenAsphereLens::GetCoeff1OnRPower12 ( );
__declspec(implementation_key(5437)) void IObjectEvenAsphereLens::PutCoeff1OnRPower12 ( double pRetVal );
__declspec(implementation_key(5438)) double IObjectEvenAsphereLens::GetCoeff1OnRPower14 ( );
__declspec(implementation_key(5439)) void IObjectEvenAsphereLens::PutCoeff1OnRPower14 ( double pRetVal );
__declspec(implementation_key(5440)) double IObjectEvenAsphereLens::GetCoeff1OnRPower16 ( );
__declspec(implementation_key(5441)) void IObjectEvenAsphereLens::PutCoeff1OnRPower16 ( double pRetVal );
__declspec(implementation_key(5442)) double IObjectEvenAsphereLens::GetRadius2 ( );
__declspec(implementation_key(5443)) void IObjectEvenAsphereLens::PutRadius2 ( double pRetVal );
__declspec(implementation_key(5444)) double IObjectEvenAsphereLens::GetConic2 ( );
__declspec(implementation_key(5445)) void IObjectEvenAsphereLens::PutConic2 ( double pRetVal );
__declspec(implementation_key(5446)) double IObjectEvenAsphereLens::GetCoeff2OnRPower2 ( );
__declspec(implementation_key(5447)) void IObjectEvenAsphereLens::PutCoeff2OnRPower2 ( double pRetVal );
__declspec(implementation_key(5448)) double IObjectEvenAsphereLens::GetCoeff2OnRPower4 ( );
__declspec(implementation_key(5449)) void IObjectEvenAsphereLens::PutCoeff2OnRPower4 ( double pRetVal );
__declspec(implementation_key(5450)) double IObjectEvenAsphereLens::GetCoeff2OnRPower6 ( );
__declspec(implementation_key(5451)) void IObjectEvenAsphereLens::PutCoeff2OnRPower6 ( double pRetVal );
__declspec(implementation_key(5452)) double IObjectEvenAsphereLens::GetCoeff2OnRPower8 ( );
__declspec(implementation_key(5453)) void IObjectEvenAsphereLens::PutCoeff2OnRPower8 ( double pRetVal );
__declspec(implementation_key(5454)) double IObjectEvenAsphereLens::GetCoeff2OnRPower10 ( );
__declspec(implementation_key(5455)) void IObjectEvenAsphereLens::PutCoeff2OnRPower10 ( double pRetVal );
__declspec(implementation_key(5456)) double IObjectEvenAsphereLens::GetCoeff2OnRPower12 ( );
__declspec(implementation_key(5457)) void IObjectEvenAsphereLens::PutCoeff2OnRPower12 ( double pRetVal );
__declspec(implementation_key(5458)) double IObjectEvenAsphereLens::GetCoeff2OnRPower14 ( );
__declspec(implementation_key(5459)) void IObjectEvenAsphereLens::PutCoeff2OnRPower14 ( double pRetVal );
__declspec(implementation_key(5460)) double IObjectEvenAsphereLens::GetCoeff2OnRPower16 ( );
__declspec(implementation_key(5461)) void IObjectEvenAsphereLens::PutCoeff2OnRPower16 ( double pRetVal );
__declspec(implementation_key(5462)) double IObjectEvenAsphereLens::GetEdge1 ( );
__declspec(implementation_key(5463)) void IObjectEvenAsphereLens::PutEdge1 ( double pRetVal );
__declspec(implementation_key(5464)) double IObjectEvenAsphereLens::GetClear2 ( );
__declspec(implementation_key(5465)) void IObjectEvenAsphereLens::PutClear2 ( double pRetVal );
__declspec(implementation_key(5466)) double IObjectEvenAsphereLens::GetEdge2 ( );
__declspec(implementation_key(5467)) void IObjectEvenAsphereLens::PutEdge2 ( double pRetVal );
__declspec(implementation_key(5468)) IEditorCellPtr IObjectExtendedOddAsphereLens::GetRadialHeightCell ( );
__declspec(implementation_key(5469)) IEditorCellPtr IObjectExtendedOddAsphereLens::GetXHalfWidthCell ( );
__declspec(implementation_key(5470)) IEditorCellPtr IObjectExtendedOddAsphereLens::GetThicknessCell ( );
__declspec(implementation_key(5471)) IEditorCellPtr IObjectExtendedOddAsphereLens::GetFrontRCell ( );
__declspec(implementation_key(5472)) IEditorCellPtr IObjectExtendedOddAsphereLens::GetFrontKCell ( );
__declspec(implementation_key(5473)) IEditorCellPtr IObjectExtendedOddAsphereLens::GetFrontNormRadCell ( );
__declspec(implementation_key(5474)) IEditorCellPtr IObjectExtendedOddAsphereLens::GetFrontNumTermsCell ( );
__declspec(implementation_key(5475)) IEditorCellPtr IObjectExtendedOddAsphereLens::GetRearRCell ( );
__declspec(implementation_key(5476)) IEditorCellPtr IObjectExtendedOddAsphereLens::GetRearKCell ( );
__declspec(implementation_key(5477)) IEditorCellPtr IObjectExtendedOddAsphereLens::GetRearNormRadCell ( );
__declspec(implementation_key(5478)) IEditorCellPtr IObjectExtendedOddAsphereLens::GetRearNumTermsCell ( );
__declspec(implementation_key(5479)) IEditorCellPtr IObjectExtendedOddAsphereLens::GetFrontTermCell ( long termNumber );
__declspec(implementation_key(5480)) IEditorCellPtr IObjectExtendedOddAsphereLens::GetRearTermCell ( long termNumber );
__declspec(implementation_key(5481)) double IObjectExtendedOddAsphereLens::GetRadialHeight ( );
__declspec(implementation_key(5482)) void IObjectExtendedOddAsphereLens::PutRadialHeight ( double pRetVal );
__declspec(implementation_key(5483)) double IObjectExtendedOddAsphereLens::GetXHalfWidth ( );
__declspec(implementation_key(5484)) void IObjectExtendedOddAsphereLens::PutXHalfWidth ( double pRetVal );
__declspec(implementation_key(5485)) double IObjectExtendedOddAsphereLens::GetThickness ( );
__declspec(implementation_key(5486)) void IObjectExtendedOddAsphereLens::PutThickness ( double pRetVal );
__declspec(implementation_key(5487)) double IObjectExtendedOddAsphereLens::GetFrontR ( );
__declspec(implementation_key(5488)) void IObjectExtendedOddAsphereLens::PutFrontR ( double pRetVal );
__declspec(implementation_key(5489)) double IObjectExtendedOddAsphereLens::GetFrontK ( );
__declspec(implementation_key(5490)) void IObjectExtendedOddAsphereLens::PutFrontK ( double pRetVal );
__declspec(implementation_key(5491)) double IObjectExtendedOddAsphereLens::GetFrontNormRad ( );
__declspec(implementation_key(5492)) void IObjectExtendedOddAsphereLens::PutFrontNormRad ( double pRetVal );
__declspec(implementation_key(5493)) long IObjectExtendedOddAsphereLens::GetFrontNumTerms ( );
__declspec(implementation_key(5494)) void IObjectExtendedOddAsphereLens::PutFrontNumTerms ( long pRetVal );
__declspec(implementation_key(5495)) double IObjectExtendedOddAsphereLens::GetRearR ( );
__declspec(implementation_key(5496)) void IObjectExtendedOddAsphereLens::PutRearR ( double pRetVal );
__declspec(implementation_key(5497)) double IObjectExtendedOddAsphereLens::GetRearK ( );
__declspec(implementation_key(5498)) void IObjectExtendedOddAsphereLens::PutRearK ( double pRetVal );
__declspec(implementation_key(5499)) double IObjectExtendedOddAsphereLens::GetRearNormRad ( );
__declspec(implementation_key(5500)) void IObjectExtendedOddAsphereLens::PutRearNormRad ( double pRetVal );
__declspec(implementation_key(5501)) long IObjectExtendedOddAsphereLens::GetRearNumTerms ( );
__declspec(implementation_key(5502)) void IObjectExtendedOddAsphereLens::PutRearNumTerms ( long pRetVal );
__declspec(implementation_key(5503)) double IObjectExtendedOddAsphereLens::GetFrontTerm ( long termNumber );
__declspec(implementation_key(5504)) HRESULT IObjectExtendedOddAsphereLens::SetFrontTerm ( long termNumber, double Value );
__declspec(implementation_key(5505)) double IObjectExtendedOddAsphereLens::GetRearTerm ( long termNumber );
__declspec(implementation_key(5506)) HRESULT IObjectExtendedOddAsphereLens::SetRearTerm ( long termNumber, double Value );
__declspec(implementation_key(5507)) IEditorCellPtr IObjectExtendedPolynomialLens::GetRadialHeightCell ( );
__declspec(implementation_key(5508)) IEditorCellPtr IObjectExtendedPolynomialLens::GetXHalfWidthCell ( );
__declspec(implementation_key(5509)) IEditorCellPtr IObjectExtendedPolynomialLens::GetThicknessCell ( );
__declspec(implementation_key(5510)) IEditorCellPtr IObjectExtendedPolynomialLens::GetFrontRCell ( );
__declspec(implementation_key(5511)) IEditorCellPtr IObjectExtendedPolynomialLens::GetFrontKCell ( );
__declspec(implementation_key(5512)) IEditorCellPtr IObjectExtendedPolynomialLens::GetFrontNormRadiusCell ( );
__declspec(implementation_key(5513)) IEditorCellPtr IObjectExtendedPolynomialLens::GetFrontNumTermsCell ( );
__declspec(implementation_key(5514)) IEditorCellPtr IObjectExtendedPolynomialLens::GetRearRCell ( );
__declspec(implementation_key(5515)) IEditorCellPtr IObjectExtendedPolynomialLens::GetRearKCell ( );
__declspec(implementation_key(5516)) IEditorCellPtr IObjectExtendedPolynomialLens::GetRearNormRadiusCell ( );
__declspec(implementation_key(5517)) IEditorCellPtr IObjectExtendedPolynomialLens::GetRearNumTermsCell ( );
__declspec(implementation_key(5518)) IEditorCellPtr IObjectExtendedPolynomialLens::GetFrontTermCell ( long termNumber );
__declspec(implementation_key(5519)) IEditorCellPtr IObjectExtendedPolynomialLens::GetRearTermCell ( long termNumber );
__declspec(implementation_key(5520)) double IObjectExtendedPolynomialLens::GetRadialHeight ( );
__declspec(implementation_key(5521)) void IObjectExtendedPolynomialLens::PutRadialHeight ( double pRetVal );
__declspec(implementation_key(5522)) double IObjectExtendedPolynomialLens::GetXHalfWidth ( );
__declspec(implementation_key(5523)) void IObjectExtendedPolynomialLens::PutXHalfWidth ( double pRetVal );
__declspec(implementation_key(5524)) double IObjectExtendedPolynomialLens::GetThickness ( );
__declspec(implementation_key(5525)) void IObjectExtendedPolynomialLens::PutThickness ( double pRetVal );
__declspec(implementation_key(5526)) double IObjectExtendedPolynomialLens::GetFrontR ( );
__declspec(implementation_key(5527)) void IObjectExtendedPolynomialLens::PutFrontR ( double pRetVal );
__declspec(implementation_key(5528)) double IObjectExtendedPolynomialLens::GetFrontK ( );
__declspec(implementation_key(5529)) void IObjectExtendedPolynomialLens::PutFrontK ( double pRetVal );
__declspec(implementation_key(5530)) double IObjectExtendedPolynomialLens::GetFrontNormRadius ( );
__declspec(implementation_key(5531)) void IObjectExtendedPolynomialLens::PutFrontNormRadius ( double pRetVal );
__declspec(implementation_key(5532)) long IObjectExtendedPolynomialLens::GetFrontNumTerms ( );
__declspec(implementation_key(5533)) void IObjectExtendedPolynomialLens::PutFrontNumTerms ( long pRetVal );
__declspec(implementation_key(5534)) double IObjectExtendedPolynomialLens::GetRearR ( );
__declspec(implementation_key(5535)) void IObjectExtendedPolynomialLens::PutRearR ( double pRetVal );
__declspec(implementation_key(5536)) double IObjectExtendedPolynomialLens::GetRearK ( );
__declspec(implementation_key(5537)) void IObjectExtendedPolynomialLens::PutRearK ( double pRetVal );
__declspec(implementation_key(5538)) double IObjectExtendedPolynomialLens::GetRearNormRadius ( );
__declspec(implementation_key(5539)) void IObjectExtendedPolynomialLens::PutRearNormRadius ( double pRetVal );
__declspec(implementation_key(5540)) long IObjectExtendedPolynomialLens::GetRearNumTerms ( );
__declspec(implementation_key(5541)) void IObjectExtendedPolynomialLens::PutRearNumTerms ( long pRetVal );
__declspec(implementation_key(5542)) double IObjectExtendedPolynomialLens::GetFrontTerm ( long termNumber );
__declspec(implementation_key(5543)) HRESULT IObjectExtendedPolynomialLens::SetFrontTerm ( long termNumber, double Value );
__declspec(implementation_key(5544)) double IObjectExtendedPolynomialLens::GetRearTerm ( long termNumber );
__declspec(implementation_key(5545)) HRESULT IObjectExtendedPolynomialLens::SetRearTerm ( long termNumber, double Value );
__declspec(implementation_key(5546)) IEditorCellPtr IObjectExtendedPolynomialSurface::GetRadialHeightCell ( );
__declspec(implementation_key(5547)) IEditorCellPtr IObjectExtendedPolynomialSurface::GetRadiusCell ( );
__declspec(implementation_key(5548)) IEditorCellPtr IObjectExtendedPolynomialSurface::GetConicCell ( );
__declspec(implementation_key(5549)) IEditorCellPtr IObjectExtendedPolynomialSurface::GetNormRadCell ( );
__declspec(implementation_key(5550)) IEditorCellPtr IObjectExtendedPolynomialSurface::GetNumberOfTermsCell ( );
__declspec(implementation_key(5551)) double IObjectExtendedPolynomialSurface::GetRadialHeight ( );
__declspec(implementation_key(5552)) void IObjectExtendedPolynomialSurface::PutRadialHeight ( double pRetVal );
__declspec(implementation_key(5553)) double IObjectExtendedPolynomialSurface::GetRadius ( );
__declspec(implementation_key(5554)) void IObjectExtendedPolynomialSurface::PutRadius ( double pRetVal );
__declspec(implementation_key(5555)) double IObjectExtendedPolynomialSurface::GetConic ( );
__declspec(implementation_key(5556)) void IObjectExtendedPolynomialSurface::PutConic ( double pRetVal );
__declspec(implementation_key(5557)) double IObjectExtendedPolynomialSurface::GetNormRad ( );
__declspec(implementation_key(5558)) void IObjectExtendedPolynomialSurface::PutNormRad ( double pRetVal );
__declspec(implementation_key(5559)) long IObjectExtendedPolynomialSurface::GetNumberOfTerms ( );
__declspec(implementation_key(5560)) void IObjectExtendedPolynomialSurface::PutNumberOfTerms ( long pRetVal );
__declspec(implementation_key(5561)) IEditorCellPtr IObjectExtruded::GetLengthZCell ( );
__declspec(implementation_key(5562)) IEditorCellPtr IObjectExtruded::GetFrontXScaleCell ( );
__declspec(implementation_key(5563)) IEditorCellPtr IObjectExtruded::GetFrontYScaleCell ( );
__declspec(implementation_key(5564)) IEditorCellPtr IObjectExtruded::GetRearXScaleCell ( );
__declspec(implementation_key(5565)) IEditorCellPtr IObjectExtruded::GetRearYScaleCell ( );
__declspec(implementation_key(5566)) IEditorCellPtr IObjectExtruded::GetRearXDecenterCell ( );
__declspec(implementation_key(5567)) IEditorCellPtr IObjectExtruded::GetRearYDecenterCell ( );
__declspec(implementation_key(5568)) double IObjectExtruded::GetLengthZ ( );
__declspec(implementation_key(5569)) void IObjectExtruded::PutLengthZ ( double pRetVal );
__declspec(implementation_key(5570)) double IObjectExtruded::GetFrontXScale ( );
__declspec(implementation_key(5571)) void IObjectExtruded::PutFrontXScale ( double pRetVal );
__declspec(implementation_key(5572)) double IObjectExtruded::GetFrontYScale ( );
__declspec(implementation_key(5573)) void IObjectExtruded::PutFrontYScale ( double pRetVal );
__declspec(implementation_key(5574)) double IObjectExtruded::GetRearXScale ( );
__declspec(implementation_key(5575)) void IObjectExtruded::PutRearXScale ( double pRetVal );
__declspec(implementation_key(5576)) double IObjectExtruded::GetRearYScale ( );
__declspec(implementation_key(5577)) void IObjectExtruded::PutRearYScale ( double pRetVal );
__declspec(implementation_key(5578)) double IObjectExtruded::GetRearXDecenter ( );
__declspec(implementation_key(5579)) void IObjectExtruded::PutRearXDecenter ( double pRetVal );
__declspec(implementation_key(5580)) double IObjectExtruded::GetRearYDecenter ( );
__declspec(implementation_key(5581)) void IObjectExtruded::PutRearYDecenter ( double pRetVal );
__declspec(implementation_key(5582)) IEditorCellPtr IObjectFacetedSurface::GetRadiusCell ( );
__declspec(implementation_key(5583)) IEditorCellPtr IObjectFacetedSurface::GetConicCell ( );
__declspec(implementation_key(5584)) IEditorCellPtr IObjectFacetedSurface::GetShapeCell ( );
__declspec(implementation_key(5585)) IEditorCellPtr IObjectFacetedSurface::GetMinApertureCell ( );
__declspec(implementation_key(5586)) IEditorCellPtr IObjectFacetedSurface::GetXHalfWidthCell ( );
__declspec(implementation_key(5587)) IEditorCellPtr IObjectFacetedSurface::GetMaxApertureCell ( );
__declspec(implementation_key(5588)) IEditorCellPtr IObjectFacetedSurface::GetYHalfWidthCell ( );
__declspec(implementation_key(5589)) IEditorCellPtr IObjectFacetedSurface::GetRadFacetsCell ( );
__declspec(implementation_key(5590)) IEditorCellPtr IObjectFacetedSurface::GetXFacetsCell ( );
__declspec(implementation_key(5591)) IEditorCellPtr IObjectFacetedSurface::GetAngFacetsCell ( );
__declspec(implementation_key(5592)) IEditorCellPtr IObjectFacetedSurface::GetYFacetsCell ( );
__declspec(implementation_key(5593)) double IObjectFacetedSurface::GetRadius ( );
__declspec(implementation_key(5594)) void IObjectFacetedSurface::PutRadius ( double pRetVal );
__declspec(implementation_key(5595)) double IObjectFacetedSurface::GetConic ( );
__declspec(implementation_key(5596)) void IObjectFacetedSurface::PutConic ( double pRetVal );
__declspec(implementation_key(5597)) enum ApertureShapes IObjectFacetedSurface::GetShape ( );
__declspec(implementation_key(5598)) void IObjectFacetedSurface::PutShape ( enum ApertureShapes pRetVal );
__declspec(implementation_key(5599)) double IObjectFacetedSurface::GetMinAperture ( );
__declspec(implementation_key(5600)) void IObjectFacetedSurface::PutMinAperture ( double pRetVal );
__declspec(implementation_key(5601)) double IObjectFacetedSurface::GetXHalfWidth ( );
__declspec(implementation_key(5602)) void IObjectFacetedSurface::PutXHalfWidth ( double pRetVal );
__declspec(implementation_key(5603)) double IObjectFacetedSurface::GetMaxAperture ( );
__declspec(implementation_key(5604)) void IObjectFacetedSurface::PutMaxAperture ( double pRetVal );
__declspec(implementation_key(5605)) double IObjectFacetedSurface::GetYHalfWidth ( );
__declspec(implementation_key(5606)) void IObjectFacetedSurface::PutYHalfWidth ( double pRetVal );
__declspec(implementation_key(5607)) long IObjectFacetedSurface::GetRadFacets ( );
__declspec(implementation_key(5608)) void IObjectFacetedSurface::PutRadFacets ( long pRetVal );
__declspec(implementation_key(5609)) long IObjectFacetedSurface::GetXFacets ( );
__declspec(implementation_key(5610)) void IObjectFacetedSurface::PutXFacets ( long pRetVal );
__declspec(implementation_key(5611)) long IObjectFacetedSurface::GetAngFacets ( );
__declspec(implementation_key(5612)) void IObjectFacetedSurface::PutAngFacets ( long pRetVal );
__declspec(implementation_key(5613)) long IObjectFacetedSurface::GetYFacets ( );
__declspec(implementation_key(5614)) void IObjectFacetedSurface::PutYFacets ( long pRetVal );
__declspec(implementation_key(5615)) IEditorCellPtr IObjectFreeformZ::GetNumberOfPointsCell ( );
__declspec(implementation_key(5616)) IEditorCellPtr IObjectFreeformZ::GetIsVolumeCell ( );
__declspec(implementation_key(5617)) IEditorCellPtr IObjectFreeformZ::GetYCell ( long pointN );
__declspec(implementation_key(5618)) IEditorCellPtr IObjectFreeformZ::GetZCell ( long pointN );
__declspec(implementation_key(5619)) long IObjectFreeformZ::GetNumberOfPoints ( );
__declspec(implementation_key(5620)) void IObjectFreeformZ::PutNumberOfPoints ( long pRetVal );
__declspec(implementation_key(5621)) VARIANT_BOOL IObjectFreeformZ::GetIsVolume ( );
__declspec(implementation_key(5622)) void IObjectFreeformZ::PutIsVolume ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(5623)) double IObjectFreeformZ::GetY ( long pointN );
__declspec(implementation_key(5624)) HRESULT IObjectFreeformZ::SetY ( long pointN, double Value );
__declspec(implementation_key(5625)) double IObjectFreeformZ::GetZ ( long pointN );
__declspec(implementation_key(5626)) HRESULT IObjectFreeformZ::SetZ ( long pointN, double Value );
__declspec(implementation_key(5627)) IEditorCellPtr IObjectFresnel1::GetRadialHeightCell ( );
__declspec(implementation_key(5628)) IEditorCellPtr IObjectFresnel1::GetXHalfWidthCell ( );
__declspec(implementation_key(5629)) IEditorCellPtr IObjectFresnel1::GetPlusDepthPerMinusFreqCell ( );
__declspec(implementation_key(5630)) IEditorCellPtr IObjectFresnel1::GetPitchDegCell ( );
__declspec(implementation_key(5631)) IEditorCellPtr IObjectFresnel1::GetThicknessCell ( );
__declspec(implementation_key(5632)) IEditorCellPtr IObjectFresnel1::GetRadiusCell ( );
__declspec(implementation_key(5633)) IEditorCellPtr IObjectFresnel1::GetConicCell ( );
__declspec(implementation_key(5634)) IEditorCellPtr IObjectFresnel1::GetCoeffRPower2Cell ( );
__declspec(implementation_key(5635)) IEditorCellPtr IObjectFresnel1::GetCoeffRPower4Cell ( );
__declspec(implementation_key(5636)) IEditorCellPtr IObjectFresnel1::GetCoeffRPower6Cell ( );
__declspec(implementation_key(5637)) IEditorCellPtr IObjectFresnel1::GetCoeffRPower8Cell ( );
__declspec(implementation_key(5638)) IEditorCellPtr IObjectFresnel1::GetCoeffRPower10Cell ( );
__declspec(implementation_key(5639)) IEditorCellPtr IObjectFresnel1::GetCoeffRPower12Cell ( );
__declspec(implementation_key(5640)) IEditorCellPtr IObjectFresnel1::GetCoeffRPower14Cell ( );
__declspec(implementation_key(5641)) IEditorCellPtr IObjectFresnel1::GetCoeffRPower16Cell ( );
__declspec(implementation_key(5642)) IEditorCellPtr IObjectFresnel1::GetNumberOfSegements16Cell ( );
__declspec(implementation_key(5643)) double IObjectFresnel1::GetRadialHeight ( );
__declspec(implementation_key(5644)) void IObjectFresnel1::PutRadialHeight ( double pRetVal );
__declspec(implementation_key(5645)) double IObjectFresnel1::GetXHalfWidth ( );
__declspec(implementation_key(5646)) void IObjectFresnel1::PutXHalfWidth ( double pRetVal );
__declspec(implementation_key(5647)) double IObjectFresnel1::GetPlusDepthPerMinusFreq ( );
__declspec(implementation_key(5648)) void IObjectFresnel1::PutPlusDepthPerMinusFreq ( double pRetVal );
__declspec(implementation_key(5649)) double IObjectFresnel1::GetPitchDeg ( );
__declspec(implementation_key(5650)) void IObjectFresnel1::PutPitchDeg ( double pRetVal );
__declspec(implementation_key(5651)) double IObjectFresnel1::GetThickness ( );
__declspec(implementation_key(5652)) void IObjectFresnel1::PutThickness ( double pRetVal );
__declspec(implementation_key(5653)) double IObjectFresnel1::GetRadius ( );
__declspec(implementation_key(5654)) void IObjectFresnel1::PutRadius ( double pRetVal );
__declspec(implementation_key(5655)) double IObjectFresnel1::GetConic ( );
__declspec(implementation_key(5656)) void IObjectFresnel1::PutConic ( double pRetVal );
__declspec(implementation_key(5657)) double IObjectFresnel1::GetCoeffRPower2 ( );
__declspec(implementation_key(5658)) void IObjectFresnel1::PutCoeffRPower2 ( double pRetVal );
__declspec(implementation_key(5659)) double IObjectFresnel1::GetCoeffRPower4 ( );
__declspec(implementation_key(5660)) void IObjectFresnel1::PutCoeffRPower4 ( double pRetVal );
__declspec(implementation_key(5661)) double IObjectFresnel1::GetCoeffRPower6 ( );
__declspec(implementation_key(5662)) void IObjectFresnel1::PutCoeffRPower6 ( double pRetVal );
__declspec(implementation_key(5663)) double IObjectFresnel1::GetCoeffRPower8 ( );
__declspec(implementation_key(5664)) void IObjectFresnel1::PutCoeffRPower8 ( double pRetVal );
__declspec(implementation_key(5665)) double IObjectFresnel1::GetCoeffRPower10 ( );
__declspec(implementation_key(5666)) void IObjectFresnel1::PutCoeffRPower10 ( double pRetVal );
__declspec(implementation_key(5667)) double IObjectFresnel1::GetCoeffRPower12 ( );
__declspec(implementation_key(5668)) void IObjectFresnel1::PutCoeffRPower12 ( double pRetVal );
__declspec(implementation_key(5669)) double IObjectFresnel1::GetCoeffRPower14 ( );
__declspec(implementation_key(5670)) void IObjectFresnel1::PutCoeffRPower14 ( double pRetVal );
__declspec(implementation_key(5671)) double IObjectFresnel1::GetCoeffRPower16 ( );
__declspec(implementation_key(5672)) void IObjectFresnel1::PutCoeffRPower16 ( double pRetVal );
__declspec(implementation_key(5673)) long IObjectFresnel1::GetNumberOfSegements ( );
__declspec(implementation_key(5674)) void IObjectFresnel1::PutNumberOfSegements ( long pRetVal );
__declspec(implementation_key(5675)) IEditorCellPtr IObjectFresnel2::GetRadialHeightCell ( );
__declspec(implementation_key(5676)) IEditorCellPtr IObjectFresnel2::GetXHalfWidthCell ( );
__declspec(implementation_key(5677)) IEditorCellPtr IObjectFresnel2::GetThicknessCell ( );
__declspec(implementation_key(5678)) IEditorCellPtr IObjectFresnel2::GetIsCylinderCell ( );
__declspec(implementation_key(5679)) IEditorCellPtr IObjectFresnel2::GetRadiusCell ( );
__declspec(implementation_key(5680)) IEditorCellPtr IObjectFresnel2::GetConicCell ( );
__declspec(implementation_key(5681)) IEditorCellPtr IObjectFresnel2::GetCoeffRPower2Cell ( );
__declspec(implementation_key(5682)) IEditorCellPtr IObjectFresnel2::GetCoeffRPower4Cell ( );
__declspec(implementation_key(5683)) IEditorCellPtr IObjectFresnel2::GetCoeffRPower6Cell ( );
__declspec(implementation_key(5684)) IEditorCellPtr IObjectFresnel2::GetCoeffRPower8Cell ( );
__declspec(implementation_key(5685)) IEditorCellPtr IObjectFresnel2::GetCoeffRPower10Cell ( );
__declspec(implementation_key(5686)) IEditorCellPtr IObjectFresnel2::GetCoeffRPower12Cell ( );
__declspec(implementation_key(5687)) IEditorCellPtr IObjectFresnel2::GetCoeffRPower14Cell ( );
__declspec(implementation_key(5688)) IEditorCellPtr IObjectFresnel2::GetCoeffRPower16Cell ( );
__declspec(implementation_key(5689)) IEditorCellPtr IObjectFresnel2::GetCoeffYPower2Cell ( );
__declspec(implementation_key(5690)) IEditorCellPtr IObjectFresnel2::GetCoeffYPower4Cell ( );
__declspec(implementation_key(5691)) IEditorCellPtr IObjectFresnel2::GetCoeffYPower6Cell ( );
__declspec(implementation_key(5692)) IEditorCellPtr IObjectFresnel2::GetCoeffYPower8Cell ( );
__declspec(implementation_key(5693)) IEditorCellPtr IObjectFresnel2::GetCoeffYPower10Cell ( );
__declspec(implementation_key(5694)) IEditorCellPtr IObjectFresnel2::GetCoeffYPower12Cell ( );
__declspec(implementation_key(5695)) IEditorCellPtr IObjectFresnel2::GetCoeffYPower14Cell ( );
__declspec(implementation_key(5696)) IEditorCellPtr IObjectFresnel2::GetCoeffYPower16Cell ( );
__declspec(implementation_key(5697)) double IObjectFresnel2::GetRadialHeight ( );
__declspec(implementation_key(5698)) void IObjectFresnel2::PutRadialHeight ( double pRetVal );
__declspec(implementation_key(5699)) double IObjectFresnel2::GetXHalfWidth ( );
__declspec(implementation_key(5700)) void IObjectFresnel2::PutXHalfWidth ( double pRetVal );
__declspec(implementation_key(5701)) double IObjectFresnel2::GetThickness ( );
__declspec(implementation_key(5702)) void IObjectFresnel2::PutThickness ( double pRetVal );
__declspec(implementation_key(5703)) VARIANT_BOOL IObjectFresnel2::GetIsCylinder ( );
__declspec(implementation_key(5704)) void IObjectFresnel2::PutIsCylinder ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(5705)) double IObjectFresnel2::GetRadius ( );
__declspec(implementation_key(5706)) void IObjectFresnel2::PutRadius ( double pRetVal );
__declspec(implementation_key(5707)) double IObjectFresnel2::GetConic ( );
__declspec(implementation_key(5708)) void IObjectFresnel2::PutConic ( double pRetVal );
__declspec(implementation_key(5709)) double IObjectFresnel2::GetCoeffRPower2 ( );
__declspec(implementation_key(5710)) void IObjectFresnel2::PutCoeffRPower2 ( double pRetVal );
__declspec(implementation_key(5711)) double IObjectFresnel2::GetCoeffRPower4 ( );
__declspec(implementation_key(5712)) void IObjectFresnel2::PutCoeffRPower4 ( double pRetVal );
__declspec(implementation_key(5713)) double IObjectFresnel2::GetCoeffRPower6 ( );
__declspec(implementation_key(5714)) void IObjectFresnel2::PutCoeffRPower6 ( double pRetVal );
__declspec(implementation_key(5715)) double IObjectFresnel2::GetCoeffRPower8 ( );
__declspec(implementation_key(5716)) void IObjectFresnel2::PutCoeffRPower8 ( double pRetVal );
__declspec(implementation_key(5717)) double IObjectFresnel2::GetCoeffRPower10 ( );
__declspec(implementation_key(5718)) void IObjectFresnel2::PutCoeffRPower10 ( double pRetVal );
__declspec(implementation_key(5719)) double IObjectFresnel2::GetCoeffRPower12 ( );
__declspec(implementation_key(5720)) void IObjectFresnel2::PutCoeffRPower12 ( double pRetVal );
__declspec(implementation_key(5721)) double IObjectFresnel2::GetCoeffRPower14 ( );
__declspec(implementation_key(5722)) void IObjectFresnel2::PutCoeffRPower14 ( double pRetVal );
__declspec(implementation_key(5723)) double IObjectFresnel2::GetCoeffRPower16 ( );
__declspec(implementation_key(5724)) void IObjectFresnel2::PutCoeffRPower16 ( double pRetVal );
__declspec(implementation_key(5725)) double IObjectFresnel2::GetCoeffYPower2 ( );
__declspec(implementation_key(5726)) void IObjectFresnel2::PutCoeffYPower2 ( double pRetVal );
__declspec(implementation_key(5727)) double IObjectFresnel2::GetCoeffYPower4 ( );
__declspec(implementation_key(5728)) void IObjectFresnel2::PutCoeffYPower4 ( double pRetVal );
__declspec(implementation_key(5729)) double IObjectFresnel2::GetCoeffYPower6 ( );
__declspec(implementation_key(5730)) void IObjectFresnel2::PutCoeffYPower6 ( double pRetVal );
__declspec(implementation_key(5731)) double IObjectFresnel2::GetCoeffYPower8 ( );
__declspec(implementation_key(5732)) void IObjectFresnel2::PutCoeffYPower8 ( double pRetVal );
__declspec(implementation_key(5733)) double IObjectFresnel2::GetCoeffYPower10 ( );
__declspec(implementation_key(5734)) void IObjectFresnel2::PutCoeffYPower10 ( double pRetVal );
__declspec(implementation_key(5735)) double IObjectFresnel2::GetCoeffYPower12 ( );
__declspec(implementation_key(5736)) void IObjectFresnel2::PutCoeffYPower12 ( double pRetVal );
__declspec(implementation_key(5737)) double IObjectFresnel2::GetCoeffYPower14 ( );
__declspec(implementation_key(5738)) void IObjectFresnel2::PutCoeffYPower14 ( double pRetVal );
__declspec(implementation_key(5739)) double IObjectFresnel2::GetCoeffYPower16 ( );
__declspec(implementation_key(5740)) void IObjectFresnel2::PutCoeffYPower16 ( double pRetVal );
__declspec(implementation_key(5741)) IEditorCellPtr IObjectGridSagLens::GetXHalfWidthCell ( );
__declspec(implementation_key(5742)) IEditorCellPtr IObjectGridSagLens::GetYHalfWidthCell ( );
__declspec(implementation_key(5743)) IEditorCellPtr IObjectGridSagLens::GetFrontRadiusCell ( );
__declspec(implementation_key(5744)) IEditorCellPtr IObjectGridSagLens::GetFrontConicCell ( );
__declspec(implementation_key(5745)) IEditorCellPtr IObjectGridSagLens::GetThicknessCell ( );
__declspec(implementation_key(5746)) IEditorCellPtr IObjectGridSagLens::GetInterpolateCell ( );
__declspec(implementation_key(5747)) IEditorCellPtr IObjectGridSagLens::GetBackRadiusCell ( );
__declspec(implementation_key(5748)) IEditorCellPtr IObjectGridSagLens::GetBackConicCell ( );
__declspec(implementation_key(5749)) IEditorCellPtr IObjectGridSagLens::GetCoeffRPower2Cell ( );
__declspec(implementation_key(5750)) IEditorCellPtr IObjectGridSagLens::GetCoeffRPower4Cell ( );
__declspec(implementation_key(5751)) IEditorCellPtr IObjectGridSagLens::GetCoeffRPower6Cell ( );
__declspec(implementation_key(5752)) IEditorCellPtr IObjectGridSagLens::GetCoeffRPower8Cell ( );
__declspec(implementation_key(5753)) IEditorCellPtr IObjectGridSagLens::GetCoeffRPower10Cell ( );
__declspec(implementation_key(5754)) IEditorCellPtr IObjectGridSagLens::GetCoeffRPower12Cell ( );
__declspec(implementation_key(5755)) IEditorCellPtr IObjectGridSagLens::GetCoeffRPower14Cell ( );
__declspec(implementation_key(5756)) IEditorCellPtr IObjectGridSagLens::GetCoeffRPower16Cell ( );
__declspec(implementation_key(5757)) IEditorCellPtr IObjectGridSagLens::GetDecenterXCell ( );
__declspec(implementation_key(5758)) IEditorCellPtr IObjectGridSagLens::GetDecenterYCell ( );
__declspec(implementation_key(5759)) double IObjectGridSagLens::GetXHalfWidth ( );
__declspec(implementation_key(5760)) void IObjectGridSagLens::PutXHalfWidth ( double pRetVal );
__declspec(implementation_key(5761)) double IObjectGridSagLens::GetYHalfWidth ( );
__declspec(implementation_key(5762)) void IObjectGridSagLens::PutYHalfWidth ( double pRetVal );
__declspec(implementation_key(5763)) double IObjectGridSagLens::GetFrontRadius ( );
__declspec(implementation_key(5764)) void IObjectGridSagLens::PutFrontRadius ( double pRetVal );
__declspec(implementation_key(5765)) double IObjectGridSagLens::GetFrontConic ( );
__declspec(implementation_key(5766)) void IObjectGridSagLens::PutFrontConic ( double pRetVal );
__declspec(implementation_key(5767)) double IObjectGridSagLens::GetThickness ( );
__declspec(implementation_key(5768)) void IObjectGridSagLens::PutThickness ( double pRetVal );
__declspec(implementation_key(5769)) enum InterpolateChoices IObjectGridSagLens::GetInterpolate ( );
__declspec(implementation_key(5770)) void IObjectGridSagLens::PutInterpolate ( enum InterpolateChoices pRetVal );
__declspec(implementation_key(5771)) double IObjectGridSagLens::GetBackRadius ( );
__declspec(implementation_key(5772)) void IObjectGridSagLens::PutBackRadius ( double pRetVal );
__declspec(implementation_key(5773)) double IObjectGridSagLens::GetBackConic ( );
__declspec(implementation_key(5774)) void IObjectGridSagLens::PutBackConic ( double pRetVal );
__declspec(implementation_key(5775)) double IObjectGridSagLens::GetCoeffRPower2 ( );
__declspec(implementation_key(5776)) void IObjectGridSagLens::PutCoeffRPower2 ( double pRetVal );
__declspec(implementation_key(5777)) double IObjectGridSagLens::GetCoeffRPower4 ( );
__declspec(implementation_key(5778)) void IObjectGridSagLens::PutCoeffRPower4 ( double pRetVal );
__declspec(implementation_key(5779)) double IObjectGridSagLens::GetCoeffRPower6 ( );
__declspec(implementation_key(5780)) void IObjectGridSagLens::PutCoeffRPower6 ( double pRetVal );
__declspec(implementation_key(5781)) double IObjectGridSagLens::GetCoeffRPower8 ( );
__declspec(implementation_key(5782)) void IObjectGridSagLens::PutCoeffRPower8 ( double pRetVal );
__declspec(implementation_key(5783)) double IObjectGridSagLens::GetCoeffRPower10 ( );
__declspec(implementation_key(5784)) void IObjectGridSagLens::PutCoeffRPower10 ( double pRetVal );
__declspec(implementation_key(5785)) double IObjectGridSagLens::GetCoeffRPower12 ( );
__declspec(implementation_key(5786)) void IObjectGridSagLens::PutCoeffRPower12 ( double pRetVal );
__declspec(implementation_key(5787)) double IObjectGridSagLens::GetCoeffRPower14 ( );
__declspec(implementation_key(5788)) void IObjectGridSagLens::PutCoeffRPower14 ( double pRetVal );
__declspec(implementation_key(5789)) double IObjectGridSagLens::GetCoeffRPower16 ( );
__declspec(implementation_key(5790)) void IObjectGridSagLens::PutCoeffRPower16 ( double pRetVal );
__declspec(implementation_key(5791)) double IObjectGridSagLens::GetDecenterX ( );
__declspec(implementation_key(5792)) void IObjectGridSagLens::PutDecenterX ( double pRetVal );
__declspec(implementation_key(5793)) double IObjectGridSagLens::GetDecenterY ( );
__declspec(implementation_key(5794)) void IObjectGridSagLens::PutDecenterY ( double pRetVal );
__declspec(implementation_key(5795)) IEditorCellPtr IObjectGridSagFrontBack::GetXHalfWidthCell ( );
__declspec(implementation_key(5796)) IEditorCellPtr IObjectGridSagFrontBack::GetYHalfWidthCell ( );
__declspec(implementation_key(5797)) IEditorCellPtr IObjectGridSagFrontBack::GetFrontRadiusCell ( );
__declspec(implementation_key(5798)) IEditorCellPtr IObjectGridSagFrontBack::GetFrontConicCell ( );
__declspec(implementation_key(5799)) IEditorCellPtr IObjectGridSagFrontBack::GetFrontRPower2Cell ( );
__declspec(implementation_key(5800)) IEditorCellPtr IObjectGridSagFrontBack::GetFrontRPower4Cell ( );
__declspec(implementation_key(5801)) IEditorCellPtr IObjectGridSagFrontBack::GetFrontRPower6Cell ( );
__declspec(implementation_key(5802)) IEditorCellPtr IObjectGridSagFrontBack::GetFrontRPower8Cell ( );
__declspec(implementation_key(5803)) IEditorCellPtr IObjectGridSagFrontBack::GetFrontRPower10Cell ( );
__declspec(implementation_key(5804)) IEditorCellPtr IObjectGridSagFrontBack::GetFrontRPower12Cell ( );
__declspec(implementation_key(5805)) IEditorCellPtr IObjectGridSagFrontBack::GetFrontRPower14Cell ( );
__declspec(implementation_key(5806)) IEditorCellPtr IObjectGridSagFrontBack::GetFrontRPower16Cell ( );
__declspec(implementation_key(5807)) IEditorCellPtr IObjectGridSagFrontBack::GetFrontInterpolateCell ( );
__declspec(implementation_key(5808)) IEditorCellPtr IObjectGridSagFrontBack::GetFrontXDecenterCell ( );
__declspec(implementation_key(5809)) IEditorCellPtr IObjectGridSagFrontBack::GetFrontYDecenterCell ( );
__declspec(implementation_key(5810)) IEditorCellPtr IObjectGridSagFrontBack::GetFrontTiltXCell ( );
__declspec(implementation_key(5811)) IEditorCellPtr IObjectGridSagFrontBack::GetFrontTiltYCell ( );
__declspec(implementation_key(5812)) IEditorCellPtr IObjectGridSagFrontBack::GetFrontTiltZCell ( );
__declspec(implementation_key(5813)) IEditorCellPtr IObjectGridSagFrontBack::GetFrontOrderCell ( );
__declspec(implementation_key(5814)) IEditorCellPtr IObjectGridSagFrontBack::GetFrontGridXDecenterCell ( );
__declspec(implementation_key(5815)) IEditorCellPtr IObjectGridSagFrontBack::GetFrontGridYDecenterCell ( );
__declspec(implementation_key(5816)) IEditorCellPtr IObjectGridSagFrontBack::GetThicknessCell ( );
__declspec(implementation_key(5817)) IEditorCellPtr IObjectGridSagFrontBack::GetRearRadiusCell ( );
__declspec(implementation_key(5818)) IEditorCellPtr IObjectGridSagFrontBack::GetRearConicCell ( );
__declspec(implementation_key(5819)) IEditorCellPtr IObjectGridSagFrontBack::GetRearRPower2Cell ( );
__declspec(implementation_key(5820)) IEditorCellPtr IObjectGridSagFrontBack::GetRearRPower4Cell ( );
__declspec(implementation_key(5821)) IEditorCellPtr IObjectGridSagFrontBack::GetRearRPower6Cell ( );
__declspec(implementation_key(5822)) IEditorCellPtr IObjectGridSagFrontBack::GetRearRPower8Cell ( );
__declspec(implementation_key(5823)) IEditorCellPtr IObjectGridSagFrontBack::GetRearRPower10Cell ( );
__declspec(implementation_key(5824)) IEditorCellPtr IObjectGridSagFrontBack::GetRearRPower12Cell ( );
__declspec(implementation_key(5825)) IEditorCellPtr IObjectGridSagFrontBack::GetRearRPower14Cell ( );
__declspec(implementation_key(5826)) IEditorCellPtr IObjectGridSagFrontBack::GetRearRPower16Cell ( );
__declspec(implementation_key(5827)) IEditorCellPtr IObjectGridSagFrontBack::GetRearInterpolateCell ( );
__declspec(implementation_key(5828)) IEditorCellPtr IObjectGridSagFrontBack::GetRearXDecenterCell ( );
__declspec(implementation_key(5829)) IEditorCellPtr IObjectGridSagFrontBack::GetRearYDecenterCell ( );
__declspec(implementation_key(5830)) IEditorCellPtr IObjectGridSagFrontBack::GetRearTiltXCell ( );
__declspec(implementation_key(5831)) IEditorCellPtr IObjectGridSagFrontBack::GetRearTiltYCell ( );
__declspec(implementation_key(5832)) IEditorCellPtr IObjectGridSagFrontBack::GetRearTiltZCell ( );
__declspec(implementation_key(5833)) IEditorCellPtr IObjectGridSagFrontBack::GetRearOrderCell ( );
__declspec(implementation_key(5834)) IEditorCellPtr IObjectGridSagFrontBack::GetRearGridXDecenterCell ( );
__declspec(implementation_key(5835)) IEditorCellPtr IObjectGridSagFrontBack::GetRearGridYDecenterCell ( );
__declspec(implementation_key(5836)) double IObjectGridSagFrontBack::GetXHalfWidth ( );
__declspec(implementation_key(5837)) void IObjectGridSagFrontBack::PutXHalfWidth ( double pRetVal );
__declspec(implementation_key(5838)) double IObjectGridSagFrontBack::GetYHalfWidth ( );
__declspec(implementation_key(5839)) void IObjectGridSagFrontBack::PutYHalfWidth ( double pRetVal );
__declspec(implementation_key(5840)) double IObjectGridSagFrontBack::GetFrontRadius ( );
__declspec(implementation_key(5841)) void IObjectGridSagFrontBack::PutFrontRadius ( double pRetVal );
__declspec(implementation_key(5842)) double IObjectGridSagFrontBack::GetFrontConic ( );
__declspec(implementation_key(5843)) void IObjectGridSagFrontBack::PutFrontConic ( double pRetVal );
__declspec(implementation_key(5844)) double IObjectGridSagFrontBack::GetFrontRPower2 ( );
__declspec(implementation_key(5845)) void IObjectGridSagFrontBack::PutFrontRPower2 ( double pRetVal );
__declspec(implementation_key(5846)) double IObjectGridSagFrontBack::GetFrontRPower4 ( );
__declspec(implementation_key(5847)) void IObjectGridSagFrontBack::PutFrontRPower4 ( double pRetVal );
__declspec(implementation_key(5848)) double IObjectGridSagFrontBack::GetFrontRPower6 ( );
__declspec(implementation_key(5849)) void IObjectGridSagFrontBack::PutFrontRPower6 ( double pRetVal );
__declspec(implementation_key(5850)) double IObjectGridSagFrontBack::GetFrontRPower8 ( );
__declspec(implementation_key(5851)) void IObjectGridSagFrontBack::PutFrontRPower8 ( double pRetVal );
__declspec(implementation_key(5852)) double IObjectGridSagFrontBack::GetFrontRPower10 ( );
__declspec(implementation_key(5853)) void IObjectGridSagFrontBack::PutFrontRPower10 ( double pRetVal );
__declspec(implementation_key(5854)) double IObjectGridSagFrontBack::GetFrontRPower12 ( );
__declspec(implementation_key(5855)) void IObjectGridSagFrontBack::PutFrontRPower12 ( double pRetVal );
__declspec(implementation_key(5856)) double IObjectGridSagFrontBack::GetFrontRPower14 ( );
__declspec(implementation_key(5857)) void IObjectGridSagFrontBack::PutFrontRPower14 ( double pRetVal );
__declspec(implementation_key(5858)) double IObjectGridSagFrontBack::GetFrontRPower16 ( );
__declspec(implementation_key(5859)) void IObjectGridSagFrontBack::PutFrontRPower16 ( double pRetVal );
__declspec(implementation_key(5860)) enum InterpolateChoices IObjectGridSagFrontBack::GetFrontInterpolate ( );
__declspec(implementation_key(5861)) void IObjectGridSagFrontBack::PutFrontInterpolate ( enum InterpolateChoices pRetVal );
__declspec(implementation_key(5862)) double IObjectGridSagFrontBack::GetFrontXDecenter ( );
__declspec(implementation_key(5863)) void IObjectGridSagFrontBack::PutFrontXDecenter ( double pRetVal );
__declspec(implementation_key(5864)) double IObjectGridSagFrontBack::GetFrontYDecenter ( );
__declspec(implementation_key(5865)) void IObjectGridSagFrontBack::PutFrontYDecenter ( double pRetVal );
__declspec(implementation_key(5866)) double IObjectGridSagFrontBack::GetFrontTiltX ( );
__declspec(implementation_key(5867)) void IObjectGridSagFrontBack::PutFrontTiltX ( double pRetVal );
__declspec(implementation_key(5868)) double IObjectGridSagFrontBack::GetFrontTiltY ( );
__declspec(implementation_key(5869)) void IObjectGridSagFrontBack::PutFrontTiltY ( double pRetVal );
__declspec(implementation_key(5870)) double IObjectGridSagFrontBack::GetFrontTiltZ ( );
__declspec(implementation_key(5871)) void IObjectGridSagFrontBack::PutFrontTiltZ ( double pRetVal );
__declspec(implementation_key(5872)) enum OrderChoices IObjectGridSagFrontBack::GetFrontOrder ( );
__declspec(implementation_key(5873)) void IObjectGridSagFrontBack::PutFrontOrder ( enum OrderChoices pRetVal );
__declspec(implementation_key(5874)) double IObjectGridSagFrontBack::GetFrontGridXDecenter ( );
__declspec(implementation_key(5875)) void IObjectGridSagFrontBack::PutFrontGridXDecenter ( double pRetVal );
__declspec(implementation_key(5876)) double IObjectGridSagFrontBack::GetFrontGridYDecenter ( );
__declspec(implementation_key(5877)) void IObjectGridSagFrontBack::PutFrontGridYDecenter ( double pRetVal );
__declspec(implementation_key(5878)) double IObjectGridSagFrontBack::GetThickness ( );
__declspec(implementation_key(5879)) void IObjectGridSagFrontBack::PutThickness ( double pRetVal );
__declspec(implementation_key(5880)) double IObjectGridSagFrontBack::GetRearRadius ( );
__declspec(implementation_key(5881)) void IObjectGridSagFrontBack::PutRearRadius ( double pRetVal );
__declspec(implementation_key(5882)) double IObjectGridSagFrontBack::GetRearConic ( );
__declspec(implementation_key(5883)) void IObjectGridSagFrontBack::PutRearConic ( double pRetVal );
__declspec(implementation_key(5884)) double IObjectGridSagFrontBack::GetRearRPower2 ( );
__declspec(implementation_key(5885)) void IObjectGridSagFrontBack::PutRearRPower2 ( double pRetVal );
__declspec(implementation_key(5886)) double IObjectGridSagFrontBack::GetRearRPower4 ( );
__declspec(implementation_key(5887)) void IObjectGridSagFrontBack::PutRearRPower4 ( double pRetVal );
__declspec(implementation_key(5888)) double IObjectGridSagFrontBack::GetRearRPower6 ( );
__declspec(implementation_key(5889)) void IObjectGridSagFrontBack::PutRearRPower6 ( double pRetVal );
__declspec(implementation_key(5890)) double IObjectGridSagFrontBack::GetRearRPower8 ( );
__declspec(implementation_key(5891)) void IObjectGridSagFrontBack::PutRearRPower8 ( double pRetVal );
__declspec(implementation_key(5892)) double IObjectGridSagFrontBack::GetRearRPower10 ( );
__declspec(implementation_key(5893)) void IObjectGridSagFrontBack::PutRearRPower10 ( double pRetVal );
__declspec(implementation_key(5894)) double IObjectGridSagFrontBack::GetRearRPower12 ( );
__declspec(implementation_key(5895)) void IObjectGridSagFrontBack::PutRearRPower12 ( double pRetVal );
__declspec(implementation_key(5896)) double IObjectGridSagFrontBack::GetRearRPower14 ( );
__declspec(implementation_key(5897)) void IObjectGridSagFrontBack::PutRearRPower14 ( double pRetVal );
__declspec(implementation_key(5898)) double IObjectGridSagFrontBack::GetRearRPower16 ( );
__declspec(implementation_key(5899)) void IObjectGridSagFrontBack::PutRearRPower16 ( double pRetVal );
__declspec(implementation_key(5900)) enum InterpolateChoices IObjectGridSagFrontBack::GetRearInterpolate ( );
__declspec(implementation_key(5901)) void IObjectGridSagFrontBack::PutRearInterpolate ( enum InterpolateChoices pRetVal );
__declspec(implementation_key(5902)) double IObjectGridSagFrontBack::GetRearXDecenter ( );
__declspec(implementation_key(5903)) void IObjectGridSagFrontBack::PutRearXDecenter ( double pRetVal );
__declspec(implementation_key(5904)) double IObjectGridSagFrontBack::GetRearYDecenter ( );
__declspec(implementation_key(5905)) void IObjectGridSagFrontBack::PutRearYDecenter ( double pRetVal );
__declspec(implementation_key(5906)) double IObjectGridSagFrontBack::GetRearTiltX ( );
__declspec(implementation_key(5907)) void IObjectGridSagFrontBack::PutRearTiltX ( double pRetVal );
__declspec(implementation_key(5908)) double IObjectGridSagFrontBack::GetRearTiltY ( );
__declspec(implementation_key(5909)) void IObjectGridSagFrontBack::PutRearTiltY ( double pRetVal );
__declspec(implementation_key(5910)) double IObjectGridSagFrontBack::GetRearTiltZ ( );
__declspec(implementation_key(5911)) void IObjectGridSagFrontBack::PutRearTiltZ ( double pRetVal );
__declspec(implementation_key(5912)) enum OrderChoices IObjectGridSagFrontBack::GetRearOrder ( );
__declspec(implementation_key(5913)) void IObjectGridSagFrontBack::PutRearOrder ( enum OrderChoices pRetVal );
__declspec(implementation_key(5914)) double IObjectGridSagFrontBack::GetRearGridXDecenter ( );
__declspec(implementation_key(5915)) void IObjectGridSagFrontBack::PutRearGridXDecenter ( double pRetVal );
__declspec(implementation_key(5916)) double IObjectGridSagFrontBack::GetRearGridYDecenter ( );
__declspec(implementation_key(5917)) void IObjectGridSagFrontBack::PutRearGridYDecenter ( double pRetVal );
__declspec(implementation_key(5918)) IEditorCellPtr IObjectGridSagSurface::GetInterpolateCell ( );
__declspec(implementation_key(5919)) IEditorCellPtr IObjectGridSagSurface::GetRadiusCell ( );
__declspec(implementation_key(5920)) IEditorCellPtr IObjectGridSagSurface::GetConicCell ( );
__declspec(implementation_key(5921)) IEditorCellPtr IObjectGridSagSurface::GetCoeffRPower2Cell ( );
__declspec(implementation_key(5922)) IEditorCellPtr IObjectGridSagSurface::GetCoeffRPower4Cell ( );
__declspec(implementation_key(5923)) IEditorCellPtr IObjectGridSagSurface::GetCoeffRPower6Cell ( );
__declspec(implementation_key(5924)) IEditorCellPtr IObjectGridSagSurface::GetCoeffRPower8Cell ( );
__declspec(implementation_key(5925)) IEditorCellPtr IObjectGridSagSurface::GetCoeffRPower10Cell ( );
__declspec(implementation_key(5926)) IEditorCellPtr IObjectGridSagSurface::GetCoeffRPower12Cell ( );
__declspec(implementation_key(5927)) IEditorCellPtr IObjectGridSagSurface::GetCoeffRPower14Cell ( );
__declspec(implementation_key(5928)) IEditorCellPtr IObjectGridSagSurface::GetCoeffRPower16Cell ( );
__declspec(implementation_key(5929)) IEditorCellPtr IObjectGridSagSurface::GetDecenterXCell ( );
__declspec(implementation_key(5930)) IEditorCellPtr IObjectGridSagSurface::GetDecenterYCell ( );
__declspec(implementation_key(5931)) enum InterpolateChoices IObjectGridSagSurface::GetInterpolate ( );
__declspec(implementation_key(5932)) void IObjectGridSagSurface::PutInterpolate ( enum InterpolateChoices pRetVal );
__declspec(implementation_key(5933)) double IObjectGridSagSurface::GetRadius ( );
__declspec(implementation_key(5934)) void IObjectGridSagSurface::PutRadius ( double pRetVal );
__declspec(implementation_key(5935)) double IObjectGridSagSurface::GetConic ( );
__declspec(implementation_key(5936)) void IObjectGridSagSurface::PutConic ( double pRetVal );
__declspec(implementation_key(5937)) double IObjectGridSagSurface::GetCoeffRPower2 ( );
__declspec(implementation_key(5938)) void IObjectGridSagSurface::PutCoeffRPower2 ( double pRetVal );
__declspec(implementation_key(5939)) double IObjectGridSagSurface::GetCoeffRPower4 ( );
__declspec(implementation_key(5940)) void IObjectGridSagSurface::PutCoeffRPower4 ( double pRetVal );
__declspec(implementation_key(5941)) double IObjectGridSagSurface::GetCoeffRPower6 ( );
__declspec(implementation_key(5942)) void IObjectGridSagSurface::PutCoeffRPower6 ( double pRetVal );
__declspec(implementation_key(5943)) double IObjectGridSagSurface::GetCoeffRPower8 ( );
__declspec(implementation_key(5944)) void IObjectGridSagSurface::PutCoeffRPower8 ( double pRetVal );
__declspec(implementation_key(5945)) double IObjectGridSagSurface::GetCoeffRPower10 ( );
__declspec(implementation_key(5946)) void IObjectGridSagSurface::PutCoeffRPower10 ( double pRetVal );
__declspec(implementation_key(5947)) double IObjectGridSagSurface::GetCoeffRPower12 ( );
__declspec(implementation_key(5948)) void IObjectGridSagSurface::PutCoeffRPower12 ( double pRetVal );
__declspec(implementation_key(5949)) double IObjectGridSagSurface::GetCoeffRPower14 ( );
__declspec(implementation_key(5950)) void IObjectGridSagSurface::PutCoeffRPower14 ( double pRetVal );
__declspec(implementation_key(5951)) double IObjectGridSagSurface::GetCoeffRPower16 ( );
__declspec(implementation_key(5952)) void IObjectGridSagSurface::PutCoeffRPower16 ( double pRetVal );
__declspec(implementation_key(5953)) double IObjectGridSagSurface::GetDecenterX ( );
__declspec(implementation_key(5954)) void IObjectGridSagSurface::PutDecenterX ( double pRetVal );
__declspec(implementation_key(5955)) double IObjectGridSagSurface::GetDecenterY ( );
__declspec(implementation_key(5956)) void IObjectGridSagSurface::PutDecenterY ( double pRetVal );
__declspec(implementation_key(5957)) IEditorCellPtr IObjectHexagonalLensletArray::GetNumberOfColumnsCell ( );
__declspec(implementation_key(5958)) IEditorCellPtr IObjectHexagonalLensletArray::GetNumberOfRowsCell ( );
__declspec(implementation_key(5959)) IEditorCellPtr IObjectHexagonalLensletArray::GetDrawAsFlatCell ( );
__declspec(implementation_key(5960)) IEditorCellPtr IObjectHexagonalLensletArray::GetWidthCell ( );
__declspec(implementation_key(5961)) IEditorCellPtr IObjectHexagonalLensletArray::GetThicknessCell ( );
__declspec(implementation_key(5962)) IEditorCellPtr IObjectHexagonalLensletArray::GetRadiusCell ( );
__declspec(implementation_key(5963)) IEditorCellPtr IObjectHexagonalLensletArray::GetConicCell ( );
__declspec(implementation_key(5964)) IEditorCellPtr IObjectHexagonalLensletArray::GetCoeffRPower2Cell ( );
__declspec(implementation_key(5965)) IEditorCellPtr IObjectHexagonalLensletArray::GetCoeffRPower4Cell ( );
__declspec(implementation_key(5966)) IEditorCellPtr IObjectHexagonalLensletArray::GetCoeffRPower6Cell ( );
__declspec(implementation_key(5967)) IEditorCellPtr IObjectHexagonalLensletArray::GetCoeffRPower8Cell ( );
__declspec(implementation_key(5968)) IEditorCellPtr IObjectHexagonalLensletArray::GetCoeffRPower10Cell ( );
__declspec(implementation_key(5969)) IEditorCellPtr IObjectHexagonalLensletArray::GetCoeffRPower12Cell ( );
__declspec(implementation_key(5970)) IEditorCellPtr IObjectHexagonalLensletArray::GetCoeffRPower14Cell ( );
__declspec(implementation_key(5971)) IEditorCellPtr IObjectHexagonalLensletArray::GetCoeffRPower16Cell ( );
__declspec(implementation_key(5972)) long IObjectHexagonalLensletArray::GetNumberOfColumns ( );
__declspec(implementation_key(5973)) void IObjectHexagonalLensletArray::PutNumberOfColumns ( long pRetVal );
__declspec(implementation_key(5974)) long IObjectHexagonalLensletArray::GetNumberOfRows ( );
__declspec(implementation_key(5975)) void IObjectHexagonalLensletArray::PutNumberOfRows ( long pRetVal );
__declspec(implementation_key(5976)) VARIANT_BOOL IObjectHexagonalLensletArray::GetDrawAsFlat ( );
__declspec(implementation_key(5977)) void IObjectHexagonalLensletArray::PutDrawAsFlat ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(5978)) double IObjectHexagonalLensletArray::GetWidth ( );
__declspec(implementation_key(5979)) void IObjectHexagonalLensletArray::PutWidth ( double pRetVal );
__declspec(implementation_key(5980)) double IObjectHexagonalLensletArray::GetThickness ( );
__declspec(implementation_key(5981)) void IObjectHexagonalLensletArray::PutThickness ( double pRetVal );
__declspec(implementation_key(5982)) double IObjectHexagonalLensletArray::GetRadius ( );
__declspec(implementation_key(5983)) void IObjectHexagonalLensletArray::PutRadius ( double pRetVal );
__declspec(implementation_key(5984)) double IObjectHexagonalLensletArray::GetConic ( );
__declspec(implementation_key(5985)) void IObjectHexagonalLensletArray::PutConic ( double pRetVal );
__declspec(implementation_key(5986)) double IObjectHexagonalLensletArray::GetCoeffRPower2 ( );
__declspec(implementation_key(5987)) void IObjectHexagonalLensletArray::PutCoeffRPower2 ( double pRetVal );
__declspec(implementation_key(5988)) double IObjectHexagonalLensletArray::GetCoeffRPower4 ( );
__declspec(implementation_key(5989)) void IObjectHexagonalLensletArray::PutCoeffRPower4 ( double pRetVal );
__declspec(implementation_key(5990)) double IObjectHexagonalLensletArray::GetCoeffRPower6 ( );
__declspec(implementation_key(5991)) void IObjectHexagonalLensletArray::PutCoeffRPower6 ( double pRetVal );
__declspec(implementation_key(5992)) double IObjectHexagonalLensletArray::GetCoeffRPower8 ( );
__declspec(implementation_key(5993)) void IObjectHexagonalLensletArray::PutCoeffRPower8 ( double pRetVal );
__declspec(implementation_key(5994)) double IObjectHexagonalLensletArray::GetCoeffRPower10 ( );
__declspec(implementation_key(5995)) void IObjectHexagonalLensletArray::PutCoeffRPower10 ( double pRetVal );
__declspec(implementation_key(5996)) double IObjectHexagonalLensletArray::GetCoeffRPower12 ( );
__declspec(implementation_key(5997)) void IObjectHexagonalLensletArray::PutCoeffRPower12 ( double pRetVal );
__declspec(implementation_key(5998)) double IObjectHexagonalLensletArray::GetCoeffRPower14 ( );
__declspec(implementation_key(5999)) void IObjectHexagonalLensletArray::PutCoeffRPower14 ( double pRetVal );
__declspec(implementation_key(6000)) double IObjectHexagonalLensletArray::GetCoeffRPower16 ( );
__declspec(implementation_key(6001)) void IObjectHexagonalLensletArray::PutCoeffRPower16 ( double pRetVal );
__declspec(implementation_key(6002)) IEditorCellPtr IObjectHologramLens::GetRadialHeightCell ( );
__declspec(implementation_key(6003)) IEditorCellPtr IObjectHologramLens::GetXHalfWidthCell ( );
__declspec(implementation_key(6004)) IEditorCellPtr IObjectHologramLens::GetThicknessCell ( );
__declspec(implementation_key(6005)) IEditorCellPtr IObjectHologramLens::GetRadius1Cell ( );
__declspec(implementation_key(6006)) IEditorCellPtr IObjectHologramLens::GetConic1Cell ( );
__declspec(implementation_key(6007)) IEditorCellPtr IObjectHologramLens::GetRadius2Cell ( );
__declspec(implementation_key(6008)) IEditorCellPtr IObjectHologramLens::GetConic2Cell ( );
__declspec(implementation_key(6009)) IEditorCellPtr IObjectHologramLens::GetHologramTypeCell ( );
__declspec(implementation_key(6010)) IEditorCellPtr IObjectHologramLens::GetOrderCell ( );
__declspec(implementation_key(6011)) IEditorCellPtr IObjectHologramLens::GetConsWaveCell ( );
__declspec(implementation_key(6012)) IEditorCellPtr IObjectHologramLens::GetX1Cell ( );
__declspec(implementation_key(6013)) IEditorCellPtr IObjectHologramLens::GetY1Cell ( );
__declspec(implementation_key(6014)) IEditorCellPtr IObjectHologramLens::GetZ1Cell ( );
__declspec(implementation_key(6015)) IEditorCellPtr IObjectHologramLens::GetX2Cell ( );
__declspec(implementation_key(6016)) IEditorCellPtr IObjectHologramLens::GetY2Cell ( );
__declspec(implementation_key(6017)) IEditorCellPtr IObjectHologramLens::GetZ2Cell ( );
__declspec(implementation_key(6018)) double IObjectHologramLens::GetRadialHeight ( );
__declspec(implementation_key(6019)) void IObjectHologramLens::PutRadialHeight ( double pRetVal );
__declspec(implementation_key(6020)) double IObjectHologramLens::GetXHalfWidth ( );
__declspec(implementation_key(6021)) void IObjectHologramLens::PutXHalfWidth ( double pRetVal );
__declspec(implementation_key(6022)) double IObjectHologramLens::GetThickness ( );
__declspec(implementation_key(6023)) void IObjectHologramLens::PutThickness ( double pRetVal );
__declspec(implementation_key(6024)) double IObjectHologramLens::GetRadius1 ( );
__declspec(implementation_key(6025)) void IObjectHologramLens::PutRadius1 ( double pRetVal );
__declspec(implementation_key(6026)) double IObjectHologramLens::GetConic1 ( );
__declspec(implementation_key(6027)) void IObjectHologramLens::PutConic1 ( double pRetVal );
__declspec(implementation_key(6028)) double IObjectHologramLens::GetRadius2 ( );
__declspec(implementation_key(6029)) void IObjectHologramLens::PutRadius2 ( double pRetVal );
__declspec(implementation_key(6030)) double IObjectHologramLens::GetConic2 ( );
__declspec(implementation_key(6031)) void IObjectHologramLens::PutConic2 ( double pRetVal );
__declspec(implementation_key(6032)) long IObjectHologramLens::GetHologramType ( );
__declspec(implementation_key(6033)) void IObjectHologramLens::PutHologramType ( long pRetVal );
__declspec(implementation_key(6034)) double IObjectHologramLens::GetOrder ( );
__declspec(implementation_key(6035)) void IObjectHologramLens::PutOrder ( double pRetVal );
__declspec(implementation_key(6036)) double IObjectHologramLens::GetConsWave ( );
__declspec(implementation_key(6037)) void IObjectHologramLens::PutConsWave ( double pRetVal );
__declspec(implementation_key(6038)) double IObjectHologramLens::GetX1 ( );
__declspec(implementation_key(6039)) void IObjectHologramLens::PutX1 ( double pRetVal );
__declspec(implementation_key(6040)) double IObjectHologramLens::GetY1 ( );
__declspec(implementation_key(6041)) void IObjectHologramLens::PutY1 ( double pRetVal );
__declspec(implementation_key(6042)) double IObjectHologramLens::GetZ1 ( );
__declspec(implementation_key(6043)) void IObjectHologramLens::PutZ1 ( double pRetVal );
__declspec(implementation_key(6044)) double IObjectHologramLens::GetX2 ( );
__declspec(implementation_key(6045)) void IObjectHologramLens::PutX2 ( double pRetVal );
__declspec(implementation_key(6046)) double IObjectHologramLens::GetY2 ( );
__declspec(implementation_key(6047)) void IObjectHologramLens::PutY2 ( double pRetVal );
__declspec(implementation_key(6048)) double IObjectHologramLens::GetZ2 ( );
__declspec(implementation_key(6049)) void IObjectHologramLens::PutZ2 ( double pRetVal );
__declspec(implementation_key(6050)) IEditorCellPtr IObjectHologramSurface::GetRadiusCell ( );
__declspec(implementation_key(6051)) IEditorCellPtr IObjectHologramSurface::GetConicCell ( );
__declspec(implementation_key(6052)) IEditorCellPtr IObjectHologramSurface::GetMaxApertureCell ( );
__declspec(implementation_key(6053)) IEditorCellPtr IObjectHologramSurface::GetMinApertureCell ( );
__declspec(implementation_key(6054)) IEditorCellPtr IObjectHologramSurface::GetHologramTypeCell ( );
__declspec(implementation_key(6055)) IEditorCellPtr IObjectHologramSurface::GetOrderCell ( );
__declspec(implementation_key(6056)) IEditorCellPtr IObjectHologramSurface::GetConsWaveCell ( );
__declspec(implementation_key(6057)) IEditorCellPtr IObjectHologramSurface::GetX1Cell ( );
__declspec(implementation_key(6058)) IEditorCellPtr IObjectHologramSurface::GetY1Cell ( );
__declspec(implementation_key(6059)) IEditorCellPtr IObjectHologramSurface::GetZ1Cell ( );
__declspec(implementation_key(6060)) IEditorCellPtr IObjectHologramSurface::GetX2Cell ( );
__declspec(implementation_key(6061)) IEditorCellPtr IObjectHologramSurface::GetY2Cell ( );
__declspec(implementation_key(6062)) IEditorCellPtr IObjectHologramSurface::GetZ2Cell ( );
__declspec(implementation_key(6063)) IEditorCellPtr IObjectHologramSurface::GetNumberOfTermsCell ( );
__declspec(implementation_key(6064)) IEditorCellPtr IObjectHologramSurface::RPowerICell ( long i );
__declspec(implementation_key(6065)) double IObjectHologramSurface::GetRadius ( );
__declspec(implementation_key(6066)) void IObjectHologramSurface::PutRadius ( double pRetVal );
__declspec(implementation_key(6067)) double IObjectHologramSurface::GetConic ( );
__declspec(implementation_key(6068)) void IObjectHologramSurface::PutConic ( double pRetVal );
__declspec(implementation_key(6069)) double IObjectHologramSurface::GetMaxAperture ( );
__declspec(implementation_key(6070)) void IObjectHologramSurface::PutMaxAperture ( double pRetVal );
__declspec(implementation_key(6071)) double IObjectHologramSurface::GetMinAperture ( );
__declspec(implementation_key(6072)) void IObjectHologramSurface::PutMinAperture ( double pRetVal );
__declspec(implementation_key(6073)) long IObjectHologramSurface::GetHologramType ( );
__declspec(implementation_key(6074)) void IObjectHologramSurface::PutHologramType ( long pRetVal );
__declspec(implementation_key(6075)) double IObjectHologramSurface::GetOrder ( );
__declspec(implementation_key(6076)) void IObjectHologramSurface::PutOrder ( double pRetVal );
__declspec(implementation_key(6077)) double IObjectHologramSurface::GetConsWave ( );
__declspec(implementation_key(6078)) void IObjectHologramSurface::PutConsWave ( double pRetVal );
__declspec(implementation_key(6079)) double IObjectHologramSurface::GetX1 ( );
__declspec(implementation_key(6080)) void IObjectHologramSurface::PutX1 ( double pRetVal );
__declspec(implementation_key(6081)) double IObjectHologramSurface::GetY1 ( );
__declspec(implementation_key(6082)) void IObjectHologramSurface::PutY1 ( double pRetVal );
__declspec(implementation_key(6083)) double IObjectHologramSurface::GetZ1 ( );
__declspec(implementation_key(6084)) void IObjectHologramSurface::PutZ1 ( double pRetVal );
__declspec(implementation_key(6085)) double IObjectHologramSurface::GetX2 ( );
__declspec(implementation_key(6086)) void IObjectHologramSurface::PutX2 ( double pRetVal );
__declspec(implementation_key(6087)) double IObjectHologramSurface::GetY2 ( );
__declspec(implementation_key(6088)) void IObjectHologramSurface::PutY2 ( double pRetVal );
__declspec(implementation_key(6089)) double IObjectHologramSurface::GetZ2 ( );
__declspec(implementation_key(6090)) void IObjectHologramSurface::PutZ2 ( double pRetVal );
__declspec(implementation_key(6091)) long IObjectHologramSurface::GetNumberOfTerms ( );
__declspec(implementation_key(6092)) void IObjectHologramSurface::PutNumberOfTerms ( long pRetVal );
__declspec(implementation_key(6093)) double IObjectHologramSurface::GetRPowerI ( long i );
__declspec(implementation_key(6094)) HRESULT IObjectHologramSurface::SetRPowerI ( long i, double v );
__declspec(implementation_key(6095)) IEditorCellPtr IObjectJonesMatrix::GetXHalfWidthCell ( );
__declspec(implementation_key(6096)) IEditorCellPtr IObjectJonesMatrix::GetYHalfWidthCell ( );
__declspec(implementation_key(6097)) IEditorCellPtr IObjectJonesMatrix::GetARealCell ( );
__declspec(implementation_key(6098)) IEditorCellPtr IObjectJonesMatrix::GetAImagCell ( );
__declspec(implementation_key(6099)) IEditorCellPtr IObjectJonesMatrix::GetBRealCell ( );
__declspec(implementation_key(6100)) IEditorCellPtr IObjectJonesMatrix::GetBImagCell ( );
__declspec(implementation_key(6101)) IEditorCellPtr IObjectJonesMatrix::GetCRealCell ( );
__declspec(implementation_key(6102)) IEditorCellPtr IObjectJonesMatrix::GetCImagCell ( );
__declspec(implementation_key(6103)) IEditorCellPtr IObjectJonesMatrix::GetDRealCell ( );
__declspec(implementation_key(6104)) IEditorCellPtr IObjectJonesMatrix::GetDImagCell ( );
__declspec(implementation_key(6105)) double IObjectJonesMatrix::GetXHalfWidth ( );
__declspec(implementation_key(6106)) void IObjectJonesMatrix::PutXHalfWidth ( double pRetVal );
__declspec(implementation_key(6107)) double IObjectJonesMatrix::GetYHalfWidth ( );
__declspec(implementation_key(6108)) void IObjectJonesMatrix::PutYHalfWidth ( double pRetVal );
__declspec(implementation_key(6109)) double IObjectJonesMatrix::GetAReal ( );
__declspec(implementation_key(6110)) void IObjectJonesMatrix::PutAReal ( double pRetVal );
__declspec(implementation_key(6111)) double IObjectJonesMatrix::GetAImag ( );
__declspec(implementation_key(6112)) void IObjectJonesMatrix::PutAImag ( double pRetVal );
__declspec(implementation_key(6113)) double IObjectJonesMatrix::GetBReal ( );
__declspec(implementation_key(6114)) void IObjectJonesMatrix::PutBReal ( double pRetVal );
__declspec(implementation_key(6115)) double IObjectJonesMatrix::GetBImag ( );
__declspec(implementation_key(6116)) void IObjectJonesMatrix::PutBImag ( double pRetVal );
__declspec(implementation_key(6117)) double IObjectJonesMatrix::GetCReal ( );
__declspec(implementation_key(6118)) void IObjectJonesMatrix::PutCReal ( double pRetVal );
__declspec(implementation_key(6119)) double IObjectJonesMatrix::GetCImag ( );
__declspec(implementation_key(6120)) void IObjectJonesMatrix::PutCImag ( double pRetVal );
__declspec(implementation_key(6121)) double IObjectJonesMatrix::GetDReal ( );
__declspec(implementation_key(6122)) void IObjectJonesMatrix::PutDReal ( double pRetVal );
__declspec(implementation_key(6123)) double IObjectJonesMatrix::GetDImag ( );
__declspec(implementation_key(6124)) void IObjectJonesMatrix::PutDImag ( double pRetVal );
__declspec(implementation_key(6125)) IEditorCellPtr IObjectLensletArray1::GetXHalfWidthCell ( );
__declspec(implementation_key(6126)) IEditorCellPtr IObjectLensletArray1::GetYHalfWidthCell ( );
__declspec(implementation_key(6127)) IEditorCellPtr IObjectLensletArray1::GetThicknessCell ( );
__declspec(implementation_key(6128)) IEditorCellPtr IObjectLensletArray1::GetRadiusCell ( );
__declspec(implementation_key(6129)) IEditorCellPtr IObjectLensletArray1::GetConicCell ( );
__declspec(implementation_key(6130)) IEditorCellPtr IObjectLensletArray1::GetIsToricCell ( );
__declspec(implementation_key(6131)) IEditorCellPtr IObjectLensletArray1::GetToricRCell ( );
__declspec(implementation_key(6132)) IEditorCellPtr IObjectLensletArray1::GetLinesPerUMCell ( );
__declspec(implementation_key(6133)) IEditorCellPtr IObjectLensletArray1::GetDiffOrderCell ( );
__declspec(implementation_key(6134)) IEditorCellPtr IObjectLensletArray1::GetCoeffRPower2Cell ( );
__declspec(implementation_key(6135)) IEditorCellPtr IObjectLensletArray1::GetCoeffRPower4Cell ( );
__declspec(implementation_key(6136)) IEditorCellPtr IObjectLensletArray1::GetCoeffRPower6Cell ( );
__declspec(implementation_key(6137)) IEditorCellPtr IObjectLensletArray1::GetCoeffRPower8Cell ( );
__declspec(implementation_key(6138)) IEditorCellPtr IObjectLensletArray1::GetCoeffRPower10Cell ( );
__declspec(implementation_key(6139)) IEditorCellPtr IObjectLensletArray1::GetCoeffRPower12Cell ( );
__declspec(implementation_key(6140)) IEditorCellPtr IObjectLensletArray1::GetCoeffRPower14Cell ( );
__declspec(implementation_key(6141)) IEditorCellPtr IObjectLensletArray1::GetCoeffRPower16Cell ( );
__declspec(implementation_key(6142)) IEditorCellPtr IObjectLensletArray1::GetCoeffYPower2Cell ( );
__declspec(implementation_key(6143)) IEditorCellPtr IObjectLensletArray1::GetCoeffYPower4Cell ( );
__declspec(implementation_key(6144)) IEditorCellPtr IObjectLensletArray1::GetCoeffYPower6Cell ( );
__declspec(implementation_key(6145)) IEditorCellPtr IObjectLensletArray1::GetCoeffYPower8Cell ( );
__declspec(implementation_key(6146)) IEditorCellPtr IObjectLensletArray1::GetCoeffYPower10Cell ( );
__declspec(implementation_key(6147)) IEditorCellPtr IObjectLensletArray1::GetCoeffYPower12Cell ( );
__declspec(implementation_key(6148)) IEditorCellPtr IObjectLensletArray1::GetCoeffYPower14Cell ( );
__declspec(implementation_key(6149)) IEditorCellPtr IObjectLensletArray1::GetCoeffYPower16Cell ( );
__declspec(implementation_key(6150)) IEditorCellPtr IObjectLensletArray1::GetDecenterXCell ( );
__declspec(implementation_key(6151)) IEditorCellPtr IObjectLensletArray1::GetDecenterYCell ( );
__declspec(implementation_key(6152)) IEditorCellPtr IObjectLensletArray1::GetNumberInXCell ( );
__declspec(implementation_key(6153)) IEditorCellPtr IObjectLensletArray1::GetNumberInYCell ( );
__declspec(implementation_key(6154)) IEditorCellPtr IObjectLensletArray1::GetDiffractiveFaceCell ( );
__declspec(implementation_key(6155)) double IObjectLensletArray1::GetXHalfWidth ( );
__declspec(implementation_key(6156)) void IObjectLensletArray1::PutXHalfWidth ( double pRetVal );
__declspec(implementation_key(6157)) double IObjectLensletArray1::GetYHalfWidth ( );
__declspec(implementation_key(6158)) void IObjectLensletArray1::PutYHalfWidth ( double pRetVal );
__declspec(implementation_key(6159)) double IObjectLensletArray1::GetThickness ( );
__declspec(implementation_key(6160)) void IObjectLensletArray1::PutThickness ( double pRetVal );
__declspec(implementation_key(6161)) double IObjectLensletArray1::GetRadius ( );
__declspec(implementation_key(6162)) void IObjectLensletArray1::PutRadius ( double pRetVal );
__declspec(implementation_key(6163)) double IObjectLensletArray1::GetConic ( );
__declspec(implementation_key(6164)) void IObjectLensletArray1::PutConic ( double pRetVal );
__declspec(implementation_key(6165)) VARIANT_BOOL IObjectLensletArray1::GetIsToric ( );
__declspec(implementation_key(6166)) void IObjectLensletArray1::PutIsToric ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(6167)) double IObjectLensletArray1::GetToricR ( );
__declspec(implementation_key(6168)) void IObjectLensletArray1::PutToricR ( double pRetVal );
__declspec(implementation_key(6169)) double IObjectLensletArray1::GetLinesPerUM ( );
__declspec(implementation_key(6170)) void IObjectLensletArray1::PutLinesPerUM ( double pRetVal );
__declspec(implementation_key(6171)) double IObjectLensletArray1::GetDiffOrder ( );
__declspec(implementation_key(6172)) void IObjectLensletArray1::PutDiffOrder ( double pRetVal );
__declspec(implementation_key(6173)) double IObjectLensletArray1::GetCoeffRPower2 ( );
__declspec(implementation_key(6174)) void IObjectLensletArray1::PutCoeffRPower2 ( double pRetVal );
__declspec(implementation_key(6175)) double IObjectLensletArray1::GetCoeffRPower4 ( );
__declspec(implementation_key(6176)) void IObjectLensletArray1::PutCoeffRPower4 ( double pRetVal );
__declspec(implementation_key(6177)) double IObjectLensletArray1::GetCoeffRPower6 ( );
__declspec(implementation_key(6178)) void IObjectLensletArray1::PutCoeffRPower6 ( double pRetVal );
__declspec(implementation_key(6179)) double IObjectLensletArray1::GetCoeffRPower8 ( );
__declspec(implementation_key(6180)) void IObjectLensletArray1::PutCoeffRPower8 ( double pRetVal );
__declspec(implementation_key(6181)) double IObjectLensletArray1::GetCoeffRPower10 ( );
__declspec(implementation_key(6182)) void IObjectLensletArray1::PutCoeffRPower10 ( double pRetVal );
__declspec(implementation_key(6183)) double IObjectLensletArray1::GetCoeffRPower12 ( );
__declspec(implementation_key(6184)) void IObjectLensletArray1::PutCoeffRPower12 ( double pRetVal );
__declspec(implementation_key(6185)) double IObjectLensletArray1::GetCoeffRPower14 ( );
__declspec(implementation_key(6186)) void IObjectLensletArray1::PutCoeffRPower14 ( double pRetVal );
__declspec(implementation_key(6187)) double IObjectLensletArray1::GetCoeffRPower16 ( );
__declspec(implementation_key(6188)) void IObjectLensletArray1::PutCoeffRPower16 ( double pRetVal );
__declspec(implementation_key(6189)) double IObjectLensletArray1::GetCoeffYPower2 ( );
__declspec(implementation_key(6190)) void IObjectLensletArray1::PutCoeffYPower2 ( double pRetVal );
__declspec(implementation_key(6191)) double IObjectLensletArray1::GetCoeffYPower4 ( );
__declspec(implementation_key(6192)) void IObjectLensletArray1::PutCoeffYPower4 ( double pRetVal );
__declspec(implementation_key(6193)) double IObjectLensletArray1::GetCoeffYPower6 ( );
__declspec(implementation_key(6194)) void IObjectLensletArray1::PutCoeffYPower6 ( double pRetVal );
__declspec(implementation_key(6195)) double IObjectLensletArray1::GetCoeffYPower8 ( );
__declspec(implementation_key(6196)) void IObjectLensletArray1::PutCoeffYPower8 ( double pRetVal );
__declspec(implementation_key(6197)) double IObjectLensletArray1::GetCoeffYPower10 ( );
__declspec(implementation_key(6198)) void IObjectLensletArray1::PutCoeffYPower10 ( double pRetVal );
__declspec(implementation_key(6199)) double IObjectLensletArray1::GetCoeffYPower12 ( );
__declspec(implementation_key(6200)) void IObjectLensletArray1::PutCoeffYPower12 ( double pRetVal );
__declspec(implementation_key(6201)) double IObjectLensletArray1::GetCoeffYPower14 ( );
__declspec(implementation_key(6202)) void IObjectLensletArray1::PutCoeffYPower14 ( double pRetVal );
__declspec(implementation_key(6203)) double IObjectLensletArray1::GetCoeffYPower16 ( );
__declspec(implementation_key(6204)) void IObjectLensletArray1::PutCoeffYPower16 ( double pRetVal );
__declspec(implementation_key(6205)) double IObjectLensletArray1::GetDecenterX ( );
__declspec(implementation_key(6206)) void IObjectLensletArray1::PutDecenterX ( double pRetVal );
__declspec(implementation_key(6207)) double IObjectLensletArray1::GetDecenterY ( );
__declspec(implementation_key(6208)) void IObjectLensletArray1::PutDecenterY ( double pRetVal );
__declspec(implementation_key(6209)) long IObjectLensletArray1::GetNumberInX ( );
__declspec(implementation_key(6210)) void IObjectLensletArray1::PutNumberInX ( long pRetVal );
__declspec(implementation_key(6211)) long IObjectLensletArray1::GetNumberInY ( );
__declspec(implementation_key(6212)) void IObjectLensletArray1::PutNumberInY ( long pRetVal );
__declspec(implementation_key(6213)) enum DiffractiveFaceChoices IObjectLensletArray1::GetDiffractiveFace ( );
__declspec(implementation_key(6214)) void IObjectLensletArray1::PutDiffractiveFace ( enum DiffractiveFaceChoices pRetVal );
__declspec(implementation_key(6215)) IEditorCellPtr IObjectLensletArray2::GetXHalfWidthCell ( );
__declspec(implementation_key(6216)) IEditorCellPtr IObjectLensletArray2::GetYHalfWidthCell ( );
__declspec(implementation_key(6217)) IEditorCellPtr IObjectLensletArray2::GetThicknessCell ( );
__declspec(implementation_key(6218)) IEditorCellPtr IObjectLensletArray2::GetRadius1Cell ( );
__declspec(implementation_key(6219)) IEditorCellPtr IObjectLensletArray2::GetConic1Cell ( );
__declspec(implementation_key(6220)) IEditorCellPtr IObjectLensletArray2::GetRadius2Cell ( );
__declspec(implementation_key(6221)) IEditorCellPtr IObjectLensletArray2::GetConic2Cell ( );
__declspec(implementation_key(6222)) IEditorCellPtr IObjectLensletArray2::GetNumberInXCell ( );
__declspec(implementation_key(6223)) IEditorCellPtr IObjectLensletArray2::GetNumberInYCell ( );
__declspec(implementation_key(6224)) double IObjectLensletArray2::GetXHalfWidth ( );
__declspec(implementation_key(6225)) void IObjectLensletArray2::PutXHalfWidth ( double pRetVal );
__declspec(implementation_key(6226)) double IObjectLensletArray2::GetYHalfWidth ( );
__declspec(implementation_key(6227)) void IObjectLensletArray2::PutYHalfWidth ( double pRetVal );
__declspec(implementation_key(6228)) double IObjectLensletArray2::GetThickness ( );
__declspec(implementation_key(6229)) void IObjectLensletArray2::PutThickness ( double pRetVal );
__declspec(implementation_key(6230)) double IObjectLensletArray2::GetRadius1 ( );
__declspec(implementation_key(6231)) void IObjectLensletArray2::PutRadius1 ( double pRetVal );
__declspec(implementation_key(6232)) double IObjectLensletArray2::GetConic1 ( );
__declspec(implementation_key(6233)) void IObjectLensletArray2::PutConic1 ( double pRetVal );
__declspec(implementation_key(6234)) double IObjectLensletArray2::GetRadius2 ( );
__declspec(implementation_key(6235)) void IObjectLensletArray2::PutRadius2 ( double pRetVal );
__declspec(implementation_key(6236)) double IObjectLensletArray2::GetConic2 ( );
__declspec(implementation_key(6237)) void IObjectLensletArray2::PutConic2 ( double pRetVal );
__declspec(implementation_key(6238)) long IObjectLensletArray2::GetNumberInX ( );
__declspec(implementation_key(6239)) void IObjectLensletArray2::PutNumberInX ( long pRetVal );
__declspec(implementation_key(6240)) long IObjectLensletArray2::GetNumberInY ( );
__declspec(implementation_key(6241)) void IObjectLensletArray2::PutNumberInY ( long pRetVal );
__declspec(implementation_key(6242)) IEditorCellPtr IObjectMEMS::GetNumberOfXPixelsCell ( );
__declspec(implementation_key(6243)) IEditorCellPtr IObjectMEMS::GetNumberOfYPixelsCell ( );
__declspec(implementation_key(6244)) IEditorCellPtr IObjectMEMS::GetXMinusWidthCell ( );
__declspec(implementation_key(6245)) IEditorCellPtr IObjectMEMS::GetYMinusWidthCell ( );
__declspec(implementation_key(6246)) IEditorCellPtr IObjectMEMS::GetAngle0Cell ( );
__declspec(implementation_key(6247)) IEditorCellPtr IObjectMEMS::GetAngle1Cell ( );
__declspec(implementation_key(6248)) IEditorCellPtr IObjectMEMS::GetAngle2Cell ( );
__declspec(implementation_key(6249)) IEditorCellPtr IObjectMEMS::GetRotationAngleCell ( );
__declspec(implementation_key(6250)) IEditorCellPtr IObjectMEMS::GetPFlagCell ( );
__declspec(implementation_key(6251)) long IObjectMEMS::GetNumberOfXPixels ( );
__declspec(implementation_key(6252)) void IObjectMEMS::PutNumberOfXPixels ( long pRetVal );
__declspec(implementation_key(6253)) long IObjectMEMS::GetNumberOfYPixels ( );
__declspec(implementation_key(6254)) void IObjectMEMS::PutNumberOfYPixels ( long pRetVal );
__declspec(implementation_key(6255)) double IObjectMEMS::GetXMinusWidth ( );
__declspec(implementation_key(6256)) void IObjectMEMS::PutXMinusWidth ( double pRetVal );
__declspec(implementation_key(6257)) double IObjectMEMS::GetYMinusWidth ( );
__declspec(implementation_key(6258)) void IObjectMEMS::PutYMinusWidth ( double pRetVal );
__declspec(implementation_key(6259)) double IObjectMEMS::GetAngle0 ( );
__declspec(implementation_key(6260)) void IObjectMEMS::PutAngle0 ( double pRetVal );
__declspec(implementation_key(6261)) double IObjectMEMS::GetAngle1 ( );
__declspec(implementation_key(6262)) void IObjectMEMS::PutAngle1 ( double pRetVal );
__declspec(implementation_key(6263)) double IObjectMEMS::GetAngle2 ( );
__declspec(implementation_key(6264)) void IObjectMEMS::PutAngle2 ( double pRetVal );
__declspec(implementation_key(6265)) double IObjectMEMS::GetRotationAngle ( );
__declspec(implementation_key(6266)) void IObjectMEMS::PutRotationAngle ( double pRetVal );
__declspec(implementation_key(6267)) enum PixelAddressing IObjectMEMS::GetPFlag ( );
__declspec(implementation_key(6268)) void IObjectMEMS::PutPFlag ( enum PixelAddressing pRetVal );
__declspec(implementation_key(6269)) IEditorCellPtr IObjectMEMS::PixelAddressGroupNCell ( long N );
__declspec(implementation_key(6270)) long IObjectMEMS::GetPixelAddressGroupN ( long N );
__declspec(implementation_key(6271)) HRESULT IObjectMEMS::SetPixelAddressGroupN ( long N, long Value );
__declspec(implementation_key(6272)) IEditorCellPtr IObjectOddAsphereLens::GetRadialApertureCell ( );
__declspec(implementation_key(6273)) IEditorCellPtr IObjectOddAsphereLens::GetThicknessCell ( );
__declspec(implementation_key(6274)) IEditorCellPtr IObjectOddAsphereLens::GetRadius1Cell ( );
__declspec(implementation_key(6275)) IEditorCellPtr IObjectOddAsphereLens::GetConic1Cell ( );
__declspec(implementation_key(6276)) IEditorCellPtr IObjectOddAsphereLens::GetCoeff1RPower1Cell ( );
__declspec(implementation_key(6277)) IEditorCellPtr IObjectOddAsphereLens::GetCoeff2RPower1Cell ( );
__declspec(implementation_key(6278)) IEditorCellPtr IObjectOddAsphereLens::GetCoeff3RPower1Cell ( );
__declspec(implementation_key(6279)) IEditorCellPtr IObjectOddAsphereLens::GetCoeff4RPower1Cell ( );
__declspec(implementation_key(6280)) IEditorCellPtr IObjectOddAsphereLens::GetCoeff5RPower1Cell ( );
__declspec(implementation_key(6281)) IEditorCellPtr IObjectOddAsphereLens::GetCoeff6RPower1Cell ( );
__declspec(implementation_key(6282)) IEditorCellPtr IObjectOddAsphereLens::GetCoeff7RPower1Cell ( );
__declspec(implementation_key(6283)) IEditorCellPtr IObjectOddAsphereLens::GetCoeff8RPower1Cell ( );
__declspec(implementation_key(6284)) IEditorCellPtr IObjectOddAsphereLens::GetCoeff9RPower1Cell ( );
__declspec(implementation_key(6285)) IEditorCellPtr IObjectOddAsphereLens::GetCoeff10RPower1Cell ( );
__declspec(implementation_key(6286)) IEditorCellPtr IObjectOddAsphereLens::GetCoeff11RPower1Cell ( );
__declspec(implementation_key(6287)) IEditorCellPtr IObjectOddAsphereLens::GetCoeff12RPower1Cell ( );
__declspec(implementation_key(6288)) IEditorCellPtr IObjectOddAsphereLens::GetRadius2Cell ( );
__declspec(implementation_key(6289)) IEditorCellPtr IObjectOddAsphereLens::GetConic2Cell ( );
__declspec(implementation_key(6290)) IEditorCellPtr IObjectOddAsphereLens::GetCoeff1RPower2Cell ( );
__declspec(implementation_key(6291)) IEditorCellPtr IObjectOddAsphereLens::GetCoeff2RPower2Cell ( );
__declspec(implementation_key(6292)) IEditorCellPtr IObjectOddAsphereLens::GetCoeff3RPower2Cell ( );
__declspec(implementation_key(6293)) IEditorCellPtr IObjectOddAsphereLens::GetCoeff4RPower2Cell ( );
__declspec(implementation_key(6294)) IEditorCellPtr IObjectOddAsphereLens::GetCoeff5RPower2Cell ( );
__declspec(implementation_key(6295)) IEditorCellPtr IObjectOddAsphereLens::GetCoeff6RPower2Cell ( );
__declspec(implementation_key(6296)) IEditorCellPtr IObjectOddAsphereLens::GetCoeff7RPower2Cell ( );
__declspec(implementation_key(6297)) IEditorCellPtr IObjectOddAsphereLens::GetCoeff8RPower2Cell ( );
__declspec(implementation_key(6298)) IEditorCellPtr IObjectOddAsphereLens::GetCoeff9RPower2Cell ( );
__declspec(implementation_key(6299)) IEditorCellPtr IObjectOddAsphereLens::GetCoeff10RPower2Cell ( );
__declspec(implementation_key(6300)) IEditorCellPtr IObjectOddAsphereLens::GetCoeff11RPower2Cell ( );
__declspec(implementation_key(6301)) IEditorCellPtr IObjectOddAsphereLens::GetCoeff12RPower2Cell ( );
__declspec(implementation_key(6302)) double IObjectOddAsphereLens::GetRadialAperture ( );
__declspec(implementation_key(6303)) void IObjectOddAsphereLens::PutRadialAperture ( double pRetVal );
__declspec(implementation_key(6304)) double IObjectOddAsphereLens::GetThickness ( );
__declspec(implementation_key(6305)) void IObjectOddAsphereLens::PutThickness ( double pRetVal );
__declspec(implementation_key(6306)) double IObjectOddAsphereLens::GetRadius1 ( );
__declspec(implementation_key(6307)) void IObjectOddAsphereLens::PutRadius1 ( double pRetVal );
__declspec(implementation_key(6308)) double IObjectOddAsphereLens::GetConic1 ( );
__declspec(implementation_key(6309)) void IObjectOddAsphereLens::PutConic1 ( double pRetVal );
__declspec(implementation_key(6310)) double IObjectOddAsphereLens::GetCoeff1RPower1 ( );
__declspec(implementation_key(6311)) void IObjectOddAsphereLens::PutCoeff1RPower1 ( double pRetVal );
__declspec(implementation_key(6312)) double IObjectOddAsphereLens::GetCoeff2RPower1 ( );
__declspec(implementation_key(6313)) void IObjectOddAsphereLens::PutCoeff2RPower1 ( double pRetVal );
__declspec(implementation_key(6314)) double IObjectOddAsphereLens::GetCoeff3RPower1 ( );
__declspec(implementation_key(6315)) void IObjectOddAsphereLens::PutCoeff3RPower1 ( double pRetVal );
__declspec(implementation_key(6316)) double IObjectOddAsphereLens::GetCoeff4RPower1 ( );
__declspec(implementation_key(6317)) void IObjectOddAsphereLens::PutCoeff4RPower1 ( double pRetVal );
__declspec(implementation_key(6318)) double IObjectOddAsphereLens::GetCoeff5RPower1 ( );
__declspec(implementation_key(6319)) void IObjectOddAsphereLens::PutCoeff5RPower1 ( double pRetVal );
__declspec(implementation_key(6320)) double IObjectOddAsphereLens::GetCoeff6RPower1 ( );
__declspec(implementation_key(6321)) void IObjectOddAsphereLens::PutCoeff6RPower1 ( double pRetVal );
__declspec(implementation_key(6322)) double IObjectOddAsphereLens::GetCoeff7RPower1 ( );
__declspec(implementation_key(6323)) void IObjectOddAsphereLens::PutCoeff7RPower1 ( double pRetVal );
__declspec(implementation_key(6324)) double IObjectOddAsphereLens::GetCoeff8RPower1 ( );
__declspec(implementation_key(6325)) void IObjectOddAsphereLens::PutCoeff8RPower1 ( double pRetVal );
__declspec(implementation_key(6326)) double IObjectOddAsphereLens::GetCoeff9RPower1 ( );
__declspec(implementation_key(6327)) void IObjectOddAsphereLens::PutCoeff9RPower1 ( double pRetVal );
__declspec(implementation_key(6328)) double IObjectOddAsphereLens::GetCoeff10RPower1 ( );
__declspec(implementation_key(6329)) void IObjectOddAsphereLens::PutCoeff10RPower1 ( double pRetVal );
__declspec(implementation_key(6330)) double IObjectOddAsphereLens::GetCoeff11RPower1 ( );
__declspec(implementation_key(6331)) void IObjectOddAsphereLens::PutCoeff11RPower1 ( double pRetVal );
__declspec(implementation_key(6332)) double IObjectOddAsphereLens::GetCoeff12RPower1 ( );
__declspec(implementation_key(6333)) void IObjectOddAsphereLens::PutCoeff12RPower1 ( double pRetVal );
__declspec(implementation_key(6334)) double IObjectOddAsphereLens::GetRadius2 ( );
__declspec(implementation_key(6335)) void IObjectOddAsphereLens::PutRadius2 ( double pRetVal );
__declspec(implementation_key(6336)) double IObjectOddAsphereLens::GetConic2 ( );
__declspec(implementation_key(6337)) void IObjectOddAsphereLens::PutConic2 ( double pRetVal );
__declspec(implementation_key(6338)) double IObjectOddAsphereLens::GetCoeff1RPower2 ( );
__declspec(implementation_key(6339)) void IObjectOddAsphereLens::PutCoeff1RPower2 ( double pRetVal );
__declspec(implementation_key(6340)) double IObjectOddAsphereLens::GetCoeff2RPower2 ( );
__declspec(implementation_key(6341)) void IObjectOddAsphereLens::PutCoeff2RPower2 ( double pRetVal );
__declspec(implementation_key(6342)) double IObjectOddAsphereLens::GetCoeff3RPower2 ( );
__declspec(implementation_key(6343)) void IObjectOddAsphereLens::PutCoeff3RPower2 ( double pRetVal );
__declspec(implementation_key(6344)) double IObjectOddAsphereLens::GetCoeff4RPower2 ( );
__declspec(implementation_key(6345)) void IObjectOddAsphereLens::PutCoeff4RPower2 ( double pRetVal );
__declspec(implementation_key(6346)) double IObjectOddAsphereLens::GetCoeff5RPower2 ( );
__declspec(implementation_key(6347)) void IObjectOddAsphereLens::PutCoeff5RPower2 ( double pRetVal );
__declspec(implementation_key(6348)) double IObjectOddAsphereLens::GetCoeff6RPower2 ( );
__declspec(implementation_key(6349)) void IObjectOddAsphereLens::PutCoeff6RPower2 ( double pRetVal );
__declspec(implementation_key(6350)) double IObjectOddAsphereLens::GetCoeff7RPower2 ( );
__declspec(implementation_key(6351)) void IObjectOddAsphereLens::PutCoeff7RPower2 ( double pRetVal );
__declspec(implementation_key(6352)) double IObjectOddAsphereLens::GetCoeff8RPower2 ( );
__declspec(implementation_key(6353)) void IObjectOddAsphereLens::PutCoeff8RPower2 ( double pRetVal );
__declspec(implementation_key(6354)) double IObjectOddAsphereLens::GetCoeff9RPower2 ( );
__declspec(implementation_key(6355)) void IObjectOddAsphereLens::PutCoeff9RPower2 ( double pRetVal );
__declspec(implementation_key(6356)) double IObjectOddAsphereLens::GetCoeff10RPower2 ( );
__declspec(implementation_key(6357)) void IObjectOddAsphereLens::PutCoeff10RPower2 ( double pRetVal );
__declspec(implementation_key(6358)) double IObjectOddAsphereLens::GetCoeff11RPower2 ( );
__declspec(implementation_key(6359)) void IObjectOddAsphereLens::PutCoeff11RPower2 ( double pRetVal );
__declspec(implementation_key(6360)) double IObjectOddAsphereLens::GetCoeff12RPower2 ( );
__declspec(implementation_key(6361)) void IObjectOddAsphereLens::PutCoeff12RPower2 ( double pRetVal );
__declspec(implementation_key(6362)) IEditorCellPtr IObjectParaxialLens::GetXHalfWidthCell ( );
__declspec(implementation_key(6363)) IEditorCellPtr IObjectParaxialLens::GetYHalfWidthCell ( );
__declspec(implementation_key(6364)) IEditorCellPtr IObjectParaxialLens::GetXFocalLengthCell ( );
__declspec(implementation_key(6365)) IEditorCellPtr IObjectParaxialLens::GetYFocalLengthCell ( );
__declspec(implementation_key(6366)) double IObjectParaxialLens::GetXHalfWidth ( );
__declspec(implementation_key(6367)) void IObjectParaxialLens::PutXHalfWidth ( double pRetVal );
__declspec(implementation_key(6368)) double IObjectParaxialLens::GetYHalfWidth ( );
__declspec(implementation_key(6369)) void IObjectParaxialLens::PutYHalfWidth ( double pRetVal );
__declspec(implementation_key(6370)) double IObjectParaxialLens::GetXFocalLength ( );
__declspec(implementation_key(6371)) void IObjectParaxialLens::PutXFocalLength ( double pRetVal );
__declspec(implementation_key(6372)) double IObjectParaxialLens::GetYFocalLength ( );
__declspec(implementation_key(6373)) void IObjectParaxialLens::PutYFocalLength ( double pRetVal );
__declspec(implementation_key(6374)) IEditorCellPtr IObjectPolygon::GetScaleCell ( );
__declspec(implementation_key(6375)) IEditorCellPtr IObjectPolygon::GetIsVolumeCell ( );
__declspec(implementation_key(6376)) double IObjectPolygon::GetScale ( );
__declspec(implementation_key(6377)) void IObjectPolygon::PutScale ( double pRetVal );
__declspec(implementation_key(6378)) VARIANT_BOOL IObjectPolygon::GetIsVolume ( );
__declspec(implementation_key(6379)) void IObjectPolygon::PutIsVolume ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(6380)) IEditorCellPtr IObjectRayRotator::GetXHalfWidthCell ( );
__declspec(implementation_key(6381)) IEditorCellPtr IObjectRayRotator::GetYHalfWidthCell ( );
__declspec(implementation_key(6382)) IEditorCellPtr IObjectRayRotator::GetRotateZCell ( );
__declspec(implementation_key(6383)) IEditorCellPtr IObjectRayRotator::GetRotateYCell ( );
__declspec(implementation_key(6384)) double IObjectRayRotator::GetXHalfWidth ( );
__declspec(implementation_key(6385)) void IObjectRayRotator::PutXHalfWidth ( double pRetVal );
__declspec(implementation_key(6386)) double IObjectRayRotator::GetYHalfWidth ( );
__declspec(implementation_key(6387)) void IObjectRayRotator::PutYHalfWidth ( double pRetVal );
__declspec(implementation_key(6388)) double IObjectRayRotator::GetRotateZ ( );
__declspec(implementation_key(6389)) void IObjectRayRotator::PutRotateZ ( double pRetVal );
__declspec(implementation_key(6390)) double IObjectRayRotator::GetRotateY ( );
__declspec(implementation_key(6391)) void IObjectRayRotator::PutRotateY ( double pRetVal );
__declspec(implementation_key(6392)) IEditorCellPtr IObjectRectangularCorner::GetLengthCell ( );
__declspec(implementation_key(6393)) double IObjectRectangularCorner::GetLength ( );
__declspec(implementation_key(6394)) void IObjectRectangularCorner::PutLength ( double pRetVal );
__declspec(implementation_key(6395)) IEditorCellPtr IObjectRectangle::GetXHalfWidthCell ( );
__declspec(implementation_key(6396)) IEditorCellPtr IObjectRectangle::GetYHalfWidthCell ( );
__declspec(implementation_key(6397)) double IObjectRectangle::GetXHalfWidth ( );
__declspec(implementation_key(6398)) void IObjectRectangle::PutXHalfWidth ( double pRetVal );
__declspec(implementation_key(6399)) double IObjectRectangle::GetYHalfWidth ( );
__declspec(implementation_key(6400)) void IObjectRectangle::PutYHalfWidth ( double pRetVal );
__declspec(implementation_key(6401)) IEditorCellPtr IObjectRectangularPipe::GetX1HalfWidthCell ( );
__declspec(implementation_key(6402)) IEditorCellPtr IObjectRectangularPipe::GetY1HalfWidthCell ( );
__declspec(implementation_key(6403)) IEditorCellPtr IObjectRectangularPipe::GetZLengthCell ( );
__declspec(implementation_key(6404)) IEditorCellPtr IObjectRectangularPipe::GetX2HalfWidthCell ( );
__declspec(implementation_key(6405)) IEditorCellPtr IObjectRectangularPipe::GetY2HalfWidthCell ( );
__declspec(implementation_key(6406)) IEditorCellPtr IObjectRectangularPipe::GetFrontXAngleCell ( );
__declspec(implementation_key(6407)) IEditorCellPtr IObjectRectangularPipe::GetFrontYAngleCell ( );
__declspec(implementation_key(6408)) IEditorCellPtr IObjectRectangularPipe::GetRearXAngleCell ( );
__declspec(implementation_key(6409)) IEditorCellPtr IObjectRectangularPipe::GetRearYAngleCell ( );
__declspec(implementation_key(6410)) double IObjectRectangularPipe::GetX1HalfWidth ( );
__declspec(implementation_key(6411)) void IObjectRectangularPipe::PutX1HalfWidth ( double pRetVal );
__declspec(implementation_key(6412)) double IObjectRectangularPipe::GetY1HalfWidth ( );
__declspec(implementation_key(6413)) void IObjectRectangularPipe::PutY1HalfWidth ( double pRetVal );
__declspec(implementation_key(6414)) double IObjectRectangularPipe::GetZLength ( );
__declspec(implementation_key(6415)) void IObjectRectangularPipe::PutZLength ( double pRetVal );
__declspec(implementation_key(6416)) double IObjectRectangularPipe::GetX2HalfWidth ( );
__declspec(implementation_key(6417)) void IObjectRectangularPipe::PutX2HalfWidth ( double pRetVal );
__declspec(implementation_key(6418)) double IObjectRectangularPipe::GetY2HalfWidth ( );
__declspec(implementation_key(6419)) void IObjectRectangularPipe::PutY2HalfWidth ( double pRetVal );
__declspec(implementation_key(6420)) double IObjectRectangularPipe::GetFrontXAngle ( );
__declspec(implementation_key(6421)) void IObjectRectangularPipe::PutFrontXAngle ( double pRetVal );
__declspec(implementation_key(6422)) double IObjectRectangularPipe::GetFrontYAngle ( );
__declspec(implementation_key(6423)) void IObjectRectangularPipe::PutFrontYAngle ( double pRetVal );
__declspec(implementation_key(6424)) double IObjectRectangularPipe::GetRearXAngle ( );
__declspec(implementation_key(6425)) void IObjectRectangularPipe::PutRearXAngle ( double pRetVal );
__declspec(implementation_key(6426)) double IObjectRectangularPipe::GetRearYAngle ( );
__declspec(implementation_key(6427)) void IObjectRectangularPipe::PutRearYAngle ( double pRetVal );
__declspec(implementation_key(6428)) IEditorCellPtr IObjectRectangularPipeGrating::GetX1HalfWidthCell ( );
__declspec(implementation_key(6429)) IEditorCellPtr IObjectRectangularPipeGrating::GetY1HalfWidthCell ( );
__declspec(implementation_key(6430)) IEditorCellPtr IObjectRectangularPipeGrating::GetZLengthCell ( );
__declspec(implementation_key(6431)) IEditorCellPtr IObjectRectangularPipeGrating::GetX2HalfWidthCell ( );
__declspec(implementation_key(6432)) IEditorCellPtr IObjectRectangularPipeGrating::GetY2HalfWidthCell ( );
__declspec(implementation_key(6433)) IEditorCellPtr IObjectRectangularPipeGrating::GetFrontXAngleCell ( );
__declspec(implementation_key(6434)) IEditorCellPtr IObjectRectangularPipeGrating::GetFrontYAngleCell ( );
__declspec(implementation_key(6435)) IEditorCellPtr IObjectRectangularPipeGrating::GetRearXAngleCell ( );
__declspec(implementation_key(6436)) IEditorCellPtr IObjectRectangularPipeGrating::GetRearYAngleCell ( );
__declspec(implementation_key(6437)) IEditorCellPtr IObjectRectangularPipeGrating::GetLinesPerUMCell ( );
__declspec(implementation_key(6438)) IEditorCellPtr IObjectRectangularPipeGrating::GetDiffOrderCell ( );
__declspec(implementation_key(6439)) double IObjectRectangularPipeGrating::GetX1HalfWidth ( );
__declspec(implementation_key(6440)) void IObjectRectangularPipeGrating::PutX1HalfWidth ( double pRetVal );
__declspec(implementation_key(6441)) double IObjectRectangularPipeGrating::GetY1HalfWidth ( );
__declspec(implementation_key(6442)) void IObjectRectangularPipeGrating::PutY1HalfWidth ( double pRetVal );
__declspec(implementation_key(6443)) double IObjectRectangularPipeGrating::GetZLength ( );
__declspec(implementation_key(6444)) void IObjectRectangularPipeGrating::PutZLength ( double pRetVal );
__declspec(implementation_key(6445)) double IObjectRectangularPipeGrating::GetX2HalfWidth ( );
__declspec(implementation_key(6446)) void IObjectRectangularPipeGrating::PutX2HalfWidth ( double pRetVal );
__declspec(implementation_key(6447)) double IObjectRectangularPipeGrating::GetY2HalfWidth ( );
__declspec(implementation_key(6448)) void IObjectRectangularPipeGrating::PutY2HalfWidth ( double pRetVal );
__declspec(implementation_key(6449)) double IObjectRectangularPipeGrating::GetFrontXAngle ( );
__declspec(implementation_key(6450)) void IObjectRectangularPipeGrating::PutFrontXAngle ( double pRetVal );
__declspec(implementation_key(6451)) double IObjectRectangularPipeGrating::GetFrontYAngle ( );
__declspec(implementation_key(6452)) void IObjectRectangularPipeGrating::PutFrontYAngle ( double pRetVal );
__declspec(implementation_key(6453)) double IObjectRectangularPipeGrating::GetRearXAngle ( );
__declspec(implementation_key(6454)) void IObjectRectangularPipeGrating::PutRearXAngle ( double pRetVal );
__declspec(implementation_key(6455)) double IObjectRectangularPipeGrating::GetRearYAngle ( );
__declspec(implementation_key(6456)) void IObjectRectangularPipeGrating::PutRearYAngle ( double pRetVal );
__declspec(implementation_key(6457)) double IObjectRectangularPipeGrating::GetLinesPerUM ( );
__declspec(implementation_key(6458)) void IObjectRectangularPipeGrating::PutLinesPerUM ( double pRetVal );
__declspec(implementation_key(6459)) double IObjectRectangularPipeGrating::GetDiffOrder ( );
__declspec(implementation_key(6460)) void IObjectRectangularPipeGrating::PutDiffOrder ( double pRetVal );
__declspec(implementation_key(6461)) IEditorCellPtr IObjectRectangularRoof::GetXHalfWidthCell ( );
__declspec(implementation_key(6462)) IEditorCellPtr IObjectRectangularRoof::GetYHalfWidthCell ( );
__declspec(implementation_key(6463)) IEditorCellPtr IObjectRectangularRoof::GetAngleCell ( );
__declspec(implementation_key(6464)) double IObjectRectangularRoof::GetXHalfWidth ( );
__declspec(implementation_key(6465)) void IObjectRectangularRoof::PutXHalfWidth ( double pRetVal );
__declspec(implementation_key(6466)) double IObjectRectangularRoof::GetYHalfWidth ( );
__declspec(implementation_key(6467)) void IObjectRectangularRoof::PutYHalfWidth ( double pRetVal );
__declspec(implementation_key(6468)) double IObjectRectangularRoof::GetAngle ( );
__declspec(implementation_key(6469)) void IObjectRectangularRoof::PutAngle ( double pRetVal );
__declspec(implementation_key(6470)) IEditorCellPtr IObjectRectangularTorusSurface::GetOuterRCell ( );
__declspec(implementation_key(6471)) IEditorCellPtr IObjectRectangularTorusSurface::GetInnerRCell ( );
__declspec(implementation_key(6472)) IEditorCellPtr IObjectRectangularTorusSurface::GetStartAngleCell ( );
__declspec(implementation_key(6473)) IEditorCellPtr IObjectRectangularTorusSurface::GetStopAngleCell ( );
__declspec(implementation_key(6474)) IEditorCellPtr IObjectRectangularTorusSurface::GetThicknessCell ( );
__declspec(implementation_key(6475)) double IObjectRectangularTorusSurface::GetOuterR ( );
__declspec(implementation_key(6476)) void IObjectRectangularTorusSurface::PutOuterR ( double pRetVal );
__declspec(implementation_key(6477)) double IObjectRectangularTorusSurface::GetInnerR ( );
__declspec(implementation_key(6478)) void IObjectRectangularTorusSurface::PutInnerR ( double pRetVal );
__declspec(implementation_key(6479)) double IObjectRectangularTorusSurface::GetStartAngle ( );
__declspec(implementation_key(6480)) void IObjectRectangularTorusSurface::PutStartAngle ( double pRetVal );
__declspec(implementation_key(6481)) double IObjectRectangularTorusSurface::GetStopAngle ( );
__declspec(implementation_key(6482)) void IObjectRectangularTorusSurface::PutStopAngle ( double pRetVal );
__declspec(implementation_key(6483)) double IObjectRectangularTorusSurface::GetThickness ( );
__declspec(implementation_key(6484)) void IObjectRectangularTorusSurface::PutThickness ( double pRetVal );
__declspec(implementation_key(6485)) IEditorCellPtr IObjectRectangularTorusVolume::GetOuterRCell ( );
__declspec(implementation_key(6486)) IEditorCellPtr IObjectRectangularTorusVolume::GetInnerRCell ( );
__declspec(implementation_key(6487)) IEditorCellPtr IObjectRectangularTorusVolume::GetStartAngleCell ( );
__declspec(implementation_key(6488)) IEditorCellPtr IObjectRectangularTorusVolume::GetStopAngleCell ( );
__declspec(implementation_key(6489)) IEditorCellPtr IObjectRectangularTorusVolume::GetThicknessCell ( );
__declspec(implementation_key(6490)) double IObjectRectangularTorusVolume::GetOuterR ( );
__declspec(implementation_key(6491)) void IObjectRectangularTorusVolume::PutOuterR ( double pRetVal );
__declspec(implementation_key(6492)) double IObjectRectangularTorusVolume::GetInnerR ( );
__declspec(implementation_key(6493)) void IObjectRectangularTorusVolume::PutInnerR ( double pRetVal );
__declspec(implementation_key(6494)) double IObjectRectangularTorusVolume::GetStartAngle ( );
__declspec(implementation_key(6495)) void IObjectRectangularTorusVolume::PutStartAngle ( double pRetVal );
__declspec(implementation_key(6496)) double IObjectRectangularTorusVolume::GetStopAngle ( );
__declspec(implementation_key(6497)) void IObjectRectangularTorusVolume::PutStopAngle ( double pRetVal );
__declspec(implementation_key(6498)) double IObjectRectangularTorusVolume::GetThickness ( );
__declspec(implementation_key(6499)) void IObjectRectangularTorusVolume::PutThickness ( double pRetVal );
__declspec(implementation_key(6500)) IEditorCellPtr IObjectRectangularVolume::GetX1HalfWidthCell ( );
__declspec(implementation_key(6501)) IEditorCellPtr IObjectRectangularVolume::GetY1HalfWidthCell ( );
__declspec(implementation_key(6502)) IEditorCellPtr IObjectRectangularVolume::GetZLengthCell ( );
__declspec(implementation_key(6503)) IEditorCellPtr IObjectRectangularVolume::GetX2HalfWidthCell ( );
__declspec(implementation_key(6504)) IEditorCellPtr IObjectRectangularVolume::GetY2HalfWidthCell ( );
__declspec(implementation_key(6505)) IEditorCellPtr IObjectRectangularVolume::GetFrontXAngleCell ( );
__declspec(implementation_key(6506)) IEditorCellPtr IObjectRectangularVolume::GetFrontYAngleCell ( );
__declspec(implementation_key(6507)) IEditorCellPtr IObjectRectangularVolume::GetRearXAngleCell ( );
__declspec(implementation_key(6508)) IEditorCellPtr IObjectRectangularVolume::GetRearYAngleCell ( );
__declspec(implementation_key(6509)) double IObjectRectangularVolume::GetX1HalfWidth ( );
__declspec(implementation_key(6510)) void IObjectRectangularVolume::PutX1HalfWidth ( double pRetVal );
__declspec(implementation_key(6511)) double IObjectRectangularVolume::GetY1HalfWidth ( );
__declspec(implementation_key(6512)) void IObjectRectangularVolume::PutY1HalfWidth ( double pRetVal );
__declspec(implementation_key(6513)) double IObjectRectangularVolume::GetZLength ( );
__declspec(implementation_key(6514)) void IObjectRectangularVolume::PutZLength ( double pRetVal );
__declspec(implementation_key(6515)) double IObjectRectangularVolume::GetX2HalfWidth ( );
__declspec(implementation_key(6516)) void IObjectRectangularVolume::PutX2HalfWidth ( double pRetVal );
__declspec(implementation_key(6517)) double IObjectRectangularVolume::GetY2HalfWidth ( );
__declspec(implementation_key(6518)) void IObjectRectangularVolume::PutY2HalfWidth ( double pRetVal );
__declspec(implementation_key(6519)) double IObjectRectangularVolume::GetFrontXAngle ( );
__declspec(implementation_key(6520)) void IObjectRectangularVolume::PutFrontXAngle ( double pRetVal );
__declspec(implementation_key(6521)) double IObjectRectangularVolume::GetFrontYAngle ( );
__declspec(implementation_key(6522)) void IObjectRectangularVolume::PutFrontYAngle ( double pRetVal );
__declspec(implementation_key(6523)) double IObjectRectangularVolume::GetRearXAngle ( );
__declspec(implementation_key(6524)) void IObjectRectangularVolume::PutRearXAngle ( double pRetVal );
__declspec(implementation_key(6525)) double IObjectRectangularVolume::GetRearYAngle ( );
__declspec(implementation_key(6526)) void IObjectRectangularVolume::PutRearYAngle ( double pRetVal );
__declspec(implementation_key(6527)) IEditorCellPtr IObjectRectangularVolumeGrating::GetX1HalfWidthCell ( );
__declspec(implementation_key(6528)) IEditorCellPtr IObjectRectangularVolumeGrating::GetY1HalfWidthCell ( );
__declspec(implementation_key(6529)) IEditorCellPtr IObjectRectangularVolumeGrating::GetZLengthCell ( );
__declspec(implementation_key(6530)) IEditorCellPtr IObjectRectangularVolumeGrating::GetX2HalfWidthCell ( );
__declspec(implementation_key(6531)) IEditorCellPtr IObjectRectangularVolumeGrating::GetY2HalfWidthCell ( );
__declspec(implementation_key(6532)) IEditorCellPtr IObjectRectangularVolumeGrating::GetFrontXAngleCell ( );
__declspec(implementation_key(6533)) IEditorCellPtr IObjectRectangularVolumeGrating::GetFrontYAngleCell ( );
__declspec(implementation_key(6534)) IEditorCellPtr IObjectRectangularVolumeGrating::GetRearXAngleCell ( );
__declspec(implementation_key(6535)) IEditorCellPtr IObjectRectangularVolumeGrating::GetRearYAngleCell ( );
__declspec(implementation_key(6536)) IEditorCellPtr IObjectRectangularVolumeGrating::GetLinesPerUMCell ( );
__declspec(implementation_key(6537)) IEditorCellPtr IObjectRectangularVolumeGrating::GetDiffOrderCell ( );
__declspec(implementation_key(6538)) double IObjectRectangularVolumeGrating::GetX1HalfWidth ( );
__declspec(implementation_key(6539)) void IObjectRectangularVolumeGrating::PutX1HalfWidth ( double pRetVal );
__declspec(implementation_key(6540)) double IObjectRectangularVolumeGrating::GetY1HalfWidth ( );
__declspec(implementation_key(6541)) void IObjectRectangularVolumeGrating::PutY1HalfWidth ( double pRetVal );
__declspec(implementation_key(6542)) double IObjectRectangularVolumeGrating::GetZLength ( );
__declspec(implementation_key(6543)) void IObjectRectangularVolumeGrating::PutZLength ( double pRetVal );
__declspec(implementation_key(6544)) double IObjectRectangularVolumeGrating::GetX2HalfWidth ( );
__declspec(implementation_key(6545)) void IObjectRectangularVolumeGrating::PutX2HalfWidth ( double pRetVal );
__declspec(implementation_key(6546)) double IObjectRectangularVolumeGrating::GetY2HalfWidth ( );
__declspec(implementation_key(6547)) void IObjectRectangularVolumeGrating::PutY2HalfWidth ( double pRetVal );
__declspec(implementation_key(6548)) double IObjectRectangularVolumeGrating::GetFrontXAngle ( );
__declspec(implementation_key(6549)) void IObjectRectangularVolumeGrating::PutFrontXAngle ( double pRetVal );
__declspec(implementation_key(6550)) double IObjectRectangularVolumeGrating::GetFrontYAngle ( );
__declspec(implementation_key(6551)) void IObjectRectangularVolumeGrating::PutFrontYAngle ( double pRetVal );
__declspec(implementation_key(6552)) double IObjectRectangularVolumeGrating::GetRearXAngle ( );
__declspec(implementation_key(6553)) void IObjectRectangularVolumeGrating::PutRearXAngle ( double pRetVal );
__declspec(implementation_key(6554)) double IObjectRectangularVolumeGrating::GetRearYAngle ( );
__declspec(implementation_key(6555)) void IObjectRectangularVolumeGrating::PutRearYAngle ( double pRetVal );
__declspec(implementation_key(6556)) double IObjectRectangularVolumeGrating::GetLinesPerUM ( );
__declspec(implementation_key(6557)) void IObjectRectangularVolumeGrating::PutLinesPerUM ( double pRetVal );
__declspec(implementation_key(6558)) double IObjectRectangularVolumeGrating::GetDiffOrder ( );
__declspec(implementation_key(6559)) void IObjectRectangularVolumeGrating::PutDiffOrder ( double pRetVal );
__declspec(implementation_key(6560)) IEditorCellPtr IObjectReverseRadianceDetector::GetShapeCell ( );
__declspec(implementation_key(6561)) IEditorCellPtr IObjectReverseRadianceDetector::GetXHalfWidthCell ( );
__declspec(implementation_key(6562)) IEditorCellPtr IObjectReverseRadianceDetector::GetYHalfWidthCell ( );
__declspec(implementation_key(6563)) IEditorCellPtr IObjectReverseRadianceDetector::GetNumberOfXPixelsCell ( );
__declspec(implementation_key(6564)) IEditorCellPtr IObjectReverseRadianceDetector::GetNumberOfYPixelsCell ( );
__declspec(implementation_key(6565)) IEditorCellPtr IObjectReverseRadianceDetector::GetNumberOfPPixelsCell ( );
__declspec(implementation_key(6566)) IEditorCellPtr IObjectReverseRadianceDetector::GetNumberOfAPixelsCell ( );
__declspec(implementation_key(6567)) IEditorCellPtr IObjectReverseRadianceDetector::GetSourceObjectCell ( );
__declspec(implementation_key(6568)) IEditorCellPtr IObjectReverseRadianceDetector::GetTargetObjectCell ( );
__declspec(implementation_key(6569)) IEditorCellPtr IObjectReverseRadianceDetector::GetBoundaryObjectCell ( );
__declspec(implementation_key(6570)) IEditorCellPtr IObjectReverseRadianceDetector::GetReverseRayColorCell ( );
__declspec(implementation_key(6571)) enum ShapeChoices IObjectReverseRadianceDetector::GetShape ( );
__declspec(implementation_key(6572)) void IObjectReverseRadianceDetector::PutShape ( enum ShapeChoices pRetVal );
__declspec(implementation_key(6573)) double IObjectReverseRadianceDetector::GetXHalfWidth ( );
__declspec(implementation_key(6574)) void IObjectReverseRadianceDetector::PutXHalfWidth ( double pRetVal );
__declspec(implementation_key(6575)) double IObjectReverseRadianceDetector::GetYHalfWidth ( );
__declspec(implementation_key(6576)) void IObjectReverseRadianceDetector::PutYHalfWidth ( double pRetVal );
__declspec(implementation_key(6577)) long IObjectReverseRadianceDetector::GetNumberOfXPixels ( );
__declspec(implementation_key(6578)) void IObjectReverseRadianceDetector::PutNumberOfXPixels ( long pRetVal );
__declspec(implementation_key(6579)) long IObjectReverseRadianceDetector::GetNumberOfYPixels ( );
__declspec(implementation_key(6580)) void IObjectReverseRadianceDetector::PutNumberOfYPixels ( long pRetVal );
__declspec(implementation_key(6581)) long IObjectReverseRadianceDetector::GetNumberOfPPixels ( );
__declspec(implementation_key(6582)) void IObjectReverseRadianceDetector::PutNumberOfPPixels ( long pRetVal );
__declspec(implementation_key(6583)) long IObjectReverseRadianceDetector::GetNumberOfAPixels ( );
__declspec(implementation_key(6584)) void IObjectReverseRadianceDetector::PutNumberOfAPixels ( long pRetVal );
__declspec(implementation_key(6585)) long IObjectReverseRadianceDetector::GetSourceObject ( );
__declspec(implementation_key(6586)) void IObjectReverseRadianceDetector::PutSourceObject ( long pRetVal );
__declspec(implementation_key(6587)) long IObjectReverseRadianceDetector::GetTargetObject ( );
__declspec(implementation_key(6588)) void IObjectReverseRadianceDetector::PutTargetObject ( long pRetVal );
__declspec(implementation_key(6589)) long IObjectReverseRadianceDetector::GetBoundaryObject ( );
__declspec(implementation_key(6590)) void IObjectReverseRadianceDetector::PutBoundaryObject ( long pRetVal );
__declspec(implementation_key(6591)) long IObjectReverseRadianceDetector::GetReverseRayColor ( );
__declspec(implementation_key(6592)) void IObjectReverseRadianceDetector::PutReverseRayColor ( long pRetVal );
__declspec(implementation_key(6593)) IEditorCellPtr IObjectReverseRadianceTarget::GetShapeCell ( );
__declspec(implementation_key(6594)) IEditorCellPtr IObjectReverseRadianceTarget::GetXHalfWidthCell ( );
__declspec(implementation_key(6595)) IEditorCellPtr IObjectReverseRadianceTarget::GetYHalfWidthCell ( );
__declspec(implementation_key(6596)) IEditorCellPtr IObjectReverseRadianceTarget::GetNumberOfXPixelsCell ( );
__declspec(implementation_key(6597)) IEditorCellPtr IObjectReverseRadianceTarget::GetNumberOfYPixelsCell ( );
__declspec(implementation_key(6598)) IEditorCellPtr IObjectReverseRadianceTarget::GetNumberOfPPixelsCell ( );
__declspec(implementation_key(6599)) IEditorCellPtr IObjectReverseRadianceTarget::GetNumberOfAPixelsCell ( );
__declspec(implementation_key(6600)) enum ShapeChoices IObjectReverseRadianceTarget::GetShape ( );
__declspec(implementation_key(6601)) void IObjectReverseRadianceTarget::PutShape ( enum ShapeChoices pRetVal );
__declspec(implementation_key(6602)) double IObjectReverseRadianceTarget::GetXHalfWidth ( );
__declspec(implementation_key(6603)) void IObjectReverseRadianceTarget::PutXHalfWidth ( double pRetVal );
__declspec(implementation_key(6604)) double IObjectReverseRadianceTarget::GetYHalfWidth ( );
__declspec(implementation_key(6605)) void IObjectReverseRadianceTarget::PutYHalfWidth ( double pRetVal );
__declspec(implementation_key(6606)) long IObjectReverseRadianceTarget::GetNumberOfXPixels ( );
__declspec(implementation_key(6607)) void IObjectReverseRadianceTarget::PutNumberOfXPixels ( long pRetVal );
__declspec(implementation_key(6608)) long IObjectReverseRadianceTarget::GetNumberOfYPixels ( );
__declspec(implementation_key(6609)) void IObjectReverseRadianceTarget::PutNumberOfYPixels ( long pRetVal );
__declspec(implementation_key(6610)) long IObjectReverseRadianceTarget::GetNumberOfPPixels ( );
__declspec(implementation_key(6611)) void IObjectReverseRadianceTarget::PutNumberOfPPixels ( long pRetVal );
__declspec(implementation_key(6612)) long IObjectReverseRadianceTarget::GetNumberOfAPixels ( );
__declspec(implementation_key(6613)) void IObjectReverseRadianceTarget::PutNumberOfAPixels ( long pRetVal );
__declspec(implementation_key(6614)) IEditorCellPtr IObjectSlide::GetXFullWidthCell ( );
__declspec(implementation_key(6615)) IEditorCellPtr IObjectSlide::GetAspectRatioCell ( );
__declspec(implementation_key(6616)) double IObjectSlide::GetXFullWidth ( );
__declspec(implementation_key(6617)) void IObjectSlide::PutXFullWidth ( double pRetVal );
__declspec(implementation_key(6618)) double IObjectSlide::GetAspectRatio ( );
__declspec(implementation_key(6619)) void IObjectSlide::PutAspectRatio ( double pRetVal );
__declspec(implementation_key(6620)) IEditorCellPtr IObjectSources::GetNumberOfLayoutRaysCell ( );
__declspec(implementation_key(6621)) IEditorCellPtr IObjectSources::GetNumberOfAnalysisRaysCell ( );
__declspec(implementation_key(6622)) IEditorCellPtr IObjectSources::GetPowerCell ( );
__declspec(implementation_key(6623)) IEditorCellPtr IObjectSources::GetWaveNumberCell ( );
__declspec(implementation_key(6624)) IEditorCellPtr IObjectSources::GetColorNumberCell ( );
__declspec(implementation_key(6625)) long IObjectSources::GetNumberOfLayoutRays ( );
__declspec(implementation_key(6626)) void IObjectSources::PutNumberOfLayoutRays ( long pRetVal );
__declspec(implementation_key(6627)) long IObjectSources::GetNumberOfAnalysisRays ( );
__declspec(implementation_key(6628)) void IObjectSources::PutNumberOfAnalysisRays ( long pRetVal );
__declspec(implementation_key(6629)) double IObjectSources::GetPower ( );
__declspec(implementation_key(6630)) void IObjectSources::PutPower ( double pRetVal );
__declspec(implementation_key(6631)) long IObjectSources::GetwaveNumber ( );
__declspec(implementation_key(6632)) void IObjectSources::PutwaveNumber ( long pRetVal );
__declspec(implementation_key(6633)) long IObjectSources::GetColorNumber ( );
__declspec(implementation_key(6634)) void IObjectSources::PutColorNumber ( long pRetVal );
__declspec(implementation_key(6635)) IEditorCellPtr IObjectSourceDiffractive::GetSamplingCell ( );
__declspec(implementation_key(6636)) enum SampleSizes IObjectSourceDiffractive::GetSampling ( );
__declspec(implementation_key(6637)) void IObjectSourceDiffractive::PutSampling ( enum SampleSizes pRetVal );
__declspec(implementation_key(6638)) IEditorCellPtr IObjectSourceDiode::GetAstigmatismCell ( );
__declspec(implementation_key(6639)) IEditorCellPtr IObjectSourceDiode::GetXMinusDivergenceCell ( );
__declspec(implementation_key(6640)) IEditorCellPtr IObjectSourceDiode::GetXMinusSuperGaussCell ( );
__declspec(implementation_key(6641)) IEditorCellPtr IObjectSourceDiode::GetYMinusDivergenceCell ( );
__declspec(implementation_key(6642)) IEditorCellPtr IObjectSourceDiode::GetYMinusSuperGaussCell ( );
__declspec(implementation_key(6643)) IEditorCellPtr IObjectSourceDiode::GetNumberXCell ( );
__declspec(implementation_key(6644)) IEditorCellPtr IObjectSourceDiode::GetNumberYCell ( );
__declspec(implementation_key(6645)) IEditorCellPtr IObjectSourceDiode::GetDeltaXCell ( );
__declspec(implementation_key(6646)) IEditorCellPtr IObjectSourceDiode::GetDeltaYCell ( );
__declspec(implementation_key(6647)) IEditorCellPtr IObjectSourceDiode::GetXMinusWidthCell ( );
__declspec(implementation_key(6648)) IEditorCellPtr IObjectSourceDiode::GetXMinusSigmaCell ( );
__declspec(implementation_key(6649)) IEditorCellPtr IObjectSourceDiode::GetXMinusWidthHXCell ( );
__declspec(implementation_key(6650)) IEditorCellPtr IObjectSourceDiode::GetYMinusWidthCell ( );
__declspec(implementation_key(6651)) IEditorCellPtr IObjectSourceDiode::GetYMinusSigmaCell ( );
__declspec(implementation_key(6652)) IEditorCellPtr IObjectSourceDiode::GetYMinusWidthHYCell ( );
__declspec(implementation_key(6653)) double IObjectSourceDiode::GetAstigmatism ( );
__declspec(implementation_key(6654)) void IObjectSourceDiode::PutAstigmatism ( double pRetVal );
__declspec(implementation_key(6655)) double IObjectSourceDiode::GetXMinusDivergence ( );
__declspec(implementation_key(6656)) void IObjectSourceDiode::PutXMinusDivergence ( double pRetVal );
__declspec(implementation_key(6657)) double IObjectSourceDiode::GetXMinusSuperGauss ( );
__declspec(implementation_key(6658)) void IObjectSourceDiode::PutXMinusSuperGauss ( double pRetVal );
__declspec(implementation_key(6659)) double IObjectSourceDiode::GetYMinusDivergence ( );
__declspec(implementation_key(6660)) void IObjectSourceDiode::PutYMinusDivergence ( double pRetVal );
__declspec(implementation_key(6661)) double IObjectSourceDiode::GetYMinusSuperGauss ( );
__declspec(implementation_key(6662)) void IObjectSourceDiode::PutYMinusSuperGauss ( double pRetVal );
__declspec(implementation_key(6663)) long IObjectSourceDiode::GetNumberX ( );
__declspec(implementation_key(6664)) void IObjectSourceDiode::PutNumberX ( long pRetVal );
__declspec(implementation_key(6665)) long IObjectSourceDiode::GetNumberY ( );
__declspec(implementation_key(6666)) void IObjectSourceDiode::PutNumberY ( long pRetVal );
__declspec(implementation_key(6667)) double IObjectSourceDiode::GetDeltaX ( );
__declspec(implementation_key(6668)) void IObjectSourceDiode::PutDeltaX ( double pRetVal );
__declspec(implementation_key(6669)) double IObjectSourceDiode::GetDeltaY ( );
__declspec(implementation_key(6670)) void IObjectSourceDiode::PutDeltaY ( double pRetVal );
__declspec(implementation_key(6671)) double IObjectSourceDiode::GetXMinusWidth ( );
__declspec(implementation_key(6672)) void IObjectSourceDiode::PutXMinusWidth ( double pRetVal );
__declspec(implementation_key(6673)) double IObjectSourceDiode::GetXMinusSigma ( );
__declspec(implementation_key(6674)) void IObjectSourceDiode::PutXMinusSigma ( double pRetVal );
__declspec(implementation_key(6675)) double IObjectSourceDiode::GetXMinusWidthHX ( );
__declspec(implementation_key(6676)) void IObjectSourceDiode::PutXMinusWidthHX ( double pRetVal );
__declspec(implementation_key(6677)) double IObjectSourceDiode::GetYMinusWidth ( );
__declspec(implementation_key(6678)) void IObjectSourceDiode::PutYMinusWidth ( double pRetVal );
__declspec(implementation_key(6679)) double IObjectSourceDiode::GetYMinusSigma ( );
__declspec(implementation_key(6680)) void IObjectSourceDiode::PutYMinusSigma ( double pRetVal );
__declspec(implementation_key(6681)) double IObjectSourceDiode::GetYMinusWidthHY ( );
__declspec(implementation_key(6682)) void IObjectSourceDiode::PutYMinusWidthHY ( double pRetVal );
__declspec(implementation_key(6683)) IEditorCellPtr IObjectSourceEllipse::GetXHalfWidthCell ( );
__declspec(implementation_key(6684)) IEditorCellPtr IObjectSourceEllipse::GetYHalfWidthCell ( );
__declspec(implementation_key(6685)) IEditorCellPtr IObjectSourceEllipse::GetSourceDistanceCell ( );
__declspec(implementation_key(6686)) IEditorCellPtr IObjectSourceEllipse::GetCosineExponentCell ( );
__declspec(implementation_key(6687)) IEditorCellPtr IObjectSourceEllipse::GetGaussGXCell ( );
__declspec(implementation_key(6688)) IEditorCellPtr IObjectSourceEllipse::GetGaussGYCell ( );
__declspec(implementation_key(6689)) IEditorCellPtr IObjectSourceEllipse::GetSourceXCell ( );
__declspec(implementation_key(6690)) IEditorCellPtr IObjectSourceEllipse::GetSourceYCell ( );
__declspec(implementation_key(6691)) IEditorCellPtr IObjectSourceEllipse::GetMinXHalfWidthCell ( );
__declspec(implementation_key(6692)) IEditorCellPtr IObjectSourceEllipse::GetMinYHalfWidthCell ( );
__declspec(implementation_key(6693)) double IObjectSourceEllipse::GetXHalfWidth ( );
__declspec(implementation_key(6694)) void IObjectSourceEllipse::PutXHalfWidth ( double pRetVal );
__declspec(implementation_key(6695)) double IObjectSourceEllipse::GetYHalfWidth ( );
__declspec(implementation_key(6696)) void IObjectSourceEllipse::PutYHalfWidth ( double pRetVal );
__declspec(implementation_key(6697)) double IObjectSourceEllipse::GetSourceDistance ( );
__declspec(implementation_key(6698)) void IObjectSourceEllipse::PutSourceDistance ( double pRetVal );
__declspec(implementation_key(6699)) double IObjectSourceEllipse::GetCosineExponent ( );
__declspec(implementation_key(6700)) void IObjectSourceEllipse::PutCosineExponent ( double pRetVal );
__declspec(implementation_key(6701)) double IObjectSourceEllipse::GetGaussGX ( );
__declspec(implementation_key(6702)) void IObjectSourceEllipse::PutGaussGX ( double pRetVal );
__declspec(implementation_key(6703)) double IObjectSourceEllipse::GetGaussGY ( );
__declspec(implementation_key(6704)) void IObjectSourceEllipse::PutGaussGY ( double pRetVal );
__declspec(implementation_key(6705)) double IObjectSourceEllipse::GetSourceX ( );
__declspec(implementation_key(6706)) void IObjectSourceEllipse::PutSourceX ( double pRetVal );
__declspec(implementation_key(6707)) double IObjectSourceEllipse::GetSourceY ( );
__declspec(implementation_key(6708)) void IObjectSourceEllipse::PutSourceY ( double pRetVal );
__declspec(implementation_key(6709)) double IObjectSourceEllipse::GetMinXHalfWidth ( );
__declspec(implementation_key(6710)) void IObjectSourceEllipse::PutMinXHalfWidth ( double pRetVal );
__declspec(implementation_key(6711)) double IObjectSourceEllipse::GetMinYHalfWidth ( );
__declspec(implementation_key(6712)) void IObjectSourceEllipse::PutMinYHalfWidth ( double pRetVal );
__declspec(implementation_key(6713)) IEditorCellPtr IObjectSourceEULUMDATFile::GetLumensInFileCell ( );
__declspec(implementation_key(6714)) double IObjectSourceEULUMDATFile::GetLumensInFile ( );
__declspec(implementation_key(6715)) void IObjectSourceEULUMDATFile::PutLumensInFile ( double pRetVal );
__declspec(implementation_key(6716)) IEditorCellPtr IObjectSourceFilament::GetLengthCell ( );
__declspec(implementation_key(6717)) IEditorCellPtr IObjectSourceFilament::GetRadiusACell ( );
__declspec(implementation_key(6718)) IEditorCellPtr IObjectSourceFilament::GetTurnsCell ( );
__declspec(implementation_key(6719)) double IObjectSourceFilament::GetLength ( );
__declspec(implementation_key(6720)) void IObjectSourceFilament::PutLength ( double pRetVal );
__declspec(implementation_key(6721)) double IObjectSourceFilament::GetRadiusA ( );
__declspec(implementation_key(6722)) void IObjectSourceFilament::PutRadiusA ( double pRetVal );
__declspec(implementation_key(6723)) double IObjectSourceFilament::GetTurns ( );
__declspec(implementation_key(6724)) void IObjectSourceFilament::PutTurns ( double pRetVal );
__declspec(implementation_key(6725)) IEditorCellPtr IObjectSourceFile::GetRandomizeCell ( );
__declspec(implementation_key(6726)) VARIANT_BOOL IObjectSourceFile::GetRandomize ( );
__declspec(implementation_key(6727)) void IObjectSourceFile::PutRandomize ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(6728)) double IObjectSourceFile::GetSourceUnits ( );
__declspec(implementation_key(6729)) double IObjectSourceFile::GetminWave ( );
__declspec(implementation_key(6730)) double IObjectSourceFile::GetmaxWave ( );
__declspec(implementation_key(6731)) IEditorCellPtr IObjectSourceGaussian::GetBeamSizeCell ( );
__declspec(implementation_key(6732)) IEditorCellPtr IObjectSourceGaussian::GetPositionCell ( );
__declspec(implementation_key(6733)) double IObjectSourceGaussian::GetBeamSize ( );
__declspec(implementation_key(6734)) void IObjectSourceGaussian::PutBeamSize ( double pRetVal );
__declspec(implementation_key(6735)) double IObjectSourceGaussian::Getposition ( );
__declspec(implementation_key(6736)) void IObjectSourceGaussian::Putposition ( double pRetVal );
__declspec(implementation_key(6737)) IEditorCellPtr IObjectSourceIESNAFile::GetLumensInFileCell ( );
__declspec(implementation_key(6738)) double IObjectSourceIESNAFile::GetLumensInFile ( );
__declspec(implementation_key(6739)) void IObjectSourceIESNAFile::PutLumensInFile ( double pRetVal );
__declspec(implementation_key(6740)) IEditorCellPtr IObjectSourceImported::GetScaleCell ( );
__declspec(implementation_key(6741)) IEditorCellPtr IObjectSourceImported::GetCosFactorCell ( );
__declspec(implementation_key(6742)) double IObjectSourceImported::GetScale ( );
__declspec(implementation_key(6743)) void IObjectSourceImported::PutScale ( double pRetVal );
__declspec(implementation_key(6744)) double IObjectSourceImported::GetCosFactor ( );
__declspec(implementation_key(6745)) void IObjectSourceImported::PutCosFactor ( double pRetVal );
__declspec(implementation_key(6746)) IEditorCellPtr IObjectSourceObject::GetParentObjectNumberCell ( );
__declspec(implementation_key(6747)) IEditorCellPtr IObjectSourceObject::GetChordTolCell ( );
__declspec(implementation_key(6748)) IEditorCellPtr IObjectSourceObject::GetCosFactorCell ( );
__declspec(implementation_key(6749)) long IObjectSourceObject::GetParentObjectNumber ( );
__declspec(implementation_key(6750)) void IObjectSourceObject::PutParentObjectNumber ( long pRetVal );
__declspec(implementation_key(6751)) double IObjectSourceObject::GetChordTol ( );
__declspec(implementation_key(6752)) void IObjectSourceObject::PutChordTol ( double pRetVal );
__declspec(implementation_key(6753)) double IObjectSourceObject::GetCosFactor ( );
__declspec(implementation_key(6754)) void IObjectSourceObject::PutCosFactor ( double pRetVal );
__declspec(implementation_key(6755)) IEditorCellPtr IObjectSourcePoint::GetConeAngleCell ( );
__declspec(implementation_key(6756)) double IObjectSourcePoint::GetConeAngle ( );
__declspec(implementation_key(6757)) void IObjectSourcePoint::PutConeAngle ( double pRetVal );
__declspec(implementation_key(6758)) IEditorCellPtr IObjectSourceRadial::GetXHalfWidthCell ( );
__declspec(implementation_key(6759)) IEditorCellPtr IObjectSourceRadial::GetYHalfWidthCell ( );
__declspec(implementation_key(6760)) IEditorCellPtr IObjectSourceRadial::GetMinAngleCell ( );
__declspec(implementation_key(6761)) IEditorCellPtr IObjectSourceRadial::GetMaxAngleCell ( );
__declspec(implementation_key(6762)) IEditorCellPtr IObjectSourceRadial::GetNumberOfPointsCell ( );
__declspec(implementation_key(6763)) IEditorCellPtr IObjectSourceRadial::SubAngleICell ( long i );
__declspec(implementation_key(6764)) double IObjectSourceRadial::GetXHalfWidth ( );
__declspec(implementation_key(6765)) void IObjectSourceRadial::PutXHalfWidth ( double pRetVal );
__declspec(implementation_key(6766)) double IObjectSourceRadial::GetYHalfWidth ( );
__declspec(implementation_key(6767)) void IObjectSourceRadial::PutYHalfWidth ( double pRetVal );
__declspec(implementation_key(6768)) double IObjectSourceRadial::GetMinAngle ( );
__declspec(implementation_key(6769)) void IObjectSourceRadial::PutMinAngle ( double pRetVal );
__declspec(implementation_key(6770)) double IObjectSourceRadial::GetMaxAngle ( );
__declspec(implementation_key(6771)) void IObjectSourceRadial::PutMaxAngle ( double pRetVal );
__declspec(implementation_key(6772)) long IObjectSourceRadial::GetNumberOfPoints ( );
__declspec(implementation_key(6773)) void IObjectSourceRadial::PutNumberOfPoints ( long pRetVal );
__declspec(implementation_key(6774)) double IObjectSourceRadial::GetSubAngleI ( long i );
__declspec(implementation_key(6775)) HRESULT IObjectSourceRadial::SetSubAngleI ( long i, double v );
__declspec(implementation_key(6776)) IEditorCellPtr IObjectSourceRay::GetXCosineCell ( );
__declspec(implementation_key(6777)) IEditorCellPtr IObjectSourceRay::GetYCosineCell ( );
__declspec(implementation_key(6778)) IEditorCellPtr IObjectSourceRay::GetZCosineCell ( );
__declspec(implementation_key(6779)) IEditorCellPtr IObjectSourceRay::GetRandomSeedCell ( );
__declspec(implementation_key(6780)) double IObjectSourceRay::GetXCosine ( );
__declspec(implementation_key(6781)) void IObjectSourceRay::PutXCosine ( double pRetVal );
__declspec(implementation_key(6782)) double IObjectSourceRay::GetYCosine ( );
__declspec(implementation_key(6783)) void IObjectSourceRay::PutYCosine ( double pRetVal );
__declspec(implementation_key(6784)) double IObjectSourceRay::GetZCosine ( );
__declspec(implementation_key(6785)) void IObjectSourceRay::PutZCosine ( double pRetVal );
__declspec(implementation_key(6786)) VARIANT_BOOL IObjectSourceRay::GetRandomSeed ( );
__declspec(implementation_key(6787)) void IObjectSourceRay::PutRandomSeed ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(6788)) IEditorCellPtr IObjectSourceRectangle::GetXHalfWidthCell ( );
__declspec(implementation_key(6789)) IEditorCellPtr IObjectSourceRectangle::GetYHalfWidthCell ( );
__declspec(implementation_key(6790)) IEditorCellPtr IObjectSourceRectangle::GetSourceDistanceCell ( );
__declspec(implementation_key(6791)) IEditorCellPtr IObjectSourceRectangle::GetCosineExponentCell ( );
__declspec(implementation_key(6792)) IEditorCellPtr IObjectSourceRectangle::GetGaussGXCell ( );
__declspec(implementation_key(6793)) IEditorCellPtr IObjectSourceRectangle::GetGaussGYCell ( );
__declspec(implementation_key(6794)) IEditorCellPtr IObjectSourceRectangle::GetSourceXCell ( );
__declspec(implementation_key(6795)) IEditorCellPtr IObjectSourceRectangle::GetSourceYCell ( );
__declspec(implementation_key(6796)) double IObjectSourceRectangle::GetXHalfWidth ( );
__declspec(implementation_key(6797)) void IObjectSourceRectangle::PutXHalfWidth ( double pRetVal );
__declspec(implementation_key(6798)) double IObjectSourceRectangle::GetYHalfWidth ( );
__declspec(implementation_key(6799)) void IObjectSourceRectangle::PutYHalfWidth ( double pRetVal );
__declspec(implementation_key(6800)) double IObjectSourceRectangle::GetSourceDistance ( );
__declspec(implementation_key(6801)) void IObjectSourceRectangle::PutSourceDistance ( double pRetVal );
__declspec(implementation_key(6802)) double IObjectSourceRectangle::GetCosineExponent ( );
__declspec(implementation_key(6803)) void IObjectSourceRectangle::PutCosineExponent ( double pRetVal );
__declspec(implementation_key(6804)) double IObjectSourceRectangle::GetGaussGX ( );
__declspec(implementation_key(6805)) void IObjectSourceRectangle::PutGaussGX ( double pRetVal );
__declspec(implementation_key(6806)) double IObjectSourceRectangle::GetGaussGY ( );
__declspec(implementation_key(6807)) void IObjectSourceRectangle::PutGaussGY ( double pRetVal );
__declspec(implementation_key(6808)) double IObjectSourceRectangle::GetSourceX ( );
__declspec(implementation_key(6809)) void IObjectSourceRectangle::PutSourceX ( double pRetVal );
__declspec(implementation_key(6810)) double IObjectSourceRectangle::GetSourceY ( );
__declspec(implementation_key(6811)) void IObjectSourceRectangle::PutSourceY ( double pRetVal );
__declspec(implementation_key(6812)) IEditorCellPtr IObjectSourceTube::GetLengthCell ( );
__declspec(implementation_key(6813)) IEditorCellPtr IObjectSourceTube::GetRadiusACell ( );
__declspec(implementation_key(6814)) double IObjectSourceTube::GetLength ( );
__declspec(implementation_key(6815)) void IObjectSourceTube::PutLength ( double pRetVal );
__declspec(implementation_key(6816)) double IObjectSourceTube::GetRadiusA ( );
__declspec(implementation_key(6817)) void IObjectSourceTube::PutRadiusA ( double pRetVal );
__declspec(implementation_key(6818)) IEditorCellPtr IObjectSourceTwoAngle::GetXHalfWidthCell ( );
__declspec(implementation_key(6819)) IEditorCellPtr IObjectSourceTwoAngle::GetYHalfWidthCell ( );
__declspec(implementation_key(6820)) IEditorCellPtr IObjectSourceTwoAngle::GetXHalfAngleDegreeCell ( );
__declspec(implementation_key(6821)) IEditorCellPtr IObjectSourceTwoAngle::GetYHalfAngleDegreeCell ( );
__declspec(implementation_key(6822)) IEditorCellPtr IObjectSourceTwoAngle::GetSpatialShapeCell ( );
__declspec(implementation_key(6823)) IEditorCellPtr IObjectSourceTwoAngle::GetAngularShapeCell ( );
__declspec(implementation_key(6824)) IEditorCellPtr IObjectSourceTwoAngle::GetUniformAngleCell ( );
__declspec(implementation_key(6825)) double IObjectSourceTwoAngle::GetXHalfWidth ( );
__declspec(implementation_key(6826)) void IObjectSourceTwoAngle::PutXHalfWidth ( double pRetVal );
__declspec(implementation_key(6827)) double IObjectSourceTwoAngle::GetYHalfWidth ( );
__declspec(implementation_key(6828)) void IObjectSourceTwoAngle::PutYHalfWidth ( double pRetVal );
__declspec(implementation_key(6829)) double IObjectSourceTwoAngle::GetXHalfAngleDegree ( );
__declspec(implementation_key(6830)) void IObjectSourceTwoAngle::PutXHalfAngleDegree ( double pRetVal );
__declspec(implementation_key(6831)) double IObjectSourceTwoAngle::GetYHalfAngleDegree ( );
__declspec(implementation_key(6832)) void IObjectSourceTwoAngle::PutYHalfAngleDegree ( double pRetVal );
__declspec(implementation_key(6833)) enum ShapeChoices IObjectSourceTwoAngle::GetSpatialShape ( );
__declspec(implementation_key(6834)) void IObjectSourceTwoAngle::PutSpatialShape ( enum ShapeChoices pRetVal );
__declspec(implementation_key(6835)) enum ShapeChoices IObjectSourceTwoAngle::GetAngularShape ( );
__declspec(implementation_key(6836)) void IObjectSourceTwoAngle::PutAngularShape ( enum ShapeChoices pRetVal );
__declspec(implementation_key(6837)) enum UniformAngleChoices IObjectSourceTwoAngle::GetUniformAngle ( );
__declspec(implementation_key(6838)) void IObjectSourceTwoAngle::PutUniformAngle ( enum UniformAngleChoices pRetVal );
__declspec(implementation_key(6839)) IEditorCellPtr IObjectSourceVolumeCylindrical::GetXHalfWidthCell ( );
__declspec(implementation_key(6840)) IEditorCellPtr IObjectSourceVolumeCylindrical::GetYHalfWidthCell ( );
__declspec(implementation_key(6841)) IEditorCellPtr IObjectSourceVolumeCylindrical::GetZHalfWidthCell ( );
__declspec(implementation_key(6842)) double IObjectSourceVolumeCylindrical::GetXHalfWidth ( );
__declspec(implementation_key(6843)) void IObjectSourceVolumeCylindrical::PutXHalfWidth ( double pRetVal );
__declspec(implementation_key(6844)) double IObjectSourceVolumeCylindrical::GetYHalfWidth ( );
__declspec(implementation_key(6845)) void IObjectSourceVolumeCylindrical::PutYHalfWidth ( double pRetVal );
__declspec(implementation_key(6846)) double IObjectSourceVolumeCylindrical::GetZHalfWidth ( );
__declspec(implementation_key(6847)) void IObjectSourceVolumeCylindrical::PutZHalfWidth ( double pRetVal );
__declspec(implementation_key(6848)) IEditorCellPtr IObjectSourceVolumeElliptical::GetXHalfWidthCell ( );
__declspec(implementation_key(6849)) IEditorCellPtr IObjectSourceVolumeElliptical::GetYHalfWidthCell ( );
__declspec(implementation_key(6850)) IEditorCellPtr IObjectSourceVolumeElliptical::GetZHalfWidthCell ( );
__declspec(implementation_key(6851)) double IObjectSourceVolumeElliptical::GetXHalfWidth ( );
__declspec(implementation_key(6852)) void IObjectSourceVolumeElliptical::PutXHalfWidth ( double pRetVal );
__declspec(implementation_key(6853)) double IObjectSourceVolumeElliptical::GetYHalfWidth ( );
__declspec(implementation_key(6854)) void IObjectSourceVolumeElliptical::PutYHalfWidth ( double pRetVal );
__declspec(implementation_key(6855)) double IObjectSourceVolumeElliptical::GetZHalfWidth ( );
__declspec(implementation_key(6856)) void IObjectSourceVolumeElliptical::PutZHalfWidth ( double pRetVal );
__declspec(implementation_key(6857)) IEditorCellPtr IObjectSourceVolumeRectangular::GetXHalfWidthCell ( );
__declspec(implementation_key(6858)) IEditorCellPtr IObjectSourceVolumeRectangular::GetYHalfWidthCell ( );
__declspec(implementation_key(6859)) IEditorCellPtr IObjectSourceVolumeRectangular::GetZHalfWidthCell ( );
__declspec(implementation_key(6860)) double IObjectSourceVolumeRectangular::GetXHalfWidth ( );
__declspec(implementation_key(6861)) void IObjectSourceVolumeRectangular::PutXHalfWidth ( double pRetVal );
__declspec(implementation_key(6862)) double IObjectSourceVolumeRectangular::GetYHalfWidth ( );
__declspec(implementation_key(6863)) void IObjectSourceVolumeRectangular::PutYHalfWidth ( double pRetVal );
__declspec(implementation_key(6864)) double IObjectSourceVolumeRectangular::GetZHalfWidth ( );
__declspec(implementation_key(6865)) void IObjectSourceVolumeRectangular::PutZHalfWidth ( double pRetVal );
__declspec(implementation_key(6866)) IEditorCellPtr IObjectSphere::GetRadiusCell ( );
__declspec(implementation_key(6867)) IEditorCellPtr IObjectSphere::GetIsVolumeCell ( );
__declspec(implementation_key(6868)) double IObjectSphere::GetRadius ( );
__declspec(implementation_key(6869)) void IObjectSphere::PutRadius ( double pRetVal );
__declspec(implementation_key(6870)) VARIANT_BOOL IObjectSphere::GetIsVolume ( );
__declspec(implementation_key(6871)) void IObjectSphere::PutIsVolume ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(6872)) IEditorCellPtr IObjectStandardLens::GetRadius1Cell ( );
__declspec(implementation_key(6873)) IEditorCellPtr IObjectStandardLens::GetConic1Cell ( );
__declspec(implementation_key(6874)) IEditorCellPtr IObjectStandardLens::GetClear1Cell ( );
__declspec(implementation_key(6875)) IEditorCellPtr IObjectStandardLens::GetEdge1Cell ( );
__declspec(implementation_key(6876)) IEditorCellPtr IObjectStandardLens::GetThicknessCell ( );
__declspec(implementation_key(6877)) IEditorCellPtr IObjectStandardLens::GetRadius2Cell ( );
__declspec(implementation_key(6878)) IEditorCellPtr IObjectStandardLens::GetConic2Cell ( );
__declspec(implementation_key(6879)) IEditorCellPtr IObjectStandardLens::GetClear2Cell ( );
__declspec(implementation_key(6880)) IEditorCellPtr IObjectStandardLens::GetEdge2Cell ( );
__declspec(implementation_key(6881)) double IObjectStandardLens::GetRadius1 ( );
__declspec(implementation_key(6882)) void IObjectStandardLens::PutRadius1 ( double pRetVal );
__declspec(implementation_key(6883)) double IObjectStandardLens::GetConic1 ( );
__declspec(implementation_key(6884)) void IObjectStandardLens::PutConic1 ( double pRetVal );
__declspec(implementation_key(6885)) double IObjectStandardLens::GetClear1 ( );
__declspec(implementation_key(6886)) void IObjectStandardLens::PutClear1 ( double pRetVal );
__declspec(implementation_key(6887)) double IObjectStandardLens::GetEdge1 ( );
__declspec(implementation_key(6888)) void IObjectStandardLens::PutEdge1 ( double pRetVal );
__declspec(implementation_key(6889)) double IObjectStandardLens::GetThickness ( );
__declspec(implementation_key(6890)) void IObjectStandardLens::PutThickness ( double pRetVal );
__declspec(implementation_key(6891)) double IObjectStandardLens::GetRadius2 ( );
__declspec(implementation_key(6892)) void IObjectStandardLens::PutRadius2 ( double pRetVal );
__declspec(implementation_key(6893)) double IObjectStandardLens::GetConic2 ( );
__declspec(implementation_key(6894)) void IObjectStandardLens::PutConic2 ( double pRetVal );
__declspec(implementation_key(6895)) double IObjectStandardLens::GetClear2 ( );
__declspec(implementation_key(6896)) void IObjectStandardLens::PutClear2 ( double pRetVal );
__declspec(implementation_key(6897)) double IObjectStandardLens::GetEdge2 ( );
__declspec(implementation_key(6898)) void IObjectStandardLens::PutEdge2 ( double pRetVal );
__declspec(implementation_key(6899)) IEditorCellPtr IObjectStandardSurface::GetRadiusCell ( );
__declspec(implementation_key(6900)) IEditorCellPtr IObjectStandardSurface::GetConicCell ( );
__declspec(implementation_key(6901)) IEditorCellPtr IObjectStandardSurface::GetMaxApertureCell ( );
__declspec(implementation_key(6902)) IEditorCellPtr IObjectStandardSurface::GetMinApertureCell ( );
__declspec(implementation_key(6903)) double IObjectStandardSurface::GetRadius ( );
__declspec(implementation_key(6904)) void IObjectStandardSurface::PutRadius ( double pRetVal );
__declspec(implementation_key(6905)) double IObjectStandardSurface::GetConic ( );
__declspec(implementation_key(6906)) void IObjectStandardSurface::PutConic ( double pRetVal );
__declspec(implementation_key(6907)) double IObjectStandardSurface::GetMaxAperture ( );
__declspec(implementation_key(6908)) void IObjectStandardSurface::PutMaxAperture ( double pRetVal );
__declspec(implementation_key(6909)) double IObjectStandardSurface::GetMinAperture ( );
__declspec(implementation_key(6910)) void IObjectStandardSurface::PutMinAperture ( double pRetVal );
__declspec(implementation_key(6911)) IEditorCellPtr IObjectSwept::GetParentObjectNumberCell ( );
__declspec(implementation_key(6912)) IEditorCellPtr IObjectSwept::GetCenterXCell ( );
__declspec(implementation_key(6913)) IEditorCellPtr IObjectSwept::GetCenterYCell ( );
__declspec(implementation_key(6914)) IEditorCellPtr IObjectSwept::GetCenterZCell ( );
__declspec(implementation_key(6915)) IEditorCellPtr IObjectSwept::GetAxisXCell ( );
__declspec(implementation_key(6916)) IEditorCellPtr IObjectSwept::GetAxisYCell ( );
__declspec(implementation_key(6917)) IEditorCellPtr IObjectSwept::GetAxisZCell ( );
__declspec(implementation_key(6918)) IEditorCellPtr IObjectSwept::GetPlaneXCell ( );
__declspec(implementation_key(6919)) IEditorCellPtr IObjectSwept::GetPlaneYCell ( );
__declspec(implementation_key(6920)) IEditorCellPtr IObjectSwept::GetPlaneZCell ( );
__declspec(implementation_key(6921)) IEditorCellPtr IObjectSwept::GetAngleCell ( );
__declspec(implementation_key(6922)) IEditorCellPtr IObjectSwept::GetEndCapsCell ( );
__declspec(implementation_key(6923)) IEditorCellPtr IObjectSwept::GetIsVolumeCell ( );
__declspec(implementation_key(6924)) long IObjectSwept::GetParentObjectNumber ( );
__declspec(implementation_key(6925)) void IObjectSwept::PutParentObjectNumber ( long pRetVal );
__declspec(implementation_key(6926)) double IObjectSwept::GetCenterX ( );
__declspec(implementation_key(6927)) void IObjectSwept::PutCenterX ( double pRetVal );
__declspec(implementation_key(6928)) double IObjectSwept::GetCenterY ( );
__declspec(implementation_key(6929)) void IObjectSwept::PutCenterY ( double pRetVal );
__declspec(implementation_key(6930)) double IObjectSwept::GetCenterZ ( );
__declspec(implementation_key(6931)) void IObjectSwept::PutCenterZ ( double pRetVal );
__declspec(implementation_key(6932)) double IObjectSwept::GetAxisX ( );
__declspec(implementation_key(6933)) void IObjectSwept::PutAxisX ( double pRetVal );
__declspec(implementation_key(6934)) double IObjectSwept::GetAxisY ( );
__declspec(implementation_key(6935)) void IObjectSwept::PutAxisY ( double pRetVal );
__declspec(implementation_key(6936)) double IObjectSwept::GetAxisZ ( );
__declspec(implementation_key(6937)) void IObjectSwept::PutAxisZ ( double pRetVal );
__declspec(implementation_key(6938)) double IObjectSwept::GetPlaneX ( );
__declspec(implementation_key(6939)) void IObjectSwept::PutPlaneX ( double pRetVal );
__declspec(implementation_key(6940)) double IObjectSwept::GetPlaneY ( );
__declspec(implementation_key(6941)) void IObjectSwept::PutPlaneY ( double pRetVal );
__declspec(implementation_key(6942)) double IObjectSwept::GetPlaneZ ( );
__declspec(implementation_key(6943)) void IObjectSwept::PutPlaneZ ( double pRetVal );
__declspec(implementation_key(6944)) double IObjectSwept::GetAngle ( );
__declspec(implementation_key(6945)) void IObjectSwept::PutAngle ( double pRetVal );
__declspec(implementation_key(6946)) enum EndCapOptions IObjectSwept::GetEndCaps ( );
__declspec(implementation_key(6947)) void IObjectSwept::PutEndCaps ( enum EndCapOptions pRetVal );
__declspec(implementation_key(6948)) VARIANT_BOOL IObjectSwept::GetIsVolume ( );
__declspec(implementation_key(6949)) void IObjectSwept::PutIsVolume ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(6950)) IEditorCellPtr IObjectTabulatedFactedRadial::GetScaleCell ( );
__declspec(implementation_key(6951)) IEditorCellPtr IObjectTabulatedFactedRadial::GetIsVolumeCell ( );
__declspec(implementation_key(6952)) IEditorCellPtr IObjectTabulatedFactedRadial::GetStartAngleCell ( );
__declspec(implementation_key(6953)) IEditorCellPtr IObjectTabulatedFactedRadial::GetStopAngleCell ( );
__declspec(implementation_key(6954)) IEditorCellPtr IObjectTabulatedFactedRadial::ZoneIFacetsCell ( long i );
__declspec(implementation_key(6955)) double IObjectTabulatedFactedRadial::GetScale ( );
__declspec(implementation_key(6956)) void IObjectTabulatedFactedRadial::PutScale ( double pRetVal );
__declspec(implementation_key(6957)) VARIANT_BOOL IObjectTabulatedFactedRadial::GetIsVolume ( );
__declspec(implementation_key(6958)) void IObjectTabulatedFactedRadial::PutIsVolume ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(6959)) double IObjectTabulatedFactedRadial::GetStartAngle ( );
__declspec(implementation_key(6960)) void IObjectTabulatedFactedRadial::PutStartAngle ( double pRetVal );
__declspec(implementation_key(6961)) double IObjectTabulatedFactedRadial::GetStopAngle ( );
__declspec(implementation_key(6962)) void IObjectTabulatedFactedRadial::PutStopAngle ( double pRetVal );
__declspec(implementation_key(6963)) long IObjectTabulatedFactedRadial::GetZoneIFacets ( long i );
__declspec(implementation_key(6964)) HRESULT IObjectTabulatedFactedRadial::SetZoneIFacets ( long i, long v );
__declspec(implementation_key(6965)) IEditorCellPtr IObjectTabulatedFactedToroid::GetScaleCell ( );
__declspec(implementation_key(6966)) IEditorCellPtr IObjectTabulatedFactedToroid::GetRadiusCell ( );
__declspec(implementation_key(6967)) IEditorCellPtr IObjectTabulatedFactedToroid::GetStartAngleCell ( );
__declspec(implementation_key(6968)) IEditorCellPtr IObjectTabulatedFactedToroid::GetStopAngleCell ( );
__declspec(implementation_key(6969)) IEditorCellPtr IObjectTabulatedFactedToroid::ZoneIFacetsCell ( long i );
__declspec(implementation_key(6970)) double IObjectTabulatedFactedToroid::GetScale ( );
__declspec(implementation_key(6971)) void IObjectTabulatedFactedToroid::PutScale ( double pRetVal );
__declspec(implementation_key(6972)) double IObjectTabulatedFactedToroid::GetRadius ( );
__declspec(implementation_key(6973)) void IObjectTabulatedFactedToroid::PutRadius ( double pRetVal );
__declspec(implementation_key(6974)) double IObjectTabulatedFactedToroid::GetStartAngle ( );
__declspec(implementation_key(6975)) void IObjectTabulatedFactedToroid::PutStartAngle ( double pRetVal );
__declspec(implementation_key(6976)) double IObjectTabulatedFactedToroid::GetStopAngle ( );
__declspec(implementation_key(6977)) void IObjectTabulatedFactedToroid::PutStopAngle ( double pRetVal );
__declspec(implementation_key(6978)) long IObjectTabulatedFactedToroid::GetZoneIFacets ( long i );
__declspec(implementation_key(6979)) HRESULT IObjectTabulatedFactedToroid::SetZoneIFacets ( long i, long v );
__declspec(implementation_key(6980)) IEditorCellPtr IObjectTabulatedFrenselRadial::GetScaleCell ( );
__declspec(implementation_key(6981)) IEditorCellPtr IObjectTabulatedFrenselRadial::GetIsVolumeCell ( );
__declspec(implementation_key(6982)) double IObjectTabulatedFrenselRadial::GetScale ( );
__declspec(implementation_key(6983)) void IObjectTabulatedFrenselRadial::PutScale ( double pRetVal );
__declspec(implementation_key(6984)) VARIANT_BOOL IObjectTabulatedFrenselRadial::GetIsVolume ( );
__declspec(implementation_key(6985)) void IObjectTabulatedFrenselRadial::PutIsVolume ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(6986)) IEditorCellPtr IObjectToroidalHologram::GetRadialHeightCell ( );
__declspec(implementation_key(6987)) IEditorCellPtr IObjectToroidalHologram::GetXHalfWidthCell ( );
__declspec(implementation_key(6988)) IEditorCellPtr IObjectToroidalHologram::GetThicknessCell ( );
__declspec(implementation_key(6989)) IEditorCellPtr IObjectToroidalHologram::GetRotationR1Cell ( );
__declspec(implementation_key(6990)) IEditorCellPtr IObjectToroidalHologram::GetRadius1Cell ( );
__declspec(implementation_key(6991)) IEditorCellPtr IObjectToroidalHologram::GetConic1Cell ( );
__declspec(implementation_key(6992)) IEditorCellPtr IObjectToroidalHologram::GetCoeff1YPower2Cell ( );
__declspec(implementation_key(6993)) IEditorCellPtr IObjectToroidalHologram::GetCoeff1YPower4Cell ( );
__declspec(implementation_key(6994)) IEditorCellPtr IObjectToroidalHologram::GetCoeff1YPower6Cell ( );
__declspec(implementation_key(6995)) IEditorCellPtr IObjectToroidalHologram::GetCoeff1YPower8Cell ( );
__declspec(implementation_key(6996)) IEditorCellPtr IObjectToroidalHologram::GetCoeff1YPower10Cell ( );
__declspec(implementation_key(6997)) IEditorCellPtr IObjectToroidalHologram::GetCoeff1YPower12Cell ( );
__declspec(implementation_key(6998)) IEditorCellPtr IObjectToroidalHologram::GetRotationR2Cell ( );
__declspec(implementation_key(6999)) IEditorCellPtr IObjectToroidalHologram::GetRadius2Cell ( );
__declspec(implementation_key(7000)) IEditorCellPtr IObjectToroidalHologram::GetConic2Cell ( );
__declspec(implementation_key(7001)) IEditorCellPtr IObjectToroidalHologram::GetCoeff2YPower2Cell ( );
__declspec(implementation_key(7002)) IEditorCellPtr IObjectToroidalHologram::GetCoeff2YPower4Cell ( );
__declspec(implementation_key(7003)) IEditorCellPtr IObjectToroidalHologram::GetCoeff2YPower6Cell ( );
__declspec(implementation_key(7004)) IEditorCellPtr IObjectToroidalHologram::GetCoeff2YPower8Cell ( );
__declspec(implementation_key(7005)) IEditorCellPtr IObjectToroidalHologram::GetCoeff2YPower10Cell ( );
__declspec(implementation_key(7006)) IEditorCellPtr IObjectToroidalHologram::GetCoeff2YPower12Cell ( );
__declspec(implementation_key(7007)) IEditorCellPtr IObjectToroidalHologram::GetHoloTypeCell ( );
__declspec(implementation_key(7008)) IEditorCellPtr IObjectToroidalHologram::GetOrderCell ( );
__declspec(implementation_key(7009)) IEditorCellPtr IObjectToroidalHologram::GetX1Cell ( );
__declspec(implementation_key(7010)) IEditorCellPtr IObjectToroidalHologram::GetY1Cell ( );
__declspec(implementation_key(7011)) IEditorCellPtr IObjectToroidalHologram::GetZ1Cell ( );
__declspec(implementation_key(7012)) IEditorCellPtr IObjectToroidalHologram::GetX2Cell ( );
__declspec(implementation_key(7013)) IEditorCellPtr IObjectToroidalHologram::GetY2Cell ( );
__declspec(implementation_key(7014)) IEditorCellPtr IObjectToroidalHologram::GetZ2Cell ( );
__declspec(implementation_key(7015)) double IObjectToroidalHologram::GetRadialHeight ( );
__declspec(implementation_key(7016)) void IObjectToroidalHologram::PutRadialHeight ( double pRetVal );
__declspec(implementation_key(7017)) double IObjectToroidalHologram::GetXHalfWidth ( );
__declspec(implementation_key(7018)) void IObjectToroidalHologram::PutXHalfWidth ( double pRetVal );
__declspec(implementation_key(7019)) double IObjectToroidalHologram::GetThickness ( );
__declspec(implementation_key(7020)) void IObjectToroidalHologram::PutThickness ( double pRetVal );
__declspec(implementation_key(7021)) double IObjectToroidalHologram::GetRotationR1 ( );
__declspec(implementation_key(7022)) void IObjectToroidalHologram::PutRotationR1 ( double pRetVal );
__declspec(implementation_key(7023)) double IObjectToroidalHologram::GetRadius1 ( );
__declspec(implementation_key(7024)) void IObjectToroidalHologram::PutRadius1 ( double pRetVal );
__declspec(implementation_key(7025)) double IObjectToroidalHologram::GetConic1 ( );
__declspec(implementation_key(7026)) void IObjectToroidalHologram::PutConic1 ( double pRetVal );
__declspec(implementation_key(7027)) double IObjectToroidalHologram::GetCoeff1YPower2 ( );
__declspec(implementation_key(7028)) void IObjectToroidalHologram::PutCoeff1YPower2 ( double pRetVal );
__declspec(implementation_key(7029)) double IObjectToroidalHologram::GetCoeff1YPower4 ( );
__declspec(implementation_key(7030)) void IObjectToroidalHologram::PutCoeff1YPower4 ( double pRetVal );
__declspec(implementation_key(7031)) double IObjectToroidalHologram::GetCoeff1YPower6 ( );
__declspec(implementation_key(7032)) void IObjectToroidalHologram::PutCoeff1YPower6 ( double pRetVal );
__declspec(implementation_key(7033)) double IObjectToroidalHologram::GetCoeff1YPower8 ( );
__declspec(implementation_key(7034)) void IObjectToroidalHologram::PutCoeff1YPower8 ( double pRetVal );
__declspec(implementation_key(7035)) double IObjectToroidalHologram::GetCoeff1YPower10 ( );
__declspec(implementation_key(7036)) void IObjectToroidalHologram::PutCoeff1YPower10 ( double pRetVal );
__declspec(implementation_key(7037)) double IObjectToroidalHologram::GetCoeff1YPower12 ( );
__declspec(implementation_key(7038)) void IObjectToroidalHologram::PutCoeff1YPower12 ( double pRetVal );
__declspec(implementation_key(7039)) double IObjectToroidalHologram::GetRotationR2 ( );
__declspec(implementation_key(7040)) void IObjectToroidalHologram::PutRotationR2 ( double pRetVal );
__declspec(implementation_key(7041)) double IObjectToroidalHologram::GetRadius2 ( );
__declspec(implementation_key(7042)) void IObjectToroidalHologram::PutRadius2 ( double pRetVal );
__declspec(implementation_key(7043)) double IObjectToroidalHologram::GetConic2 ( );
__declspec(implementation_key(7044)) void IObjectToroidalHologram::PutConic2 ( double pRetVal );
__declspec(implementation_key(7045)) double IObjectToroidalHologram::GetCoeff2YPower2 ( );
__declspec(implementation_key(7046)) void IObjectToroidalHologram::PutCoeff2YPower2 ( double pRetVal );
__declspec(implementation_key(7047)) double IObjectToroidalHologram::GetCoeff2YPower4 ( );
__declspec(implementation_key(7048)) void IObjectToroidalHologram::PutCoeff2YPower4 ( double pRetVal );
__declspec(implementation_key(7049)) double IObjectToroidalHologram::GetCoeff2YPower6 ( );
__declspec(implementation_key(7050)) void IObjectToroidalHologram::PutCoeff2YPower6 ( double pRetVal );
__declspec(implementation_key(7051)) double IObjectToroidalHologram::GetCoeff2YPower8 ( );
__declspec(implementation_key(7052)) void IObjectToroidalHologram::PutCoeff2YPower8 ( double pRetVal );
__declspec(implementation_key(7053)) double IObjectToroidalHologram::GetCoeff2YPower10 ( );
__declspec(implementation_key(7054)) void IObjectToroidalHologram::PutCoeff2YPower10 ( double pRetVal );
__declspec(implementation_key(7055)) double IObjectToroidalHologram::GetCoeff2YPower12 ( );
__declspec(implementation_key(7056)) void IObjectToroidalHologram::PutCoeff2YPower12 ( double pRetVal );
__declspec(implementation_key(7057)) long IObjectToroidalHologram::GetHologramType ( );
__declspec(implementation_key(7058)) void IObjectToroidalHologram::PutHologramType ( long pRetVal );
__declspec(implementation_key(7059)) double IObjectToroidalHologram::GetOrder ( );
__declspec(implementation_key(7060)) void IObjectToroidalHologram::PutOrder ( double pRetVal );
__declspec(implementation_key(7061)) double IObjectToroidalHologram::GetX1 ( );
__declspec(implementation_key(7062)) void IObjectToroidalHologram::PutX1 ( double pRetVal );
__declspec(implementation_key(7063)) double IObjectToroidalHologram::GetY1 ( );
__declspec(implementation_key(7064)) void IObjectToroidalHologram::PutY1 ( double pRetVal );
__declspec(implementation_key(7065)) double IObjectToroidalHologram::GetZ1 ( );
__declspec(implementation_key(7066)) void IObjectToroidalHologram::PutZ1 ( double pRetVal );
__declspec(implementation_key(7067)) double IObjectToroidalHologram::GetX2 ( );
__declspec(implementation_key(7068)) void IObjectToroidalHologram::PutX2 ( double pRetVal );
__declspec(implementation_key(7069)) double IObjectToroidalHologram::GetY2 ( );
__declspec(implementation_key(7070)) void IObjectToroidalHologram::PutY2 ( double pRetVal );
__declspec(implementation_key(7071)) double IObjectToroidalHologram::GetZ2 ( );
__declspec(implementation_key(7072)) void IObjectToroidalHologram::PutZ2 ( double pRetVal );
__declspec(implementation_key(7073)) IEditorCellPtr IObjectToroidalLens::GetRadialHeightCell ( );
__declspec(implementation_key(7074)) IEditorCellPtr IObjectToroidalLens::GetXHalfWidthCell ( );
__declspec(implementation_key(7075)) IEditorCellPtr IObjectToroidalLens::GetThicknessCell ( );
__declspec(implementation_key(7076)) IEditorCellPtr IObjectToroidalLens::GetRotationR1Cell ( );
__declspec(implementation_key(7077)) IEditorCellPtr IObjectToroidalLens::GetRadius1Cell ( );
__declspec(implementation_key(7078)) IEditorCellPtr IObjectToroidalLens::GetConic1Cell ( );
__declspec(implementation_key(7079)) IEditorCellPtr IObjectToroidalLens::GetCoeff1YPower2Cell ( );
__declspec(implementation_key(7080)) IEditorCellPtr IObjectToroidalLens::GetCoeff1YPower4Cell ( );
__declspec(implementation_key(7081)) IEditorCellPtr IObjectToroidalLens::GetCoeff1YPower6Cell ( );
__declspec(implementation_key(7082)) IEditorCellPtr IObjectToroidalLens::GetCoeff1YPower8Cell ( );
__declspec(implementation_key(7083)) IEditorCellPtr IObjectToroidalLens::GetCoeff1YPower10Cell ( );
__declspec(implementation_key(7084)) IEditorCellPtr IObjectToroidalLens::GetCoeff1YPower12Cell ( );
__declspec(implementation_key(7085)) IEditorCellPtr IObjectToroidalLens::GetRotationR2Cell ( );
__declspec(implementation_key(7086)) IEditorCellPtr IObjectToroidalLens::GetRadius2Cell ( );
__declspec(implementation_key(7087)) IEditorCellPtr IObjectToroidalLens::GetConic2Cell ( );
__declspec(implementation_key(7088)) IEditorCellPtr IObjectToroidalLens::GetCoeff2YPower2Cell ( );
__declspec(implementation_key(7089)) IEditorCellPtr IObjectToroidalLens::GetCoeff2YPower4Cell ( );
__declspec(implementation_key(7090)) IEditorCellPtr IObjectToroidalLens::GetCoeff2YPower6Cell ( );
__declspec(implementation_key(7091)) IEditorCellPtr IObjectToroidalLens::GetCoeff2YPower8Cell ( );
__declspec(implementation_key(7092)) IEditorCellPtr IObjectToroidalLens::GetCoeff2YPower10Cell ( );
__declspec(implementation_key(7093)) IEditorCellPtr IObjectToroidalLens::GetCoeff2YPower12Cell ( );
__declspec(implementation_key(7094)) IEditorCellPtr IObjectToroidalLens::GetCoeff1YPower14Cell ( );
__declspec(implementation_key(7095)) IEditorCellPtr IObjectToroidalLens::GetCoeff2YPower14Cell ( );
__declspec(implementation_key(7096)) double IObjectToroidalLens::GetRadialHeight ( );
__declspec(implementation_key(7097)) void IObjectToroidalLens::PutRadialHeight ( double pRetVal );
__declspec(implementation_key(7098)) double IObjectToroidalLens::GetXHalfWidth ( );
__declspec(implementation_key(7099)) void IObjectToroidalLens::PutXHalfWidth ( double pRetVal );
__declspec(implementation_key(7100)) double IObjectToroidalLens::GetThickness ( );
__declspec(implementation_key(7101)) void IObjectToroidalLens::PutThickness ( double pRetVal );
__declspec(implementation_key(7102)) double IObjectToroidalLens::GetRotationR1 ( );
__declspec(implementation_key(7103)) void IObjectToroidalLens::PutRotationR1 ( double pRetVal );
__declspec(implementation_key(7104)) double IObjectToroidalLens::GetRadius1 ( );
__declspec(implementation_key(7105)) void IObjectToroidalLens::PutRadius1 ( double pRetVal );
__declspec(implementation_key(7106)) double IObjectToroidalLens::GetConic1 ( );
__declspec(implementation_key(7107)) void IObjectToroidalLens::PutConic1 ( double pRetVal );
__declspec(implementation_key(7108)) double IObjectToroidalLens::GetCoeff1YPower2 ( );
__declspec(implementation_key(7109)) void IObjectToroidalLens::PutCoeff1YPower2 ( double pRetVal );
__declspec(implementation_key(7110)) double IObjectToroidalLens::GetCoeff1YPower4 ( );
__declspec(implementation_key(7111)) void IObjectToroidalLens::PutCoeff1YPower4 ( double pRetVal );
__declspec(implementation_key(7112)) double IObjectToroidalLens::GetCoeff1YPower6 ( );
__declspec(implementation_key(7113)) void IObjectToroidalLens::PutCoeff1YPower6 ( double pRetVal );
__declspec(implementation_key(7114)) double IObjectToroidalLens::GetCoeff1YPower8 ( );
__declspec(implementation_key(7115)) void IObjectToroidalLens::PutCoeff1YPower8 ( double pRetVal );
__declspec(implementation_key(7116)) double IObjectToroidalLens::GetCoeff1YPower10 ( );
__declspec(implementation_key(7117)) void IObjectToroidalLens::PutCoeff1YPower10 ( double pRetVal );
__declspec(implementation_key(7118)) double IObjectToroidalLens::GetCoeff1YPower12 ( );
__declspec(implementation_key(7119)) void IObjectToroidalLens::PutCoeff1YPower12 ( double pRetVal );
__declspec(implementation_key(7120)) double IObjectToroidalLens::GetRotationR2 ( );
__declspec(implementation_key(7121)) void IObjectToroidalLens::PutRotationR2 ( double pRetVal );
__declspec(implementation_key(7122)) double IObjectToroidalLens::GetRadius2 ( );
__declspec(implementation_key(7123)) void IObjectToroidalLens::PutRadius2 ( double pRetVal );
__declspec(implementation_key(7124)) double IObjectToroidalLens::GetConic2 ( );
__declspec(implementation_key(7125)) void IObjectToroidalLens::PutConic2 ( double pRetVal );
__declspec(implementation_key(7126)) double IObjectToroidalLens::GetCoeff2YPower2 ( );
__declspec(implementation_key(7127)) void IObjectToroidalLens::PutCoeff2YPower2 ( double pRetVal );
__declspec(implementation_key(7128)) double IObjectToroidalLens::GetCoeff2YPower4 ( );
__declspec(implementation_key(7129)) void IObjectToroidalLens::PutCoeff2YPower4 ( double pRetVal );
__declspec(implementation_key(7130)) double IObjectToroidalLens::GetCoeff2YPower6 ( );
__declspec(implementation_key(7131)) void IObjectToroidalLens::PutCoeff2YPower6 ( double pRetVal );
__declspec(implementation_key(7132)) double IObjectToroidalLens::GetCoeff2YPower8 ( );
__declspec(implementation_key(7133)) void IObjectToroidalLens::PutCoeff2YPower8 ( double pRetVal );
__declspec(implementation_key(7134)) double IObjectToroidalLens::GetCoeff2YPower10 ( );
__declspec(implementation_key(7135)) void IObjectToroidalLens::PutCoeff2YPower10 ( double pRetVal );
__declspec(implementation_key(7136)) double IObjectToroidalLens::GetCoeff2YPower12 ( );
__declspec(implementation_key(7137)) void IObjectToroidalLens::PutCoeff2YPower12 ( double pRetVal );
__declspec(implementation_key(7138)) double IObjectToroidalLens::GetCoeff1YPower14 ( );
__declspec(implementation_key(7139)) void IObjectToroidalLens::PutCoeff1YPower14 ( double pRetVal );
__declspec(implementation_key(7140)) double IObjectToroidalLens::GetCoeff2YPower14 ( );
__declspec(implementation_key(7141)) void IObjectToroidalLens::PutCoeff2YPower14 ( double pRetVal );
__declspec(implementation_key(7142)) IEditorCellPtr IObjectToroidalSurface::GetXHalfWidthCell ( );
__declspec(implementation_key(7143)) IEditorCellPtr IObjectToroidalSurface::GetYHalfWidthCell ( );
__declspec(implementation_key(7144)) IEditorCellPtr IObjectToroidalSurface::GetRotationRCell ( );
__declspec(implementation_key(7145)) IEditorCellPtr IObjectToroidalSurface::GetRadiusCell ( );
__declspec(implementation_key(7146)) IEditorCellPtr IObjectToroidalSurface::GetConicCell ( );
__declspec(implementation_key(7147)) IEditorCellPtr IObjectToroidalSurface::GetCoeffYPower2Cell ( );
__declspec(implementation_key(7148)) IEditorCellPtr IObjectToroidalSurface::GetCoeffYPower4Cell ( );
__declspec(implementation_key(7149)) IEditorCellPtr IObjectToroidalSurface::GetCoeffYPower6Cell ( );
__declspec(implementation_key(7150)) IEditorCellPtr IObjectToroidalSurface::GetCoeffYPower8Cell ( );
__declspec(implementation_key(7151)) IEditorCellPtr IObjectToroidalSurface::GetCoeffYPower10Cell ( );
__declspec(implementation_key(7152)) IEditorCellPtr IObjectToroidalSurface::GetCoeffYPower12Cell ( );
__declspec(implementation_key(7153)) IEditorCellPtr IObjectToroidalSurface::GetCoeffYPower14Cell ( );
__declspec(implementation_key(7154)) double IObjectToroidalSurface::GetXHalfWidth ( );
__declspec(implementation_key(7155)) void IObjectToroidalSurface::PutXHalfWidth ( double pRetVal );
__declspec(implementation_key(7156)) double IObjectToroidalSurface::GetYHalfWidth ( );
__declspec(implementation_key(7157)) void IObjectToroidalSurface::PutYHalfWidth ( double pRetVal );
__declspec(implementation_key(7158)) double IObjectToroidalSurface::GetRotationR ( );
__declspec(implementation_key(7159)) void IObjectToroidalSurface::PutRotationR ( double pRetVal );
__declspec(implementation_key(7160)) double IObjectToroidalSurface::GetRadius ( );
__declspec(implementation_key(7161)) void IObjectToroidalSurface::PutRadius ( double pRetVal );
__declspec(implementation_key(7162)) double IObjectToroidalSurface::GetConic ( );
__declspec(implementation_key(7163)) void IObjectToroidalSurface::PutConic ( double pRetVal );
__declspec(implementation_key(7164)) double IObjectToroidalSurface::GetCoeffYPower2 ( );
__declspec(implementation_key(7165)) void IObjectToroidalSurface::PutCoeffYPower2 ( double pRetVal );
__declspec(implementation_key(7166)) double IObjectToroidalSurface::GetCoeffYPower4 ( );
__declspec(implementation_key(7167)) void IObjectToroidalSurface::PutCoeffYPower4 ( double pRetVal );
__declspec(implementation_key(7168)) double IObjectToroidalSurface::GetCoeffYPower6 ( );
__declspec(implementation_key(7169)) void IObjectToroidalSurface::PutCoeffYPower6 ( double pRetVal );
__declspec(implementation_key(7170)) double IObjectToroidalSurface::GetCoeffYPower8 ( );
__declspec(implementation_key(7171)) void IObjectToroidalSurface::PutCoeffYPower8 ( double pRetVal );
__declspec(implementation_key(7172)) double IObjectToroidalSurface::GetCoeffYPower10 ( );
__declspec(implementation_key(7173)) void IObjectToroidalSurface::PutCoeffYPower10 ( double pRetVal );
__declspec(implementation_key(7174)) double IObjectToroidalSurface::GetCoeffYPower12 ( );
__declspec(implementation_key(7175)) void IObjectToroidalSurface::PutCoeffYPower12 ( double pRetVal );
__declspec(implementation_key(7176)) double IObjectToroidalSurface::GetCoeffYPower14 ( );
__declspec(implementation_key(7177)) void IObjectToroidalSurface::PutCoeffYPower14 ( double pRetVal );
__declspec(implementation_key(7178)) IEditorCellPtr IObjectToroidalSurfaceOddASphere::GetXHalfWidthCell ( );
__declspec(implementation_key(7179)) IEditorCellPtr IObjectToroidalSurfaceOddASphere::GetYHalfWidthCell ( );
__declspec(implementation_key(7180)) IEditorCellPtr IObjectToroidalSurfaceOddASphere::GetRotationRCell ( );
__declspec(implementation_key(7181)) IEditorCellPtr IObjectToroidalSurfaceOddASphere::GetRadiusCell ( );
__declspec(implementation_key(7182)) IEditorCellPtr IObjectToroidalSurfaceOddASphere::GetConicCell ( );
__declspec(implementation_key(7183)) IEditorCellPtr IObjectToroidalSurfaceOddASphere::GetCoeffOnYPower1Cell ( );
__declspec(implementation_key(7184)) IEditorCellPtr IObjectToroidalSurfaceOddASphere::GetCoeffOnYPower2Cell ( );
__declspec(implementation_key(7185)) IEditorCellPtr IObjectToroidalSurfaceOddASphere::GetCoeffOnYPower3Cell ( );
__declspec(implementation_key(7186)) IEditorCellPtr IObjectToroidalSurfaceOddASphere::GetCoeffOnYPower4Cell ( );
__declspec(implementation_key(7187)) IEditorCellPtr IObjectToroidalSurfaceOddASphere::GetCoeffOnYPower5Cell ( );
__declspec(implementation_key(7188)) IEditorCellPtr IObjectToroidalSurfaceOddASphere::GetCoeffOnYPower6Cell ( );
__declspec(implementation_key(7189)) IEditorCellPtr IObjectToroidalSurfaceOddASphere::GetCoeffOnYPower7Cell ( );
__declspec(implementation_key(7190)) IEditorCellPtr IObjectToroidalSurfaceOddASphere::GetCoeffOnYPower8Cell ( );
__declspec(implementation_key(7191)) double IObjectToroidalSurfaceOddASphere::GetXHalfWidth ( );
__declspec(implementation_key(7192)) void IObjectToroidalSurfaceOddASphere::PutXHalfWidth ( double pRetVal );
__declspec(implementation_key(7193)) double IObjectToroidalSurfaceOddASphere::GetYHalfWidth ( );
__declspec(implementation_key(7194)) void IObjectToroidalSurfaceOddASphere::PutYHalfWidth ( double pRetVal );
__declspec(implementation_key(7195)) double IObjectToroidalSurfaceOddASphere::GetRotationR ( );
__declspec(implementation_key(7196)) void IObjectToroidalSurfaceOddASphere::PutRotationR ( double pRetVal );
__declspec(implementation_key(7197)) double IObjectToroidalSurfaceOddASphere::GetRadius ( );
__declspec(implementation_key(7198)) void IObjectToroidalSurfaceOddASphere::PutRadius ( double pRetVal );
__declspec(implementation_key(7199)) double IObjectToroidalSurfaceOddASphere::GetConic ( );
__declspec(implementation_key(7200)) void IObjectToroidalSurfaceOddASphere::PutConic ( double pRetVal );
__declspec(implementation_key(7201)) double IObjectToroidalSurfaceOddASphere::GetCoeffOnYPower1 ( );
__declspec(implementation_key(7202)) void IObjectToroidalSurfaceOddASphere::PutCoeffOnYPower1 ( double pRetVal );
__declspec(implementation_key(7203)) double IObjectToroidalSurfaceOddASphere::GetCoeffOnYPower2 ( );
__declspec(implementation_key(7204)) void IObjectToroidalSurfaceOddASphere::PutCoeffOnYPower2 ( double pRetVal );
__declspec(implementation_key(7205)) double IObjectToroidalSurfaceOddASphere::GetCoeffOnYPower3 ( );
__declspec(implementation_key(7206)) void IObjectToroidalSurfaceOddASphere::PutCoeffOnYPower3 ( double pRetVal );
__declspec(implementation_key(7207)) double IObjectToroidalSurfaceOddASphere::GetCoeffOnYPower4 ( );
__declspec(implementation_key(7208)) void IObjectToroidalSurfaceOddASphere::PutCoeffOnYPower4 ( double pRetVal );
__declspec(implementation_key(7209)) double IObjectToroidalSurfaceOddASphere::GetCoeffOnYPower5 ( );
__declspec(implementation_key(7210)) void IObjectToroidalSurfaceOddASphere::PutCoeffOnYPower5 ( double pRetVal );
__declspec(implementation_key(7211)) double IObjectToroidalSurfaceOddASphere::GetCoeffOnYPower6 ( );
__declspec(implementation_key(7212)) void IObjectToroidalSurfaceOddASphere::PutCoeffOnYPower6 ( double pRetVal );
__declspec(implementation_key(7213)) double IObjectToroidalSurfaceOddASphere::GetCoeffOnYPower7 ( );
__declspec(implementation_key(7214)) void IObjectToroidalSurfaceOddASphere::PutCoeffOnYPower7 ( double pRetVal );
__declspec(implementation_key(7215)) double IObjectToroidalSurfaceOddASphere::GetCoeffOnYPower8 ( );
__declspec(implementation_key(7216)) void IObjectToroidalSurfaceOddASphere::PutCoeffOnYPower8 ( double pRetVal );
__declspec(implementation_key(7217)) IEditorCellPtr IObjectTorusSurface::GetRotationRCell ( );
__declspec(implementation_key(7218)) IEditorCellPtr IObjectTorusSurface::GetRadiusRCell ( );
__declspec(implementation_key(7219)) IEditorCellPtr IObjectTorusSurface::GetStartAngleCell ( );
__declspec(implementation_key(7220)) IEditorCellPtr IObjectTorusSurface::GetStopAngleCell ( );
__declspec(implementation_key(7221)) double IObjectTorusSurface::GetRotationR ( );
__declspec(implementation_key(7222)) void IObjectTorusSurface::PutRotationR ( double pRetVal );
__declspec(implementation_key(7223)) double IObjectTorusSurface::GetRadiusR ( );
__declspec(implementation_key(7224)) void IObjectTorusSurface::PutRadiusR ( double pRetVal );
__declspec(implementation_key(7225)) double IObjectTorusSurface::GetStartAngle ( );
__declspec(implementation_key(7226)) void IObjectTorusSurface::PutStartAngle ( double pRetVal );
__declspec(implementation_key(7227)) double IObjectTorusSurface::GetStopAngle ( );
__declspec(implementation_key(7228)) void IObjectTorusSurface::PutStopAngle ( double pRetVal );
__declspec(implementation_key(7229)) IEditorCellPtr IObjectTorusVolume::GetRotationRCell ( );
__declspec(implementation_key(7230)) IEditorCellPtr IObjectTorusVolume::GetRadiusRCell ( );
__declspec(implementation_key(7231)) IEditorCellPtr IObjectTorusVolume::GetStartAngleCell ( );
__declspec(implementation_key(7232)) IEditorCellPtr IObjectTorusVolume::GetStopAngleCell ( );
__declspec(implementation_key(7233)) double IObjectTorusVolume::GetRotationR ( );
__declspec(implementation_key(7234)) void IObjectTorusVolume::PutRotationR ( double pRetVal );
__declspec(implementation_key(7235)) double IObjectTorusVolume::GetRadiusR ( );
__declspec(implementation_key(7236)) void IObjectTorusVolume::PutRadiusR ( double pRetVal );
__declspec(implementation_key(7237)) double IObjectTorusVolume::GetStartAngle ( );
__declspec(implementation_key(7238)) void IObjectTorusVolume::PutStartAngle ( double pRetVal );
__declspec(implementation_key(7239)) double IObjectTorusVolume::GetStopAngle ( );
__declspec(implementation_key(7240)) void IObjectTorusVolume::PutStopAngle ( double pRetVal );
__declspec(implementation_key(7241)) IEditorCellPtr IObjectTriangularCorner::GetWidthCell ( );
__declspec(implementation_key(7242)) double IObjectTriangularCorner::GetWidth ( );
__declspec(implementation_key(7243)) void IObjectTriangularCorner::PutWidth ( double pRetVal );
__declspec(implementation_key(7244)) IEditorCellPtr IObjectTriangle::GetX1Cell ( );
__declspec(implementation_key(7245)) IEditorCellPtr IObjectTriangle::GetY1Cell ( );
__declspec(implementation_key(7246)) IEditorCellPtr IObjectTriangle::GetX2Cell ( );
__declspec(implementation_key(7247)) IEditorCellPtr IObjectTriangle::GetY2Cell ( );
__declspec(implementation_key(7248)) IEditorCellPtr IObjectTriangle::GetX3Cell ( );
__declspec(implementation_key(7249)) IEditorCellPtr IObjectTriangle::GetY3Cell ( );
__declspec(implementation_key(7250)) double IObjectTriangle::GetX1 ( );
__declspec(implementation_key(7251)) void IObjectTriangle::PutX1 ( double pRetVal );
__declspec(implementation_key(7252)) double IObjectTriangle::GetY1 ( );
__declspec(implementation_key(7253)) void IObjectTriangle::PutY1 ( double pRetVal );
__declspec(implementation_key(7254)) double IObjectTriangle::GetX2 ( );
__declspec(implementation_key(7255)) void IObjectTriangle::PutX2 ( double pRetVal );
__declspec(implementation_key(7256)) double IObjectTriangle::GetY2 ( );
__declspec(implementation_key(7257)) void IObjectTriangle::PutY2 ( double pRetVal );
__declspec(implementation_key(7258)) double IObjectTriangle::GetX3 ( );
__declspec(implementation_key(7259)) void IObjectTriangle::PutX3 ( double pRetVal );
__declspec(implementation_key(7260)) double IObjectTriangle::GetY3 ( );
__declspec(implementation_key(7261)) void IObjectTriangle::PutY3 ( double pRetVal );
__declspec(implementation_key(7262)) IEditorCellPtr IObjectWolterSurface::GetZLengthCell ( );
__declspec(implementation_key(7263)) IEditorCellPtr IObjectWolterSurface::GetR0Cell ( );
__declspec(implementation_key(7264)) IEditorCellPtr IObjectWolterSurface::GetAngleCell ( );
__declspec(implementation_key(7265)) IEditorCellPtr IObjectWolterSurface::GetCoeffZPower2Cell ( );
__declspec(implementation_key(7266)) IEditorCellPtr IObjectWolterSurface::GetCoeffZPower3Cell ( );
__declspec(implementation_key(7267)) IEditorCellPtr IObjectWolterSurface::GetCoeffZPower4Cell ( );
__declspec(implementation_key(7268)) IEditorCellPtr IObjectWolterSurface::GetCoeffZPower5Cell ( );
__declspec(implementation_key(7269)) double IObjectWolterSurface::GetZLength ( );
__declspec(implementation_key(7270)) void IObjectWolterSurface::PutZLength ( double pRetVal );
__declspec(implementation_key(7271)) double IObjectWolterSurface::GetR0 ( );
__declspec(implementation_key(7272)) void IObjectWolterSurface::PutR0 ( double pRetVal );
__declspec(implementation_key(7273)) double IObjectWolterSurface::GetAngle ( );
__declspec(implementation_key(7274)) void IObjectWolterSurface::PutAngle ( double pRetVal );
__declspec(implementation_key(7275)) double IObjectWolterSurface::GetCoeffZPower2 ( );
__declspec(implementation_key(7276)) void IObjectWolterSurface::PutCoeffZPower2 ( double pRetVal );
__declspec(implementation_key(7277)) double IObjectWolterSurface::GetCoeffZPower3 ( );
__declspec(implementation_key(7278)) void IObjectWolterSurface::PutCoeffZPower3 ( double pRetVal );
__declspec(implementation_key(7279)) double IObjectWolterSurface::GetCoeffZPower4 ( );
__declspec(implementation_key(7280)) void IObjectWolterSurface::PutCoeffZPower4 ( double pRetVal );
__declspec(implementation_key(7281)) double IObjectWolterSurface::GetCoeffZPower5 ( );
__declspec(implementation_key(7282)) void IObjectWolterSurface::PutCoeffZPower5 ( double pRetVal );
__declspec(implementation_key(7283)) IEditorCellPtr IObjectZernikeSurface::GetRadiusCell ( );
__declspec(implementation_key(7284)) IEditorCellPtr IObjectZernikeSurface::GetConicCell ( );
__declspec(implementation_key(7285)) IEditorCellPtr IObjectZernikeSurface::GetMaxApertureCell ( );
__declspec(implementation_key(7286)) IEditorCellPtr IObjectZernikeSurface::GetNormRadCell ( );
__declspec(implementation_key(7287)) IEditorCellPtr IObjectZernikeSurface::GetXDecenterCell ( );
__declspec(implementation_key(7288)) IEditorCellPtr IObjectZernikeSurface::GetYDecenterCellCell ( );
__declspec(implementation_key(7289)) IEditorCellPtr IObjectZernikeSurface::GetCoeffRPower2Cell ( );
__declspec(implementation_key(7290)) IEditorCellPtr IObjectZernikeSurface::GetCoeffRPower4Cell ( );
__declspec(implementation_key(7291)) IEditorCellPtr IObjectZernikeSurface::GetCoeffRPower6Cell ( );
__declspec(implementation_key(7292)) IEditorCellPtr IObjectZernikeSurface::GetCoeffRPower8Cell ( );
__declspec(implementation_key(7293)) IEditorCellPtr IObjectZernikeSurface::GetCoeffRPower10Cell ( );
__declspec(implementation_key(7294)) IEditorCellPtr IObjectZernikeSurface::GetCoeffRPower12Cell ( );
__declspec(implementation_key(7295)) IEditorCellPtr IObjectZernikeSurface::GetCoeffRPower14Cell ( );
__declspec(implementation_key(7296)) IEditorCellPtr IObjectZernikeSurface::GetCoeffRPower16Cell ( );
__declspec(implementation_key(7297)) IEditorCellPtr IObjectZernikeSurface::GetNumberOfZTermsCell ( );
__declspec(implementation_key(7298)) IEditorCellPtr IObjectZernikeSurface::GetZICell ( long i );
__declspec(implementation_key(7299)) double IObjectZernikeSurface::GetRadius ( );
__declspec(implementation_key(7300)) void IObjectZernikeSurface::PutRadius ( double pRetVal );
__declspec(implementation_key(7301)) double IObjectZernikeSurface::GetConic ( );
__declspec(implementation_key(7302)) void IObjectZernikeSurface::PutConic ( double pRetVal );
__declspec(implementation_key(7303)) double IObjectZernikeSurface::GetMaxAperture ( );
__declspec(implementation_key(7304)) void IObjectZernikeSurface::PutMaxAperture ( double pRetVal );
__declspec(implementation_key(7305)) double IObjectZernikeSurface::GetNormRad ( );
__declspec(implementation_key(7306)) void IObjectZernikeSurface::PutNormRad ( double pRetVal );
__declspec(implementation_key(7307)) double IObjectZernikeSurface::GetXDecenter ( );
__declspec(implementation_key(7308)) void IObjectZernikeSurface::PutXDecenter ( double pRetVal );
__declspec(implementation_key(7309)) double IObjectZernikeSurface::GetYDecenter ( );
__declspec(implementation_key(7310)) void IObjectZernikeSurface::PutYDecenter ( double pRetVal );
__declspec(implementation_key(7311)) double IObjectZernikeSurface::GetCoeffRPower2 ( );
__declspec(implementation_key(7312)) void IObjectZernikeSurface::PutCoeffRPower2 ( double pRetVal );
__declspec(implementation_key(7313)) double IObjectZernikeSurface::GetCoeffRPower4 ( );
__declspec(implementation_key(7314)) void IObjectZernikeSurface::PutCoeffRPower4 ( double pRetVal );
__declspec(implementation_key(7315)) double IObjectZernikeSurface::GetCoeffRPower6 ( );
__declspec(implementation_key(7316)) void IObjectZernikeSurface::PutCoeffRPower6 ( double pRetVal );
__declspec(implementation_key(7317)) double IObjectZernikeSurface::GetCoeffRPower8 ( );
__declspec(implementation_key(7318)) void IObjectZernikeSurface::PutCoeffRPower8 ( double pRetVal );
__declspec(implementation_key(7319)) double IObjectZernikeSurface::GetCoeffRPower10 ( );
__declspec(implementation_key(7320)) void IObjectZernikeSurface::PutCoeffRPower10 ( double pRetVal );
__declspec(implementation_key(7321)) double IObjectZernikeSurface::GetCoeffRPower12 ( );
__declspec(implementation_key(7322)) void IObjectZernikeSurface::PutCoeffRPower12 ( double pRetVal );
__declspec(implementation_key(7323)) double IObjectZernikeSurface::GetCoeffRPower14 ( );
__declspec(implementation_key(7324)) void IObjectZernikeSurface::PutCoeffRPower14 ( double pRetVal );
__declspec(implementation_key(7325)) double IObjectZernikeSurface::GetCoeffRPower16 ( );
__declspec(implementation_key(7326)) void IObjectZernikeSurface::PutCoeffRPower16 ( double pRetVal );
__declspec(implementation_key(7327)) long IObjectZernikeSurface::GetNumberOfZTerms ( );
__declspec(implementation_key(7328)) void IObjectZernikeSurface::PutNumberOfZTerms ( long pRetVal );
__declspec(implementation_key(7329)) double IObjectZernikeSurface::GetFrontTerm ( long i );
__declspec(implementation_key(7330)) HRESULT IObjectZernikeSurface::SetFrontTerm ( long i, double Value );
__declspec(implementation_key(7331)) IEditorCellPtr ISurfaceXYPolynomial::GetNumberOfTermsCell ( );
__declspec(implementation_key(7332)) long ISurfaceXYPolynomial::GetNumberOfTerms ( );
__declspec(implementation_key(7333)) void ISurfaceXYPolynomial::PutNumberOfTerms ( long pRetVal );
__declspec(implementation_key(7334)) IEditorCellPtr ISurfaceXYPolynomial::GetX1Y0Cell ( );
__declspec(implementation_key(7335)) IEditorCellPtr ISurfaceXYPolynomial::GetX0Y1Cell ( );
__declspec(implementation_key(7336)) IEditorCellPtr ISurfaceXYPolynomial::GetX2Y0Cell ( );
__declspec(implementation_key(7337)) IEditorCellPtr ISurfaceXYPolynomial::GetX1Y1Cell ( );
__declspec(implementation_key(7338)) IEditorCellPtr ISurfaceXYPolynomial::GetX0Y2Cell ( );
__declspec(implementation_key(7339)) IEditorCellPtr ISurfaceXYPolynomial::GetX3Y0Cell ( );
__declspec(implementation_key(7340)) IEditorCellPtr ISurfaceXYPolynomial::GetX2Y1Cell ( );
__declspec(implementation_key(7341)) IEditorCellPtr ISurfaceXYPolynomial::GetX1Y2Cell ( );
__declspec(implementation_key(7342)) IEditorCellPtr ISurfaceXYPolynomial::GetX0Y3Cell ( );
__declspec(implementation_key(7343)) IEditorCellPtr ISurfaceXYPolynomial::GetX4Y0Cell ( );
__declspec(implementation_key(7344)) IEditorCellPtr ISurfaceXYPolynomial::GetX3Y1Cell ( );
__declspec(implementation_key(7345)) IEditorCellPtr ISurfaceXYPolynomial::GetX2Y2Cell ( );
__declspec(implementation_key(7346)) IEditorCellPtr ISurfaceXYPolynomial::GetX1Y3Cell ( );
__declspec(implementation_key(7347)) IEditorCellPtr ISurfaceXYPolynomial::GetX0Y4Cell ( );
__declspec(implementation_key(7348)) IEditorCellPtr ISurfaceXYPolynomial::GetX5Y0Cell ( );
__declspec(implementation_key(7349)) IEditorCellPtr ISurfaceXYPolynomial::GetX4Y1Cell ( );
__declspec(implementation_key(7350)) IEditorCellPtr ISurfaceXYPolynomial::GetX3Y2Cell ( );
__declspec(implementation_key(7351)) IEditorCellPtr ISurfaceXYPolynomial::GetX2Y3Cell ( );
__declspec(implementation_key(7352)) IEditorCellPtr ISurfaceXYPolynomial::GetX1Y4Cell ( );
__declspec(implementation_key(7353)) IEditorCellPtr ISurfaceXYPolynomial::GetX0Y5Cell ( );
__declspec(implementation_key(7354)) IEditorCellPtr ISurfaceXYPolynomial::GetX6Y0Cell ( );
__declspec(implementation_key(7355)) IEditorCellPtr ISurfaceXYPolynomial::GetX5Y1Cell ( );
__declspec(implementation_key(7356)) IEditorCellPtr ISurfaceXYPolynomial::GetX4Y2Cell ( );
__declspec(implementation_key(7357)) IEditorCellPtr ISurfaceXYPolynomial::GetX3Y3Cell ( );
__declspec(implementation_key(7358)) IEditorCellPtr ISurfaceXYPolynomial::GetX2Y4Cell ( );
__declspec(implementation_key(7359)) IEditorCellPtr ISurfaceXYPolynomial::GetX1Y5Cell ( );
__declspec(implementation_key(7360)) IEditorCellPtr ISurfaceXYPolynomial::GetX0Y6Cell ( );
__declspec(implementation_key(7361)) IEditorCellPtr ISurfaceXYPolynomial::GetX7Y0Cell ( );
__declspec(implementation_key(7362)) IEditorCellPtr ISurfaceXYPolynomial::GetX6Y1Cell ( );
__declspec(implementation_key(7363)) IEditorCellPtr ISurfaceXYPolynomial::GetX5Y2Cell ( );
__declspec(implementation_key(7364)) IEditorCellPtr ISurfaceXYPolynomial::GetX4Y3Cell ( );
__declspec(implementation_key(7365)) IEditorCellPtr ISurfaceXYPolynomial::GetX3Y4Cell ( );
__declspec(implementation_key(7366)) IEditorCellPtr ISurfaceXYPolynomial::GetX2Y5Cell ( );
__declspec(implementation_key(7367)) IEditorCellPtr ISurfaceXYPolynomial::GetX1Y6Cell ( );
__declspec(implementation_key(7368)) IEditorCellPtr ISurfaceXYPolynomial::GetX0Y7Cell ( );
__declspec(implementation_key(7369)) IEditorCellPtr ISurfaceXYPolynomial::GetX8Y0Cell ( );
__declspec(implementation_key(7370)) IEditorCellPtr ISurfaceXYPolynomial::GetX7Y1Cell ( );
__declspec(implementation_key(7371)) IEditorCellPtr ISurfaceXYPolynomial::GetX6Y2Cell ( );
__declspec(implementation_key(7372)) IEditorCellPtr ISurfaceXYPolynomial::GetX5Y3Cell ( );
__declspec(implementation_key(7373)) IEditorCellPtr ISurfaceXYPolynomial::GetX4Y4Cell ( );
__declspec(implementation_key(7374)) IEditorCellPtr ISurfaceXYPolynomial::GetX3Y5Cell ( );
__declspec(implementation_key(7375)) IEditorCellPtr ISurfaceXYPolynomial::GetX2Y6Cell ( );
__declspec(implementation_key(7376)) IEditorCellPtr ISurfaceXYPolynomial::GetX1Y7Cell ( );
__declspec(implementation_key(7377)) IEditorCellPtr ISurfaceXYPolynomial::GetX0Y8Cell ( );
__declspec(implementation_key(7378)) IEditorCellPtr ISurfaceXYPolynomial::GetX9Y0Cell ( );
__declspec(implementation_key(7379)) IEditorCellPtr ISurfaceXYPolynomial::GetX8Y1Cell ( );
__declspec(implementation_key(7380)) IEditorCellPtr ISurfaceXYPolynomial::GetX7Y2Cell ( );
__declspec(implementation_key(7381)) IEditorCellPtr ISurfaceXYPolynomial::GetX6Y3Cell ( );
__declspec(implementation_key(7382)) IEditorCellPtr ISurfaceXYPolynomial::GetX5Y4Cell ( );
__declspec(implementation_key(7383)) IEditorCellPtr ISurfaceXYPolynomial::GetX4Y5Cell ( );
__declspec(implementation_key(7384)) IEditorCellPtr ISurfaceXYPolynomial::GetX3Y6Cell ( );
__declspec(implementation_key(7385)) IEditorCellPtr ISurfaceXYPolynomial::GetX2Y7Cell ( );
__declspec(implementation_key(7386)) IEditorCellPtr ISurfaceXYPolynomial::GetX1Y8Cell ( );
__declspec(implementation_key(7387)) IEditorCellPtr ISurfaceXYPolynomial::GetX0Y9Cell ( );
__declspec(implementation_key(7388)) IEditorCellPtr ISurfaceXYPolynomial::GetX10Y0Cell ( );
__declspec(implementation_key(7389)) IEditorCellPtr ISurfaceXYPolynomial::GetX9Y1Cell ( );
__declspec(implementation_key(7390)) IEditorCellPtr ISurfaceXYPolynomial::GetX8Y2Cell ( );
__declspec(implementation_key(7391)) IEditorCellPtr ISurfaceXYPolynomial::GetX7Y3Cell ( );
__declspec(implementation_key(7392)) IEditorCellPtr ISurfaceXYPolynomial::GetX6Y4Cell ( );
__declspec(implementation_key(7393)) IEditorCellPtr ISurfaceXYPolynomial::GetX5Y5Cell ( );
__declspec(implementation_key(7394)) IEditorCellPtr ISurfaceXYPolynomial::GetX4Y6Cell ( );
__declspec(implementation_key(7395)) IEditorCellPtr ISurfaceXYPolynomial::GetX3Y7Cell ( );
__declspec(implementation_key(7396)) IEditorCellPtr ISurfaceXYPolynomial::GetX2Y8Cell ( );
__declspec(implementation_key(7397)) IEditorCellPtr ISurfaceXYPolynomial::GetX1Y9Cell ( );
__declspec(implementation_key(7398)) IEditorCellPtr ISurfaceXYPolynomial::GetX0Y10Cell ( );
__declspec(implementation_key(7399)) IEditorCellPtr ISurfaceXYPolynomial::GetX11Y0Cell ( );
__declspec(implementation_key(7400)) IEditorCellPtr ISurfaceXYPolynomial::GetX10Y1Cell ( );
__declspec(implementation_key(7401)) IEditorCellPtr ISurfaceXYPolynomial::GetX9Y2Cell ( );
__declspec(implementation_key(7402)) IEditorCellPtr ISurfaceXYPolynomial::GetX8Y3Cell ( );
__declspec(implementation_key(7403)) IEditorCellPtr ISurfaceXYPolynomial::GetX7Y4Cell ( );
__declspec(implementation_key(7404)) IEditorCellPtr ISurfaceXYPolynomial::GetX6Y5Cell ( );
__declspec(implementation_key(7405)) IEditorCellPtr ISurfaceXYPolynomial::GetX5Y6Cell ( );
__declspec(implementation_key(7406)) IEditorCellPtr ISurfaceXYPolynomial::GetX4Y7Cell ( );
__declspec(implementation_key(7407)) IEditorCellPtr ISurfaceXYPolynomial::GetX3Y8Cell ( );
__declspec(implementation_key(7408)) IEditorCellPtr ISurfaceXYPolynomial::GetX2Y9Cell ( );
__declspec(implementation_key(7409)) IEditorCellPtr ISurfaceXYPolynomial::GetX1Y10Cell ( );
__declspec(implementation_key(7410)) IEditorCellPtr ISurfaceXYPolynomial::GetX0Y11Cell ( );
__declspec(implementation_key(7411)) IEditorCellPtr ISurfaceXYPolynomial::GetX12Y0Cell ( );
__declspec(implementation_key(7412)) IEditorCellPtr ISurfaceXYPolynomial::GetX11Y1Cell ( );
__declspec(implementation_key(7413)) IEditorCellPtr ISurfaceXYPolynomial::GetX10Y2Cell ( );
__declspec(implementation_key(7414)) IEditorCellPtr ISurfaceXYPolynomial::GetX9Y3Cell ( );
__declspec(implementation_key(7415)) IEditorCellPtr ISurfaceXYPolynomial::GetX8Y4Cell ( );
__declspec(implementation_key(7416)) IEditorCellPtr ISurfaceXYPolynomial::GetX7Y5Cell ( );
__declspec(implementation_key(7417)) IEditorCellPtr ISurfaceXYPolynomial::GetX6Y6Cell ( );
__declspec(implementation_key(7418)) IEditorCellPtr ISurfaceXYPolynomial::GetX5Y7Cell ( );
__declspec(implementation_key(7419)) IEditorCellPtr ISurfaceXYPolynomial::GetX4Y8Cell ( );
__declspec(implementation_key(7420)) IEditorCellPtr ISurfaceXYPolynomial::GetX3Y9Cell ( );
__declspec(implementation_key(7421)) IEditorCellPtr ISurfaceXYPolynomial::GetX2Y10Cell ( );
__declspec(implementation_key(7422)) IEditorCellPtr ISurfaceXYPolynomial::GetX1Y11Cell ( );
__declspec(implementation_key(7423)) IEditorCellPtr ISurfaceXYPolynomial::GetX0Y12Cell ( );
__declspec(implementation_key(7424)) IEditorCellPtr ISurfaceXYPolynomial::GetX13Y0Cell ( );
__declspec(implementation_key(7425)) IEditorCellPtr ISurfaceXYPolynomial::GetX12Y1Cell ( );
__declspec(implementation_key(7426)) IEditorCellPtr ISurfaceXYPolynomial::GetX11Y2Cell ( );
__declspec(implementation_key(7427)) IEditorCellPtr ISurfaceXYPolynomial::GetX10Y3Cell ( );
__declspec(implementation_key(7428)) IEditorCellPtr ISurfaceXYPolynomial::GetX9Y4Cell ( );
__declspec(implementation_key(7429)) IEditorCellPtr ISurfaceXYPolynomial::GetX8Y5Cell ( );
__declspec(implementation_key(7430)) IEditorCellPtr ISurfaceXYPolynomial::GetX7Y6Cell ( );
__declspec(implementation_key(7431)) IEditorCellPtr ISurfaceXYPolynomial::GetX6Y7Cell ( );
__declspec(implementation_key(7432)) IEditorCellPtr ISurfaceXYPolynomial::GetX5Y8Cell ( );
__declspec(implementation_key(7433)) IEditorCellPtr ISurfaceXYPolynomial::GetX4Y9Cell ( );
__declspec(implementation_key(7434)) IEditorCellPtr ISurfaceXYPolynomial::GetX3Y10Cell ( );
__declspec(implementation_key(7435)) IEditorCellPtr ISurfaceXYPolynomial::GetX2Y11Cell ( );
__declspec(implementation_key(7436)) IEditorCellPtr ISurfaceXYPolynomial::GetX1Y12Cell ( );
__declspec(implementation_key(7437)) IEditorCellPtr ISurfaceXYPolynomial::GetX0Y13Cell ( );
__declspec(implementation_key(7438)) IEditorCellPtr ISurfaceXYPolynomial::GetX14Y0Cell ( );
__declspec(implementation_key(7439)) IEditorCellPtr ISurfaceXYPolynomial::GetX13Y1Cell ( );
__declspec(implementation_key(7440)) IEditorCellPtr ISurfaceXYPolynomial::GetX12Y2Cell ( );
__declspec(implementation_key(7441)) IEditorCellPtr ISurfaceXYPolynomial::GetX11Y3Cell ( );
__declspec(implementation_key(7442)) IEditorCellPtr ISurfaceXYPolynomial::GetX10Y4Cell ( );
__declspec(implementation_key(7443)) IEditorCellPtr ISurfaceXYPolynomial::GetX9Y5Cell ( );
__declspec(implementation_key(7444)) IEditorCellPtr ISurfaceXYPolynomial::GetX8Y6Cell ( );
__declspec(implementation_key(7445)) IEditorCellPtr ISurfaceXYPolynomial::GetX7Y7Cell ( );
__declspec(implementation_key(7446)) IEditorCellPtr ISurfaceXYPolynomial::GetX6Y8Cell ( );
__declspec(implementation_key(7447)) IEditorCellPtr ISurfaceXYPolynomial::GetX5Y9Cell ( );
__declspec(implementation_key(7448)) IEditorCellPtr ISurfaceXYPolynomial::GetX4Y10Cell ( );
__declspec(implementation_key(7449)) IEditorCellPtr ISurfaceXYPolynomial::GetX3Y11Cell ( );
__declspec(implementation_key(7450)) IEditorCellPtr ISurfaceXYPolynomial::GetX2Y12Cell ( );
__declspec(implementation_key(7451)) IEditorCellPtr ISurfaceXYPolynomial::GetX1Y13Cell ( );
__declspec(implementation_key(7452)) IEditorCellPtr ISurfaceXYPolynomial::GetX0Y14Cell ( );
__declspec(implementation_key(7453)) IEditorCellPtr ISurfaceXYPolynomial::GetX15Y0Cell ( );
__declspec(implementation_key(7454)) IEditorCellPtr ISurfaceXYPolynomial::GetX14Y1Cell ( );
__declspec(implementation_key(7455)) IEditorCellPtr ISurfaceXYPolynomial::GetX13Y2Cell ( );
__declspec(implementation_key(7456)) IEditorCellPtr ISurfaceXYPolynomial::GetX12Y3Cell ( );
__declspec(implementation_key(7457)) IEditorCellPtr ISurfaceXYPolynomial::GetX11Y4Cell ( );
__declspec(implementation_key(7458)) IEditorCellPtr ISurfaceXYPolynomial::GetX10Y5Cell ( );
__declspec(implementation_key(7459)) IEditorCellPtr ISurfaceXYPolynomial::GetX9Y6Cell ( );
__declspec(implementation_key(7460)) IEditorCellPtr ISurfaceXYPolynomial::GetX8Y7Cell ( );
__declspec(implementation_key(7461)) IEditorCellPtr ISurfaceXYPolynomial::GetX7Y8Cell ( );
__declspec(implementation_key(7462)) IEditorCellPtr ISurfaceXYPolynomial::GetX6Y9Cell ( );
__declspec(implementation_key(7463)) IEditorCellPtr ISurfaceXYPolynomial::GetX5Y10Cell ( );
__declspec(implementation_key(7464)) IEditorCellPtr ISurfaceXYPolynomial::GetX4Y11Cell ( );
__declspec(implementation_key(7465)) IEditorCellPtr ISurfaceXYPolynomial::GetX3Y12Cell ( );
__declspec(implementation_key(7466)) IEditorCellPtr ISurfaceXYPolynomial::GetX2Y13Cell ( );
__declspec(implementation_key(7467)) IEditorCellPtr ISurfaceXYPolynomial::GetX1Y14Cell ( );
__declspec(implementation_key(7468)) IEditorCellPtr ISurfaceXYPolynomial::GetX0Y15Cell ( );
__declspec(implementation_key(7469)) IEditorCellPtr ISurfaceXYPolynomial::GetX16Y0Cell ( );
__declspec(implementation_key(7470)) IEditorCellPtr ISurfaceXYPolynomial::GetX15Y1Cell ( );
__declspec(implementation_key(7471)) IEditorCellPtr ISurfaceXYPolynomial::GetX14Y2Cell ( );
__declspec(implementation_key(7472)) IEditorCellPtr ISurfaceXYPolynomial::GetX13Y3Cell ( );
__declspec(implementation_key(7473)) IEditorCellPtr ISurfaceXYPolynomial::GetX12Y4Cell ( );
__declspec(implementation_key(7474)) IEditorCellPtr ISurfaceXYPolynomial::GetX11Y5Cell ( );
__declspec(implementation_key(7475)) IEditorCellPtr ISurfaceXYPolynomial::GetX10Y6Cell ( );
__declspec(implementation_key(7476)) IEditorCellPtr ISurfaceXYPolynomial::GetX9Y7Cell ( );
__declspec(implementation_key(7477)) IEditorCellPtr ISurfaceXYPolynomial::GetX8Y8Cell ( );
__declspec(implementation_key(7478)) IEditorCellPtr ISurfaceXYPolynomial::GetX7Y9Cell ( );
__declspec(implementation_key(7479)) IEditorCellPtr ISurfaceXYPolynomial::GetX6Y10Cell ( );
__declspec(implementation_key(7480)) IEditorCellPtr ISurfaceXYPolynomial::GetX5Y11Cell ( );
__declspec(implementation_key(7481)) IEditorCellPtr ISurfaceXYPolynomial::GetX4Y12Cell ( );
__declspec(implementation_key(7482)) IEditorCellPtr ISurfaceXYPolynomial::GetX3Y13Cell ( );
__declspec(implementation_key(7483)) IEditorCellPtr ISurfaceXYPolynomial::GetX2Y14Cell ( );
__declspec(implementation_key(7484)) IEditorCellPtr ISurfaceXYPolynomial::GetX1Y15Cell ( );
__declspec(implementation_key(7485)) IEditorCellPtr ISurfaceXYPolynomial::GetX0Y16Cell ( );
__declspec(implementation_key(7486)) IEditorCellPtr ISurfaceXYPolynomial::GetX17Y0Cell ( );
__declspec(implementation_key(7487)) IEditorCellPtr ISurfaceXYPolynomial::GetX16Y1Cell ( );
__declspec(implementation_key(7488)) IEditorCellPtr ISurfaceXYPolynomial::GetX15Y2Cell ( );
__declspec(implementation_key(7489)) IEditorCellPtr ISurfaceXYPolynomial::GetX14Y3Cell ( );
__declspec(implementation_key(7490)) IEditorCellPtr ISurfaceXYPolynomial::GetX13Y4Cell ( );
__declspec(implementation_key(7491)) IEditorCellPtr ISurfaceXYPolynomial::GetX12Y5Cell ( );
__declspec(implementation_key(7492)) IEditorCellPtr ISurfaceXYPolynomial::GetX11Y6Cell ( );
__declspec(implementation_key(7493)) IEditorCellPtr ISurfaceXYPolynomial::GetX10Y7Cell ( );
__declspec(implementation_key(7494)) IEditorCellPtr ISurfaceXYPolynomial::GetX9Y8Cell ( );
__declspec(implementation_key(7495)) IEditorCellPtr ISurfaceXYPolynomial::GetX8Y9Cell ( );
__declspec(implementation_key(7496)) IEditorCellPtr ISurfaceXYPolynomial::GetX7Y10Cell ( );
__declspec(implementation_key(7497)) IEditorCellPtr ISurfaceXYPolynomial::GetX6Y11Cell ( );
__declspec(implementation_key(7498)) IEditorCellPtr ISurfaceXYPolynomial::GetX5Y12Cell ( );
__declspec(implementation_key(7499)) IEditorCellPtr ISurfaceXYPolynomial::GetX4Y13Cell ( );
__declspec(implementation_key(7500)) IEditorCellPtr ISurfaceXYPolynomial::GetX3Y14Cell ( );
__declspec(implementation_key(7501)) IEditorCellPtr ISurfaceXYPolynomial::GetX2Y15Cell ( );
__declspec(implementation_key(7502)) IEditorCellPtr ISurfaceXYPolynomial::GetX1Y16Cell ( );
__declspec(implementation_key(7503)) IEditorCellPtr ISurfaceXYPolynomial::GetX0Y17Cell ( );
__declspec(implementation_key(7504)) IEditorCellPtr ISurfaceXYPolynomial::GetX18Y0Cell ( );
__declspec(implementation_key(7505)) IEditorCellPtr ISurfaceXYPolynomial::GetX17Y1Cell ( );
__declspec(implementation_key(7506)) IEditorCellPtr ISurfaceXYPolynomial::GetX16Y2Cell ( );
__declspec(implementation_key(7507)) IEditorCellPtr ISurfaceXYPolynomial::GetX15Y3Cell ( );
__declspec(implementation_key(7508)) IEditorCellPtr ISurfaceXYPolynomial::GetX14Y4Cell ( );
__declspec(implementation_key(7509)) IEditorCellPtr ISurfaceXYPolynomial::GetX13Y5Cell ( );
__declspec(implementation_key(7510)) IEditorCellPtr ISurfaceXYPolynomial::GetX12Y6Cell ( );
__declspec(implementation_key(7511)) IEditorCellPtr ISurfaceXYPolynomial::GetX11Y7Cell ( );
__declspec(implementation_key(7512)) IEditorCellPtr ISurfaceXYPolynomial::GetX10Y8Cell ( );
__declspec(implementation_key(7513)) IEditorCellPtr ISurfaceXYPolynomial::GetX9Y9Cell ( );
__declspec(implementation_key(7514)) IEditorCellPtr ISurfaceXYPolynomial::GetX8Y10Cell ( );
__declspec(implementation_key(7515)) IEditorCellPtr ISurfaceXYPolynomial::GetX7Y11Cell ( );
__declspec(implementation_key(7516)) IEditorCellPtr ISurfaceXYPolynomial::GetX6Y12Cell ( );
__declspec(implementation_key(7517)) IEditorCellPtr ISurfaceXYPolynomial::GetX5Y13Cell ( );
__declspec(implementation_key(7518)) IEditorCellPtr ISurfaceXYPolynomial::GetX4Y14Cell ( );
__declspec(implementation_key(7519)) IEditorCellPtr ISurfaceXYPolynomial::GetX3Y15Cell ( );
__declspec(implementation_key(7520)) IEditorCellPtr ISurfaceXYPolynomial::GetX2Y16Cell ( );
__declspec(implementation_key(7521)) IEditorCellPtr ISurfaceXYPolynomial::GetX1Y17Cell ( );
__declspec(implementation_key(7522)) IEditorCellPtr ISurfaceXYPolynomial::GetX0Y18Cell ( );
__declspec(implementation_key(7523)) IEditorCellPtr ISurfaceXYPolynomial::GetX19Y0Cell ( );
__declspec(implementation_key(7524)) IEditorCellPtr ISurfaceXYPolynomial::GetX18Y1Cell ( );
__declspec(implementation_key(7525)) IEditorCellPtr ISurfaceXYPolynomial::GetX17Y2Cell ( );
__declspec(implementation_key(7526)) IEditorCellPtr ISurfaceXYPolynomial::GetX16Y3Cell ( );
__declspec(implementation_key(7527)) IEditorCellPtr ISurfaceXYPolynomial::GetX15Y4Cell ( );
__declspec(implementation_key(7528)) IEditorCellPtr ISurfaceXYPolynomial::GetX14Y5Cell ( );
__declspec(implementation_key(7529)) IEditorCellPtr ISurfaceXYPolynomial::GetX13Y6Cell ( );
__declspec(implementation_key(7530)) IEditorCellPtr ISurfaceXYPolynomial::GetX12Y7Cell ( );
__declspec(implementation_key(7531)) IEditorCellPtr ISurfaceXYPolynomial::GetX11Y8Cell ( );
__declspec(implementation_key(7532)) IEditorCellPtr ISurfaceXYPolynomial::GetX10Y9Cell ( );
__declspec(implementation_key(7533)) IEditorCellPtr ISurfaceXYPolynomial::GetX9Y10Cell ( );
__declspec(implementation_key(7534)) IEditorCellPtr ISurfaceXYPolynomial::GetX8Y11Cell ( );
__declspec(implementation_key(7535)) IEditorCellPtr ISurfaceXYPolynomial::GetX7Y12Cell ( );
__declspec(implementation_key(7536)) IEditorCellPtr ISurfaceXYPolynomial::GetX6Y13Cell ( );
__declspec(implementation_key(7537)) IEditorCellPtr ISurfaceXYPolynomial::GetX5Y14Cell ( );
__declspec(implementation_key(7538)) IEditorCellPtr ISurfaceXYPolynomial::GetX4Y15Cell ( );
__declspec(implementation_key(7539)) IEditorCellPtr ISurfaceXYPolynomial::GetX3Y16Cell ( );
__declspec(implementation_key(7540)) IEditorCellPtr ISurfaceXYPolynomial::GetX2Y17Cell ( );
__declspec(implementation_key(7541)) IEditorCellPtr ISurfaceXYPolynomial::GetX1Y18Cell ( );
__declspec(implementation_key(7542)) IEditorCellPtr ISurfaceXYPolynomial::GetX0Y19Cell ( );
__declspec(implementation_key(7543)) IEditorCellPtr ISurfaceXYPolynomial::GetX20Y0Cell ( );
__declspec(implementation_key(7544)) IEditorCellPtr ISurfaceXYPolynomial::GetX19Y1Cell ( );
__declspec(implementation_key(7545)) IEditorCellPtr ISurfaceXYPolynomial::GetX18Y2Cell ( );
__declspec(implementation_key(7546)) IEditorCellPtr ISurfaceXYPolynomial::GetX17Y3Cell ( );
__declspec(implementation_key(7547)) IEditorCellPtr ISurfaceXYPolynomial::GetX16Y4Cell ( );
__declspec(implementation_key(7548)) IEditorCellPtr ISurfaceXYPolynomial::GetX15Y5Cell ( );
__declspec(implementation_key(7549)) IEditorCellPtr ISurfaceXYPolynomial::GetX14Y6Cell ( );
__declspec(implementation_key(7550)) IEditorCellPtr ISurfaceXYPolynomial::GetX13Y7Cell ( );
__declspec(implementation_key(7551)) IEditorCellPtr ISurfaceXYPolynomial::GetX12Y8Cell ( );
__declspec(implementation_key(7552)) IEditorCellPtr ISurfaceXYPolynomial::GetX11Y9Cell ( );
__declspec(implementation_key(7553)) IEditorCellPtr ISurfaceXYPolynomial::GetX10Y10Cell ( );
__declspec(implementation_key(7554)) IEditorCellPtr ISurfaceXYPolynomial::GetX9Y11Cell ( );
__declspec(implementation_key(7555)) IEditorCellPtr ISurfaceXYPolynomial::GetX8Y12Cell ( );
__declspec(implementation_key(7556)) IEditorCellPtr ISurfaceXYPolynomial::GetX7Y13Cell ( );
__declspec(implementation_key(7557)) IEditorCellPtr ISurfaceXYPolynomial::GetX6Y14Cell ( );
__declspec(implementation_key(7558)) IEditorCellPtr ISurfaceXYPolynomial::GetX5Y15Cell ( );
__declspec(implementation_key(7559)) IEditorCellPtr ISurfaceXYPolynomial::GetX4Y16Cell ( );
__declspec(implementation_key(7560)) IEditorCellPtr ISurfaceXYPolynomial::GetX3Y17Cell ( );
__declspec(implementation_key(7561)) IEditorCellPtr ISurfaceXYPolynomial::GetX2Y18Cell ( );
__declspec(implementation_key(7562)) IEditorCellPtr ISurfaceXYPolynomial::GetX1Y19Cell ( );
__declspec(implementation_key(7563)) IEditorCellPtr ISurfaceXYPolynomial::GetX0Y20Cell ( );
__declspec(implementation_key(7564)) IEditorCellPtr ISurfaceXYPolynomial::GetX21Y0Cell ( );
__declspec(implementation_key(7565)) IEditorCellPtr ISurfaceXYPolynomial::GetX20Y1Cell ( );
__declspec(implementation_key(7566)) IEditorCellPtr ISurfaceXYPolynomial::GetX19Y2Cell ( );
__declspec(implementation_key(7567)) IEditorCellPtr ISurfaceXYPolynomial::GetX18Y3Cell ( );
__declspec(implementation_key(7568)) IEditorCellPtr ISurfaceXYPolynomial::GetX17Y4Cell ( );
__declspec(implementation_key(7569)) IEditorCellPtr ISurfaceXYPolynomial::GetX16Y5Cell ( );
__declspec(implementation_key(7570)) IEditorCellPtr ISurfaceXYPolynomial::GetX15Y6Cell ( );
__declspec(implementation_key(7571)) IEditorCellPtr ISurfaceXYPolynomial::GetX14Y7Cell ( );
__declspec(implementation_key(7572)) IEditorCellPtr ISurfaceXYPolynomial::GetX13Y8Cell ( );
__declspec(implementation_key(7573)) IEditorCellPtr ISurfaceXYPolynomial::GetX12Y9Cell ( );
__declspec(implementation_key(7574)) IEditorCellPtr ISurfaceXYPolynomial::GetX11Y10Cell ( );
__declspec(implementation_key(7575)) IEditorCellPtr ISurfaceXYPolynomial::GetX10Y11Cell ( );
__declspec(implementation_key(7576)) IEditorCellPtr ISurfaceXYPolynomial::GetX9Y12Cell ( );
__declspec(implementation_key(7577)) IEditorCellPtr ISurfaceXYPolynomial::GetX8Y13Cell ( );
__declspec(implementation_key(7578)) IEditorCellPtr ISurfaceXYPolynomial::GetX7Y14Cell ( );
__declspec(implementation_key(7579)) IEditorCellPtr ISurfaceXYPolynomial::GetX6Y15Cell ( );
__declspec(implementation_key(7580)) IEditorCellPtr ISurfaceXYPolynomial::GetX5Y16Cell ( );
__declspec(implementation_key(7581)) IEditorCellPtr ISurfaceXYPolynomial::GetX4Y17Cell ( );
__declspec(implementation_key(7582)) IEditorCellPtr ISurfaceXYPolynomial::GetX3Y18Cell ( );
__declspec(implementation_key(7583)) IEditorCellPtr ISurfaceXYPolynomial::GetX2Y19Cell ( );
__declspec(implementation_key(7584)) double ISurfaceXYPolynomial::GetX1Y0 ( );
__declspec(implementation_key(7585)) void ISurfaceXYPolynomial::PutX1Y0 ( double pRetVal );
__declspec(implementation_key(7586)) double ISurfaceXYPolynomial::GetX0Y1 ( );
__declspec(implementation_key(7587)) void ISurfaceXYPolynomial::PutX0Y1 ( double pRetVal );
__declspec(implementation_key(7588)) double ISurfaceXYPolynomial::GetX2Y0 ( );
__declspec(implementation_key(7589)) void ISurfaceXYPolynomial::PutX2Y0 ( double pRetVal );
__declspec(implementation_key(7590)) double ISurfaceXYPolynomial::GetX1Y1 ( );
__declspec(implementation_key(7591)) void ISurfaceXYPolynomial::PutX1Y1 ( double pRetVal );
__declspec(implementation_key(7592)) double ISurfaceXYPolynomial::GetX0Y2 ( );
__declspec(implementation_key(7593)) void ISurfaceXYPolynomial::PutX0Y2 ( double pRetVal );
__declspec(implementation_key(7594)) double ISurfaceXYPolynomial::GetX3Y0 ( );
__declspec(implementation_key(7595)) void ISurfaceXYPolynomial::PutX3Y0 ( double pRetVal );
__declspec(implementation_key(7596)) double ISurfaceXYPolynomial::GetX2Y1 ( );
__declspec(implementation_key(7597)) void ISurfaceXYPolynomial::PutX2Y1 ( double pRetVal );
__declspec(implementation_key(7598)) double ISurfaceXYPolynomial::GetX1Y2 ( );
__declspec(implementation_key(7599)) void ISurfaceXYPolynomial::PutX1Y2 ( double pRetVal );
__declspec(implementation_key(7600)) double ISurfaceXYPolynomial::GetX0Y3 ( );
__declspec(implementation_key(7601)) void ISurfaceXYPolynomial::PutX0Y3 ( double pRetVal );
__declspec(implementation_key(7602)) double ISurfaceXYPolynomial::GetX4Y0 ( );
__declspec(implementation_key(7603)) void ISurfaceXYPolynomial::PutX4Y0 ( double pRetVal );
__declspec(implementation_key(7604)) double ISurfaceXYPolynomial::GetX3Y1 ( );
__declspec(implementation_key(7605)) void ISurfaceXYPolynomial::PutX3Y1 ( double pRetVal );
__declspec(implementation_key(7606)) double ISurfaceXYPolynomial::GetX2Y2 ( );
__declspec(implementation_key(7607)) void ISurfaceXYPolynomial::PutX2Y2 ( double pRetVal );
__declspec(implementation_key(7608)) double ISurfaceXYPolynomial::GetX1Y3 ( );
__declspec(implementation_key(7609)) void ISurfaceXYPolynomial::PutX1Y3 ( double pRetVal );
__declspec(implementation_key(7610)) double ISurfaceXYPolynomial::GetX0Y4 ( );
__declspec(implementation_key(7611)) void ISurfaceXYPolynomial::PutX0Y4 ( double pRetVal );
__declspec(implementation_key(7612)) double ISurfaceXYPolynomial::GetX5Y0 ( );
__declspec(implementation_key(7613)) void ISurfaceXYPolynomial::PutX5Y0 ( double pRetVal );
__declspec(implementation_key(7614)) double ISurfaceXYPolynomial::GetX4Y1 ( );
__declspec(implementation_key(7615)) void ISurfaceXYPolynomial::PutX4Y1 ( double pRetVal );
__declspec(implementation_key(7616)) double ISurfaceXYPolynomial::GetX3Y2 ( );
__declspec(implementation_key(7617)) void ISurfaceXYPolynomial::PutX3Y2 ( double pRetVal );
__declspec(implementation_key(7618)) double ISurfaceXYPolynomial::GetX2Y3 ( );
__declspec(implementation_key(7619)) void ISurfaceXYPolynomial::PutX2Y3 ( double pRetVal );
__declspec(implementation_key(7620)) double ISurfaceXYPolynomial::GetX1Y4 ( );
__declspec(implementation_key(7621)) void ISurfaceXYPolynomial::PutX1Y4 ( double pRetVal );
__declspec(implementation_key(7622)) double ISurfaceXYPolynomial::GetX0Y5 ( );
__declspec(implementation_key(7623)) void ISurfaceXYPolynomial::PutX0Y5 ( double pRetVal );
__declspec(implementation_key(7624)) double ISurfaceXYPolynomial::GetX6Y0 ( );
__declspec(implementation_key(7625)) void ISurfaceXYPolynomial::PutX6Y0 ( double pRetVal );
__declspec(implementation_key(7626)) double ISurfaceXYPolynomial::GetX5Y1 ( );
__declspec(implementation_key(7627)) void ISurfaceXYPolynomial::PutX5Y1 ( double pRetVal );
__declspec(implementation_key(7628)) double ISurfaceXYPolynomial::GetX4Y2 ( );
__declspec(implementation_key(7629)) void ISurfaceXYPolynomial::PutX4Y2 ( double pRetVal );
__declspec(implementation_key(7630)) double ISurfaceXYPolynomial::GetX3Y3 ( );
__declspec(implementation_key(7631)) void ISurfaceXYPolynomial::PutX3Y3 ( double pRetVal );
__declspec(implementation_key(7632)) double ISurfaceXYPolynomial::GetX2Y4 ( );
__declspec(implementation_key(7633)) void ISurfaceXYPolynomial::PutX2Y4 ( double pRetVal );
__declspec(implementation_key(7634)) double ISurfaceXYPolynomial::GetX1Y5 ( );
__declspec(implementation_key(7635)) void ISurfaceXYPolynomial::PutX1Y5 ( double pRetVal );
__declspec(implementation_key(7636)) double ISurfaceXYPolynomial::GetX0Y6 ( );
__declspec(implementation_key(7637)) void ISurfaceXYPolynomial::PutX0Y6 ( double pRetVal );
__declspec(implementation_key(7638)) double ISurfaceXYPolynomial::GetX7Y0 ( );
__declspec(implementation_key(7639)) void ISurfaceXYPolynomial::PutX7Y0 ( double pRetVal );
__declspec(implementation_key(7640)) double ISurfaceXYPolynomial::GetX6Y1 ( );
__declspec(implementation_key(7641)) void ISurfaceXYPolynomial::PutX6Y1 ( double pRetVal );
__declspec(implementation_key(7642)) double ISurfaceXYPolynomial::GetX5Y2 ( );
__declspec(implementation_key(7643)) void ISurfaceXYPolynomial::PutX5Y2 ( double pRetVal );
__declspec(implementation_key(7644)) double ISurfaceXYPolynomial::GetX4Y3 ( );
__declspec(implementation_key(7645)) void ISurfaceXYPolynomial::PutX4Y3 ( double pRetVal );
__declspec(implementation_key(7646)) double ISurfaceXYPolynomial::GetX3Y4 ( );
__declspec(implementation_key(7647)) void ISurfaceXYPolynomial::PutX3Y4 ( double pRetVal );
__declspec(implementation_key(7648)) double ISurfaceXYPolynomial::GetX2Y5 ( );
__declspec(implementation_key(7649)) void ISurfaceXYPolynomial::PutX2Y5 ( double pRetVal );
__declspec(implementation_key(7650)) double ISurfaceXYPolynomial::GetX1Y6 ( );
__declspec(implementation_key(7651)) void ISurfaceXYPolynomial::PutX1Y6 ( double pRetVal );
__declspec(implementation_key(7652)) double ISurfaceXYPolynomial::GetX0Y7 ( );
__declspec(implementation_key(7653)) void ISurfaceXYPolynomial::PutX0Y7 ( double pRetVal );
__declspec(implementation_key(7654)) double ISurfaceXYPolynomial::GetX8Y0 ( );
__declspec(implementation_key(7655)) void ISurfaceXYPolynomial::PutX8Y0 ( double pRetVal );
__declspec(implementation_key(7656)) double ISurfaceXYPolynomial::GetX7Y1 ( );
__declspec(implementation_key(7657)) void ISurfaceXYPolynomial::PutX7Y1 ( double pRetVal );
__declspec(implementation_key(7658)) double ISurfaceXYPolynomial::GetX6Y2 ( );
__declspec(implementation_key(7659)) void ISurfaceXYPolynomial::PutX6Y2 ( double pRetVal );
__declspec(implementation_key(7660)) double ISurfaceXYPolynomial::GetX5Y3 ( );
__declspec(implementation_key(7661)) void ISurfaceXYPolynomial::PutX5Y3 ( double pRetVal );
__declspec(implementation_key(7662)) double ISurfaceXYPolynomial::GetX4Y4 ( );
__declspec(implementation_key(7663)) void ISurfaceXYPolynomial::PutX4Y4 ( double pRetVal );
__declspec(implementation_key(7664)) double ISurfaceXYPolynomial::GetX3Y5 ( );
__declspec(implementation_key(7665)) void ISurfaceXYPolynomial::PutX3Y5 ( double pRetVal );
__declspec(implementation_key(7666)) double ISurfaceXYPolynomial::GetX2Y6 ( );
__declspec(implementation_key(7667)) void ISurfaceXYPolynomial::PutX2Y6 ( double pRetVal );
__declspec(implementation_key(7668)) double ISurfaceXYPolynomial::GetX1Y7 ( );
__declspec(implementation_key(7669)) void ISurfaceXYPolynomial::PutX1Y7 ( double pRetVal );
__declspec(implementation_key(7670)) double ISurfaceXYPolynomial::GetX0Y8 ( );
__declspec(implementation_key(7671)) void ISurfaceXYPolynomial::PutX0Y8 ( double pRetVal );
__declspec(implementation_key(7672)) double ISurfaceXYPolynomial::GetX9Y0 ( );
__declspec(implementation_key(7673)) void ISurfaceXYPolynomial::PutX9Y0 ( double pRetVal );
__declspec(implementation_key(7674)) double ISurfaceXYPolynomial::GetX8Y1 ( );
__declspec(implementation_key(7675)) void ISurfaceXYPolynomial::PutX8Y1 ( double pRetVal );
__declspec(implementation_key(7676)) double ISurfaceXYPolynomial::GetX7Y2 ( );
__declspec(implementation_key(7677)) void ISurfaceXYPolynomial::PutX7Y2 ( double pRetVal );
__declspec(implementation_key(7678)) double ISurfaceXYPolynomial::GetX6Y3 ( );
__declspec(implementation_key(7679)) void ISurfaceXYPolynomial::PutX6Y3 ( double pRetVal );
__declspec(implementation_key(7680)) double ISurfaceXYPolynomial::GetX5Y4 ( );
__declspec(implementation_key(7681)) void ISurfaceXYPolynomial::PutX5Y4 ( double pRetVal );
__declspec(implementation_key(7682)) double ISurfaceXYPolynomial::GetX4Y5 ( );
__declspec(implementation_key(7683)) void ISurfaceXYPolynomial::PutX4Y5 ( double pRetVal );
__declspec(implementation_key(7684)) double ISurfaceXYPolynomial::GetX3Y6 ( );
__declspec(implementation_key(7685)) void ISurfaceXYPolynomial::PutX3Y6 ( double pRetVal );
__declspec(implementation_key(7686)) double ISurfaceXYPolynomial::GetX2Y7 ( );
__declspec(implementation_key(7687)) void ISurfaceXYPolynomial::PutX2Y7 ( double pRetVal );
__declspec(implementation_key(7688)) double ISurfaceXYPolynomial::GetX1Y8 ( );
__declspec(implementation_key(7689)) void ISurfaceXYPolynomial::PutX1Y8 ( double pRetVal );
__declspec(implementation_key(7690)) double ISurfaceXYPolynomial::GetX0Y9 ( );
__declspec(implementation_key(7691)) void ISurfaceXYPolynomial::PutX0Y9 ( double pRetVal );
__declspec(implementation_key(7692)) double ISurfaceXYPolynomial::GetX10Y0 ( );
__declspec(implementation_key(7693)) void ISurfaceXYPolynomial::PutX10Y0 ( double pRetVal );
__declspec(implementation_key(7694)) double ISurfaceXYPolynomial::GetX9Y1 ( );
__declspec(implementation_key(7695)) void ISurfaceXYPolynomial::PutX9Y1 ( double pRetVal );
__declspec(implementation_key(7696)) double ISurfaceXYPolynomial::GetX8Y2 ( );
__declspec(implementation_key(7697)) void ISurfaceXYPolynomial::PutX8Y2 ( double pRetVal );
__declspec(implementation_key(7698)) double ISurfaceXYPolynomial::GetX7Y3 ( );
__declspec(implementation_key(7699)) void ISurfaceXYPolynomial::PutX7Y3 ( double pRetVal );
__declspec(implementation_key(7700)) double ISurfaceXYPolynomial::GetX6Y4 ( );
__declspec(implementation_key(7701)) void ISurfaceXYPolynomial::PutX6Y4 ( double pRetVal );
__declspec(implementation_key(7702)) double ISurfaceXYPolynomial::GetX5Y5 ( );
__declspec(implementation_key(7703)) void ISurfaceXYPolynomial::PutX5Y5 ( double pRetVal );
__declspec(implementation_key(7704)) double ISurfaceXYPolynomial::GetX4Y6 ( );
__declspec(implementation_key(7705)) void ISurfaceXYPolynomial::PutX4Y6 ( double pRetVal );
__declspec(implementation_key(7706)) double ISurfaceXYPolynomial::GetX3Y7 ( );
__declspec(implementation_key(7707)) void ISurfaceXYPolynomial::PutX3Y7 ( double pRetVal );
__declspec(implementation_key(7708)) double ISurfaceXYPolynomial::GetX2Y8 ( );
__declspec(implementation_key(7709)) void ISurfaceXYPolynomial::PutX2Y8 ( double pRetVal );
__declspec(implementation_key(7710)) double ISurfaceXYPolynomial::GetX1Y9 ( );
__declspec(implementation_key(7711)) void ISurfaceXYPolynomial::PutX1Y9 ( double pRetVal );
__declspec(implementation_key(7712)) double ISurfaceXYPolynomial::GetX0Y10 ( );
__declspec(implementation_key(7713)) void ISurfaceXYPolynomial::PutX0Y10 ( double pRetVal );
__declspec(implementation_key(7714)) double ISurfaceXYPolynomial::GetX11Y0 ( );
__declspec(implementation_key(7715)) void ISurfaceXYPolynomial::PutX11Y0 ( double pRetVal );
__declspec(implementation_key(7716)) double ISurfaceXYPolynomial::GetX10Y1 ( );
__declspec(implementation_key(7717)) void ISurfaceXYPolynomial::PutX10Y1 ( double pRetVal );
__declspec(implementation_key(7718)) double ISurfaceXYPolynomial::GetX9Y2 ( );
__declspec(implementation_key(7719)) void ISurfaceXYPolynomial::PutX9Y2 ( double pRetVal );
__declspec(implementation_key(7720)) double ISurfaceXYPolynomial::GetX8Y3 ( );
__declspec(implementation_key(7721)) void ISurfaceXYPolynomial::PutX8Y3 ( double pRetVal );
__declspec(implementation_key(7722)) double ISurfaceXYPolynomial::GetX7Y4 ( );
__declspec(implementation_key(7723)) void ISurfaceXYPolynomial::PutX7Y4 ( double pRetVal );
__declspec(implementation_key(7724)) double ISurfaceXYPolynomial::GetX6Y5 ( );
__declspec(implementation_key(7725)) void ISurfaceXYPolynomial::PutX6Y5 ( double pRetVal );
__declspec(implementation_key(7726)) double ISurfaceXYPolynomial::GetX5Y6 ( );
__declspec(implementation_key(7727)) void ISurfaceXYPolynomial::PutX5Y6 ( double pRetVal );
__declspec(implementation_key(7728)) double ISurfaceXYPolynomial::GetX4Y7 ( );
__declspec(implementation_key(7729)) void ISurfaceXYPolynomial::PutX4Y7 ( double pRetVal );
__declspec(implementation_key(7730)) double ISurfaceXYPolynomial::GetX3Y8 ( );
__declspec(implementation_key(7731)) void ISurfaceXYPolynomial::PutX3Y8 ( double pRetVal );
__declspec(implementation_key(7732)) double ISurfaceXYPolynomial::GetX2Y9 ( );
__declspec(implementation_key(7733)) void ISurfaceXYPolynomial::PutX2Y9 ( double pRetVal );
__declspec(implementation_key(7734)) double ISurfaceXYPolynomial::GetX1Y10 ( );
__declspec(implementation_key(7735)) void ISurfaceXYPolynomial::PutX1Y10 ( double pRetVal );
__declspec(implementation_key(7736)) double ISurfaceXYPolynomial::GetX0Y11 ( );
__declspec(implementation_key(7737)) void ISurfaceXYPolynomial::PutX0Y11 ( double pRetVal );
__declspec(implementation_key(7738)) double ISurfaceXYPolynomial::GetX12Y0 ( );
__declspec(implementation_key(7739)) void ISurfaceXYPolynomial::PutX12Y0 ( double pRetVal );
__declspec(implementation_key(7740)) double ISurfaceXYPolynomial::GetX11Y1 ( );
__declspec(implementation_key(7741)) void ISurfaceXYPolynomial::PutX11Y1 ( double pRetVal );
__declspec(implementation_key(7742)) double ISurfaceXYPolynomial::GetX10Y2 ( );
__declspec(implementation_key(7743)) void ISurfaceXYPolynomial::PutX10Y2 ( double pRetVal );
__declspec(implementation_key(7744)) double ISurfaceXYPolynomial::GetX9Y3 ( );
__declspec(implementation_key(7745)) void ISurfaceXYPolynomial::PutX9Y3 ( double pRetVal );
__declspec(implementation_key(7746)) double ISurfaceXYPolynomial::GetX8Y4 ( );
__declspec(implementation_key(7747)) void ISurfaceXYPolynomial::PutX8Y4 ( double pRetVal );
__declspec(implementation_key(7748)) double ISurfaceXYPolynomial::GetX7Y5 ( );
__declspec(implementation_key(7749)) void ISurfaceXYPolynomial::PutX7Y5 ( double pRetVal );
__declspec(implementation_key(7750)) double ISurfaceXYPolynomial::GetX6Y6 ( );
__declspec(implementation_key(7751)) void ISurfaceXYPolynomial::PutX6Y6 ( double pRetVal );
__declspec(implementation_key(7752)) double ISurfaceXYPolynomial::GetX5Y7 ( );
__declspec(implementation_key(7753)) void ISurfaceXYPolynomial::PutX5Y7 ( double pRetVal );
__declspec(implementation_key(7754)) double ISurfaceXYPolynomial::GetX4Y8 ( );
__declspec(implementation_key(7755)) void ISurfaceXYPolynomial::PutX4Y8 ( double pRetVal );
__declspec(implementation_key(7756)) double ISurfaceXYPolynomial::GetX3Y9 ( );
__declspec(implementation_key(7757)) void ISurfaceXYPolynomial::PutX3Y9 ( double pRetVal );
__declspec(implementation_key(7758)) double ISurfaceXYPolynomial::GetX2Y10 ( );
__declspec(implementation_key(7759)) void ISurfaceXYPolynomial::PutX2Y10 ( double pRetVal );
__declspec(implementation_key(7760)) double ISurfaceXYPolynomial::GetX1Y11 ( );
__declspec(implementation_key(7761)) void ISurfaceXYPolynomial::PutX1Y11 ( double pRetVal );
__declspec(implementation_key(7762)) double ISurfaceXYPolynomial::GetX0Y12 ( );
__declspec(implementation_key(7763)) void ISurfaceXYPolynomial::PutX0Y12 ( double pRetVal );
__declspec(implementation_key(7764)) double ISurfaceXYPolynomial::GetX13Y0 ( );
__declspec(implementation_key(7765)) void ISurfaceXYPolynomial::PutX13Y0 ( double pRetVal );
__declspec(implementation_key(7766)) double ISurfaceXYPolynomial::GetX12Y1 ( );
__declspec(implementation_key(7767)) void ISurfaceXYPolynomial::PutX12Y1 ( double pRetVal );
__declspec(implementation_key(7768)) double ISurfaceXYPolynomial::GetX11Y2 ( );
__declspec(implementation_key(7769)) void ISurfaceXYPolynomial::PutX11Y2 ( double pRetVal );
__declspec(implementation_key(7770)) double ISurfaceXYPolynomial::GetX10Y3 ( );
__declspec(implementation_key(7771)) void ISurfaceXYPolynomial::PutX10Y3 ( double pRetVal );
__declspec(implementation_key(7772)) double ISurfaceXYPolynomial::GetX9Y4 ( );
__declspec(implementation_key(7773)) void ISurfaceXYPolynomial::PutX9Y4 ( double pRetVal );
__declspec(implementation_key(7774)) double ISurfaceXYPolynomial::GetX8Y5 ( );
__declspec(implementation_key(7775)) void ISurfaceXYPolynomial::PutX8Y5 ( double pRetVal );
__declspec(implementation_key(7776)) double ISurfaceXYPolynomial::GetX7Y6 ( );
__declspec(implementation_key(7777)) void ISurfaceXYPolynomial::PutX7Y6 ( double pRetVal );
__declspec(implementation_key(7778)) double ISurfaceXYPolynomial::GetX6Y7 ( );
__declspec(implementation_key(7779)) void ISurfaceXYPolynomial::PutX6Y7 ( double pRetVal );
__declspec(implementation_key(7780)) double ISurfaceXYPolynomial::GetX5Y8 ( );
__declspec(implementation_key(7781)) void ISurfaceXYPolynomial::PutX5Y8 ( double pRetVal );
__declspec(implementation_key(7782)) double ISurfaceXYPolynomial::GetX4Y9 ( );
__declspec(implementation_key(7783)) void ISurfaceXYPolynomial::PutX4Y9 ( double pRetVal );
__declspec(implementation_key(7784)) double ISurfaceXYPolynomial::GetX3Y10 ( );
__declspec(implementation_key(7785)) void ISurfaceXYPolynomial::PutX3Y10 ( double pRetVal );
__declspec(implementation_key(7786)) double ISurfaceXYPolynomial::GetX2Y11 ( );
__declspec(implementation_key(7787)) void ISurfaceXYPolynomial::PutX2Y11 ( double pRetVal );
__declspec(implementation_key(7788)) double ISurfaceXYPolynomial::GetX1Y12 ( );
__declspec(implementation_key(7789)) void ISurfaceXYPolynomial::PutX1Y12 ( double pRetVal );
__declspec(implementation_key(7790)) double ISurfaceXYPolynomial::GetX0Y13 ( );
__declspec(implementation_key(7791)) void ISurfaceXYPolynomial::PutX0Y13 ( double pRetVal );
__declspec(implementation_key(7792)) double ISurfaceXYPolynomial::GetX14Y0 ( );
__declspec(implementation_key(7793)) void ISurfaceXYPolynomial::PutX14Y0 ( double pRetVal );
__declspec(implementation_key(7794)) double ISurfaceXYPolynomial::GetX13Y1 ( );
__declspec(implementation_key(7795)) void ISurfaceXYPolynomial::PutX13Y1 ( double pRetVal );
__declspec(implementation_key(7796)) double ISurfaceXYPolynomial::GetX12Y2 ( );
__declspec(implementation_key(7797)) void ISurfaceXYPolynomial::PutX12Y2 ( double pRetVal );
__declspec(implementation_key(7798)) double ISurfaceXYPolynomial::GetX11Y3 ( );
__declspec(implementation_key(7799)) void ISurfaceXYPolynomial::PutX11Y3 ( double pRetVal );
__declspec(implementation_key(7800)) double ISurfaceXYPolynomial::GetX10Y4 ( );
__declspec(implementation_key(7801)) void ISurfaceXYPolynomial::PutX10Y4 ( double pRetVal );
__declspec(implementation_key(7802)) double ISurfaceXYPolynomial::GetX9Y5 ( );
__declspec(implementation_key(7803)) void ISurfaceXYPolynomial::PutX9Y5 ( double pRetVal );
__declspec(implementation_key(7804)) double ISurfaceXYPolynomial::GetX8Y6 ( );
__declspec(implementation_key(7805)) void ISurfaceXYPolynomial::PutX8Y6 ( double pRetVal );
__declspec(implementation_key(7806)) double ISurfaceXYPolynomial::GetX7Y7 ( );
__declspec(implementation_key(7807)) void ISurfaceXYPolynomial::PutX7Y7 ( double pRetVal );
__declspec(implementation_key(7808)) double ISurfaceXYPolynomial::GetX6Y8 ( );
__declspec(implementation_key(7809)) void ISurfaceXYPolynomial::PutX6Y8 ( double pRetVal );
__declspec(implementation_key(7810)) double ISurfaceXYPolynomial::GetX5Y9 ( );
__declspec(implementation_key(7811)) void ISurfaceXYPolynomial::PutX5Y9 ( double pRetVal );
__declspec(implementation_key(7812)) double ISurfaceXYPolynomial::GetX4Y10 ( );
__declspec(implementation_key(7813)) void ISurfaceXYPolynomial::PutX4Y10 ( double pRetVal );
__declspec(implementation_key(7814)) double ISurfaceXYPolynomial::GetX3Y11 ( );
__declspec(implementation_key(7815)) void ISurfaceXYPolynomial::PutX3Y11 ( double pRetVal );
__declspec(implementation_key(7816)) double ISurfaceXYPolynomial::GetX2Y12 ( );
__declspec(implementation_key(7817)) void ISurfaceXYPolynomial::PutX2Y12 ( double pRetVal );
__declspec(implementation_key(7818)) double ISurfaceXYPolynomial::GetX1Y13 ( );
__declspec(implementation_key(7819)) void ISurfaceXYPolynomial::PutX1Y13 ( double pRetVal );
__declspec(implementation_key(7820)) double ISurfaceXYPolynomial::GetX0Y14 ( );
__declspec(implementation_key(7821)) void ISurfaceXYPolynomial::PutX0Y14 ( double pRetVal );
__declspec(implementation_key(7822)) double ISurfaceXYPolynomial::GetX15Y0 ( );
__declspec(implementation_key(7823)) void ISurfaceXYPolynomial::PutX15Y0 ( double pRetVal );
__declspec(implementation_key(7824)) double ISurfaceXYPolynomial::GetX14Y1 ( );
__declspec(implementation_key(7825)) void ISurfaceXYPolynomial::PutX14Y1 ( double pRetVal );
__declspec(implementation_key(7826)) double ISurfaceXYPolynomial::GetX13Y2 ( );
__declspec(implementation_key(7827)) void ISurfaceXYPolynomial::PutX13Y2 ( double pRetVal );
__declspec(implementation_key(7828)) double ISurfaceXYPolynomial::GetX12Y3 ( );
__declspec(implementation_key(7829)) void ISurfaceXYPolynomial::PutX12Y3 ( double pRetVal );
__declspec(implementation_key(7830)) double ISurfaceXYPolynomial::GetX11Y4 ( );
__declspec(implementation_key(7831)) void ISurfaceXYPolynomial::PutX11Y4 ( double pRetVal );
__declspec(implementation_key(7832)) double ISurfaceXYPolynomial::GetX10Y5 ( );
__declspec(implementation_key(7833)) void ISurfaceXYPolynomial::PutX10Y5 ( double pRetVal );
__declspec(implementation_key(7834)) double ISurfaceXYPolynomial::GetX9Y6 ( );
__declspec(implementation_key(7835)) void ISurfaceXYPolynomial::PutX9Y6 ( double pRetVal );
__declspec(implementation_key(7836)) double ISurfaceXYPolynomial::GetX8Y7 ( );
__declspec(implementation_key(7837)) void ISurfaceXYPolynomial::PutX8Y7 ( double pRetVal );
__declspec(implementation_key(7838)) double ISurfaceXYPolynomial::GetX7Y8 ( );
__declspec(implementation_key(7839)) void ISurfaceXYPolynomial::PutX7Y8 ( double pRetVal );
__declspec(implementation_key(7840)) double ISurfaceXYPolynomial::GetX6Y9 ( );
__declspec(implementation_key(7841)) void ISurfaceXYPolynomial::PutX6Y9 ( double pRetVal );
__declspec(implementation_key(7842)) double ISurfaceXYPolynomial::GetX5Y10 ( );
__declspec(implementation_key(7843)) void ISurfaceXYPolynomial::PutX5Y10 ( double pRetVal );
__declspec(implementation_key(7844)) double ISurfaceXYPolynomial::GetX4Y11 ( );
__declspec(implementation_key(7845)) void ISurfaceXYPolynomial::PutX4Y11 ( double pRetVal );
__declspec(implementation_key(7846)) double ISurfaceXYPolynomial::GetX3Y12 ( );
__declspec(implementation_key(7847)) void ISurfaceXYPolynomial::PutX3Y12 ( double pRetVal );
__declspec(implementation_key(7848)) double ISurfaceXYPolynomial::GetX2Y13 ( );
__declspec(implementation_key(7849)) void ISurfaceXYPolynomial::PutX2Y13 ( double pRetVal );
__declspec(implementation_key(7850)) double ISurfaceXYPolynomial::GetX1Y14 ( );
__declspec(implementation_key(7851)) void ISurfaceXYPolynomial::PutX1Y14 ( double pRetVal );
__declspec(implementation_key(7852)) double ISurfaceXYPolynomial::GetX0Y15 ( );
__declspec(implementation_key(7853)) void ISurfaceXYPolynomial::PutX0Y15 ( double pRetVal );
__declspec(implementation_key(7854)) double ISurfaceXYPolynomial::GetX16Y0 ( );
__declspec(implementation_key(7855)) void ISurfaceXYPolynomial::PutX16Y0 ( double pRetVal );
__declspec(implementation_key(7856)) double ISurfaceXYPolynomial::GetX15Y1 ( );
__declspec(implementation_key(7857)) void ISurfaceXYPolynomial::PutX15Y1 ( double pRetVal );
__declspec(implementation_key(7858)) double ISurfaceXYPolynomial::GetX14Y2 ( );
__declspec(implementation_key(7859)) void ISurfaceXYPolynomial::PutX14Y2 ( double pRetVal );
__declspec(implementation_key(7860)) double ISurfaceXYPolynomial::GetX13Y3 ( );
__declspec(implementation_key(7861)) void ISurfaceXYPolynomial::PutX13Y3 ( double pRetVal );
__declspec(implementation_key(7862)) double ISurfaceXYPolynomial::GetX12Y4 ( );
__declspec(implementation_key(7863)) void ISurfaceXYPolynomial::PutX12Y4 ( double pRetVal );
__declspec(implementation_key(7864)) double ISurfaceXYPolynomial::GetX11Y5 ( );
__declspec(implementation_key(7865)) void ISurfaceXYPolynomial::PutX11Y5 ( double pRetVal );
__declspec(implementation_key(7866)) double ISurfaceXYPolynomial::GetX10Y6 ( );
__declspec(implementation_key(7867)) void ISurfaceXYPolynomial::PutX10Y6 ( double pRetVal );
__declspec(implementation_key(7868)) double ISurfaceXYPolynomial::GetX9Y7 ( );
__declspec(implementation_key(7869)) void ISurfaceXYPolynomial::PutX9Y7 ( double pRetVal );
__declspec(implementation_key(7870)) double ISurfaceXYPolynomial::GetX8Y8 ( );
__declspec(implementation_key(7871)) void ISurfaceXYPolynomial::PutX8Y8 ( double pRetVal );
__declspec(implementation_key(7872)) double ISurfaceXYPolynomial::GetX7Y9 ( );
__declspec(implementation_key(7873)) void ISurfaceXYPolynomial::PutX7Y9 ( double pRetVal );
__declspec(implementation_key(7874)) double ISurfaceXYPolynomial::GetX6Y10 ( );
__declspec(implementation_key(7875)) void ISurfaceXYPolynomial::PutX6Y10 ( double pRetVal );
__declspec(implementation_key(7876)) double ISurfaceXYPolynomial::GetX5Y11 ( );
__declspec(implementation_key(7877)) void ISurfaceXYPolynomial::PutX5Y11 ( double pRetVal );
__declspec(implementation_key(7878)) double ISurfaceXYPolynomial::GetX4Y12 ( );
__declspec(implementation_key(7879)) void ISurfaceXYPolynomial::PutX4Y12 ( double pRetVal );
__declspec(implementation_key(7880)) double ISurfaceXYPolynomial::GetX3Y13 ( );
__declspec(implementation_key(7881)) void ISurfaceXYPolynomial::PutX3Y13 ( double pRetVal );
__declspec(implementation_key(7882)) double ISurfaceXYPolynomial::GetX2Y14 ( );
__declspec(implementation_key(7883)) void ISurfaceXYPolynomial::PutX2Y14 ( double pRetVal );
__declspec(implementation_key(7884)) double ISurfaceXYPolynomial::GetX1Y15 ( );
__declspec(implementation_key(7885)) void ISurfaceXYPolynomial::PutX1Y15 ( double pRetVal );
__declspec(implementation_key(7886)) double ISurfaceXYPolynomial::GetX0Y16 ( );
__declspec(implementation_key(7887)) void ISurfaceXYPolynomial::PutX0Y16 ( double pRetVal );
__declspec(implementation_key(7888)) double ISurfaceXYPolynomial::GetX17Y0 ( );
__declspec(implementation_key(7889)) void ISurfaceXYPolynomial::PutX17Y0 ( double pRetVal );
__declspec(implementation_key(7890)) double ISurfaceXYPolynomial::GetX16Y1 ( );
__declspec(implementation_key(7891)) void ISurfaceXYPolynomial::PutX16Y1 ( double pRetVal );
__declspec(implementation_key(7892)) double ISurfaceXYPolynomial::GetX15Y2 ( );
__declspec(implementation_key(7893)) void ISurfaceXYPolynomial::PutX15Y2 ( double pRetVal );
__declspec(implementation_key(7894)) double ISurfaceXYPolynomial::GetX14Y3 ( );
__declspec(implementation_key(7895)) void ISurfaceXYPolynomial::PutX14Y3 ( double pRetVal );
__declspec(implementation_key(7896)) double ISurfaceXYPolynomial::GetX13Y4 ( );
__declspec(implementation_key(7897)) void ISurfaceXYPolynomial::PutX13Y4 ( double pRetVal );
__declspec(implementation_key(7898)) double ISurfaceXYPolynomial::GetX12Y5 ( );
__declspec(implementation_key(7899)) void ISurfaceXYPolynomial::PutX12Y5 ( double pRetVal );
__declspec(implementation_key(7900)) double ISurfaceXYPolynomial::GetX11Y6 ( );
__declspec(implementation_key(7901)) void ISurfaceXYPolynomial::PutX11Y6 ( double pRetVal );
__declspec(implementation_key(7902)) double ISurfaceXYPolynomial::GetX10Y7 ( );
__declspec(implementation_key(7903)) void ISurfaceXYPolynomial::PutX10Y7 ( double pRetVal );
__declspec(implementation_key(7904)) double ISurfaceXYPolynomial::GetX9Y8 ( );
__declspec(implementation_key(7905)) void ISurfaceXYPolynomial::PutX9Y8 ( double pRetVal );
__declspec(implementation_key(7906)) double ISurfaceXYPolynomial::GetX8Y9 ( );
__declspec(implementation_key(7907)) void ISurfaceXYPolynomial::PutX8Y9 ( double pRetVal );
__declspec(implementation_key(7908)) double ISurfaceXYPolynomial::GetX7Y10 ( );
__declspec(implementation_key(7909)) void ISurfaceXYPolynomial::PutX7Y10 ( double pRetVal );
__declspec(implementation_key(7910)) double ISurfaceXYPolynomial::GetX6Y11 ( );
__declspec(implementation_key(7911)) void ISurfaceXYPolynomial::PutX6Y11 ( double pRetVal );
__declspec(implementation_key(7912)) double ISurfaceXYPolynomial::GetX5Y12 ( );
__declspec(implementation_key(7913)) void ISurfaceXYPolynomial::PutX5Y12 ( double pRetVal );
__declspec(implementation_key(7914)) double ISurfaceXYPolynomial::GetX4Y13 ( );
__declspec(implementation_key(7915)) void ISurfaceXYPolynomial::PutX4Y13 ( double pRetVal );
__declspec(implementation_key(7916)) double ISurfaceXYPolynomial::GetX3Y14 ( );
__declspec(implementation_key(7917)) void ISurfaceXYPolynomial::PutX3Y14 ( double pRetVal );
__declspec(implementation_key(7918)) double ISurfaceXYPolynomial::GetX2Y15 ( );
__declspec(implementation_key(7919)) void ISurfaceXYPolynomial::PutX2Y15 ( double pRetVal );
__declspec(implementation_key(7920)) double ISurfaceXYPolynomial::GetX1Y16 ( );
__declspec(implementation_key(7921)) void ISurfaceXYPolynomial::PutX1Y16 ( double pRetVal );
__declspec(implementation_key(7922)) double ISurfaceXYPolynomial::GetX0Y17 ( );
__declspec(implementation_key(7923)) void ISurfaceXYPolynomial::PutX0Y17 ( double pRetVal );
__declspec(implementation_key(7924)) double ISurfaceXYPolynomial::GetX18Y0 ( );
__declspec(implementation_key(7925)) void ISurfaceXYPolynomial::PutX18Y0 ( double pRetVal );
__declspec(implementation_key(7926)) double ISurfaceXYPolynomial::GetX17Y1 ( );
__declspec(implementation_key(7927)) void ISurfaceXYPolynomial::PutX17Y1 ( double pRetVal );
__declspec(implementation_key(7928)) double ISurfaceXYPolynomial::GetX16Y2 ( );
__declspec(implementation_key(7929)) void ISurfaceXYPolynomial::PutX16Y2 ( double pRetVal );
__declspec(implementation_key(7930)) double ISurfaceXYPolynomial::GetX15Y3 ( );
__declspec(implementation_key(7931)) void ISurfaceXYPolynomial::PutX15Y3 ( double pRetVal );
__declspec(implementation_key(7932)) double ISurfaceXYPolynomial::GetX14Y4 ( );
__declspec(implementation_key(7933)) void ISurfaceXYPolynomial::PutX14Y4 ( double pRetVal );
__declspec(implementation_key(7934)) double ISurfaceXYPolynomial::GetX13Y5 ( );
__declspec(implementation_key(7935)) void ISurfaceXYPolynomial::PutX13Y5 ( double pRetVal );
__declspec(implementation_key(7936)) double ISurfaceXYPolynomial::GetX12Y6 ( );
__declspec(implementation_key(7937)) void ISurfaceXYPolynomial::PutX12Y6 ( double pRetVal );
__declspec(implementation_key(7938)) double ISurfaceXYPolynomial::GetX11Y7 ( );
__declspec(implementation_key(7939)) void ISurfaceXYPolynomial::PutX11Y7 ( double pRetVal );
__declspec(implementation_key(7940)) double ISurfaceXYPolynomial::GetX10Y8 ( );
__declspec(implementation_key(7941)) void ISurfaceXYPolynomial::PutX10Y8 ( double pRetVal );
__declspec(implementation_key(7942)) double ISurfaceXYPolynomial::GetX9Y9 ( );
__declspec(implementation_key(7943)) void ISurfaceXYPolynomial::PutX9Y9 ( double pRetVal );
__declspec(implementation_key(7944)) double ISurfaceXYPolynomial::GetX8Y10 ( );
__declspec(implementation_key(7945)) void ISurfaceXYPolynomial::PutX8Y10 ( double pRetVal );
__declspec(implementation_key(7946)) double ISurfaceXYPolynomial::GetX7Y11 ( );
__declspec(implementation_key(7947)) void ISurfaceXYPolynomial::PutX7Y11 ( double pRetVal );
__declspec(implementation_key(7948)) double ISurfaceXYPolynomial::GetX6Y12 ( );
__declspec(implementation_key(7949)) void ISurfaceXYPolynomial::PutX6Y12 ( double pRetVal );
__declspec(implementation_key(7950)) double ISurfaceXYPolynomial::GetX5Y13 ( );
__declspec(implementation_key(7951)) void ISurfaceXYPolynomial::PutX5Y13 ( double pRetVal );
__declspec(implementation_key(7952)) double ISurfaceXYPolynomial::GetX4Y14 ( );
__declspec(implementation_key(7953)) void ISurfaceXYPolynomial::PutX4Y14 ( double pRetVal );
__declspec(implementation_key(7954)) double ISurfaceXYPolynomial::GetX3Y15 ( );
__declspec(implementation_key(7955)) void ISurfaceXYPolynomial::PutX3Y15 ( double pRetVal );
__declspec(implementation_key(7956)) double ISurfaceXYPolynomial::GetX2Y16 ( );
__declspec(implementation_key(7957)) void ISurfaceXYPolynomial::PutX2Y16 ( double pRetVal );
__declspec(implementation_key(7958)) double ISurfaceXYPolynomial::GetX1Y17 ( );
__declspec(implementation_key(7959)) void ISurfaceXYPolynomial::PutX1Y17 ( double pRetVal );
__declspec(implementation_key(7960)) double ISurfaceXYPolynomial::GetX0Y18 ( );
__declspec(implementation_key(7961)) void ISurfaceXYPolynomial::PutX0Y18 ( double pRetVal );
__declspec(implementation_key(7962)) double ISurfaceXYPolynomial::GetX19Y0 ( );
__declspec(implementation_key(7963)) void ISurfaceXYPolynomial::PutX19Y0 ( double pRetVal );
__declspec(implementation_key(7964)) double ISurfaceXYPolynomial::GetX18Y1 ( );
__declspec(implementation_key(7965)) void ISurfaceXYPolynomial::PutX18Y1 ( double pRetVal );
__declspec(implementation_key(7966)) double ISurfaceXYPolynomial::GetX17Y2 ( );
__declspec(implementation_key(7967)) void ISurfaceXYPolynomial::PutX17Y2 ( double pRetVal );
__declspec(implementation_key(7968)) double ISurfaceXYPolynomial::GetX16Y3 ( );
__declspec(implementation_key(7969)) void ISurfaceXYPolynomial::PutX16Y3 ( double pRetVal );
__declspec(implementation_key(7970)) double ISurfaceXYPolynomial::GetX15Y4 ( );
__declspec(implementation_key(7971)) void ISurfaceXYPolynomial::PutX15Y4 ( double pRetVal );
__declspec(implementation_key(7972)) double ISurfaceXYPolynomial::GetX14Y5 ( );
__declspec(implementation_key(7973)) void ISurfaceXYPolynomial::PutX14Y5 ( double pRetVal );
__declspec(implementation_key(7974)) double ISurfaceXYPolynomial::GetX13Y6 ( );
__declspec(implementation_key(7975)) void ISurfaceXYPolynomial::PutX13Y6 ( double pRetVal );
__declspec(implementation_key(7976)) double ISurfaceXYPolynomial::GetX12Y7 ( );
__declspec(implementation_key(7977)) void ISurfaceXYPolynomial::PutX12Y7 ( double pRetVal );
__declspec(implementation_key(7978)) double ISurfaceXYPolynomial::GetX11Y8 ( );
__declspec(implementation_key(7979)) void ISurfaceXYPolynomial::PutX11Y8 ( double pRetVal );
__declspec(implementation_key(7980)) double ISurfaceXYPolynomial::GetX10Y9 ( );
__declspec(implementation_key(7981)) void ISurfaceXYPolynomial::PutX10Y9 ( double pRetVal );
__declspec(implementation_key(7982)) double ISurfaceXYPolynomial::GetX9Y10 ( );
__declspec(implementation_key(7983)) void ISurfaceXYPolynomial::PutX9Y10 ( double pRetVal );
__declspec(implementation_key(7984)) double ISurfaceXYPolynomial::GetX8Y11 ( );
__declspec(implementation_key(7985)) void ISurfaceXYPolynomial::PutX8Y11 ( double pRetVal );
__declspec(implementation_key(7986)) double ISurfaceXYPolynomial::GetX7Y12 ( );
__declspec(implementation_key(7987)) void ISurfaceXYPolynomial::PutX7Y12 ( double pRetVal );
__declspec(implementation_key(7988)) double ISurfaceXYPolynomial::GetX6Y13 ( );
__declspec(implementation_key(7989)) void ISurfaceXYPolynomial::PutX6Y13 ( double pRetVal );
__declspec(implementation_key(7990)) double ISurfaceXYPolynomial::GetX5Y14 ( );
__declspec(implementation_key(7991)) void ISurfaceXYPolynomial::PutX5Y14 ( double pRetVal );
__declspec(implementation_key(7992)) double ISurfaceXYPolynomial::GetX4Y15 ( );
__declspec(implementation_key(7993)) void ISurfaceXYPolynomial::PutX4Y15 ( double pRetVal );
__declspec(implementation_key(7994)) double ISurfaceXYPolynomial::GetX3Y16 ( );
__declspec(implementation_key(7995)) void ISurfaceXYPolynomial::PutX3Y16 ( double pRetVal );
__declspec(implementation_key(7996)) double ISurfaceXYPolynomial::GetX2Y17 ( );
__declspec(implementation_key(7997)) void ISurfaceXYPolynomial::PutX2Y17 ( double pRetVal );
__declspec(implementation_key(7998)) double ISurfaceXYPolynomial::GetX1Y18 ( );
__declspec(implementation_key(7999)) void ISurfaceXYPolynomial::PutX1Y18 ( double pRetVal );
__declspec(implementation_key(8000)) double ISurfaceXYPolynomial::GetX0Y19 ( );
__declspec(implementation_key(8001)) void ISurfaceXYPolynomial::PutX0Y19 ( double pRetVal );
__declspec(implementation_key(8002)) double ISurfaceXYPolynomial::GetX20Y0 ( );
__declspec(implementation_key(8003)) void ISurfaceXYPolynomial::PutX20Y0 ( double pRetVal );
__declspec(implementation_key(8004)) double ISurfaceXYPolynomial::GetX19Y1 ( );
__declspec(implementation_key(8005)) void ISurfaceXYPolynomial::PutX19Y1 ( double pRetVal );
__declspec(implementation_key(8006)) double ISurfaceXYPolynomial::GetX18Y2 ( );
__declspec(implementation_key(8007)) void ISurfaceXYPolynomial::PutX18Y2 ( double pRetVal );
__declspec(implementation_key(8008)) double ISurfaceXYPolynomial::GetX17Y3 ( );
__declspec(implementation_key(8009)) void ISurfaceXYPolynomial::PutX17Y3 ( double pRetVal );
__declspec(implementation_key(8010)) double ISurfaceXYPolynomial::GetX16Y4 ( );
__declspec(implementation_key(8011)) void ISurfaceXYPolynomial::PutX16Y4 ( double pRetVal );
__declspec(implementation_key(8012)) double ISurfaceXYPolynomial::GetX15Y5 ( );
__declspec(implementation_key(8013)) void ISurfaceXYPolynomial::PutX15Y5 ( double pRetVal );
__declspec(implementation_key(8014)) double ISurfaceXYPolynomial::GetX14Y6 ( );
__declspec(implementation_key(8015)) void ISurfaceXYPolynomial::PutX14Y6 ( double pRetVal );
__declspec(implementation_key(8016)) double ISurfaceXYPolynomial::GetX13Y7 ( );
__declspec(implementation_key(8017)) void ISurfaceXYPolynomial::PutX13Y7 ( double pRetVal );
__declspec(implementation_key(8018)) double ISurfaceXYPolynomial::GetX12Y8 ( );
__declspec(implementation_key(8019)) void ISurfaceXYPolynomial::PutX12Y8 ( double pRetVal );
__declspec(implementation_key(8020)) double ISurfaceXYPolynomial::GetX11Y9 ( );
__declspec(implementation_key(8021)) void ISurfaceXYPolynomial::PutX11Y9 ( double pRetVal );
__declspec(implementation_key(8022)) double ISurfaceXYPolynomial::GetX10Y10 ( );
__declspec(implementation_key(8023)) void ISurfaceXYPolynomial::PutX10Y10 ( double pRetVal );
__declspec(implementation_key(8024)) double ISurfaceXYPolynomial::GetX9Y11 ( );
__declspec(implementation_key(8025)) void ISurfaceXYPolynomial::PutX9Y11 ( double pRetVal );
__declspec(implementation_key(8026)) double ISurfaceXYPolynomial::GetX8Y12 ( );
__declspec(implementation_key(8027)) void ISurfaceXYPolynomial::PutX8Y12 ( double pRetVal );
__declspec(implementation_key(8028)) double ISurfaceXYPolynomial::GetX7Y13 ( );
__declspec(implementation_key(8029)) void ISurfaceXYPolynomial::PutX7Y13 ( double pRetVal );
__declspec(implementation_key(8030)) double ISurfaceXYPolynomial::GetX6Y14 ( );
__declspec(implementation_key(8031)) void ISurfaceXYPolynomial::PutX6Y14 ( double pRetVal );
__declspec(implementation_key(8032)) double ISurfaceXYPolynomial::GetX5Y15 ( );
__declspec(implementation_key(8033)) void ISurfaceXYPolynomial::PutX5Y15 ( double pRetVal );
__declspec(implementation_key(8034)) double ISurfaceXYPolynomial::GetX4Y16 ( );
__declspec(implementation_key(8035)) void ISurfaceXYPolynomial::PutX4Y16 ( double pRetVal );
__declspec(implementation_key(8036)) double ISurfaceXYPolynomial::GetX3Y17 ( );
__declspec(implementation_key(8037)) void ISurfaceXYPolynomial::PutX3Y17 ( double pRetVal );
__declspec(implementation_key(8038)) double ISurfaceXYPolynomial::GetX2Y18 ( );
__declspec(implementation_key(8039)) void ISurfaceXYPolynomial::PutX2Y18 ( double pRetVal );
__declspec(implementation_key(8040)) double ISurfaceXYPolynomial::GetX1Y19 ( );
__declspec(implementation_key(8041)) void ISurfaceXYPolynomial::PutX1Y19 ( double pRetVal );
__declspec(implementation_key(8042)) double ISurfaceXYPolynomial::GetX0Y20 ( );
__declspec(implementation_key(8043)) void ISurfaceXYPolynomial::PutX0Y20 ( double pRetVal );
__declspec(implementation_key(8044)) double ISurfaceXYPolynomial::GetX21Y0 ( );
__declspec(implementation_key(8045)) void ISurfaceXYPolynomial::PutX21Y0 ( double pRetVal );
__declspec(implementation_key(8046)) double ISurfaceXYPolynomial::GetX20Y1 ( );
__declspec(implementation_key(8047)) void ISurfaceXYPolynomial::PutX20Y1 ( double pRetVal );
__declspec(implementation_key(8048)) double ISurfaceXYPolynomial::GetX19Y2 ( );
__declspec(implementation_key(8049)) void ISurfaceXYPolynomial::PutX19Y2 ( double pRetVal );
__declspec(implementation_key(8050)) double ISurfaceXYPolynomial::GetX18Y3 ( );
__declspec(implementation_key(8051)) void ISurfaceXYPolynomial::PutX18Y3 ( double pRetVal );
__declspec(implementation_key(8052)) double ISurfaceXYPolynomial::GetX17Y4 ( );
__declspec(implementation_key(8053)) void ISurfaceXYPolynomial::PutX17Y4 ( double pRetVal );
__declspec(implementation_key(8054)) double ISurfaceXYPolynomial::GetX16Y5 ( );
__declspec(implementation_key(8055)) void ISurfaceXYPolynomial::PutX16Y5 ( double pRetVal );
__declspec(implementation_key(8056)) double ISurfaceXYPolynomial::GetX15Y6 ( );
__declspec(implementation_key(8057)) void ISurfaceXYPolynomial::PutX15Y6 ( double pRetVal );
__declspec(implementation_key(8058)) double ISurfaceXYPolynomial::GetX14Y7 ( );
__declspec(implementation_key(8059)) void ISurfaceXYPolynomial::PutX14Y7 ( double pRetVal );
__declspec(implementation_key(8060)) double ISurfaceXYPolynomial::GetX13Y8 ( );
__declspec(implementation_key(8061)) void ISurfaceXYPolynomial::PutX13Y8 ( double pRetVal );
__declspec(implementation_key(8062)) double ISurfaceXYPolynomial::GetX12Y9 ( );
__declspec(implementation_key(8063)) void ISurfaceXYPolynomial::PutX12Y9 ( double pRetVal );
__declspec(implementation_key(8064)) double ISurfaceXYPolynomial::GetX11Y10 ( );
__declspec(implementation_key(8065)) void ISurfaceXYPolynomial::PutX11Y10 ( double pRetVal );
__declspec(implementation_key(8066)) double ISurfaceXYPolynomial::GetX10Y11 ( );
__declspec(implementation_key(8067)) void ISurfaceXYPolynomial::PutX10Y11 ( double pRetVal );
__declspec(implementation_key(8068)) double ISurfaceXYPolynomial::GetX9Y12 ( );
__declspec(implementation_key(8069)) void ISurfaceXYPolynomial::PutX9Y12 ( double pRetVal );
__declspec(implementation_key(8070)) double ISurfaceXYPolynomial::GetX8Y13 ( );
__declspec(implementation_key(8071)) void ISurfaceXYPolynomial::PutX8Y13 ( double pRetVal );
__declspec(implementation_key(8072)) double ISurfaceXYPolynomial::GetX7Y14 ( );
__declspec(implementation_key(8073)) void ISurfaceXYPolynomial::PutX7Y14 ( double pRetVal );
__declspec(implementation_key(8074)) double ISurfaceXYPolynomial::GetX6Y15 ( );
__declspec(implementation_key(8075)) void ISurfaceXYPolynomial::PutX6Y15 ( double pRetVal );
__declspec(implementation_key(8076)) double ISurfaceXYPolynomial::GetX5Y16 ( );
__declspec(implementation_key(8077)) void ISurfaceXYPolynomial::PutX5Y16 ( double pRetVal );
__declspec(implementation_key(8078)) double ISurfaceXYPolynomial::GetX4Y17 ( );
__declspec(implementation_key(8079)) void ISurfaceXYPolynomial::PutX4Y17 ( double pRetVal );
__declspec(implementation_key(8080)) double ISurfaceXYPolynomial::GetX3Y18 ( );
__declspec(implementation_key(8081)) void ISurfaceXYPolynomial::PutX3Y18 ( double pRetVal );
__declspec(implementation_key(8082)) double ISurfaceXYPolynomial::GetX2Y19 ( );
__declspec(implementation_key(8083)) void ISurfaceXYPolynomial::PutX2Y19 ( double pRetVal );
__declspec(implementation_key(8084)) IEditorCellPtr ISurfaceNthOrderTerms::NthOrderTermCell ( long N );
__declspec(implementation_key(8085)) double ISurfaceNthOrderTerms::GetNthOrderTerm ( long N );
__declspec(implementation_key(8086)) HRESULT ISurfaceNthOrderTerms::SetNthOrderTerm ( long N, double Value );
__declspec(implementation_key(8087)) IEditorCellPtr ISurfaceNthEvenOrderTerms::NthEvenOrderTermCell ( long N );
__declspec(implementation_key(8088)) double ISurfaceNthEvenOrderTerms::GetNthEvenOrderTerm ( long N );
__declspec(implementation_key(8089)) HRESULT ISurfaceNthEvenOrderTerms::SetNthEvenOrderTerm ( long N, double Value );
__declspec(implementation_key(8090)) IEditorCellPtr ISurfaceNthThickness::GetNumberOfTermsCell ( );
__declspec(implementation_key(8091)) long ISurfaceNthThickness::GetNumberOfTerms ( );
__declspec(implementation_key(8092)) void ISurfaceNthThickness::PutNumberOfTerms ( long pRetVal );
__declspec(implementation_key(8093)) IEditorCellPtr ISurfaceNthThickness::NthThicknessCell ( long N );
__declspec(implementation_key(8094)) double ISurfaceNthThickness::GetNthThickness ( long N );
__declspec(implementation_key(8095)) HRESULT ISurfaceNthThickness::SetNthThickness ( long N, double Value );
__declspec(implementation_key(8096)) IEditorCellPtr ISurfaceCoeff_P_NthPower::GetNumberOfTermsCell ( );
__declspec(implementation_key(8097)) long ISurfaceCoeff_P_NthPower::GetNumberOfTerms ( );
__declspec(implementation_key(8098)) void ISurfaceCoeff_P_NthPower::PutNumberOfTerms ( long pRetVal );
__declspec(implementation_key(8099)) IEditorCellPtr ISurfaceCoeff_P_NthPower::Coeff_P_NthPowerCell ( long N );
__declspec(implementation_key(8100)) double ISurfaceCoeff_P_NthPower::GetCoeff_P_NthPower ( long N );
__declspec(implementation_key(8101)) HRESULT ISurfaceCoeff_P_NthPower::SetCoeff_P_NthPower ( long N, double Value );
__declspec(implementation_key(8102)) IEditorCellPtr ISurfaceCoeff_R_NthPower::Coeff_R_NthPowerCell ( long N );
__declspec(implementation_key(8103)) double ISurfaceCoeff_R_NthPower::GetCoeff_R_NthPower ( long N );
__declspec(implementation_key(8104)) HRESULT ISurfaceCoeff_R_NthPower::SetCoeff_R_NthPower ( long N, double Value );
__declspec(implementation_key(8105)) IEditorCellPtr ISurfaceCoeff_P_NthEvenPower::GetNumberOfTermsCell ( );
__declspec(implementation_key(8106)) long ISurfaceCoeff_P_NthEvenPower::GetNumberOfTerms ( );
__declspec(implementation_key(8107)) void ISurfaceCoeff_P_NthEvenPower::PutNumberOfTerms ( long pRetVal );
__declspec(implementation_key(8108)) IEditorCellPtr ISurfaceCoeff_P_NthEvenPower::Coeff_P_NthEvenPowerCell ( long N );
__declspec(implementation_key(8109)) double ISurfaceCoeff_P_NthEvenPower::GetCoeff_P_NthEvenPower ( long N );
__declspec(implementation_key(8110)) HRESULT ISurfaceCoeff_P_NthEvenPower::SetCoeff_P_NthEvenPower ( long N, double Value );
__declspec(implementation_key(8111)) IEditorCellPtr ISurfaceCoeff_R_NthEvenPower::GetNumberOfTermsCell ( );
__declspec(implementation_key(8112)) long ISurfaceCoeff_R_NthEvenPower::GetNumberOfTerms ( );
__declspec(implementation_key(8113)) void ISurfaceCoeff_R_NthEvenPower::PutNumberOfTerms ( long pRetVal );
__declspec(implementation_key(8114)) IEditorCellPtr ISurfaceCoeff_R_NthEvenPower::Coeff_R_NthEvenPowerCell ( long N );
__declspec(implementation_key(8115)) double ISurfaceCoeff_R_NthEvenPower::GetCoeff_R_NthEvenPower ( long N );
__declspec(implementation_key(8116)) HRESULT ISurfaceCoeff_R_NthEvenPower::SetCoeff_R_NthEvenPower ( long N, double Value );
__declspec(implementation_key(8117)) IEditorCellPtr ISurfaceCoeff_X_NthEvenPower_8::Coeff_X_NthEvenPowerCell ( long N );
__declspec(implementation_key(8118)) double ISurfaceCoeff_X_NthEvenPower_8::GetCoeff_X_NthEvenPower ( long N );
__declspec(implementation_key(8119)) HRESULT ISurfaceCoeff_X_NthEvenPower_8::SetCoeff_X_NthEvenPower ( long N, double Value );
__declspec(implementation_key(8120)) IEditorCellPtr ISurfaceCoeff_X_NthEvenPower::GetNumberOfTermsCell ( );
__declspec(implementation_key(8121)) long ISurfaceCoeff_X_NthEvenPower::GetNumberOfTerms ( );
__declspec(implementation_key(8122)) void ISurfaceCoeff_X_NthEvenPower::PutNumberOfTerms ( long pRetVal );
__declspec(implementation_key(8123)) IEditorCellPtr ISurfaceCoeff_X_NthEvenPower::Coeff_X_NthEvenPowerCell ( long N );
__declspec(implementation_key(8124)) double ISurfaceCoeff_X_NthEvenPower::GetCoeff_X_NthEvenPower ( long N );
__declspec(implementation_key(8125)) HRESULT ISurfaceCoeff_X_NthEvenPower::SetCoeff_X_NthEvenPower ( long N, double Value );
__declspec(implementation_key(8126)) IEditorCellPtr ISurfaceCoeff_Y_NthEvenPower_8::Coeff_Y_NthEvenPowerCell ( long N );
__declspec(implementation_key(8127)) double ISurfaceCoeff_Y_NthEvenPower_8::GetCoeff_Y_NthEvenPower ( long N );
__declspec(implementation_key(8128)) HRESULT ISurfaceCoeff_Y_NthEvenPower_8::SetCoeff_Y_NthEvenPower ( long N, double Value );
__declspec(implementation_key(8129)) IEditorCellPtr ISurfaceCoeff_Y_NthEvenPower::GetNumberOfTermsCell ( );
__declspec(implementation_key(8130)) long ISurfaceCoeff_Y_NthEvenPower::GetNumberOfTerms ( );
__declspec(implementation_key(8131)) void ISurfaceCoeff_Y_NthEvenPower::PutNumberOfTerms ( long pRetVal );
__declspec(implementation_key(8132)) IEditorCellPtr ISurfaceCoeff_Y_NthEvenPower::Coeff_Y_NthEvenPowerCell ( long N );
__declspec(implementation_key(8133)) double ISurfaceCoeff_Y_NthEvenPower::GetCoeff_Y_NthEvenPower ( long N );
__declspec(implementation_key(8134)) HRESULT ISurfaceCoeff_Y_NthEvenPower::SetCoeff_Y_NthEvenPower ( long N, double Value );
__declspec(implementation_key(8135)) IEditorCellPtr ISurfaceCoeff_X1P1X2P2_NthEvenPower::Coeff_X1_NthEvenPowerCell ( long N );
__declspec(implementation_key(8136)) double ISurfaceCoeff_X1P1X2P2_NthEvenPower::GetCoeff_X1_NthEvenPower ( long N );
__declspec(implementation_key(8137)) HRESULT ISurfaceCoeff_X1P1X2P2_NthEvenPower::SetCoeff_X1_NthEvenPower ( long N, double Value );
__declspec(implementation_key(8138)) IEditorCellPtr ISurfaceCoeff_X1P1X2P2_NthEvenPower::Coeff_P1_NthEvenPowerCell ( long N );
__declspec(implementation_key(8139)) double ISurfaceCoeff_X1P1X2P2_NthEvenPower::GetCoeff_P1_NthEvenPower ( long N );
__declspec(implementation_key(8140)) HRESULT ISurfaceCoeff_X1P1X2P2_NthEvenPower::SetCoeff_P1_NthEvenPower ( long N, double Value );
__declspec(implementation_key(8141)) IEditorCellPtr ISurfaceCoeff_X1P1X2P2_NthEvenPower::Coeff_X2_NthEvenPowerCell ( long N );
__declspec(implementation_key(8142)) double ISurfaceCoeff_X1P1X2P2_NthEvenPower::GetCoeff_X2_NthEvenPower ( long N );
__declspec(implementation_key(8143)) HRESULT ISurfaceCoeff_X1P1X2P2_NthEvenPower::SetCoeff_X2_NthEvenPower ( long N, double Value );
__declspec(implementation_key(8144)) IEditorCellPtr ISurfaceCoeff_X1P1X2P2_NthEvenPower::Coeff_P2_NthEvenPowerCell ( long N );
__declspec(implementation_key(8145)) double ISurfaceCoeff_X1P1X2P2_NthEvenPower::GetCoeff_P2_NthEvenPower ( long N );
__declspec(implementation_key(8146)) HRESULT ISurfaceCoeff_X1P1X2P2_NthEvenPower::SetCoeff_P2_NthEvenPower ( long N, double Value );
__declspec(implementation_key(8147)) IEditorCellPtr ISurfaceNthZernike::GetNumberOfTermsCell ( );
__declspec(implementation_key(8148)) IEditorCellPtr ISurfaceNthZernike::GetNormRadiusCell ( );
__declspec(implementation_key(8149)) IEditorCellPtr ISurfaceNthZernike::NthZernikeCoefficientCell ( long N );
__declspec(implementation_key(8150)) long ISurfaceNthZernike::GetNumberOfTerms ( );
__declspec(implementation_key(8151)) void ISurfaceNthZernike::PutNumberOfTerms ( long pRetVal );
__declspec(implementation_key(8152)) double ISurfaceNthZernike::GetNormRadius ( );
__declspec(implementation_key(8153)) void ISurfaceNthZernike::PutNormRadius ( double pRetVal );
__declspec(implementation_key(8154)) double ISurfaceNthZernike::GetNthZernikeCoefficient ( long N );
__declspec(implementation_key(8155)) HRESULT ISurfaceNthZernike::SetNthZernikeCoefficient ( long N, double Value );
__declspec(implementation_key(8156)) IEditorCellPtr ISurfaceAPBC::AnCell ( long N );
__declspec(implementation_key(8157)) IEditorCellPtr ISurfaceAPBC::PnCell ( long N );
__declspec(implementation_key(8158)) IEditorCellPtr ISurfaceAPBC::BnCell ( long N );
__declspec(implementation_key(8159)) IEditorCellPtr ISurfaceAPBC::CnCell ( long N );
__declspec(implementation_key(8160)) double ISurfaceAPBC::GetAn ( long N );
__declspec(implementation_key(8161)) HRESULT ISurfaceAPBC::SetAn ( long N, double Value );
__declspec(implementation_key(8162)) double ISurfaceAPBC::GetPn ( long N );
__declspec(implementation_key(8163)) HRESULT ISurfaceAPBC::SetPn ( long N, double Value );
__declspec(implementation_key(8164)) double ISurfaceAPBC::GetBn ( long N );
__declspec(implementation_key(8165)) HRESULT ISurfaceAPBC::SetBn ( long N, double Value );
__declspec(implementation_key(8166)) double ISurfaceAPBC::GetCn ( long N );
__declspec(implementation_key(8167)) HRESULT ISurfaceAPBC::SetCn ( long N, double Value );
__declspec(implementation_key(8168)) IEditorCellPtr ISurfaceABCD::GetAxCell ( );
__declspec(implementation_key(8169)) IEditorCellPtr ISurfaceABCD::GetBxCell ( );
__declspec(implementation_key(8170)) IEditorCellPtr ISurfaceABCD::GetCxCell ( );
__declspec(implementation_key(8171)) IEditorCellPtr ISurfaceABCD::GetDxCell ( );
__declspec(implementation_key(8172)) IEditorCellPtr ISurfaceABCD::GetAyCell ( );
__declspec(implementation_key(8173)) IEditorCellPtr ISurfaceABCD::GetByCell ( );
__declspec(implementation_key(8174)) IEditorCellPtr ISurfaceABCD::GetCyCell ( );
__declspec(implementation_key(8175)) IEditorCellPtr ISurfaceABCD::GetDyCell ( );
__declspec(implementation_key(8176)) double ISurfaceABCD::GetAx ( );
__declspec(implementation_key(8177)) void ISurfaceABCD::PutAx ( double pRetVal );
__declspec(implementation_key(8178)) double ISurfaceABCD::GetBx ( );
__declspec(implementation_key(8179)) void ISurfaceABCD::PutBx ( double pRetVal );
__declspec(implementation_key(8180)) double ISurfaceABCD::Getcx ( );
__declspec(implementation_key(8181)) void ISurfaceABCD::Putcx ( double pRetVal );
__declspec(implementation_key(8182)) double ISurfaceABCD::GetDx ( );
__declspec(implementation_key(8183)) void ISurfaceABCD::PutDx ( double pRetVal );
__declspec(implementation_key(8184)) double ISurfaceABCD::GetAy ( );
__declspec(implementation_key(8185)) void ISurfaceABCD::PutAy ( double pRetVal );
__declspec(implementation_key(8186)) double ISurfaceABCD::GetBy ( );
__declspec(implementation_key(8187)) void ISurfaceABCD::PutBy ( double pRetVal );
__declspec(implementation_key(8188)) double ISurfaceABCD::GetCy ( );
__declspec(implementation_key(8189)) void ISurfaceABCD::PutCy ( double pRetVal );
__declspec(implementation_key(8190)) double ISurfaceABCD::GetDy ( );
__declspec(implementation_key(8191)) void ISurfaceABCD::PutDy ( double pRetVal );
__declspec(implementation_key(8192)) IEditorCellPtr ISurfaceAnnularZernikeSag::GetExtrapolateCell ( );
__declspec(implementation_key(8193)) IEditorCellPtr ISurfaceAnnularZernikeSag::GetObscurationCell ( );
__declspec(implementation_key(8194)) IEditorCellPtr ISurfaceAnnularZernikeSag::GetNumberOfTermsCell ( );
__declspec(implementation_key(8195)) IEditorCellPtr ISurfaceAnnularZernikeSag::GetNormRadiusCell ( );
__declspec(implementation_key(8196)) IEditorCellPtr ISurfaceAnnularZernikeSag::GetZernikeTermCell ( long termN );
__declspec(implementation_key(8197)) long ISurfaceAnnularZernikeSag::GetExtrapolate ( );
__declspec(implementation_key(8198)) void ISurfaceAnnularZernikeSag::PutExtrapolate ( long pRetVal );
__declspec(implementation_key(8199)) double ISurfaceAnnularZernikeSag::GetObscuration ( );
__declspec(implementation_key(8200)) void ISurfaceAnnularZernikeSag::PutObscuration ( double pRetVal );
__declspec(implementation_key(8201)) long ISurfaceAnnularZernikeSag::GetNumberOfTerms ( );
__declspec(implementation_key(8202)) void ISurfaceAnnularZernikeSag::PutNumberOfTerms ( long pRetVal );
__declspec(implementation_key(8203)) double ISurfaceAnnularZernikeSag::GetNormRadius ( );
__declspec(implementation_key(8204)) void ISurfaceAnnularZernikeSag::PutNormRadius ( double pRetVal );
__declspec(implementation_key(8205)) double ISurfaceAnnularZernikeSag::GetZernikeTerm ( long termN );
__declspec(implementation_key(8206)) HRESULT ISurfaceAnnularZernikeSag::SetZernikeTerm ( long termN, double Value );
__declspec(implementation_key(8207)) IEditorCellPtr ISurfaceAtmospheric::GetZenithCell ( );
__declspec(implementation_key(8208)) IEditorCellPtr ISurfaceAtmospheric::GetHeightCell ( );
__declspec(implementation_key(8209)) IEditorCellPtr ISurfaceAtmospheric::GetTemperatureCell ( );
__declspec(implementation_key(8210)) IEditorCellPtr ISurfaceAtmospheric::GetPressureCell ( );
__declspec(implementation_key(8211)) IEditorCellPtr ISurfaceAtmospheric::GetHumidityCell ( );
__declspec(implementation_key(8212)) IEditorCellPtr ISurfaceAtmospheric::GetLatitudeCell ( );
__declspec(implementation_key(8213)) IEditorCellPtr ISurfaceAtmospheric::GetIsAbsoluteCell ( );
__declspec(implementation_key(8214)) double ISurfaceAtmospheric::GetZenith ( );
__declspec(implementation_key(8215)) void ISurfaceAtmospheric::PutZenith ( double pRetVal );
__declspec(implementation_key(8216)) double ISurfaceAtmospheric::GetHeight ( );
__declspec(implementation_key(8217)) void ISurfaceAtmospheric::PutHeight ( double pRetVal );
__declspec(implementation_key(8218)) double ISurfaceAtmospheric::GetTemperature ( );
__declspec(implementation_key(8219)) void ISurfaceAtmospheric::PutTemperature ( double pRetVal );
__declspec(implementation_key(8220)) double ISurfaceAtmospheric::GetPressure ( );
__declspec(implementation_key(8221)) void ISurfaceAtmospheric::PutPressure ( double pRetVal );
__declspec(implementation_key(8222)) double ISurfaceAtmospheric::GetHumidity ( );
__declspec(implementation_key(8223)) void ISurfaceAtmospheric::PutHumidity ( double pRetVal );
__declspec(implementation_key(8224)) double ISurfaceAtmospheric::GetLatitude ( );
__declspec(implementation_key(8225)) void ISurfaceAtmospheric::PutLatitude ( double pRetVal );
__declspec(implementation_key(8226)) VARIANT_BOOL ISurfaceAtmospheric::GetIsAbsolute ( );
__declspec(implementation_key(8227)) void ISurfaceAtmospheric::PutIsAbsolute ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(8228)) IEditorCellPtr ISurfaceBiconic::GetXRadiusCell ( );
__declspec(implementation_key(8229)) IEditorCellPtr ISurfaceBiconic::GetXConicCell ( );
__declspec(implementation_key(8230)) double ISurfaceBiconic::GetXRadius ( );
__declspec(implementation_key(8231)) void ISurfaceBiconic::PutXRadius ( double pRetVal );
__declspec(implementation_key(8232)) double ISurfaceBiconic::GetXConic ( );
__declspec(implementation_key(8233)) void ISurfaceBiconic::PutXConic ( double pRetVal );
__declspec(implementation_key(8234)) IEditorCellPtr ISurfaceBiconicZernike::GetExtrapolateCell ( );
__declspec(implementation_key(8235)) IEditorCellPtr ISurfaceBiconicZernike::GetXRadiusCell ( );
__declspec(implementation_key(8236)) IEditorCellPtr ISurfaceBiconicZernike::GetXConicCell ( );
__declspec(implementation_key(8237)) IEditorCellPtr ISurfaceBiconicZernike::GetNumberOfTermsCell ( );
__declspec(implementation_key(8238)) IEditorCellPtr ISurfaceBiconicZernike::GetNormRadiusCell ( );
__declspec(implementation_key(8239)) long ISurfaceBiconicZernike::GetExtrapolate ( );
__declspec(implementation_key(8240)) void ISurfaceBiconicZernike::PutExtrapolate ( long pRetVal );
__declspec(implementation_key(8241)) double ISurfaceBiconicZernike::GetXRadius ( );
__declspec(implementation_key(8242)) void ISurfaceBiconicZernike::PutXRadius ( double pRetVal );
__declspec(implementation_key(8243)) double ISurfaceBiconicZernike::GetXConic ( );
__declspec(implementation_key(8244)) void ISurfaceBiconicZernike::PutXConic ( double pRetVal );
__declspec(implementation_key(8245)) long ISurfaceBiconicZernike::GetNumberOfTerms ( );
__declspec(implementation_key(8246)) void ISurfaceBiconicZernike::PutNumberOfTerms ( long pRetVal );
__declspec(implementation_key(8247)) double ISurfaceBiconicZernike::GetNormRadius ( );
__declspec(implementation_key(8248)) void ISurfaceBiconicZernike::PutNormRadius ( double pRetVal );
__declspec(implementation_key(8249)) IEditorCellPtr ISurfaceBiconicZernike::GetCellXn ( long N );
__declspec(implementation_key(8250)) IEditorCellPtr ISurfaceBiconicZernike::GetCellYn ( long N );
__declspec(implementation_key(8251)) IEditorCellPtr ISurfaceBiconicZernike::GetCellZn ( long N );
__declspec(implementation_key(8252)) double ISurfaceBiconicZernike::GetXn ( long N );
__declspec(implementation_key(8253)) double ISurfaceBiconicZernike::GetYn ( long N );
__declspec(implementation_key(8254)) double ISurfaceBiconicZernike::GetZn ( long N );
__declspec(implementation_key(8255)) HRESULT ISurfaceBiconicZernike::SetXn ( long N, double v );
__declspec(implementation_key(8256)) HRESULT ISurfaceBiconicZernike::SetYn ( long N, double v );
__declspec(implementation_key(8257)) HRESULT ISurfaceBiconicZernike::SetZn ( long N, double v );
__declspec(implementation_key(8258)) IEditorCellPtr ISurfaceBinary1::GetDiffractOrderCell ( );
__declspec(implementation_key(8259)) IEditorCellPtr ISurfaceBinary1::GetIsAbsoluteCell ( );
__declspec(implementation_key(8260)) IEditorCellPtr ISurfaceBinary1::GetNormRadiusCell ( );
__declspec(implementation_key(8261)) double ISurfaceBinary1::GetDiffractOrder ( );
__declspec(implementation_key(8262)) void ISurfaceBinary1::PutDiffractOrder ( double pRetVal );
__declspec(implementation_key(8263)) VARIANT_BOOL ISurfaceBinary1::GetIsAbsolute ( );
__declspec(implementation_key(8264)) void ISurfaceBinary1::PutIsAbsolute ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(8265)) double ISurfaceBinary1::GetNormRadius ( );
__declspec(implementation_key(8266)) void ISurfaceBinary1::PutNormRadius ( double pRetVal );
__declspec(implementation_key(8267)) IEditorCellPtr ISurfaceBinary2::GetDiffractOrderCell ( );
__declspec(implementation_key(8268)) IEditorCellPtr ISurfaceBinary2::GetNormRadiusCell ( );
__declspec(implementation_key(8269)) double ISurfaceBinary2::GetDiffractOrder ( );
__declspec(implementation_key(8270)) void ISurfaceBinary2::PutDiffractOrder ( double pRetVal );
__declspec(implementation_key(8271)) double ISurfaceBinary2::GetNormRadius ( );
__declspec(implementation_key(8272)) void ISurfaceBinary2::PutNormRadius ( double pRetVal );
__declspec(implementation_key(8273)) IEditorCellPtr ISurfaceBinary3::GetR2Cell ( );
__declspec(implementation_key(8274)) IEditorCellPtr ISurfaceBinary3::GetK2Cell ( );
__declspec(implementation_key(8275)) IEditorCellPtr ISurfaceBinary3::GetA1Cell ( );
__declspec(implementation_key(8276)) IEditorCellPtr ISurfaceBinary3::GetA2Cell ( );
__declspec(implementation_key(8277)) IEditorCellPtr ISurfaceBinary3::GetM1Cell ( );
__declspec(implementation_key(8278)) IEditorCellPtr ISurfaceBinary3::GetM2Cell ( );
__declspec(implementation_key(8279)) IEditorCellPtr ISurfaceBinary3::GetSinDeltaZeroCell ( );
__declspec(implementation_key(8280)) IEditorCellPtr ISurfaceBinary3::GetBreakCell ( );
__declspec(implementation_key(8281)) double ISurfaceBinary3::GetR2 ( );
__declspec(implementation_key(8282)) void ISurfaceBinary3::PutR2 ( double pRetVal );
__declspec(implementation_key(8283)) double ISurfaceBinary3::GetK2 ( );
__declspec(implementation_key(8284)) void ISurfaceBinary3::PutK2 ( double pRetVal );
__declspec(implementation_key(8285)) double ISurfaceBinary3::GetA1 ( );
__declspec(implementation_key(8286)) void ISurfaceBinary3::PutA1 ( double pRetVal );
__declspec(implementation_key(8287)) double ISurfaceBinary3::GetA2 ( );
__declspec(implementation_key(8288)) void ISurfaceBinary3::PutA2 ( double pRetVal );
__declspec(implementation_key(8289)) double ISurfaceBinary3::GetM1 ( );
__declspec(implementation_key(8290)) void ISurfaceBinary3::PutM1 ( double pRetVal );
__declspec(implementation_key(8291)) double ISurfaceBinary3::Getm2 ( );
__declspec(implementation_key(8292)) void ISurfaceBinary3::Putm2 ( double pRetVal );
__declspec(implementation_key(8293)) double ISurfaceBinary3::GetSinDeltaZero ( );
__declspec(implementation_key(8294)) void ISurfaceBinary3::PutSinDeltaZero ( double pRetVal );
__declspec(implementation_key(8295)) VARIANT_BOOL ISurfaceBinary3::GetBreak ( );
__declspec(implementation_key(8296)) void ISurfaceBinary3::PutBreak ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(8297)) IEditorCellPtr ISurfaceBinary4::GetNumberOfRadialZonesCell ( );
__declspec(implementation_key(8298)) IEditorCellPtr ISurfaceBinary4::GetNumberOfAsphericTermsCell ( );
__declspec(implementation_key(8299)) IEditorCellPtr ISurfaceBinary4::GetNumberOfPhaseTermsCell ( );
__declspec(implementation_key(8300)) IEditorCellPtr ISurfaceBinary4::GetSineDeltaZeroCell ( );
__declspec(implementation_key(8301)) IEditorCellPtr ISurfaceBinary4::RadialApertureInZoneCell ( long zoneN );
__declspec(implementation_key(8302)) IEditorCellPtr ISurfaceBinary4::RadiusInZoneCell ( long zoneN );
__declspec(implementation_key(8303)) IEditorCellPtr ISurfaceBinary4::ConicInZoneCell ( long zoneN );
__declspec(implementation_key(8304)) IEditorCellPtr ISurfaceBinary4::OrderInZoneCell ( long zoneN );
__declspec(implementation_key(8305)) IEditorCellPtr ISurfaceBinary4::AsphereInZone_P_NthEvenPowerCell ( long zoneN, long N );
__declspec(implementation_key(8306)) IEditorCellPtr ISurfaceBinary4::PhaseInZone_P_NthEvenPowerCell ( long zoneN, long N );
__declspec(implementation_key(8307)) long ISurfaceBinary4::GetNumberOfRadialZones ( );
__declspec(implementation_key(8308)) void ISurfaceBinary4::PutNumberOfRadialZones ( long pRetVal );
__declspec(implementation_key(8309)) long ISurfaceBinary4::GetNumberOfAsphericTerms ( );
__declspec(implementation_key(8310)) void ISurfaceBinary4::PutNumberOfAsphericTerms ( long pRetVal );
__declspec(implementation_key(8311)) long ISurfaceBinary4::GetNumberOfPhaseTerms ( );
__declspec(implementation_key(8312)) void ISurfaceBinary4::PutNumberOfPhaseTerms ( long pRetVal );
__declspec(implementation_key(8313)) double ISurfaceBinary4::GetSineDeltaZero ( );
__declspec(implementation_key(8314)) void ISurfaceBinary4::PutSineDeltaZero ( double pRetVal );
__declspec(implementation_key(8315)) double ISurfaceBinary4::GetRadialApertureInZone ( long zoneN );
__declspec(implementation_key(8316)) HRESULT ISurfaceBinary4::SetRadialApertureInZone ( long zoneN, double Value );
__declspec(implementation_key(8317)) double ISurfaceBinary4::GetRadiusInZone ( long zoneN );
__declspec(implementation_key(8318)) HRESULT ISurfaceBinary4::SetRadiusInZone ( long zoneN, double Value );
__declspec(implementation_key(8319)) double ISurfaceBinary4::GetConicInZone ( long zoneN );
__declspec(implementation_key(8320)) HRESULT ISurfaceBinary4::SetConicInZone ( long zoneN, double Value );
__declspec(implementation_key(8321)) double ISurfaceBinary4::GetOrderInZone ( long zoneN );
__declspec(implementation_key(8322)) HRESULT ISurfaceBinary4::SetOrderInZone ( long zoneN, double Value );
__declspec(implementation_key(8323)) double ISurfaceBinary4::GetAsphereInZone_P_NthEvenPower ( long zoneN, long N );
__declspec(implementation_key(8324)) HRESULT ISurfaceBinary4::SetAsphereInZone_P_NthEvenPower ( long zoneN, long N, double Value );
__declspec(implementation_key(8325)) double ISurfaceBinary4::GetPhaseInZone_P_NthEvenPower ( long zoneN, long N );
__declspec(implementation_key(8326)) HRESULT ISurfaceBinary4::SetPhaseInZone_P_NthEvenPower ( long zoneN, long N, double Value );
__declspec(implementation_key(8327)) IEditorCellPtr ISurfaceBirefringentIn::GetDrawAxisCell ( );
__declspec(implementation_key(8328)) IEditorCellPtr ISurfaceBirefringentIn::GetModeCell ( );
__declspec(implementation_key(8329)) IEditorCellPtr ISurfaceBirefringentIn::GetX_CosineCell ( );
__declspec(implementation_key(8330)) IEditorCellPtr ISurfaceBirefringentIn::GetY_CosineCell ( );
__declspec(implementation_key(8331)) IEditorCellPtr ISurfaceBirefringentIn::GetZ_CosineCell ( );
__declspec(implementation_key(8332)) IEditorCellPtr ISurfaceBirefringentIn::GetIgnoreParaxialRaysCell ( );
__declspec(implementation_key(8333)) IEditorCellPtr ISurfaceBirefringentIn::GetShapeCell ( );
__declspec(implementation_key(8334)) IEditorCellPtr ISurfaceBirefringentIn::GetRadiusOfRotationCell ( );
__declspec(implementation_key(8335)) IEditorCellPtr ISurfaceBirefringentIn::NthEvenOrderTermCell ( long N );
__declspec(implementation_key(8336)) IEditorCellPtr ISurfaceBirefringentIn::GetGradientModeCell ( );
__declspec(implementation_key(8337)) IEditorCellPtr ISurfaceBirefringentIn::GetDeltaTCell ( );
__declspec(implementation_key(8338)) IEditorCellPtr ISurfaceBirefringentIn::CxCell ( long N );
__declspec(implementation_key(8339)) IEditorCellPtr ISurfaceBirefringentIn::CyCell ( long N );
__declspec(implementation_key(8340)) IEditorCellPtr ISurfaceBirefringentIn::CzCell ( long N );
__declspec(implementation_key(8341)) IEditorCellPtr ISurfaceBirefringentIn::PhiCell ( long N );
__declspec(implementation_key(8342)) IEditorCellPtr ISurfaceBirefringentIn::aCell ( long N );
__declspec(implementation_key(8343)) IEditorCellPtr ISurfaceBirefringentIn::GetOCell ( );
__declspec(implementation_key(8344)) IEditorCellPtr ISurfaceBirefringentIn::GetECell ( );
__declspec(implementation_key(8345)) IEditorCellPtr ISurfaceBirefringentIn::GetACell_2 ( );
__declspec(implementation_key(8346)) IEditorCellPtr ISurfaceBirefringentIn::GetBCell ( );
__declspec(implementation_key(8347)) IEditorCellPtr ISurfaceBirefringentIn::Mode7CxCell ( long N );
__declspec(implementation_key(8348)) IEditorCellPtr ISurfaceBirefringentIn::GetazCell ( );
__declspec(implementation_key(8349)) IEditorCellPtr ISurfaceBirefringentIn::GetZ0Cell ( );
__declspec(implementation_key(8350)) IEditorCellPtr ISurfaceBirefringentIn::GetZnCell ( );
__declspec(implementation_key(8351)) IEditorCellPtr ISurfaceBirefringentIn::CmnCell ( long M, long N );
__declspec(implementation_key(8352)) double ISurfaceBirefringentIn::GetDrawAxis ( );
__declspec(implementation_key(8353)) void ISurfaceBirefringentIn::PutDrawAxis ( double pRetVal );
__declspec(implementation_key(8354)) long ISurfaceBirefringentIn::GetMode ( );
__declspec(implementation_key(8355)) void ISurfaceBirefringentIn::PutMode ( long pRetVal );
__declspec(implementation_key(8356)) double ISurfaceBirefringentIn::GetX_Cosine ( );
__declspec(implementation_key(8357)) void ISurfaceBirefringentIn::PutX_Cosine ( double pRetVal );
__declspec(implementation_key(8358)) double ISurfaceBirefringentIn::GetY_Cosine ( );
__declspec(implementation_key(8359)) void ISurfaceBirefringentIn::PutY_Cosine ( double pRetVal );
__declspec(implementation_key(8360)) double ISurfaceBirefringentIn::GetZ_Cosine ( );
__declspec(implementation_key(8361)) void ISurfaceBirefringentIn::PutZ_Cosine ( double pRetVal );
__declspec(implementation_key(8362)) VARIANT_BOOL ISurfaceBirefringentIn::GetIgnoreParaxialRays ( );
__declspec(implementation_key(8363)) void ISurfaceBirefringentIn::PutIgnoreParaxialRays ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(8364)) long ISurfaceBirefringentIn::GetShape ( );
__declspec(implementation_key(8365)) void ISurfaceBirefringentIn::PutShape ( long pRetVal );
__declspec(implementation_key(8366)) double ISurfaceBirefringentIn::GetRadiusOfRotation ( );
__declspec(implementation_key(8367)) void ISurfaceBirefringentIn::PutRadiusOfRotation ( double pRetVal );
__declspec(implementation_key(8368)) double ISurfaceBirefringentIn::GetNthEvenOrderTerm ( long N );
__declspec(implementation_key(8369)) HRESULT ISurfaceBirefringentIn::SetNthEvenOrderTerm ( long N, double Value );
__declspec(implementation_key(8370)) long ISurfaceBirefringentIn::GetGradientMode ( );
__declspec(implementation_key(8371)) void ISurfaceBirefringentIn::PutGradientMode ( long pRetVal );
__declspec(implementation_key(8372)) double ISurfaceBirefringentIn::GetDeltaT ( );
__declspec(implementation_key(8373)) void ISurfaceBirefringentIn::PutDeltaT ( double pRetVal );
__declspec(implementation_key(8374)) double ISurfaceBirefringentIn::GetCx ( long N );
__declspec(implementation_key(8375)) HRESULT ISurfaceBirefringentIn::SetCx ( long N, double Value );
__declspec(implementation_key(8376)) double ISurfaceBirefringentIn::GetCy ( long N );
__declspec(implementation_key(8377)) HRESULT ISurfaceBirefringentIn::SetCy ( long N, double Value );
__declspec(implementation_key(8378)) double ISurfaceBirefringentIn::GetCz ( long N );
__declspec(implementation_key(8379)) HRESULT ISurfaceBirefringentIn::SetCz ( long N, double Value );
__declspec(implementation_key(8380)) double ISurfaceBirefringentIn::GetPhi ( long N );
__declspec(implementation_key(8381)) HRESULT ISurfaceBirefringentIn::SetPhi ( long N, double Value );
__declspec(implementation_key(8382)) double ISurfaceBirefringentIn::Get_a ( long N );
__declspec(implementation_key(8383)) HRESULT ISurfaceBirefringentIn::Set_a ( long N, double Value );
__declspec(implementation_key(8384)) double ISurfaceBirefringentIn::GetO ( );
__declspec(implementation_key(8385)) void ISurfaceBirefringentIn::PutO ( double pRetVal );
__declspec(implementation_key(8386)) double ISurfaceBirefringentIn::GetE ( );
__declspec(implementation_key(8387)) void ISurfaceBirefringentIn::PutE ( double pRetVal );
__declspec(implementation_key(8388)) double ISurfaceBirefringentIn::GetA ( );
__declspec(implementation_key(8389)) void ISurfaceBirefringentIn::PutA ( double pRetVal );
__declspec(implementation_key(8390)) double ISurfaceBirefringentIn::GetB ( );
__declspec(implementation_key(8391)) void ISurfaceBirefringentIn::PutB ( double pRetVal );
__declspec(implementation_key(8392)) double ISurfaceBirefringentIn::GetMode7Cx ( long N );
__declspec(implementation_key(8393)) HRESULT ISurfaceBirefringentIn::SetMode7Cx ( long N, double Value );
__declspec(implementation_key(8394)) double ISurfaceBirefringentIn::GetAz ( );
__declspec(implementation_key(8395)) void ISurfaceBirefringentIn::PutAz ( double pRetVal );
__declspec(implementation_key(8396)) double ISurfaceBirefringentIn::GetZ0 ( );
__declspec(implementation_key(8397)) void ISurfaceBirefringentIn::PutZ0 ( double pRetVal );
__declspec(implementation_key(8398)) double ISurfaceBirefringentIn::GetZn ( );
__declspec(implementation_key(8399)) void ISurfaceBirefringentIn::PutZn ( double pRetVal );
__declspec(implementation_key(8400)) double ISurfaceBirefringentIn::GetCmn ( long M, long N );
__declspec(implementation_key(8401)) HRESULT ISurfaceBirefringentIn::SetCmn ( long M, long N, double Value );
__declspec(implementation_key(8402)) IEditorCellPtr ISurfaceBirefringentOut::GetShapeCell ( );
__declspec(implementation_key(8403)) IEditorCellPtr ISurfaceBirefringentOut::GetRadiusOfRotationCell ( );
__declspec(implementation_key(8404)) long ISurfaceBirefringentOut::GetShape ( );
__declspec(implementation_key(8405)) void ISurfaceBirefringentOut::PutShape ( long pRetVal );
__declspec(implementation_key(8406)) double ISurfaceBirefringentOut::GetRadiusOfRotation ( );
__declspec(implementation_key(8407)) void ISurfaceBirefringentOut::PutRadiusOfRotation ( double pRetVal );
__declspec(implementation_key(8408)) IEditorCellPtr ISurfaceChebyShv::GetNumberOf_X_OrdersCell ( );
__declspec(implementation_key(8409)) IEditorCellPtr ISurfaceChebyShv::GetNumberOf_Y_OrdersCell ( );
__declspec(implementation_key(8410)) IEditorCellPtr ISurfaceChebyShv::GetNorm_X_LengthCell ( );
__declspec(implementation_key(8411)) IEditorCellPtr ISurfaceChebyShv::GetNorm_Y_LengthCell ( );
__declspec(implementation_key(8412)) IEditorCellPtr ISurfaceChebyShv::CxyCell ( long orderX, long orderY );
__declspec(implementation_key(8413)) long ISurfaceChebyShv::GetNumberOf_X_Orders ( );
__declspec(implementation_key(8414)) void ISurfaceChebyShv::PutNumberOf_X_Orders ( long pRetVal );
__declspec(implementation_key(8415)) long ISurfaceChebyShv::GetNumberOf_Y_Orders ( );
__declspec(implementation_key(8416)) void ISurfaceChebyShv::PutNumberOf_Y_Orders ( long pRetVal );
__declspec(implementation_key(8417)) double ISurfaceChebyShv::GetNorm_X_Length ( );
__declspec(implementation_key(8418)) void ISurfaceChebyShv::PutNorm_X_Length ( double pRetVal );
__declspec(implementation_key(8419)) double ISurfaceChebyShv::GetNorm_Y_Length ( );
__declspec(implementation_key(8420)) void ISurfaceChebyShv::PutNorm_Y_Length ( double pRetVal );
__declspec(implementation_key(8421)) double ISurfaceChebyShv::GetCxy ( long orderX, long orderY );
__declspec(implementation_key(8422)) HRESULT ISurfaceChebyShv::SetCxy ( long orderX, long orderY, double Value );
__declspec(implementation_key(8423)) IEditorCellPtr ISurfaceConjugate::GetX1_Cell ( );
__declspec(implementation_key(8424)) IEditorCellPtr ISurfaceConjugate::GetY1_Cell ( );
__declspec(implementation_key(8425)) IEditorCellPtr ISurfaceConjugate::GetZ1_Cell ( );
__declspec(implementation_key(8426)) IEditorCellPtr ISurfaceConjugate::GetX2_Cell ( );
__declspec(implementation_key(8427)) IEditorCellPtr ISurfaceConjugate::GetY2_Cell ( );
__declspec(implementation_key(8428)) IEditorCellPtr ISurfaceConjugate::GetZ2_Cell ( );
__declspec(implementation_key(8429)) double ISurfaceConjugate::GetX1 ( );
__declspec(implementation_key(8430)) void ISurfaceConjugate::PutX1 ( double pRetVal );
__declspec(implementation_key(8431)) double ISurfaceConjugate::GetY1 ( );
__declspec(implementation_key(8432)) void ISurfaceConjugate::PutY1 ( double pRetVal );
__declspec(implementation_key(8433)) double ISurfaceConjugate::GetZ1 ( );
__declspec(implementation_key(8434)) void ISurfaceConjugate::PutZ1 ( double pRetVal );
__declspec(implementation_key(8435)) double ISurfaceConjugate::GetX2 ( );
__declspec(implementation_key(8436)) void ISurfaceConjugate::PutX2 ( double pRetVal );
__declspec(implementation_key(8437)) double ISurfaceConjugate::GetY2 ( );
__declspec(implementation_key(8438)) void ISurfaceConjugate::PutY2 ( double pRetVal );
__declspec(implementation_key(8439)) double ISurfaceConjugate::GetZ2 ( );
__declspec(implementation_key(8440)) void ISurfaceConjugate::PutZ2 ( double pRetVal );
__declspec(implementation_key(8441)) IEditorCellPtr ISurfaceCoordinateBreak::GetDecenter_X_Cell ( );
__declspec(implementation_key(8442)) IEditorCellPtr ISurfaceCoordinateBreak::GetDecenter_Y_Cell ( );
__declspec(implementation_key(8443)) IEditorCellPtr ISurfaceCoordinateBreak::GetTiltAbout_X_Cell ( );
__declspec(implementation_key(8444)) IEditorCellPtr ISurfaceCoordinateBreak::GetTiltAbout_Y_Cell ( );
__declspec(implementation_key(8445)) IEditorCellPtr ISurfaceCoordinateBreak::GetTiltAbout_Z_Cell ( );
__declspec(implementation_key(8446)) IEditorCellPtr ISurfaceCoordinateBreak::GetOrderCell ( );
__declspec(implementation_key(8447)) double ISurfaceCoordinateBreak::GetDecenter_X ( );
__declspec(implementation_key(8448)) void ISurfaceCoordinateBreak::PutDecenter_X ( double pRetVal );
__declspec(implementation_key(8449)) double ISurfaceCoordinateBreak::GetDecenter_Y ( );
__declspec(implementation_key(8450)) void ISurfaceCoordinateBreak::PutDecenter_Y ( double pRetVal );
__declspec(implementation_key(8451)) double ISurfaceCoordinateBreak::GetTiltAbout_X ( );
__declspec(implementation_key(8452)) void ISurfaceCoordinateBreak::PutTiltAbout_X ( double pRetVal );
__declspec(implementation_key(8453)) double ISurfaceCoordinateBreak::GetTiltAbout_Y ( );
__declspec(implementation_key(8454)) void ISurfaceCoordinateBreak::PutTiltAbout_Y ( double pRetVal );
__declspec(implementation_key(8455)) double ISurfaceCoordinateBreak::GetTiltAbout_Z ( );
__declspec(implementation_key(8456)) void ISurfaceCoordinateBreak::PutTiltAbout_Z ( double pRetVal );
__declspec(implementation_key(8457)) long ISurfaceCoordinateBreak::GetOrder ( );
__declspec(implementation_key(8458)) void ISurfaceCoordinateBreak::PutOrder ( long pRetVal );
__declspec(implementation_key(8459)) IEditorCellPtr ISurfaceCubicSpline::Z_nEigthsCell ( long N );
__declspec(implementation_key(8460)) double ISurfaceCubicSpline::Get_Z_nEighths ( long N );
__declspec(implementation_key(8461)) HRESULT ISurfaceCubicSpline::Set_Z_nEighths ( long N, double Value );
__declspec(implementation_key(8462)) IEditorCellPtr ISurfaceCylinderFrensel::GetCurvatureCell ( );
__declspec(implementation_key(8463)) IEditorCellPtr ISurfaceCylinderFrensel::GetConicCell ( );
__declspec(implementation_key(8464)) double ISurfaceCylinderFrensel::GetCurvature ( );
__declspec(implementation_key(8465)) void ISurfaceCylinderFrensel::PutCurvature ( double pRetVal );
__declspec(implementation_key(8466)) double ISurfaceCylinderFrensel::GetConic ( );
__declspec(implementation_key(8467)) void ISurfaceCylinderFrensel::PutConic ( double pRetVal );
__declspec(implementation_key(8468)) IEditorCellPtr ISurfaceData::NthExtraDataCell ( long N );
__declspec(implementation_key(8469)) double ISurfaceData::GetNthExtraData ( long N );
__declspec(implementation_key(8470)) HRESULT ISurfaceData::SetNthExtraData ( long N, double Value );
__declspec(implementation_key(8471)) IEditorCellPtr ISurfaceDiffractionGrating::GetLinesPerMicroMeterCell ( );
__declspec(implementation_key(8472)) IEditorCellPtr ISurfaceDiffractionGrating::GetDiffractionOrderCell ( );
__declspec(implementation_key(8473)) double ISurfaceDiffractionGrating::GetLinesPerMicroMeter ( );
__declspec(implementation_key(8474)) void ISurfaceDiffractionGrating::PutLinesPerMicroMeter ( double pRetVal );
__declspec(implementation_key(8475)) double ISurfaceDiffractionGrating::GetDiffractionOrder ( );
__declspec(implementation_key(8476)) void ISurfaceDiffractionGrating::PutDiffractionOrder ( double pRetVal );
__declspec(implementation_key(8477)) IEditorCellPtr ISurfaceEllipticalGrating1::GetLinesPerMicroMeterCell ( );
__declspec(implementation_key(8478)) IEditorCellPtr ISurfaceEllipticalGrating1::GetDiffractionOrderCell ( );
__declspec(implementation_key(8479)) IEditorCellPtr ISurfaceEllipticalGrating1::GetaCell ( );
__declspec(implementation_key(8480)) IEditorCellPtr ISurfaceEllipticalGrating1::GetBCell ( );
__declspec(implementation_key(8481)) IEditorCellPtr ISurfaceEllipticalGrating1::GetcCell ( );
__declspec(implementation_key(8482)) IEditorCellPtr ISurfaceEllipticalGrating1::GetAlphaCell ( );
__declspec(implementation_key(8483)) IEditorCellPtr ISurfaceEllipticalGrating1::GetBetaCell ( );
__declspec(implementation_key(8484)) IEditorCellPtr ISurfaceEllipticalGrating1::GetGammaCell ( );
__declspec(implementation_key(8485)) IEditorCellPtr ISurfaceEllipticalGrating1::GetDeltaCell ( );
__declspec(implementation_key(8486)) IEditorCellPtr ISurfaceEllipticalGrating1::GetEpsilonCell ( );
__declspec(implementation_key(8487)) IEditorCellPtr ISurfaceEllipticalGrating1::GetNormRadiusCell ( );
__declspec(implementation_key(8488)) double ISurfaceEllipticalGrating1::GetLinesPerMicroMeter ( );
__declspec(implementation_key(8489)) void ISurfaceEllipticalGrating1::PutLinesPerMicroMeter ( double pRetVal );
__declspec(implementation_key(8490)) double ISurfaceEllipticalGrating1::GetDiffractionOrder ( );
__declspec(implementation_key(8491)) void ISurfaceEllipticalGrating1::PutDiffractionOrder ( double pRetVal );
__declspec(implementation_key(8492)) double ISurfaceEllipticalGrating1::GetA ( );
__declspec(implementation_key(8493)) void ISurfaceEllipticalGrating1::PutA ( double pRetVal );
__declspec(implementation_key(8494)) double ISurfaceEllipticalGrating1::GetB ( );
__declspec(implementation_key(8495)) void ISurfaceEllipticalGrating1::PutB ( double pRetVal );
__declspec(implementation_key(8496)) double ISurfaceEllipticalGrating1::Getc ( );
__declspec(implementation_key(8497)) void ISurfaceEllipticalGrating1::Putc ( double pRetVal );
__declspec(implementation_key(8498)) double ISurfaceEllipticalGrating1::GetAlpha ( );
__declspec(implementation_key(8499)) void ISurfaceEllipticalGrating1::PutAlpha ( double pRetVal );
__declspec(implementation_key(8500)) double ISurfaceEllipticalGrating1::GetBeta ( );
__declspec(implementation_key(8501)) void ISurfaceEllipticalGrating1::PutBeta ( double pRetVal );
__declspec(implementation_key(8502)) double ISurfaceEllipticalGrating1::GetGamma ( );
__declspec(implementation_key(8503)) void ISurfaceEllipticalGrating1::PutGamma ( double pRetVal );
__declspec(implementation_key(8504)) double ISurfaceEllipticalGrating1::GetDelta ( );
__declspec(implementation_key(8505)) void ISurfaceEllipticalGrating1::PutDelta ( double pRetVal );
__declspec(implementation_key(8506)) double ISurfaceEllipticalGrating1::GetEpsilon ( );
__declspec(implementation_key(8507)) void ISurfaceEllipticalGrating1::PutEpsilon ( double pRetVal );
__declspec(implementation_key(8508)) double ISurfaceEllipticalGrating1::GetNormRadius ( );
__declspec(implementation_key(8509)) void ISurfaceEllipticalGrating1::PutNormRadius ( double pRetVal );
__declspec(implementation_key(8510)) IEditorCellPtr ISurfaceEllipticalGrating2::GetLinesPerMicroMeterCell ( );
__declspec(implementation_key(8511)) IEditorCellPtr ISurfaceEllipticalGrating2::GetDiffractionOrderCell ( );
__declspec(implementation_key(8512)) IEditorCellPtr ISurfaceEllipticalGrating2::GetaCell ( );
__declspec(implementation_key(8513)) IEditorCellPtr ISurfaceEllipticalGrating2::GetBCell ( );
__declspec(implementation_key(8514)) IEditorCellPtr ISurfaceEllipticalGrating2::GetcCell ( );
__declspec(implementation_key(8515)) IEditorCellPtr ISurfaceEllipticalGrating2::GetThetaCell ( );
__declspec(implementation_key(8516)) IEditorCellPtr ISurfaceEllipticalGrating2::GetNormRadiusCell ( );
__declspec(implementation_key(8517)) double ISurfaceEllipticalGrating2::GetLinesPerMicroMeter ( );
__declspec(implementation_key(8518)) void ISurfaceEllipticalGrating2::PutLinesPerMicroMeter ( double pRetVal );
__declspec(implementation_key(8519)) double ISurfaceEllipticalGrating2::GetDiffractionOrder ( );
__declspec(implementation_key(8520)) void ISurfaceEllipticalGrating2::PutDiffractionOrder ( double pRetVal );
__declspec(implementation_key(8521)) double ISurfaceEllipticalGrating2::GetA ( );
__declspec(implementation_key(8522)) void ISurfaceEllipticalGrating2::PutA ( double pRetVal );
__declspec(implementation_key(8523)) double ISurfaceEllipticalGrating2::GetB ( );
__declspec(implementation_key(8524)) void ISurfaceEllipticalGrating2::PutB ( double pRetVal );
__declspec(implementation_key(8525)) double ISurfaceEllipticalGrating2::Getc ( );
__declspec(implementation_key(8526)) void ISurfaceEllipticalGrating2::Putc ( double pRetVal );
__declspec(implementation_key(8527)) double ISurfaceEllipticalGrating2::GetTheta ( );
__declspec(implementation_key(8528)) void ISurfaceEllipticalGrating2::PutTheta ( double pRetVal );
__declspec(implementation_key(8529)) double ISurfaceEllipticalGrating2::GetNormRadius ( );
__declspec(implementation_key(8530)) void ISurfaceEllipticalGrating2::PutNormRadius ( double pRetVal );
__declspec(implementation_key(8531)) IEditorCellPtr ISurfaceExtendedToroidalGrating::GetRadiusOfRotationCell ( );
__declspec(implementation_key(8532)) IEditorCellPtr ISurfaceExtendedToroidalGrating::GetLinesPerMicroMeterCell ( );
__declspec(implementation_key(8533)) IEditorCellPtr ISurfaceExtendedToroidalGrating::GetDiffractionOrderCell ( );
__declspec(implementation_key(8534)) double ISurfaceExtendedToroidalGrating::GetRadiusOfRotation ( );
__declspec(implementation_key(8535)) void ISurfaceExtendedToroidalGrating::PutRadiusOfRotation ( double pRetVal );
__declspec(implementation_key(8536)) double ISurfaceExtendedToroidalGrating::GetLinesPerMicroMeter ( );
__declspec(implementation_key(8537)) void ISurfaceExtendedToroidalGrating::PutLinesPerMicroMeter ( double pRetVal );
__declspec(implementation_key(8538)) double ISurfaceExtendedToroidalGrating::GetDiffractionOrder ( );
__declspec(implementation_key(8539)) void ISurfaceExtendedToroidalGrating::PutDiffractionOrder ( double pRetVal );
__declspec(implementation_key(8540)) IEditorCellPtr ISurfaceExtendedToroidalGrating::GetNormRadiusCell ( );
__declspec(implementation_key(8541)) double ISurfaceExtendedToroidalGrating::GetNormRadius ( );
__declspec(implementation_key(8542)) void ISurfaceExtendedToroidalGrating::PutNormRadius ( double pRetVal );
__declspec(implementation_key(8543)) IEditorCellPtr ISurfaceExtendedAsphere::GetNormRadiusCell ( );
__declspec(implementation_key(8544)) double ISurfaceExtendedAsphere::GetNormRadius ( );
__declspec(implementation_key(8545)) void ISurfaceExtendedAsphere::PutNormRadius ( double pRetVal );
__declspec(implementation_key(8546)) IEditorCellPtr ISurfaceExtendedCubicSpline::GetNumberOfStepsCell ( );
__declspec(implementation_key(8547)) IEditorCellPtr ISurfaceExtendedCubicSpline::GetStepSizeCell ( );
__declspec(implementation_key(8548)) IEditorCellPtr ISurfaceExtendedCubicSpline::SagAtNthStepCell ( long N );
__declspec(implementation_key(8549)) long ISurfaceExtendedCubicSpline::GetNumberOfSteps ( );
__declspec(implementation_key(8550)) void ISurfaceExtendedCubicSpline::PutNumberOfSteps ( long pRetVal );
__declspec(implementation_key(8551)) double ISurfaceExtendedCubicSpline::GetStepSize ( );
__declspec(implementation_key(8552)) void ISurfaceExtendedCubicSpline::PutStepSize ( double pRetVal );
__declspec(implementation_key(8553)) double ISurfaceExtendedCubicSpline::GetSagAtNthStep ( long N );
__declspec(implementation_key(8554)) HRESULT ISurfaceExtendedCubicSpline::SetSagAtNthStep ( long N, double Value );
__declspec(implementation_key(8555)) IEditorCellPtr ISurfaceExtendedFresnel::GetCurvatureCell ( );
__declspec(implementation_key(8556)) IEditorCellPtr ISurfaceExtendedFresnel::GetConicCell ( );
__declspec(implementation_key(8557)) double ISurfaceExtendedFresnel::GetCurvature ( );
__declspec(implementation_key(8558)) void ISurfaceExtendedFresnel::PutCurvature ( double pRetVal );
__declspec(implementation_key(8559)) double ISurfaceExtendedFresnel::GetConic ( );
__declspec(implementation_key(8560)) void ISurfaceExtendedFresnel::PutConic ( double pRetVal );
__declspec(implementation_key(8561)) IEditorCellPtr ISurfaceExtendedOddAsphere::GetNormRadiusCell ( );
__declspec(implementation_key(8562)) double ISurfaceExtendedOddAsphere::GetNormRadius ( );
__declspec(implementation_key(8563)) void ISurfaceExtendedOddAsphere::PutNormRadius ( double pRetVal );
__declspec(implementation_key(8564)) IEditorCellPtr ISurfaceExtendedPolynomial::GetNormRadiusCell ( );
__declspec(implementation_key(8565)) double ISurfaceExtendedPolynomial::GetNormRadius ( );
__declspec(implementation_key(8566)) void ISurfaceExtendedPolynomial::PutNormRadius ( double pRetVal );
__declspec(implementation_key(8567)) IEditorCellPtr ISurfaceGeneralizedFresnel::GetNormRadiusCell ( );
__declspec(implementation_key(8568)) double ISurfaceGeneralizedFresnel::GetNormRadius ( );
__declspec(implementation_key(8569)) void ISurfaceGeneralizedFresnel::PutNormRadius ( double pRetVal );
__declspec(implementation_key(8570)) IEditorCellPtr ISurfaceGradient1::GetDeltaTCell ( );
__declspec(implementation_key(8571)) IEditorCellPtr ISurfaceGradient1::Getn0Cell ( );
__declspec(implementation_key(8572)) IEditorCellPtr ISurfaceGradient1::GetNr2Cell ( );
__declspec(implementation_key(8573)) IEditorCellPtr ISurfaceGradient1::GetNr1Cell ( );
__declspec(implementation_key(8574)) double ISurfaceGradient1::GetDeltaT ( );
__declspec(implementation_key(8575)) void ISurfaceGradient1::PutDeltaT ( double pRetVal );
__declspec(implementation_key(8576)) double ISurfaceGradient1::Getn0 ( );
__declspec(implementation_key(8577)) void ISurfaceGradient1::Putn0 ( double pRetVal );
__declspec(implementation_key(8578)) double ISurfaceGradient1::GetNr2 ( );
__declspec(implementation_key(8579)) void ISurfaceGradient1::PutNr2 ( double pRetVal );
__declspec(implementation_key(8580)) double ISurfaceGradient1::GetNr1 ( );
__declspec(implementation_key(8581)) void ISurfaceGradient1::PutNr1 ( double pRetVal );
__declspec(implementation_key(8582)) IEditorCellPtr ISurfaceGradient2::GetDeltaTCell ( );
__declspec(implementation_key(8583)) IEditorCellPtr ISurfaceGradient2::Getn0Cell ( );
__declspec(implementation_key(8584)) IEditorCellPtr ISurfaceGradient2::GetNr2Cell ( );
__declspec(implementation_key(8585)) IEditorCellPtr ISurfaceGradient2::GetNr4Cell ( );
__declspec(implementation_key(8586)) IEditorCellPtr ISurfaceGradient2::GetNr6Cell ( );
__declspec(implementation_key(8587)) IEditorCellPtr ISurfaceGradient2::GetNr8Cell ( );
__declspec(implementation_key(8588)) IEditorCellPtr ISurfaceGradient2::GetNr10Cell ( );
__declspec(implementation_key(8589)) IEditorCellPtr ISurfaceGradient2::GetNr12Cell ( );
__declspec(implementation_key(8590)) double ISurfaceGradient2::GetDeltaT ( );
__declspec(implementation_key(8591)) void ISurfaceGradient2::PutDeltaT ( double pRetVal );
__declspec(implementation_key(8592)) double ISurfaceGradient2::Getn0 ( );
__declspec(implementation_key(8593)) void ISurfaceGradient2::Putn0 ( double pRetVal );
__declspec(implementation_key(8594)) double ISurfaceGradient2::GetNr2 ( );
__declspec(implementation_key(8595)) void ISurfaceGradient2::PutNr2 ( double pRetVal );
__declspec(implementation_key(8596)) double ISurfaceGradient2::GetNr4 ( );
__declspec(implementation_key(8597)) void ISurfaceGradient2::PutNr4 ( double pRetVal );
__declspec(implementation_key(8598)) double ISurfaceGradient2::GetNr6 ( );
__declspec(implementation_key(8599)) void ISurfaceGradient2::PutNr6 ( double pRetVal );
__declspec(implementation_key(8600)) double ISurfaceGradient2::GetNr8 ( );
__declspec(implementation_key(8601)) void ISurfaceGradient2::PutNr8 ( double pRetVal );
__declspec(implementation_key(8602)) double ISurfaceGradient2::GetNr10 ( );
__declspec(implementation_key(8603)) void ISurfaceGradient2::PutNr10 ( double pRetVal );
__declspec(implementation_key(8604)) double ISurfaceGradient2::GetNr12 ( );
__declspec(implementation_key(8605)) void ISurfaceGradient2::PutNr12 ( double pRetVal );
__declspec(implementation_key(8606)) IEditorCellPtr ISurfaceGradient3::GetDeltaTCell ( );
__declspec(implementation_key(8607)) IEditorCellPtr ISurfaceGradient3::Getn0Cell ( );
__declspec(implementation_key(8608)) IEditorCellPtr ISurfaceGradient3::GetNr2Cell ( );
__declspec(implementation_key(8609)) IEditorCellPtr ISurfaceGradient3::GetNr4Cell ( );
__declspec(implementation_key(8610)) IEditorCellPtr ISurfaceGradient3::GetNr6Cell ( );
__declspec(implementation_key(8611)) IEditorCellPtr ISurfaceGradient3::GetNz1Cell ( );
__declspec(implementation_key(8612)) IEditorCellPtr ISurfaceGradient3::GetNz2Cell ( );
__declspec(implementation_key(8613)) IEditorCellPtr ISurfaceGradient3::GetNz3Cell ( );
__declspec(implementation_key(8614)) double ISurfaceGradient3::GetDeltaT ( );
__declspec(implementation_key(8615)) void ISurfaceGradient3::PutDeltaT ( double pRetVal );
__declspec(implementation_key(8616)) double ISurfaceGradient3::Getn0 ( );
__declspec(implementation_key(8617)) void ISurfaceGradient3::Putn0 ( double pRetVal );
__declspec(implementation_key(8618)) double ISurfaceGradient3::GetNr2 ( );
__declspec(implementation_key(8619)) void ISurfaceGradient3::PutNr2 ( double pRetVal );
__declspec(implementation_key(8620)) double ISurfaceGradient3::GetNr4 ( );
__declspec(implementation_key(8621)) void ISurfaceGradient3::PutNr4 ( double pRetVal );
__declspec(implementation_key(8622)) double ISurfaceGradient3::GetNr6 ( );
__declspec(implementation_key(8623)) void ISurfaceGradient3::PutNr6 ( double pRetVal );
__declspec(implementation_key(8624)) double ISurfaceGradient3::GetNz1 ( );
__declspec(implementation_key(8625)) void ISurfaceGradient3::PutNz1 ( double pRetVal );
__declspec(implementation_key(8626)) double ISurfaceGradient3::GetNz2 ( );
__declspec(implementation_key(8627)) void ISurfaceGradient3::PutNz2 ( double pRetVal );
__declspec(implementation_key(8628)) double ISurfaceGradient3::GetNz3 ( );
__declspec(implementation_key(8629)) void ISurfaceGradient3::PutNz3 ( double pRetVal );
__declspec(implementation_key(8630)) IEditorCellPtr ISurfaceGradient4::GetDeltaTCell ( );
__declspec(implementation_key(8631)) IEditorCellPtr ISurfaceGradient4::Getn0Cell ( );
__declspec(implementation_key(8632)) IEditorCellPtr ISurfaceGradient4::GetNx1Cell ( );
__declspec(implementation_key(8633)) IEditorCellPtr ISurfaceGradient4::GetNx2Cell ( );
__declspec(implementation_key(8634)) IEditorCellPtr ISurfaceGradient4::GetNy1Cell ( );
__declspec(implementation_key(8635)) IEditorCellPtr ISurfaceGradient4::GetNy2Cell ( );
__declspec(implementation_key(8636)) IEditorCellPtr ISurfaceGradient4::GetNz1Cell ( );
__declspec(implementation_key(8637)) IEditorCellPtr ISurfaceGradient4::GetNz2Cell ( );
__declspec(implementation_key(8638)) double ISurfaceGradient4::GetDeltaT ( );
__declspec(implementation_key(8639)) void ISurfaceGradient4::PutDeltaT ( double pRetVal );
__declspec(implementation_key(8640)) double ISurfaceGradient4::Getn0 ( );
__declspec(implementation_key(8641)) void ISurfaceGradient4::Putn0 ( double pRetVal );
__declspec(implementation_key(8642)) double ISurfaceGradient4::GetNx1 ( );
__declspec(implementation_key(8643)) void ISurfaceGradient4::PutNx1 ( double pRetVal );
__declspec(implementation_key(8644)) double ISurfaceGradient4::GetNx2 ( );
__declspec(implementation_key(8645)) void ISurfaceGradient4::PutNx2 ( double pRetVal );
__declspec(implementation_key(8646)) double ISurfaceGradient4::GetNy1 ( );
__declspec(implementation_key(8647)) void ISurfaceGradient4::PutNy1 ( double pRetVal );
__declspec(implementation_key(8648)) double ISurfaceGradient4::GetNy2 ( );
__declspec(implementation_key(8649)) void ISurfaceGradient4::PutNy2 ( double pRetVal );
__declspec(implementation_key(8650)) double ISurfaceGradient4::GetNz1 ( );
__declspec(implementation_key(8651)) void ISurfaceGradient4::PutNz1 ( double pRetVal );
__declspec(implementation_key(8652)) double ISurfaceGradient4::GetNz2 ( );
__declspec(implementation_key(8653)) void ISurfaceGradient4::PutNz2 ( double pRetVal );
__declspec(implementation_key(8654)) IEditorCellPtr ISurfaceGradient5::GetDeltaTCell ( );
__declspec(implementation_key(8655)) IEditorCellPtr ISurfaceGradient5::Getn0Cell ( );
__declspec(implementation_key(8656)) IEditorCellPtr ISurfaceGradient5::GetNr2Cell ( );
__declspec(implementation_key(8657)) IEditorCellPtr ISurfaceGradient5::GetNr4Cell ( );
__declspec(implementation_key(8658)) IEditorCellPtr ISurfaceGradient5::GetNz1Cell ( );
__declspec(implementation_key(8659)) IEditorCellPtr ISurfaceGradient5::GetNz2Cell ( );
__declspec(implementation_key(8660)) IEditorCellPtr ISurfaceGradient5::GetNz3Cell ( );
__declspec(implementation_key(8661)) IEditorCellPtr ISurfaceGradient5::GetNz4Cell ( );
__declspec(implementation_key(8662)) IEditorCellPtr ISurfaceGradient5::GetX_TangentCell ( );
__declspec(implementation_key(8663)) IEditorCellPtr ISurfaceGradient5::GetY_TangentCell ( );
__declspec(implementation_key(8664)) double ISurfaceGradient5::GetDeltaT ( );
__declspec(implementation_key(8665)) void ISurfaceGradient5::PutDeltaT ( double pRetVal );
__declspec(implementation_key(8666)) double ISurfaceGradient5::Getn0 ( );
__declspec(implementation_key(8667)) void ISurfaceGradient5::Putn0 ( double pRetVal );
__declspec(implementation_key(8668)) double ISurfaceGradient5::GetNr2 ( );
__declspec(implementation_key(8669)) void ISurfaceGradient5::PutNr2 ( double pRetVal );
__declspec(implementation_key(8670)) double ISurfaceGradient5::GetNr4 ( );
__declspec(implementation_key(8671)) void ISurfaceGradient5::PutNr4 ( double pRetVal );
__declspec(implementation_key(8672)) double ISurfaceGradient5::GetNz1 ( );
__declspec(implementation_key(8673)) void ISurfaceGradient5::PutNz1 ( double pRetVal );
__declspec(implementation_key(8674)) double ISurfaceGradient5::GetNz2 ( );
__declspec(implementation_key(8675)) void ISurfaceGradient5::PutNz2 ( double pRetVal );
__declspec(implementation_key(8676)) double ISurfaceGradient5::GetNz3 ( );
__declspec(implementation_key(8677)) void ISurfaceGradient5::PutNz3 ( double pRetVal );
__declspec(implementation_key(8678)) double ISurfaceGradient5::GetNz4 ( );
__declspec(implementation_key(8679)) void ISurfaceGradient5::PutNz4 ( double pRetVal );
__declspec(implementation_key(8680)) double ISurfaceGradient5::GetX_Tangent ( );
__declspec(implementation_key(8681)) void ISurfaceGradient5::PutX_Tangent ( double pRetVal );
__declspec(implementation_key(8682)) double ISurfaceGradient5::GetY_Tangent ( );
__declspec(implementation_key(8683)) void ISurfaceGradient5::PutY_Tangent ( double pRetVal );
__declspec(implementation_key(8684)) IEditorCellPtr ISurfaceGradient6::GetDeltaTCell ( );
__declspec(implementation_key(8685)) double ISurfaceGradient6::GetDeltaT ( );
__declspec(implementation_key(8686)) void ISurfaceGradient6::PutDeltaT ( double pRetVal );
__declspec(implementation_key(8687)) IEditorCellPtr ISurfaceGradient7::GetDeltaTCell ( );
__declspec(implementation_key(8688)) IEditorCellPtr ISurfaceGradient7::Getn0Cell ( );
__declspec(implementation_key(8689)) IEditorCellPtr ISurfaceGradient7::GetRCell ( );
__declspec(implementation_key(8690)) IEditorCellPtr ISurfaceGradient7::GetAlphaCell ( );
__declspec(implementation_key(8691)) IEditorCellPtr ISurfaceGradient7::GetBetaCell ( );
__declspec(implementation_key(8692)) double ISurfaceGradient7::GetDeltaT ( );
__declspec(implementation_key(8693)) void ISurfaceGradient7::PutDeltaT ( double pRetVal );
__declspec(implementation_key(8694)) double ISurfaceGradient7::Getn0 ( );
__declspec(implementation_key(8695)) void ISurfaceGradient7::Putn0 ( double pRetVal );
__declspec(implementation_key(8696)) double ISurfaceGradient7::GetR ( );
__declspec(implementation_key(8697)) void ISurfaceGradient7::PutR ( double pRetVal );
__declspec(implementation_key(8698)) double ISurfaceGradient7::GetAlpha ( );
__declspec(implementation_key(8699)) void ISurfaceGradient7::PutAlpha ( double pRetVal );
__declspec(implementation_key(8700)) double ISurfaceGradient7::GetBeta ( );
__declspec(implementation_key(8701)) void ISurfaceGradient7::PutBeta ( double pRetVal );
__declspec(implementation_key(8702)) IEditorCellPtr ISurfaceGradient9::GetDeltaTCell ( );
__declspec(implementation_key(8703)) IEditorCellPtr ISurfaceGradient9::GetX_TangentCell ( );
__declspec(implementation_key(8704)) IEditorCellPtr ISurfaceGradient9::GetY_TangentCell ( );
__declspec(implementation_key(8705)) double ISurfaceGradient9::GetDeltaT ( );
__declspec(implementation_key(8706)) void ISurfaceGradient9::PutDeltaT ( double pRetVal );
__declspec(implementation_key(8707)) double ISurfaceGradient9::GetX_Tangent ( );
__declspec(implementation_key(8708)) void ISurfaceGradient9::PutX_Tangent ( double pRetVal );
__declspec(implementation_key(8709)) double ISurfaceGradient9::GetY_Tangent ( );
__declspec(implementation_key(8710)) void ISurfaceGradient9::PutY_Tangent ( double pRetVal );
__declspec(implementation_key(8711)) IEditorCellPtr ISurfaceGradient10::GetDeltaTCell ( );
__declspec(implementation_key(8712)) IEditorCellPtr ISurfaceGradient10::Getn0Cell ( );
__declspec(implementation_key(8713)) IEditorCellPtr ISurfaceGradient10::GetNy1Cell ( );
__declspec(implementation_key(8714)) IEditorCellPtr ISurfaceGradient10::GetNy2Cell ( );
__declspec(implementation_key(8715)) IEditorCellPtr ISurfaceGradient10::GetNy3Cell ( );
__declspec(implementation_key(8716)) IEditorCellPtr ISurfaceGradient10::GetNy4Cell ( );
__declspec(implementation_key(8717)) IEditorCellPtr ISurfaceGradient10::GetNy5Cell ( );
__declspec(implementation_key(8718)) IEditorCellPtr ISurfaceGradient10::GetNy6Cell ( );
__declspec(implementation_key(8719)) double ISurfaceGradient10::GetDeltaT ( );
__declspec(implementation_key(8720)) void ISurfaceGradient10::PutDeltaT ( double pRetVal );
__declspec(implementation_key(8721)) double ISurfaceGradient10::Getn0 ( );
__declspec(implementation_key(8722)) void ISurfaceGradient10::Putn0 ( double pRetVal );
__declspec(implementation_key(8723)) double ISurfaceGradient10::GetNy1 ( );
__declspec(implementation_key(8724)) void ISurfaceGradient10::PutNy1 ( double pRetVal );
__declspec(implementation_key(8725)) double ISurfaceGradient10::GetNy2 ( );
__declspec(implementation_key(8726)) void ISurfaceGradient10::PutNy2 ( double pRetVal );
__declspec(implementation_key(8727)) double ISurfaceGradient10::GetNy3 ( );
__declspec(implementation_key(8728)) void ISurfaceGradient10::PutNy3 ( double pRetVal );
__declspec(implementation_key(8729)) double ISurfaceGradient10::GetNy4 ( );
__declspec(implementation_key(8730)) void ISurfaceGradient10::PutNy4 ( double pRetVal );
__declspec(implementation_key(8731)) double ISurfaceGradient10::GetNy5 ( );
__declspec(implementation_key(8732)) void ISurfaceGradient10::PutNy5 ( double pRetVal );
__declspec(implementation_key(8733)) double ISurfaceGradient10::GetNy6 ( );
__declspec(implementation_key(8734)) void ISurfaceGradient10::PutNy6 ( double pRetVal );
__declspec(implementation_key(8735)) IEditorCellPtr ISurfaceGradient12::GetDeltaTCell ( );
__declspec(implementation_key(8736)) IEditorCellPtr ISurfaceGradient12::GetOrderCell ( );
__declspec(implementation_key(8737)) IEditorCellPtr ISurfaceGradient12::Getn0Cell ( );
__declspec(implementation_key(8738)) IEditorCellPtr ISurfaceGradient12::NthNxCell ( long N );
__declspec(implementation_key(8739)) IEditorCellPtr ISurfaceGradient12::NthNyCell ( long N );
__declspec(implementation_key(8740)) IEditorCellPtr ISurfaceGradient12::NthNzCell ( long N );
__declspec(implementation_key(8741)) double ISurfaceGradient12::GetDeltaT ( );
__declspec(implementation_key(8742)) void ISurfaceGradient12::PutDeltaT ( double pRetVal );
__declspec(implementation_key(8743)) long ISurfaceGradient12::GetOrder ( );
__declspec(implementation_key(8744)) void ISurfaceGradient12::PutOrder ( long pRetVal );
__declspec(implementation_key(8745)) double ISurfaceGradient12::Getn0 ( );
__declspec(implementation_key(8746)) void ISurfaceGradient12::Putn0 ( double pRetVal );
__declspec(implementation_key(8747)) double ISurfaceGradient12::GetNthNx ( long N );
__declspec(implementation_key(8748)) double ISurfaceGradient12::GetNthNy ( long N );
__declspec(implementation_key(8749)) double ISurfaceGradient12::GetNthNz ( long N );
__declspec(implementation_key(8750)) HRESULT ISurfaceGradient12::SetNthNx ( long N, double Value );
__declspec(implementation_key(8751)) HRESULT ISurfaceGradient12::SetNthNy ( long N, double Value );
__declspec(implementation_key(8752)) HRESULT ISurfaceGradient12::SetNthNz ( long N, double Value );
__declspec(implementation_key(8753)) IEditorCellPtr ISurfaceGradium::GetBouleThicknessCell ( );
__declspec(implementation_key(8754)) IEditorCellPtr ISurfaceGradium::GetDeltaTCell ( );
__declspec(implementation_key(8755)) IEditorCellPtr ISurfaceGradium::GetDeltaZCell ( );
__declspec(implementation_key(8756)) IEditorCellPtr ISurfaceGradium::GetRef_n_Cell ( );
__declspec(implementation_key(8757)) IEditorCellPtr ISurfaceGradium::GetDec_x_Cell ( );
__declspec(implementation_key(8758)) IEditorCellPtr ISurfaceGradium::GetDec_y_Cell ( );
__declspec(implementation_key(8759)) IEditorCellPtr ISurfaceGradium::GetTilt_x_Cell ( );
__declspec(implementation_key(8760)) IEditorCellPtr ISurfaceGradium::GetTilt_y_Cell ( );
__declspec(implementation_key(8761)) IEditorCellPtr ISurfaceGradium::GetCappingCell ( );
__declspec(implementation_key(8762)) double ISurfaceGradium::GetBouleThickness ( );
__declspec(implementation_key(8763)) void ISurfaceGradium::PutBouleThickness ( double pRetVal );
__declspec(implementation_key(8764)) double ISurfaceGradium::GetDeltaT ( );
__declspec(implementation_key(8765)) void ISurfaceGradium::PutDeltaT ( double pRetVal );
__declspec(implementation_key(8766)) double ISurfaceGradium::GetDeltaZ ( );
__declspec(implementation_key(8767)) void ISurfaceGradium::PutDeltaZ ( double pRetVal );
__declspec(implementation_key(8768)) double ISurfaceGradium::GetRef_n ( );
__declspec(implementation_key(8769)) void ISurfaceGradium::PutRef_n ( double pRetVal );
__declspec(implementation_key(8770)) double ISurfaceGradium::GetDec_x ( );
__declspec(implementation_key(8771)) void ISurfaceGradium::PutDec_x ( double pRetVal );
__declspec(implementation_key(8772)) double ISurfaceGradium::GetDec_y ( );
__declspec(implementation_key(8773)) void ISurfaceGradium::PutDec_y ( double pRetVal );
__declspec(implementation_key(8774)) double ISurfaceGradium::GetTilt_x ( );
__declspec(implementation_key(8775)) void ISurfaceGradium::PutTilt_x ( double pRetVal );
__declspec(implementation_key(8776)) double ISurfaceGradium::GetTilt_y ( );
__declspec(implementation_key(8777)) void ISurfaceGradium::PutTilt_y ( double pRetVal );
__declspec(implementation_key(8778)) double ISurfaceGradium::GetCapping ( );
__declspec(implementation_key(8779)) void ISurfaceGradium::PutCapping ( double pRetVal );
__declspec(implementation_key(8780)) IEditorCellPtr ISurfaceGridGradient::GetDeltaTCell ( );
__declspec(implementation_key(8781)) double ISurfaceGridGradient::GetDeltaT ( );
__declspec(implementation_key(8782)) void ISurfaceGridGradient::PutDeltaT ( double pRetVal );
__declspec(implementation_key(8783)) IEditorCellPtr ISurfaceGridPhase::GetDiffractOrderCell ( );
__declspec(implementation_key(8784)) IEditorCellPtr ISurfaceGridPhase::GetShearDistanceCell ( );
__declspec(implementation_key(8785)) IEditorCellPtr ISurfaceGridPhase::GetInterpolateCell ( );
__declspec(implementation_key(8786)) double ISurfaceGridPhase::GetDiffractOrder ( );
__declspec(implementation_key(8787)) void ISurfaceGridPhase::PutDiffractOrder ( double pRetVal );
__declspec(implementation_key(8788)) double ISurfaceGridPhase::GetShearDistance ( );
__declspec(implementation_key(8789)) void ISurfaceGridPhase::PutShearDistance ( double pRetVal );
__declspec(implementation_key(8790)) enum InterpolationMethod ISurfaceGridPhase::GetInterpolate ( );
__declspec(implementation_key(8791)) void ISurfaceGridPhase::PutInterpolate ( enum InterpolationMethod pRetVal );
__declspec(implementation_key(8792)) IEditorCellPtr ISurfaceGridSag::GetInterpolateCell ( );
__declspec(implementation_key(8793)) IEditorCellPtr ISurfaceGridSag::GetZernikeDecenter_X_Cell ( );
__declspec(implementation_key(8794)) IEditorCellPtr ISurfaceGridSag::GetZernikeDecenter_Y_Cell ( );
__declspec(implementation_key(8795)) enum InterpolationMethod ISurfaceGridSag::GetInterpolate ( );
__declspec(implementation_key(8796)) void ISurfaceGridSag::PutInterpolate ( enum InterpolationMethod pRetVal );
__declspec(implementation_key(8797)) double ISurfaceGridSag::GetZernikeDecenter_X ( );
__declspec(implementation_key(8798)) void ISurfaceGridSag::PutZernikeDecenter_X ( double pRetVal );
__declspec(implementation_key(8799)) double ISurfaceGridSag::GetZernikeDecenter_Y ( );
__declspec(implementation_key(8800)) void ISurfaceGridSag::PutZernikeDecenter_Y ( double pRetVal );
__declspec(implementation_key(8801)) IEditorCellPtr ISurfaceHologram1::GetConstruct_X1_Cell ( );
__declspec(implementation_key(8802)) IEditorCellPtr ISurfaceHologram1::GetConstruct_Y1_Cell ( );
__declspec(implementation_key(8803)) IEditorCellPtr ISurfaceHologram1::GetConstruct_Z1_Cell ( );
__declspec(implementation_key(8804)) IEditorCellPtr ISurfaceHologram1::GetConstruct_X2_Cell ( );
__declspec(implementation_key(8805)) IEditorCellPtr ISurfaceHologram1::GetConstruct_Y2_Cell ( );
__declspec(implementation_key(8806)) IEditorCellPtr ISurfaceHologram1::GetConstruct_Z2_Cell ( );
__declspec(implementation_key(8807)) IEditorCellPtr ISurfaceHologram1::GetConstructWaveCell ( );
__declspec(implementation_key(8808)) IEditorCellPtr ISurfaceHologram1::GetDiffractOrderCell ( );
__declspec(implementation_key(8809)) double ISurfaceHologram1::GetConstruct_X1 ( );
__declspec(implementation_key(8810)) void ISurfaceHologram1::PutConstruct_X1 ( double pRetVal );
__declspec(implementation_key(8811)) double ISurfaceHologram1::GetConstruct_Y1 ( );
__declspec(implementation_key(8812)) void ISurfaceHologram1::PutConstruct_Y1 ( double pRetVal );
__declspec(implementation_key(8813)) double ISurfaceHologram1::GetConstruct_Z1 ( );
__declspec(implementation_key(8814)) void ISurfaceHologram1::PutConstruct_Z1 ( double pRetVal );
__declspec(implementation_key(8815)) double ISurfaceHologram1::GetConstruct_X2 ( );
__declspec(implementation_key(8816)) void ISurfaceHologram1::PutConstruct_X2 ( double pRetVal );
__declspec(implementation_key(8817)) double ISurfaceHologram1::GetConstruct_Y2 ( );
__declspec(implementation_key(8818)) void ISurfaceHologram1::PutConstruct_Y2 ( double pRetVal );
__declspec(implementation_key(8819)) double ISurfaceHologram1::GetConstruct_Z2 ( );
__declspec(implementation_key(8820)) void ISurfaceHologram1::PutConstruct_Z2 ( double pRetVal );
__declspec(implementation_key(8821)) double ISurfaceHologram1::GetConstructWave ( );
__declspec(implementation_key(8822)) void ISurfaceHologram1::PutConstructWave ( double pRetVal );
__declspec(implementation_key(8823)) double ISurfaceHologram1::GetDiffractOrder ( );
__declspec(implementation_key(8824)) void ISurfaceHologram1::PutDiffractOrder ( double pRetVal );
__declspec(implementation_key(8825)) IEditorCellPtr ISurfaceHologram2::GetConstruct_X1_Cell ( );
__declspec(implementation_key(8826)) IEditorCellPtr ISurfaceHologram2::GetConstruct_Y1_Cell ( );
__declspec(implementation_key(8827)) IEditorCellPtr ISurfaceHologram2::GetConstruct_Z1_Cell ( );
__declspec(implementation_key(8828)) IEditorCellPtr ISurfaceHologram2::GetConstruct_X2_Cell ( );
__declspec(implementation_key(8829)) IEditorCellPtr ISurfaceHologram2::GetConstruct_Y2_Cell ( );
__declspec(implementation_key(8830)) IEditorCellPtr ISurfaceHologram2::GetConstruct_Z2_Cell ( );
__declspec(implementation_key(8831)) IEditorCellPtr ISurfaceHologram2::GetConstructWaveCell ( );
__declspec(implementation_key(8832)) IEditorCellPtr ISurfaceHologram2::GetDiffractOrderCell ( );
__declspec(implementation_key(8833)) double ISurfaceHologram2::GetConstruct_X1 ( );
__declspec(implementation_key(8834)) void ISurfaceHologram2::PutConstruct_X1 ( double pRetVal );
__declspec(implementation_key(8835)) double ISurfaceHologram2::GetConstruct_Y1 ( );
__declspec(implementation_key(8836)) void ISurfaceHologram2::PutConstruct_Y1 ( double pRetVal );
__declspec(implementation_key(8837)) double ISurfaceHologram2::GetConstruct_Z1 ( );
__declspec(implementation_key(8838)) void ISurfaceHologram2::PutConstruct_Z1 ( double pRetVal );
__declspec(implementation_key(8839)) double ISurfaceHologram2::GetConstruct_X2 ( );
__declspec(implementation_key(8840)) void ISurfaceHologram2::PutConstruct_X2 ( double pRetVal );
__declspec(implementation_key(8841)) double ISurfaceHologram2::GetConstruct_Y2 ( );
__declspec(implementation_key(8842)) void ISurfaceHologram2::PutConstruct_Y2 ( double pRetVal );
__declspec(implementation_key(8843)) double ISurfaceHologram2::GetConstruct_Z2 ( );
__declspec(implementation_key(8844)) void ISurfaceHologram2::PutConstruct_Z2 ( double pRetVal );
__declspec(implementation_key(8845)) double ISurfaceHologram2::GetConstructWave ( );
__declspec(implementation_key(8846)) void ISurfaceHologram2::PutConstructWave ( double pRetVal );
__declspec(implementation_key(8847)) double ISurfaceHologram2::GetDiffractOrder ( );
__declspec(implementation_key(8848)) void ISurfaceHologram2::PutDiffractOrder ( double pRetVal );
__declspec(implementation_key(8849)) IEditorCellPtr ISurfaceIrregular::GetDecenter_X_Cell ( );
__declspec(implementation_key(8850)) IEditorCellPtr ISurfaceIrregular::GetDecenter_Y_Cell ( );
__declspec(implementation_key(8851)) IEditorCellPtr ISurfaceIrregular::GetTiltAbout_X_Cell ( );
__declspec(implementation_key(8852)) IEditorCellPtr ISurfaceIrregular::GetTiltAbout_Y_Cell ( );
__declspec(implementation_key(8853)) IEditorCellPtr ISurfaceIrregular::GetSphericalCell ( );
__declspec(implementation_key(8854)) IEditorCellPtr ISurfaceIrregular::GetAstigmatismCell ( );
__declspec(implementation_key(8855)) IEditorCellPtr ISurfaceIrregular::GetComaCell ( );
__declspec(implementation_key(8856)) IEditorCellPtr ISurfaceIrregular::GetAngleCell ( );
__declspec(implementation_key(8857)) double ISurfaceIrregular::GetDecenter_X ( );
__declspec(implementation_key(8858)) void ISurfaceIrregular::PutDecenter_X ( double pRetVal );
__declspec(implementation_key(8859)) double ISurfaceIrregular::GetDecenter_Y ( );
__declspec(implementation_key(8860)) void ISurfaceIrregular::PutDecenter_Y ( double pRetVal );
__declspec(implementation_key(8861)) double ISurfaceIrregular::GetTiltAbout_X ( );
__declspec(implementation_key(8862)) void ISurfaceIrregular::PutTiltAbout_X ( double pRetVal );
__declspec(implementation_key(8863)) double ISurfaceIrregular::GetTiltAbout_Y ( );
__declspec(implementation_key(8864)) void ISurfaceIrregular::PutTiltAbout_Y ( double pRetVal );
__declspec(implementation_key(8865)) double ISurfaceIrregular::GetSpherical ( );
__declspec(implementation_key(8866)) void ISurfaceIrregular::PutSpherical ( double pRetVal );
__declspec(implementation_key(8867)) double ISurfaceIrregular::GetAstigmatism ( );
__declspec(implementation_key(8868)) void ISurfaceIrregular::PutAstigmatism ( double pRetVal );
__declspec(implementation_key(8869)) double ISurfaceIrregular::GetComa ( );
__declspec(implementation_key(8870)) void ISurfaceIrregular::PutComa ( double pRetVal );
__declspec(implementation_key(8871)) double ISurfaceIrregular::GetAngle ( );
__declspec(implementation_key(8872)) void ISurfaceIrregular::PutAngle ( double pRetVal );
__declspec(implementation_key(8873)) IEditorCellPtr ISurfaceJonesMatrix::GetAr_Cell ( );
__declspec(implementation_key(8874)) IEditorCellPtr ISurfaceJonesMatrix::GetAi_Cell ( );
__declspec(implementation_key(8875)) IEditorCellPtr ISurfaceJonesMatrix::GetBr_Cell ( );
__declspec(implementation_key(8876)) IEditorCellPtr ISurfaceJonesMatrix::GetBi_Cell ( );
__declspec(implementation_key(8877)) IEditorCellPtr ISurfaceJonesMatrix::GetCr_Cell ( );
__declspec(implementation_key(8878)) IEditorCellPtr ISurfaceJonesMatrix::GetCi_Cell ( );
__declspec(implementation_key(8879)) IEditorCellPtr ISurfaceJonesMatrix::GetDr_Cell ( );
__declspec(implementation_key(8880)) IEditorCellPtr ISurfaceJonesMatrix::GetDi_Cell ( );
__declspec(implementation_key(8881)) double ISurfaceJonesMatrix::GetAr ( );
__declspec(implementation_key(8882)) void ISurfaceJonesMatrix::PutAr ( double pRetVal );
__declspec(implementation_key(8883)) double ISurfaceJonesMatrix::GetAi ( );
__declspec(implementation_key(8884)) void ISurfaceJonesMatrix::PutAi ( double pRetVal );
__declspec(implementation_key(8885)) double ISurfaceJonesMatrix::GetBr ( );
__declspec(implementation_key(8886)) void ISurfaceJonesMatrix::PutBr ( double pRetVal );
__declspec(implementation_key(8887)) double ISurfaceJonesMatrix::GetBi ( );
__declspec(implementation_key(8888)) void ISurfaceJonesMatrix::PutBi ( double pRetVal );
__declspec(implementation_key(8889)) double ISurfaceJonesMatrix::GetCr ( );
__declspec(implementation_key(8890)) void ISurfaceJonesMatrix::PutCr ( double pRetVal );
__declspec(implementation_key(8891)) double ISurfaceJonesMatrix::GetCi ( );
__declspec(implementation_key(8892)) void ISurfaceJonesMatrix::PutCi ( double pRetVal );
__declspec(implementation_key(8893)) double ISurfaceJonesMatrix::GetDr ( );
__declspec(implementation_key(8894)) void ISurfaceJonesMatrix::PutDr ( double pRetVal );
__declspec(implementation_key(8895)) double ISurfaceJonesMatrix::GetDi ( );
__declspec(implementation_key(8896)) void ISurfaceJonesMatrix::PutDi ( double pRetVal );
__declspec(implementation_key(8897)) IEditorCellPtr ISurfaceNonSequential::GetDrawPortsCell ( );
__declspec(implementation_key(8898)) IEditorCellPtr ISurfaceNonSequential::GetExitLocation_X_Cell ( );
__declspec(implementation_key(8899)) IEditorCellPtr ISurfaceNonSequential::GetExitLocation_Y_Cell ( );
__declspec(implementation_key(8900)) IEditorCellPtr ISurfaceNonSequential::GetExitLocation_Z_Cell ( );
__declspec(implementation_key(8901)) IEditorCellPtr ISurfaceNonSequential::GetExitTilt_X_Cell ( );
__declspec(implementation_key(8902)) IEditorCellPtr ISurfaceNonSequential::GetExitTilt_Y_Cell ( );
__declspec(implementation_key(8903)) IEditorCellPtr ISurfaceNonSequential::GetExitTilt_Z_Cell ( );
__declspec(implementation_key(8904)) IEditorCellPtr ISurfaceNonSequential::GetOrderCell ( );
__declspec(implementation_key(8905)) IEditorCellPtr ISurfaceNonSequential::GetReverseRaysCell ( );
__declspec(implementation_key(8906)) long ISurfaceNonSequential::GetDrawPorts ( );
__declspec(implementation_key(8907)) void ISurfaceNonSequential::PutDrawPorts ( long pRetVal );
__declspec(implementation_key(8908)) double ISurfaceNonSequential::GetExitLocation_X ( );
__declspec(implementation_key(8909)) void ISurfaceNonSequential::PutExitLocation_X ( double pRetVal );
__declspec(implementation_key(8910)) double ISurfaceNonSequential::GetExitLocation_Y ( );
__declspec(implementation_key(8911)) void ISurfaceNonSequential::PutExitLocation_Y ( double pRetVal );
__declspec(implementation_key(8912)) double ISurfaceNonSequential::GetExitLocation_Z ( );
__declspec(implementation_key(8913)) void ISurfaceNonSequential::PutExitLocation_Z ( double pRetVal );
__declspec(implementation_key(8914)) double ISurfaceNonSequential::GetExitTilt_X ( );
__declspec(implementation_key(8915)) void ISurfaceNonSequential::PutExitTilt_X ( double pRetVal );
__declspec(implementation_key(8916)) double ISurfaceNonSequential::GetExitTilt_Y ( );
__declspec(implementation_key(8917)) void ISurfaceNonSequential::PutExitTilt_Y ( double pRetVal );
__declspec(implementation_key(8918)) double ISurfaceNonSequential::GetExitTilt_Z ( );
__declspec(implementation_key(8919)) void ISurfaceNonSequential::PutExitTilt_Z ( double pRetVal );
__declspec(implementation_key(8920)) long ISurfaceNonSequential::GetOrder ( );
__declspec(implementation_key(8921)) void ISurfaceNonSequential::PutOrder ( long pRetVal );
__declspec(implementation_key(8922)) long ISurfaceNonSequential::GetReverseRays ( );
__declspec(implementation_key(8923)) void ISurfaceNonSequential::PutReverseRays ( long pRetVal );
__declspec(implementation_key(8924)) IEditorCellPtr ISurfaceOddCosine::GetNumberOfTermsCell ( );
__declspec(implementation_key(8925)) IEditorCellPtr ISurfaceOddCosine::GetNormRadiusCell ( );
__declspec(implementation_key(8926)) long ISurfaceOddCosine::GetNumberOfTerms ( );
__declspec(implementation_key(8927)) void ISurfaceOddCosine::PutNumberOfTerms ( long pRetVal );
__declspec(implementation_key(8928)) double ISurfaceOddCosine::GetNormRadius ( );
__declspec(implementation_key(8929)) void ISurfaceOddCosine::PutNormRadius ( double pRetVal );
__declspec(implementation_key(8930)) IEditorCellPtr ISurfaceOpticallyFabricatedHologram::GetShapeCell ( );
__declspec(implementation_key(8931)) IEditorCellPtr ISurfaceOpticallyFabricatedHologram::GetHologramTypeCell ( );
__declspec(implementation_key(8932)) IEditorCellPtr ISurfaceOpticallyFabricatedHologram::GetOPDModeCell ( );
__declspec(implementation_key(8933)) IEditorCellPtr ISurfaceOpticallyFabricatedHologram::GetDiffractOrderCell ( );
__declspec(implementation_key(8934)) IEditorCellPtr ISurfaceOpticallyFabricatedHologram::GetCurvatureCell ( );
__declspec(implementation_key(8935)) IEditorCellPtr ISurfaceOpticallyFabricatedHologram::GetConicCell ( );
__declspec(implementation_key(8936)) IEditorCellPtr ISurfaceOpticallyFabricatedHologram::GetRotation_R_Cell ( );
__declspec(implementation_key(8937)) IEditorCellPtr ISurfaceOpticallyFabricatedHologram::GetaCell ( );
__declspec(implementation_key(8938)) IEditorCellPtr ISurfaceOpticallyFabricatedHologram::GetBCell ( );
__declspec(implementation_key(8939)) IEditorCellPtr ISurfaceOpticallyFabricatedHologram::GetcCell ( );
__declspec(implementation_key(8940)) IEditorCellPtr ISurfaceOpticallyFabricatedHologram::GetNormRadiusCell ( );
__declspec(implementation_key(8941)) long ISurfaceOpticallyFabricatedHologram::GetShape ( );
__declspec(implementation_key(8942)) void ISurfaceOpticallyFabricatedHologram::PutShape ( long pRetVal );
__declspec(implementation_key(8943)) long ISurfaceOpticallyFabricatedHologram::GetHologramType ( );
__declspec(implementation_key(8944)) void ISurfaceOpticallyFabricatedHologram::PutHologramType ( long pRetVal );
__declspec(implementation_key(8945)) long ISurfaceOpticallyFabricatedHologram::GetOPDMode ( );
__declspec(implementation_key(8946)) void ISurfaceOpticallyFabricatedHologram::PutOPDMode ( long pRetVal );
__declspec(implementation_key(8947)) double ISurfaceOpticallyFabricatedHologram::GetDiffractOrder ( );
__declspec(implementation_key(8948)) void ISurfaceOpticallyFabricatedHologram::PutDiffractOrder ( double pRetVal );
__declspec(implementation_key(8949)) double ISurfaceOpticallyFabricatedHologram::GetCurvature ( );
__declspec(implementation_key(8950)) void ISurfaceOpticallyFabricatedHologram::PutCurvature ( double pRetVal );
__declspec(implementation_key(8951)) double ISurfaceOpticallyFabricatedHologram::GetConic ( );
__declspec(implementation_key(8952)) void ISurfaceOpticallyFabricatedHologram::PutConic ( double pRetVal );
__declspec(implementation_key(8953)) double ISurfaceOpticallyFabricatedHologram::GetRotation_R ( );
__declspec(implementation_key(8954)) void ISurfaceOpticallyFabricatedHologram::PutRotation_R ( double pRetVal );
__declspec(implementation_key(8955)) double ISurfaceOpticallyFabricatedHologram::GetA ( );
__declspec(implementation_key(8956)) void ISurfaceOpticallyFabricatedHologram::PutA ( double pRetVal );
__declspec(implementation_key(8957)) double ISurfaceOpticallyFabricatedHologram::GetB ( );
__declspec(implementation_key(8958)) void ISurfaceOpticallyFabricatedHologram::PutB ( double pRetVal );
__declspec(implementation_key(8959)) double ISurfaceOpticallyFabricatedHologram::Getc ( );
__declspec(implementation_key(8960)) void ISurfaceOpticallyFabricatedHologram::Putc ( double pRetVal );
__declspec(implementation_key(8961)) double ISurfaceOpticallyFabricatedHologram::GetNormRadius ( );
__declspec(implementation_key(8962)) void ISurfaceOpticallyFabricatedHologram::PutNormRadius ( double pRetVal );
__declspec(implementation_key(8963)) IEditorCellPtr ISurfaceParaxial::GetFocalLengthCell ( );
__declspec(implementation_key(8964)) IEditorCellPtr ISurfaceParaxial::GetOPDModeCell ( );
__declspec(implementation_key(8965)) double ISurfaceParaxial::GetFocalLength ( );
__declspec(implementation_key(8966)) void ISurfaceParaxial::PutFocalLength ( double pRetVal );
__declspec(implementation_key(8967)) long ISurfaceParaxial::GetOPDMode ( );
__declspec(implementation_key(8968)) void ISurfaceParaxial::PutOPDMode ( long pRetVal );
__declspec(implementation_key(8969)) IEditorCellPtr ISurfaceParaxialXY::GetX_PowerCell ( );
__declspec(implementation_key(8970)) IEditorCellPtr ISurfaceParaxialXY::GetY_PowerCell ( );
__declspec(implementation_key(8971)) double ISurfaceParaxialXY::GetX_Power ( );
__declspec(implementation_key(8972)) void ISurfaceParaxialXY::PutX_Power ( double pRetVal );
__declspec(implementation_key(8973)) double ISurfaceParaxialXY::GetY_Power ( );
__declspec(implementation_key(8974)) void ISurfaceParaxialXY::PutY_Power ( double pRetVal );
__declspec(implementation_key(8975)) IEditorCellPtr ISurfacePeriodic::GetAmplitudeCell ( );
__declspec(implementation_key(8976)) IEditorCellPtr ISurfacePeriodic::GetX_FrequencyCell ( );
__declspec(implementation_key(8977)) IEditorCellPtr ISurfacePeriodic::GetY_FrequencyCell ( );
__declspec(implementation_key(8978)) double ISurfacePeriodic::GetAmplitude ( );
__declspec(implementation_key(8979)) void ISurfacePeriodic::PutAmplitude ( double pRetVal );
__declspec(implementation_key(8980)) double ISurfacePeriodic::GetX_Frequency ( );
__declspec(implementation_key(8981)) void ISurfacePeriodic::PutX_Frequency ( double pRetVal );
__declspec(implementation_key(8982)) double ISurfacePeriodic::GetY_Frequency ( );
__declspec(implementation_key(8983)) void ISurfacePeriodic::PutY_Frequency ( double pRetVal );
__declspec(implementation_key(8984)) IEditorCellPtr ISurfaceQTypeAsphere::GetTypeCell ( );
__declspec(implementation_key(8985)) IEditorCellPtr ISurfaceQTypeAsphere::GetNumberOfTermsCell ( );
__declspec(implementation_key(8986)) IEditorCellPtr ISurfaceQTypeAsphere::GetNormRadiusCell ( );
__declspec(implementation_key(8987)) IEditorCellPtr ISurfaceQTypeAsphere::AnCell ( long N );
__declspec(implementation_key(8988)) enum QTypes ISurfaceQTypeAsphere::GetQType ( );
__declspec(implementation_key(8989)) void ISurfaceQTypeAsphere::PutQType ( enum QTypes pRetVal );
__declspec(implementation_key(8990)) long ISurfaceQTypeAsphere::GetNumberOfTerms ( );
__declspec(implementation_key(8991)) void ISurfaceQTypeAsphere::PutNumberOfTerms ( long pRetVal );
__declspec(implementation_key(8992)) double ISurfaceQTypeAsphere::GetNormRadius ( );
__declspec(implementation_key(8993)) void ISurfaceQTypeAsphere::PutNormRadius ( double pRetVal );
__declspec(implementation_key(8994)) double ISurfaceQTypeAsphere::GetAn ( long N );
__declspec(implementation_key(8995)) HRESULT ISurfaceQTypeAsphere::SetAn ( long N, double Value );
__declspec(implementation_key(8996)) IEditorCellPtr ISurfaceRadialGrating::GetDeffractOrderCell ( );
__declspec(implementation_key(8997)) IEditorCellPtr ISurfaceRadialGrating::GetGratingModeCell ( );
__declspec(implementation_key(8998)) IEditorCellPtr ISurfaceRadialGrating::GetNormRadiusCell ( );
__declspec(implementation_key(8999)) double ISurfaceRadialGrating::GetDeffractOrder ( );
__declspec(implementation_key(9000)) void ISurfaceRadialGrating::PutDeffractOrder ( double pRetVal );
__declspec(implementation_key(9001)) long ISurfaceRadialGrating::GetGratingMode ( );
__declspec(implementation_key(9002)) void ISurfaceRadialGrating::PutGratingMode ( long pRetVal );
__declspec(implementation_key(9003)) double ISurfaceRadialGrating::GetNormRadius ( );
__declspec(implementation_key(9004)) void ISurfaceRadialGrating::PutNormRadius ( double pRetVal );
__declspec(implementation_key(9005)) IEditorCellPtr ISurfaceRadialNurbs::GetNumberOfTermsCell ( );
__declspec(implementation_key(9006)) IEditorCellPtr ISurfaceRadialNurbs::YnCell ( long N );
__declspec(implementation_key(9007)) IEditorCellPtr ISurfaceRadialNurbs::ZnCell ( long N );
__declspec(implementation_key(9008)) IEditorCellPtr ISurfaceRadialNurbs::WnCell ( long N );
__declspec(implementation_key(9009)) long ISurfaceRadialNurbs::GetNumberOfTerms ( );
__declspec(implementation_key(9010)) void ISurfaceRadialNurbs::PutNumberOfTerms ( long pRetVal );
__declspec(implementation_key(9011)) double ISurfaceRadialNurbs::GetYn ( long N );
__declspec(implementation_key(9012)) HRESULT ISurfaceRadialNurbs::SetYn ( long N, double Value );
__declspec(implementation_key(9013)) double ISurfaceRadialNurbs::GetZn ( long N );
__declspec(implementation_key(9014)) HRESULT ISurfaceRadialNurbs::SetZn ( long N, double Value );
__declspec(implementation_key(9015)) double ISurfaceRadialNurbs::GetWn ( long N );
__declspec(implementation_key(9016)) HRESULT ISurfaceRadialNurbs::SetWn ( long N, double Value );
__declspec(implementation_key(9017)) IEditorCellPtr ISurfaceSlide::GetModeCell ( );
__declspec(implementation_key(9018)) IEditorCellPtr ISurfaceSlide::GetX_HalfWidthCell ( );
__declspec(implementation_key(9019)) IEditorCellPtr ISurfaceSlide::GetY_HalfWidthCell ( );
__declspec(implementation_key(9020)) long ISurfaceSlide::GetMode ( );
__declspec(implementation_key(9021)) void ISurfaceSlide::PutMode ( long pRetVal );
__declspec(implementation_key(9022)) double ISurfaceSlide::GetX_HalfWidth ( );
__declspec(implementation_key(9023)) void ISurfaceSlide::PutX_HalfWidth ( double pRetVal );
__declspec(implementation_key(9024)) double ISurfaceSlide::GetY_HalfWidth ( );
__declspec(implementation_key(9025)) void ISurfaceSlide::PutY_HalfWidth ( double pRetVal );
__declspec(implementation_key(9026)) IEditorCellPtr ISurfaceSuperconic::GetNumberOfTermsCell ( );
__declspec(implementation_key(9027)) IEditorCellPtr ISurfaceSuperconic::VnCell ( long N );
__declspec(implementation_key(9028)) IEditorCellPtr ISurfaceSuperconic::UnCell ( long N );
__declspec(implementation_key(9029)) long ISurfaceSuperconic::GetNumberOfTerms ( );
__declspec(implementation_key(9030)) void ISurfaceSuperconic::PutNumberOfTerms ( long pRetVal );
__declspec(implementation_key(9031)) double ISurfaceSuperconic::GetVn ( long N );
__declspec(implementation_key(9032)) HRESULT ISurfaceSuperconic::SetVn ( long N, double Value );
__declspec(implementation_key(9033)) double ISurfaceSuperconic::GetUn ( long N );
__declspec(implementation_key(9034)) HRESULT ISurfaceSuperconic::SetUn ( long N, double Value );
__declspec(implementation_key(9035)) IEditorCellPtr ISurfaceTilted::GetX_TangentCell ( );
__declspec(implementation_key(9036)) IEditorCellPtr ISurfaceTilted::GetY_TangentCell ( );
__declspec(implementation_key(9037)) double ISurfaceTilted::GetX_Tangent ( );
__declspec(implementation_key(9038)) void ISurfaceTilted::PutX_Tangent ( double pRetVal );
__declspec(implementation_key(9039)) double ISurfaceTilted::GetY_Tangent ( );
__declspec(implementation_key(9040)) void ISurfaceTilted::PutY_Tangent ( double pRetVal );
__declspec(implementation_key(9041)) IEditorCellPtr ISurfaceToroidal::GetExtrapolateCell ( );
__declspec(implementation_key(9042)) IEditorCellPtr ISurfaceToroidal::GetRadiusOfRotationCell ( );
__declspec(implementation_key(9043)) long ISurfaceToroidal::GetExtrapolate ( );
__declspec(implementation_key(9044)) void ISurfaceToroidal::PutExtrapolate ( long pRetVal );
__declspec(implementation_key(9045)) double ISurfaceToroidal::GetRadiusOfRotation ( );
__declspec(implementation_key(9046)) void ISurfaceToroidal::PutRadiusOfRotation ( double pRetVal );
__declspec(implementation_key(9047)) IEditorCellPtr ISurfaceToroidalGrat::GetRadiusOfRotationCell ( );
__declspec(implementation_key(9048)) IEditorCellPtr ISurfaceToroidalGrat::GetLinesPerMicroMeterCell ( );
__declspec(implementation_key(9049)) IEditorCellPtr ISurfaceToroidalGrat::GetDiffractionOrderCell ( );
__declspec(implementation_key(9050)) double ISurfaceToroidalGrat::GetRadiusOfRotation ( );
__declspec(implementation_key(9051)) void ISurfaceToroidalGrat::PutRadiusOfRotation ( double pRetVal );
__declspec(implementation_key(9052)) double ISurfaceToroidalGrat::GetLinesPerMicroMeter ( );
__declspec(implementation_key(9053)) void ISurfaceToroidalGrat::PutLinesPerMicroMeter ( double pRetVal );
__declspec(implementation_key(9054)) double ISurfaceToroidalGrat::GetDiffractionOrder ( );
__declspec(implementation_key(9055)) void ISurfaceToroidalGrat::PutDiffractionOrder ( double pRetVal );
__declspec(implementation_key(9056)) IEditorCellPtr ISurfaceToroidalHologram::GetRadiusOfRotationCell ( );
__declspec(implementation_key(9057)) IEditorCellPtr ISurfaceToroidalHologram::GetConst_X1_Cell ( );
__declspec(implementation_key(9058)) IEditorCellPtr ISurfaceToroidalHologram::GetConst_Y1_Cell ( );
__declspec(implementation_key(9059)) IEditorCellPtr ISurfaceToroidalHologram::GetConst_Z1_Cell ( );
__declspec(implementation_key(9060)) IEditorCellPtr ISurfaceToroidalHologram::GetConst_X2_Cell ( );
__declspec(implementation_key(9061)) IEditorCellPtr ISurfaceToroidalHologram::GetConst_Y2_Cell ( );
__declspec(implementation_key(9062)) IEditorCellPtr ISurfaceToroidalHologram::GetConst_Z2_Cell ( );
__declspec(implementation_key(9063)) IEditorCellPtr ISurfaceToroidalHologram::GetConstWaveCell ( );
__declspec(implementation_key(9064)) IEditorCellPtr ISurfaceToroidalHologram::GetOrderCell ( );
__declspec(implementation_key(9065)) IEditorCellPtr ISurfaceToroidalHologram::GetFlagCell ( );
__declspec(implementation_key(9066)) double ISurfaceToroidalHologram::GetRadiusOfRotation ( );
__declspec(implementation_key(9067)) void ISurfaceToroidalHologram::PutRadiusOfRotation ( double pRetVal );
__declspec(implementation_key(9068)) double ISurfaceToroidalHologram::GetConst_X1 ( );
__declspec(implementation_key(9069)) void ISurfaceToroidalHologram::PutConst_X1 ( double pRetVal );
__declspec(implementation_key(9070)) double ISurfaceToroidalHologram::GetConst_Y1 ( );
__declspec(implementation_key(9071)) void ISurfaceToroidalHologram::PutConst_Y1 ( double pRetVal );
__declspec(implementation_key(9072)) double ISurfaceToroidalHologram::GetConst_Z1 ( );
__declspec(implementation_key(9073)) void ISurfaceToroidalHologram::PutConst_Z1 ( double pRetVal );
__declspec(implementation_key(9074)) double ISurfaceToroidalHologram::GetConst_X2 ( );
__declspec(implementation_key(9075)) void ISurfaceToroidalHologram::PutConst_X2 ( double pRetVal );
__declspec(implementation_key(9076)) double ISurfaceToroidalHologram::GetConst_Y2 ( );
__declspec(implementation_key(9077)) void ISurfaceToroidalHologram::PutConst_Y2 ( double pRetVal );
__declspec(implementation_key(9078)) double ISurfaceToroidalHologram::GetConst_Z2 ( );
__declspec(implementation_key(9079)) void ISurfaceToroidalHologram::PutConst_Z2 ( double pRetVal );
__declspec(implementation_key(9080)) double ISurfaceToroidalHologram::GetConstWave ( );
__declspec(implementation_key(9081)) void ISurfaceToroidalHologram::PutConstWave ( double pRetVal );
__declspec(implementation_key(9082)) double ISurfaceToroidalHologram::GetOrder ( );
__declspec(implementation_key(9083)) void ISurfaceToroidalHologram::PutOrder ( double pRetVal );
__declspec(implementation_key(9084)) long ISurfaceToroidalHologram::GetFlag ( );
__declspec(implementation_key(9085)) void ISurfaceToroidalHologram::PutFlag ( long pRetVal );
__declspec(implementation_key(9086)) IEditorCellPtr ISurfaceToroidalNurbs::GetRadiusOfRotationCell ( );
__declspec(implementation_key(9087)) IEditorCellPtr ISurfaceToroidalNurbs::GetMinimum_X_Cell ( );
__declspec(implementation_key(9088)) IEditorCellPtr ISurfaceToroidalNurbs::GetMinimumAngleCell ( );
__declspec(implementation_key(9089)) IEditorCellPtr ISurfaceToroidalNurbs::GetMaximum_X_Cell ( );
__declspec(implementation_key(9090)) IEditorCellPtr ISurfaceToroidalNurbs::GetMaximumAngleCell ( );
__declspec(implementation_key(9091)) double ISurfaceToroidalNurbs::GetRadiusOfRotation ( );
__declspec(implementation_key(9092)) void ISurfaceToroidalNurbs::PutRadiusOfRotation ( double pRetVal );
__declspec(implementation_key(9093)) double ISurfaceToroidalNurbs::GetMinimum_X ( );
__declspec(implementation_key(9094)) void ISurfaceToroidalNurbs::PutMinimum_X ( double pRetVal );
__declspec(implementation_key(9095)) double ISurfaceToroidalNurbs::GetMinimumAngle ( );
__declspec(implementation_key(9096)) void ISurfaceToroidalNurbs::PutMinimumAngle ( double pRetVal );
__declspec(implementation_key(9097)) double ISurfaceToroidalNurbs::GetMaximum_X ( );
__declspec(implementation_key(9098)) void ISurfaceToroidalNurbs::PutMaximum_X ( double pRetVal );
__declspec(implementation_key(9099)) double ISurfaceToroidalNurbs::GetMaximumAngle ( );
__declspec(implementation_key(9100)) void ISurfaceToroidalNurbs::PutMaximumAngle ( double pRetVal );
__declspec(implementation_key(9101)) IEditorCellPtr ISurfaceToroidalNurbs::GetNumberOfTermsCell ( );
__declspec(implementation_key(9102)) IEditorCellPtr ISurfaceToroidalNurbs::YnCell ( long N );
__declspec(implementation_key(9103)) IEditorCellPtr ISurfaceToroidalNurbs::ZnCell ( long N );
__declspec(implementation_key(9104)) IEditorCellPtr ISurfaceToroidalNurbs::WnCell ( long N );
__declspec(implementation_key(9105)) long ISurfaceToroidalNurbs::GetNumberOfTerms ( );
__declspec(implementation_key(9106)) void ISurfaceToroidalNurbs::PutNumberOfTerms ( long pRetVal );
__declspec(implementation_key(9107)) double ISurfaceToroidalNurbs::GetYn ( long N );
__declspec(implementation_key(9108)) double ISurfaceToroidalNurbs::GetZn ( long N );
__declspec(implementation_key(9109)) double ISurfaceToroidalNurbs::GetWn ( long N );
__declspec(implementation_key(9110)) HRESULT ISurfaceToroidalNurbs::SetYn ( long N, double Value );
__declspec(implementation_key(9111)) HRESULT ISurfaceToroidalNurbs::SetZn ( long N, double Value );
__declspec(implementation_key(9112)) HRESULT ISurfaceToroidalNurbs::SetWn ( long N, double Value );
__declspec(implementation_key(9113)) IEditorCellPtr ISurfaceVariableLineSpaceGrating::GetDiffractOrderCell ( );
__declspec(implementation_key(9114)) IEditorCellPtr ISurfaceVariableLineSpaceGrating::GetFocalRadius_L_Cell ( );
__declspec(implementation_key(9115)) IEditorCellPtr ISurfaceVariableLineSpaceGrating::GetCosineAlphaCell ( );
__declspec(implementation_key(9116)) IEditorCellPtr ISurfaceVariableLineSpaceGrating::GetCosineBetaCell ( );
__declspec(implementation_key(9117)) IEditorCellPtr ISurfaceVariableLineSpaceGrating::GetLambdaZeroCell ( );
__declspec(implementation_key(9118)) double ISurfaceVariableLineSpaceGrating::GetDiffractOrder ( );
__declspec(implementation_key(9119)) void ISurfaceVariableLineSpaceGrating::PutDiffractOrder ( double pRetVal );
__declspec(implementation_key(9120)) double ISurfaceVariableLineSpaceGrating::GetFocalRadius_L ( );
__declspec(implementation_key(9121)) void ISurfaceVariableLineSpaceGrating::PutFocalRadius_L ( double pRetVal );
__declspec(implementation_key(9122)) double ISurfaceVariableLineSpaceGrating::GetCosineAlpha ( );
__declspec(implementation_key(9123)) void ISurfaceVariableLineSpaceGrating::PutCosineAlpha ( double pRetVal );
__declspec(implementation_key(9124)) double ISurfaceVariableLineSpaceGrating::GetCosineBeta ( );
__declspec(implementation_key(9125)) void ISurfaceVariableLineSpaceGrating::PutCosineBeta ( double pRetVal );
__declspec(implementation_key(9126)) double ISurfaceVariableLineSpaceGrating::GetLambdaZero ( );
__declspec(implementation_key(9127)) void ISurfaceVariableLineSpaceGrating::PutLambdaZero ( double pRetVal );
__declspec(implementation_key(9128)) IEditorCellPtr ISurfaceZernikeAnnularPhase::GetDiffractOrderCell ( );
__declspec(implementation_key(9129)) IEditorCellPtr ISurfaceZernikeAnnularPhase::GetExtrapolateCell ( );
__declspec(implementation_key(9130)) IEditorCellPtr ISurfaceZernikeAnnularPhase::GetObscurationCell ( );
__declspec(implementation_key(9131)) double ISurfaceZernikeAnnularPhase::GetDiffractOrder ( );
__declspec(implementation_key(9132)) void ISurfaceZernikeAnnularPhase::PutDiffractOrder ( double pRetVal );
__declspec(implementation_key(9133)) long ISurfaceZernikeAnnularPhase::GetExtrapolate ( );
__declspec(implementation_key(9134)) void ISurfaceZernikeAnnularPhase::PutExtrapolate ( long pRetVal );
__declspec(implementation_key(9135)) double ISurfaceZernikeAnnularPhase::GetObscuration ( );
__declspec(implementation_key(9136)) void ISurfaceZernikeAnnularPhase::PutObscuration ( double pRetVal );
__declspec(implementation_key(9137)) IEditorCellPtr ISurfaceZernikeFringePhase::GetDiffractOrderCell ( );
__declspec(implementation_key(9138)) IEditorCellPtr ISurfaceZernikeFringePhase::GetExtrapolateCell ( );
__declspec(implementation_key(9139)) double ISurfaceZernikeFringePhase::GetDiffractOrder ( );
__declspec(implementation_key(9140)) void ISurfaceZernikeFringePhase::PutDiffractOrder ( double pRetVal );
__declspec(implementation_key(9141)) long ISurfaceZernikeFringePhase::GetExtrapolate ( );
__declspec(implementation_key(9142)) void ISurfaceZernikeFringePhase::PutExtrapolate ( long pRetVal );
__declspec(implementation_key(9143)) IEditorCellPtr ISurfaceZernikeFringeSag::GetExtrapolateCell ( );
__declspec(implementation_key(9144)) IEditorCellPtr ISurfaceZernikeFringeSag::GetZernikeDecenter_X_Cell ( );
__declspec(implementation_key(9145)) IEditorCellPtr ISurfaceZernikeFringeSag::GetZernikeDecenter_Y_Cell ( );
__declspec(implementation_key(9146)) long ISurfaceZernikeFringeSag::GetExtrapolate ( );
__declspec(implementation_key(9147)) void ISurfaceZernikeFringeSag::PutExtrapolate ( long pRetVal );
__declspec(implementation_key(9148)) double ISurfaceZernikeFringeSag::GetZernikeDecenter_X ( );
__declspec(implementation_key(9149)) void ISurfaceZernikeFringeSag::PutZernikeDecenter_X ( double pRetVal );
__declspec(implementation_key(9150)) double ISurfaceZernikeFringeSag::GetZernikeDecenter_Y ( );
__declspec(implementation_key(9151)) void ISurfaceZernikeFringeSag::PutZernikeDecenter_Y ( double pRetVal );
__declspec(implementation_key(9152)) IEditorCellPtr ISurfaceZernikeStandardPhase::GetDiffractOrderCell ( );
__declspec(implementation_key(9153)) IEditorCellPtr ISurfaceZernikeStandardPhase::GetExtrapolateCell ( );
__declspec(implementation_key(9154)) double ISurfaceZernikeStandardPhase::GetDiffractOrder ( );
__declspec(implementation_key(9155)) void ISurfaceZernikeStandardPhase::PutDiffractOrder ( double pRetVal );
__declspec(implementation_key(9156)) long ISurfaceZernikeStandardPhase::GetExtrapolate ( );
__declspec(implementation_key(9157)) void ISurfaceZernikeStandardPhase::PutExtrapolate ( long pRetVal );
__declspec(implementation_key(9158)) IEditorCellPtr ISurfaceZernikeStandardSag::GetExtrapolateCell ( );
__declspec(implementation_key(9159)) IEditorCellPtr ISurfaceZernikeStandardSag::GetZernikeDecenter_X_Cell ( );
__declspec(implementation_key(9160)) IEditorCellPtr ISurfaceZernikeStandardSag::GetZernikeDecenter_Y_Cell ( );
__declspec(implementation_key(9161)) long ISurfaceZernikeStandardSag::GetExtrapolate ( );
__declspec(implementation_key(9162)) void ISurfaceZernikeStandardSag::PutExtrapolate ( long pRetVal );
__declspec(implementation_key(9163)) double ISurfaceZernikeStandardSag::GetZernikeDecenter_X ( );
__declspec(implementation_key(9164)) void ISurfaceZernikeStandardSag::PutZernikeDecenter_X ( double pRetVal );
__declspec(implementation_key(9165)) double ISurfaceZernikeStandardSag::GetZernikeDecenter_Y ( );
__declspec(implementation_key(9166)) void ISurfaceZernikeStandardSag::PutZernikeDecenter_Y ( double pRetVal );
__declspec(implementation_key(9167)) IEditorCellPtr ISurfaceZonePlate::GetModeCell ( );
__declspec(implementation_key(9168)) IEditorCellPtr ISurfaceZonePlate::GetDelta_R_Cell ( );
__declspec(implementation_key(9169)) IEditorCellPtr ISurfaceZonePlate::GetReferenceWaveCell ( );
__declspec(implementation_key(9170)) double ISurfaceZonePlate::GetMode ( );
__declspec(implementation_key(9171)) void ISurfaceZonePlate::PutMode ( double pRetVal );
__declspec(implementation_key(9172)) double ISurfaceZonePlate::GetDelta_R ( );
__declspec(implementation_key(9173)) void ISurfaceZonePlate::PutDelta_R ( double pRetVal );
__declspec(implementation_key(9174)) double ISurfaceZonePlate::GetReferenceWave ( );
__declspec(implementation_key(9175)) void ISurfaceZonePlate::PutReferenceWave ( double pRetVal );
__declspec(implementation_key(9176)) VARIANT_BOOL ITDERow::GetIsActive ( );
__declspec(implementation_key(9177)) long ITDERow::GetOperandNumber ( );
__declspec(implementation_key(9178)) IEditorCellPtr ITDERow::GetOperandCell ( enum ToleranceColumn Col );
__declspec(implementation_key(9179)) _bstr_t ITDERow::GetTypeName ( );
__declspec(implementation_key(9180)) enum ToleranceOperandType ITDERow::GetType ( );
__declspec(implementation_key(9181)) SAFEARRAY * ITDERow::AvailableOperandTypes ( );
__declspec(implementation_key(9182)) VARIANT_BOOL ITDERow::ChangeType ( enum ToleranceOperandType Type );
__declspec(implementation_key(9183)) VARIANT_BOOL ITDERow::GetDoNotAdjustDuringInverseTolerancing ( );
__declspec(implementation_key(9184)) void ITDERow::PutDoNotAdjustDuringInverseTolerancing ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(9185)) enum ZemaxColor ITDERow::GetRowColor ( );
__declspec(implementation_key(9186)) void ITDERow::PutRowColor ( enum ZemaxColor pRetVal );
__declspec(implementation_key(9187)) double ITDERow::GetMin ( );
__declspec(implementation_key(9188)) void ITDERow::PutMin ( double pRetVal );
__declspec(implementation_key(9189)) IEditorCellPtr ITDERow::GetMinCell ( );
__declspec(implementation_key(9190)) VARIANT_BOOL ITDERow::GetIsMinUsed ( );
__declspec(implementation_key(9191)) double ITDERow::GetMax ( );
__declspec(implementation_key(9192)) void ITDERow::PutMax ( double pRetVal );
__declspec(implementation_key(9193)) IEditorCellPtr ITDERow::GetMaxCell ( );
__declspec(implementation_key(9194)) VARIANT_BOOL ITDERow::GetIsMaxUsed ( );
__declspec(implementation_key(9195)) _bstr_t ITDERow::GetComment ( );
__declspec(implementation_key(9196)) void ITDERow::PutComment ( _bstr_t pRetVal );
__declspec(implementation_key(9197)) IEditorCellPtr ITDERow::GetCommentCell ( );
__declspec(implementation_key(9198)) long ITDERow::GetParam1 ( );
__declspec(implementation_key(9199)) void ITDERow::PutParam1 ( long pRetVal );
__declspec(implementation_key(9200)) IEditorCellPtr ITDERow::GetParam1Cell ( );
__declspec(implementation_key(9201)) VARIANT_BOOL ITDERow::GetIsParam1Used ( );
__declspec(implementation_key(9202)) long ITDERow::GetParam2 ( );
__declspec(implementation_key(9203)) void ITDERow::PutParam2 ( long pRetVal );
__declspec(implementation_key(9204)) IEditorCellPtr ITDERow::GetParam2Cell ( );
__declspec(implementation_key(9205)) VARIANT_BOOL ITDERow::GetIsParam2Used ( );
__declspec(implementation_key(9206)) long ITDERow::GetParam3 ( );
__declspec(implementation_key(9207)) void ITDERow::PutParam3 ( long pRetVal );
__declspec(implementation_key(9208)) IEditorCellPtr ITDERow::GetParam3Cell ( );
__declspec(implementation_key(9209)) VARIANT_BOOL ITDERow::GetIsParam3Used ( );
__declspec(implementation_key(9210)) double ITDERow::GetNominal ( );
__declspec(implementation_key(9211)) IEditorCellPtr ITDERow::GetNominalCell ( );
__declspec(implementation_key(9212)) VARIANT_BOOL ITDERow::GetIsNominalUsed ( );
__declspec(implementation_key(9213)) long IToleranceDataEditor::GetRowToOperandOffset ( );
__declspec(implementation_key(9214)) long IToleranceDataEditor::GetNumberOfOperands ( );
__declspec(implementation_key(9215)) enum ToleranceColumn IToleranceDataEditor::GetFirstColumn ( );
__declspec(implementation_key(9216)) enum ToleranceColumn IToleranceDataEditor::GetLastColumn ( );
__declspec(implementation_key(9217)) ITDERowPtr IToleranceDataEditor::GetOperandAt ( long OperandNumber );
__declspec(implementation_key(9218)) ITDERowPtr IToleranceDataEditor::InsertNewOperandAt ( long OperandNumber );
__declspec(implementation_key(9219)) ITDERowPtr IToleranceDataEditor::AddOperand ( );
__declspec(implementation_key(9220)) VARIANT_BOOL IToleranceDataEditor::RemoveOperandAt ( long OperandNumber );
__declspec(implementation_key(9221)) long IToleranceDataEditor::RemoveOperandsAt ( long OperandNumber, long numOperands );
__declspec(implementation_key(9222)) VARIANT_BOOL IToleranceDataEditor::ShowTDE ( );
__declspec(implementation_key(9223)) HRESULT IToleranceDataEditor::HideTDE ( );
__declspec(implementation_key(9224)) INSCToleranceWizardPtr IToleranceDataEditor::GetNSCToleranceWizard ( );
__declspec(implementation_key(9225)) ISEQToleranceWizardPtr IToleranceDataEditor::GetSEQToleranceWizard ( );
__declspec(implementation_key(9226)) VARIANT_BOOL IToleranceDataEditor::LoadToleranceFile ( _bstr_t fileName );
__declspec(implementation_key(9227)) HRESULT IToleranceDataEditor::SaveToleranceFile ( _bstr_t fileName );
__declspec(implementation_key(9228)) long IToleranceDataEditor::CopyOperands ( long fromOperandNumber, long NumberOfOperands, long toOperandNumber );
__declspec(implementation_key(9229)) long IToleranceDataEditor::CopyOperandsFrom ( struct IToleranceDataEditor * fromEditor, long fromOperandNumber, long NumberOfOperands, long toOperandNumber );
__declspec(implementation_key(9230)) VARIANT_BOOL IMFERow::GetIsActive ( );
__declspec(implementation_key(9231)) long IMFERow::GetOperandNumber ( );
__declspec(implementation_key(9232)) IEditorCellPtr IMFERow::GetOperandCell ( enum MeritColumn Col );
__declspec(implementation_key(9233)) _bstr_t IMFERow::GetTypeName ( );
__declspec(implementation_key(9234)) enum MeritOperandType IMFERow::GetType ( );
__declspec(implementation_key(9235)) SAFEARRAY * IMFERow::AvailableOperandTypes ( );
__declspec(implementation_key(9236)) VARIANT_BOOL IMFERow::ChangeType ( enum MeritOperandType Type );
__declspec(implementation_key(9237)) enum ZemaxColor IMFERow::GetRowColor ( );
__declspec(implementation_key(9238)) void IMFERow::PutRowColor ( enum ZemaxColor pRetVal );
__declspec(implementation_key(9239)) double IMFERow::GetTarget ( );
__declspec(implementation_key(9240)) void IMFERow::PutTarget ( double pRetVal );
__declspec(implementation_key(9241)) IEditorCellPtr IMFERow::GetTargetCell ( );
__declspec(implementation_key(9242)) double IMFERow::GetWeight ( );
__declspec(implementation_key(9243)) void IMFERow::PutWeight ( double pRetVal );
__declspec(implementation_key(9244)) IEditorCellPtr IMFERow::GetWeightCell ( );
__declspec(implementation_key(9245)) double IMFERow::GetValue ( );
__declspec(implementation_key(9246)) IEditorCellPtr IMFERow::GetValueCell ( );
__declspec(implementation_key(9247)) double IMFERow::GetContribution ( );
__declspec(implementation_key(9248)) IEditorCellPtr IMFERow::GetContributionCell ( );
__declspec(implementation_key(9249)) long IMeritFunctionEditor::GetRowToOperandOffset ( );
__declspec(implementation_key(9250)) long IMeritFunctionEditor::GetNumberOfOperands ( );
__declspec(implementation_key(9251)) enum MeritColumn IMeritFunctionEditor::GetFirstColumn ( );
__declspec(implementation_key(9252)) enum MeritColumn IMeritFunctionEditor::GetLastColumn ( );
__declspec(implementation_key(9253)) IMFERowPtr IMeritFunctionEditor::GetOperandAt ( long OperandNumber );
__declspec(implementation_key(9254)) IMFERowPtr IMeritFunctionEditor::InsertNewOperandAt ( long OperandNumber );
__declspec(implementation_key(9255)) IMFERowPtr IMeritFunctionEditor::AddOperand ( );
__declspec(implementation_key(9256)) VARIANT_BOOL IMeritFunctionEditor::RemoveOperandAt ( long OperandNumber );
__declspec(implementation_key(9257)) long IMeritFunctionEditor::RemoveOperandsAt ( long OperandNumber, long numOperands );
__declspec(implementation_key(9258)) VARIANT_BOOL IMeritFunctionEditor::ShowMFE ( );
__declspec(implementation_key(9259)) HRESULT IMeritFunctionEditor::HideMFE ( );
__declspec(implementation_key(9260)) HRESULT IMeritFunctionEditor::SaveMeritFunction ( _bstr_t fileName );
__declspec(implementation_key(9261)) HRESULT IMeritFunctionEditor::LoadMeritFunction ( _bstr_t fileName );
__declspec(implementation_key(9262)) long IMeritFunctionEditor::InsertMeritFunction ( _bstr_t fileName, long OperandNumber );
__declspec(implementation_key(9263)) SAFEARRAY * IMeritFunctionEditor::GetMeritFunctionFiles ( );
__declspec(implementation_key(9264)) _bstr_t IMeritFunctionEditor::GetMeritFunctionDirectory ( );
__declspec(implementation_key(9265)) double IMeritFunctionEditor::CalculateMeritFunction ( );
__declspec(implementation_key(9266)) double IMeritFunctionEditor::GetOperandValue ( enum MeritOperandType Type, long srf, long wave, double Hx, double Hy, double Px, double Py, double Ex, double Ey );
__declspec(implementation_key(9267)) INSCOptimizationWizardPtr IMeritFunctionEditor::GetNSCOptimizationWizard ( );
__declspec(implementation_key(9268)) ISEQOptimizationWizardPtr IMeritFunctionEditor::GetSEQOptimizationWizard ( );
__declspec(implementation_key(9269)) INSCBitmapWizardPtr IMeritFunctionEditor::GetNSCBitmapWizard ( );
__declspec(implementation_key(9270)) INSCRoadwayLightingWizardPtr IMeritFunctionEditor::GetNSCRoadwayLightingWizard ( );
__declspec(implementation_key(9271)) long IMeritFunctionEditor::CopyOperands ( long fromOperandNumber, long NumberOfOperands, long toOperandNumber );
__declspec(implementation_key(9272)) long IMeritFunctionEditor::CopyOperandsFrom ( struct IMeritFunctionEditor * fromEditor, long fromOperandNumber, long NumberOfOperands, long toOperandNumber );
__declspec(implementation_key(9273)) VARIANT_BOOL IMCERow::GetIsActive ( );
__declspec(implementation_key(9274)) long IMCERow::GetOperandNumber ( );
__declspec(implementation_key(9275)) IEditorCellPtr IMCERow::GetOperandCell ( long Configuration );
__declspec(implementation_key(9276)) _bstr_t IMCERow::GetTypeName ( );
__declspec(implementation_key(9277)) enum MultiConfigOperandType IMCERow::GetType ( );
__declspec(implementation_key(9278)) SAFEARRAY * IMCERow::AvailableConfigOperandTypes ( );
__declspec(implementation_key(9279)) VARIANT_BOOL IMCERow::ChangeType ( enum MultiConfigOperandType Type );
__declspec(implementation_key(9280)) enum ZemaxColor IMCERow::GetRowColor ( );
__declspec(implementation_key(9281)) void IMCERow::PutRowColor ( enum ZemaxColor pRetVal );
__declspec(implementation_key(9282)) long IMCERow::GetParam1 ( );
__declspec(implementation_key(9283)) void IMCERow::PutParam1 ( long pRetVal );
__declspec(implementation_key(9284)) VARIANT_BOOL IMCERow::GetParam1Enabled ( );
__declspec(implementation_key(9285)) long IMCERow::GetParam2 ( );
__declspec(implementation_key(9286)) void IMCERow::PutParam2 ( long pRetVal );
__declspec(implementation_key(9287)) VARIANT_BOOL IMCERow::GetParam2Enabled ( );
__declspec(implementation_key(9288)) long IMCERow::GetParam3 ( );
__declspec(implementation_key(9289)) void IMCERow::PutParam3 ( long pRetVal );
__declspec(implementation_key(9290)) VARIANT_BOOL IMCERow::GetParam3Enabled ( );
__declspec(implementation_key(9291)) long IMultiConfigEditor::GetRowToOperandOffset ( );
__declspec(implementation_key(9292)) long IMultiConfigEditor::GetNumberOfOperands ( );
__declspec(implementation_key(9293)) long IMultiConfigEditor::GetFirstConfiguration ( );
__declspec(implementation_key(9294)) long IMultiConfigEditor::GetLastConfiguration ( );
__declspec(implementation_key(9295)) long IMultiConfigEditor::GetNumberOfConfigurations ( );
__declspec(implementation_key(9296)) long IMultiConfigEditor::GetCurrentConfiguration ( );
__declspec(implementation_key(9297)) VARIANT_BOOL IMultiConfigEditor::SetCurrentConfiguration ( long configurationNumber );
__declspec(implementation_key(9298)) VARIANT_BOOL IMultiConfigEditor::DeleteConfiguration ( long configurationNumber );
__declspec(implementation_key(9299)) VARIANT_BOOL IMultiConfigEditor::DeleteAllConfigurations ( );
__declspec(implementation_key(9300)) VARIANT_BOOL IMultiConfigEditor::InsertConfiguration ( long configurationNumber, VARIANT_BOOL withPickups );
__declspec(implementation_key(9301)) VARIANT_BOOL IMultiConfigEditor::AddConfiguration ( VARIANT_BOOL withPickups );
__declspec(implementation_key(9302)) HRESULT IMultiConfigEditor::MakeSingleConfiguration ( );
__declspec(implementation_key(9303)) HRESULT IMultiConfigEditor::MakeSingleConfigurationOpt ( VARIANT_BOOL deleteMFEOperands );
__declspec(implementation_key(9304)) VARIANT_BOOL IMultiConfigEditor::NextConfiguration ( );
__declspec(implementation_key(9305)) VARIANT_BOOL IMultiConfigEditor::PrevConfiguration ( );
__declspec(implementation_key(9306)) IMCERowPtr IMultiConfigEditor::GetOperandAt ( long OperandNumber );
__declspec(implementation_key(9307)) IMCERowPtr IMultiConfigEditor::InsertNewOperandAt ( long OperandNumber );
__declspec(implementation_key(9308)) IMCERowPtr IMultiConfigEditor::AddOperand ( );
__declspec(implementation_key(9309)) VARIANT_BOOL IMultiConfigEditor::RemoveOperandAt ( long OperandNumber );
__declspec(implementation_key(9310)) long IMultiConfigEditor::RemoveOperandsAt ( long OperandNumber, long numOperands );
__declspec(implementation_key(9311)) VARIANT_BOOL IMultiConfigEditor::ShowMCE ( );
__declspec(implementation_key(9312)) HRESULT IMultiConfigEditor::HideMCE ( );
__declspec(implementation_key(9313)) long IMultiConfigEditor::CopyOperands ( long fromOperandNumber, long NumberOfOperands, long toOperandNumber );
__declspec(implementation_key(9314)) long IMultiConfigEditor::CopyOperandsFrom ( struct IMultiConfigEditor * fromEditor, long fromOperandNumber, long NumberOfOperands, long toOperandNumber );
__declspec(implementation_key(9315)) SAFEARRAY * INonSeqEditor::AllAvailableObjectNames ( );
__declspec(implementation_key(9316)) SAFEARRAY * INonSeqEditor::AvailableSourceNames ( );
__declspec(implementation_key(9317)) SAFEARRAY * INonSeqEditor::AvailableDetectorNames ( );
__declspec(implementation_key(9318)) SAFEARRAY * INonSeqEditor::AvailableObjectNames ( );
__declspec(implementation_key(9319)) enum ObjectType INonSeqEditor::ObjectTypeFromObjectName ( _bstr_t objectName );
__declspec(implementation_key(9320)) _bstr_t INonSeqEditor::ObjectNameFromObjectType ( enum ObjectType ObjectType );
__declspec(implementation_key(9321)) long INonSeqEditor::GetRowToObjectOffset ( );
__declspec(implementation_key(9322)) long INonSeqEditor::GetActiveSurface ( );
__declspec(implementation_key(9323)) VARIANT_BOOL INonSeqEditor::SetActiveSurface ( long SurfaceNumber );
__declspec(implementation_key(9324)) VARIANT_BOOL INonSeqEditor::NextNSCGroup ( );
__declspec(implementation_key(9325)) VARIANT_BOOL INonSeqEditor::PrevNSCGroup ( );
__declspec(implementation_key(9326)) long INonSeqEditor::GetNumberOfObjects ( );
__declspec(implementation_key(9327)) enum ObjectColumn INonSeqEditor::GetFirstColumn ( );
__declspec(implementation_key(9328)) enum ObjectColumn INonSeqEditor::GetLastColumn ( );
__declspec(implementation_key(9329)) INCERowPtr INonSeqEditor::GetObjectAt ( long ObjectNumber );
__declspec(implementation_key(9330)) INCERowPtr INonSeqEditor::InsertNewObjectAt ( long ObjectNumber );
__declspec(implementation_key(9331)) INCERowPtr INonSeqEditor::AddObject ( );
__declspec(implementation_key(9332)) VARIANT_BOOL INonSeqEditor::RemoveObjectAt ( long ObjectNumber );
__declspec(implementation_key(9333)) long INonSeqEditor::RemoveObjectsAt ( long ObjectNumber, long numObjects );
__declspec(implementation_key(9334)) HRESULT INonSeqEditor::ReloadObject ( long ObjectNumber );
__declspec(implementation_key(9335)) HRESULT INonSeqEditor::ReloadAllObjects ( );
__declspec(implementation_key(9336)) VARIANT_BOOL INonSeqEditor::ShowNCE ( );
__declspec(implementation_key(9337)) HRESULT INonSeqEditor::HideNCE ( );
__declspec(implementation_key(9338)) VARIANT_BOOL INonSeqEditor::GetMatrix ( long ObjectNumber, double * R11, double * R12, double * R13, double * R21, double * R22, double * R23, double * R31, double * R32, double * R33, double * xo, double * yo, double * zo );
__declspec(implementation_key(9339)) VARIANT_BOOL INonSeqEditor::GetDetectorDimensions ( long ObjectNumber, unsigned long * Rows, unsigned long * Cols );
__declspec(implementation_key(9340)) VARIANT_BOOL INonSeqEditor::GetCoherentData ( long ObjectNumber, long pixel, enum DetectorDataType Data, double * Value );
__declspec(implementation_key(9341)) SAFEARRAY * INonSeqEditor::GetAllCoherentDataSafe ( long ObjectNumber, enum DetectorDataType Data );
__declspec(implementation_key(9342)) VARIANT_BOOL INonSeqEditor::GetAllCoherentData ( long ObjectNumber, enum DetectorDataType Data, unsigned long numPixels, double * detectorData );
__declspec(implementation_key(9343)) unsigned long INonSeqEditor::GetDetectorSize ( long ObjectNumber );
__declspec(implementation_key(9344)) VARIANT_BOOL INonSeqEditor::GetDetectorData ( long ObjectNumber, long pixel, long Data, double * Value );
__declspec(implementation_key(9345)) VARIANT_BOOL INonSeqEditor::GetAllDetectorData ( long ObjectNumber, long Data, unsigned long numPixels, double * detectorData );
__declspec(implementation_key(9346)) SAFEARRAY * INonSeqEditor::GetAllDetectorDataSafe ( long ObjectNumber, long Data );
__declspec(implementation_key(9347)) VARIANT_BOOL INonSeqEditor::GetPolarDetectorData ( long ObjectNumber, long pixel, enum PolarDetectorDataType Data, double * Value );
__declspec(implementation_key(9348)) VARIANT_BOOL INonSeqEditor::GetAllPolarDetectorData ( long ObjectNumber, enum PolarDetectorDataType Data, unsigned long numPixels, double * detectorData );
__declspec(implementation_key(9349)) SAFEARRAY * INonSeqEditor::GetAllPolarDetectorDataSafe ( long ObjectNumber, enum PolarDetectorDataType Data );
__declspec(implementation_key(9350)) VARIANT_BOOL INonSeqEditor::LoadDetector ( long ObjectNumber, _bstr_t fileName, VARIANT_BOOL appendData );
__declspec(implementation_key(9351)) VARIANT_BOOL INonSeqEditor::SaveDetector ( long ObjectNumber, _bstr_t fileName );
__declspec(implementation_key(9352)) long INonSeqEditor::CopyObjects ( long fromObjectNumber, long NumberOfObjects, long toObjectNumber );
__declspec(implementation_key(9353)) long INonSeqEditor::CopyObjectsFrom ( struct INonSeqEditor * fromEditor, long fromObjectNumber, long NumberOfObjects, long toObjectNumber );
__declspec(implementation_key(9354)) VARIANT_BOOL INCERow::GetIsActive ( );
__declspec(implementation_key(9355)) long INCERow::GetObjectNumber ( );
__declspec(implementation_key(9356)) IEditorCellPtr INCERow::GetObjectCell ( enum ObjectColumn Col );
__declspec(implementation_key(9357)) _bstr_t INCERow::GetTypeName ( );
__declspec(implementation_key(9358)) enum ObjectType INCERow::GetType ( );
__declspec(implementation_key(9359)) SAFEARRAY * INCERow::AvailableObjectTypes ( );
__declspec(implementation_key(9360)) SAFEARRAY * INCERow::AvailableParameters ( );
__declspec(implementation_key(9361)) IObjectTypeSettingsPtr INCERow::GetCurrentTypeSettings ( );
__declspec(implementation_key(9362)) IObjectTypeSettingsPtr INCERow::GetObjectTypeSettings ( enum ObjectType Type );
__declspec(implementation_key(9363)) VARIANT_BOOL INCERow::ChangeType ( struct IObjectTypeSettings * settings );
__declspec(implementation_key(9364)) IObjectPtr INCERow::GetObjectData ( );
__declspec(implementation_key(9365)) INCETypeDataPtr INCERow::GetTypeData ( );
__declspec(implementation_key(9366)) INCEDrawDataPtr INCERow::GetDrawData ( );
__declspec(implementation_key(9367)) INCESourcesDataPtr INCERow::GetSourcesData ( );
__declspec(implementation_key(9368)) INCECoatScatterDataPtr INCERow::GetCoatScatterData ( );
__declspec(implementation_key(9369)) INCEScatterToDataPtr INCERow::GetScatterToData ( );
__declspec(implementation_key(9370)) INCEVolumePhysicsDataPtr INCERow::GetVolumePhysicsData ( );
__declspec(implementation_key(9371)) INCEIndexDataPtr INCERow::GetIndexData ( );
__declspec(implementation_key(9372)) INCEDiffractionDataPtr INCERow::GetDiffractionData ( );
__declspec(implementation_key(9373)) INCECADDataPtr INCERow::GetCADData ( );
__declspec(implementation_key(9374)) _bstr_t INCERow::GetComment ( );
__declspec(implementation_key(9375)) void INCERow::PutComment ( _bstr_t pRetVal );
__declspec(implementation_key(9376)) IEditorCellPtr INCERow::GetCommentCell ( );
__declspec(implementation_key(9377)) long INCERow::GetRefObject ( );
__declspec(implementation_key(9378)) void INCERow::PutRefObject ( long pRetVal );
__declspec(implementation_key(9379)) IEditorCellPtr INCERow::GetRefObjectCell ( );
__declspec(implementation_key(9380)) long INCERow::GetInsideOf ( );
__declspec(implementation_key(9381)) void INCERow::PutInsideOf ( long pRetVal );
__declspec(implementation_key(9382)) IEditorCellPtr INCERow::GetInsideOfCell ( );
__declspec(implementation_key(9383)) double INCERow::GetXPosition ( );
__declspec(implementation_key(9384)) void INCERow::PutXPosition ( double pRetVal );
__declspec(implementation_key(9385)) IEditorCellPtr INCERow::GetXPositionCell ( );
__declspec(implementation_key(9386)) double INCERow::GetYPosition ( );
__declspec(implementation_key(9387)) void INCERow::PutYPosition ( double pRetVal );
__declspec(implementation_key(9388)) IEditorCellPtr INCERow::GetYPositionCell ( );
__declspec(implementation_key(9389)) double INCERow::GetZPosition ( );
__declspec(implementation_key(9390)) void INCERow::PutZPosition ( double pRetVal );
__declspec(implementation_key(9391)) IEditorCellPtr INCERow::GetZPositionCell ( );
__declspec(implementation_key(9392)) double INCERow::GetTiltAboutX ( );
__declspec(implementation_key(9393)) void INCERow::PutTiltAboutX ( double pRetVal );
__declspec(implementation_key(9394)) IEditorCellPtr INCERow::GetTiltAboutXCell ( );
__declspec(implementation_key(9395)) double INCERow::GetTiltAboutY ( );
__declspec(implementation_key(9396)) void INCERow::PutTiltAboutY ( double pRetVal );
__declspec(implementation_key(9397)) IEditorCellPtr INCERow::GetTiltAboutYCell ( );
__declspec(implementation_key(9398)) double INCERow::GetTiltAboutZ ( );
__declspec(implementation_key(9399)) void INCERow::PutTiltAboutZ ( double pRetVal );
__declspec(implementation_key(9400)) IEditorCellPtr INCERow::GetTiltAboutZCell ( );
__declspec(implementation_key(9401)) _bstr_t INCERow::GetMaterial ( );
__declspec(implementation_key(9402)) void INCERow::PutMaterial ( _bstr_t pRetVal );
__declspec(implementation_key(9403)) IEditorCellPtr INCERow::GetMaterialCell ( );
__declspec(implementation_key(9404)) IFaceDataPtr INCERow::GetFacetedObjectData ( );
__declspec(implementation_key(9405)) enum ObjectType IObject::GetType ( );
__declspec(implementation_key(9406)) INCERowPtr IObject::GetRow ( );
__declspec(implementation_key(9407)) VARIANT_BOOL IObject::GetIsValid ( );
__declspec(implementation_key(9408)) long ILensDataEditor::GetRowToSurfaceOffset ( );
__declspec(implementation_key(9409)) long ILensDataEditor::GetNumberOfSurfaces ( );
__declspec(implementation_key(9410)) long ILensDataEditor::GetNumberOfNonSequentialSurfaces ( );
__declspec(implementation_key(9411)) enum SurfaceColumn ILensDataEditor::GetFirstColumn ( );
__declspec(implementation_key(9412)) enum SurfaceColumn ILensDataEditor::GetLastColumn ( );
__declspec(implementation_key(9413)) long ILensDataEditor::GetStopSurface ( );
__declspec(implementation_key(9414)) ILDERowPtr ILensDataEditor::GetSurfaceAt ( long SurfaceNumber );
__declspec(implementation_key(9415)) ILDERowPtr ILensDataEditor::InsertNewSurfaceAt ( long SurfaceNumber );
__declspec(implementation_key(9416)) ILDERowPtr ILensDataEditor::AddSurface ( );
__declspec(implementation_key(9417)) VARIANT_BOOL ILensDataEditor::RemoveSurfaceAt ( long SurfaceNumber );
__declspec(implementation_key(9418)) long ILensDataEditor::RemoveSurfacesAt ( long SurfaceNumber, long numSurfaces );
__declspec(implementation_key(9419)) VARIANT_BOOL ILensDataEditor::ShowLDE ( );
__declspec(implementation_key(9420)) HRESULT ILensDataEditor::HideLDE ( );
__declspec(implementation_key(9421)) IUnknownPtr ILensDataEditor::GetTool_AddCoatingsToAllSurfaces ( );
__declspec(implementation_key(9422)) HRESULT ILensDataEditor::RunTool_AddCoatingsToAllSurfaces ( IUnknown * settings );
__declspec(implementation_key(9423)) HRESULT ILensDataEditor::RunTool_RemoveAllApertures ( );
__declspec(implementation_key(9424)) HRESULT ILensDataEditor::RunTool_ConvertSemiDiametersToCircularApertures ( );
__declspec(implementation_key(9425)) HRESULT ILensDataEditor::RunTool_ConvertSemiDiametersToFloatingApertures ( );
__declspec(implementation_key(9426)) HRESULT ILensDataEditor::RunTool_ConvertSemiDiametersToMaximumApertures ( );
__declspec(implementation_key(9427)) HRESULT ILensDataEditor::RunTool_ReplaceVignettingWithApertures ( );
__declspec(implementation_key(9428)) enum CoordinateConversionResult ILensDataEditor::RunTool_ConvertGlobalToLocalCoordinates ( long FirstSurface, long LastSurface, enum ConversionOrder Order );
__declspec(implementation_key(9429)) enum CoordinateConversionResult ILensDataEditor::RunTool_ConvertLocalToGlobalCoordinates ( long FirstSurface, long LastSurface, long referenceSurface );
__declspec(implementation_key(9430)) double ILensDataEditor::GetApodization ( double Px, double Py );
__declspec(implementation_key(9431)) HRESULT ILensDataEditor::GetFirstOrderData ( double * EFL, double * paraxialWorkingFNumber, double * realWorkingFNumber, double * paraxialImageHeight, double * paraxialMagnification );
__declspec(implementation_key(9432)) VARIANT_BOOL ILensDataEditor::GetGlass ( long Surface, BSTR * glassName, double * nd, double * vd, double * dPgF );
__declspec(implementation_key(9433)) VARIANT_BOOL ILensDataEditor::GetGlobalMatrix ( long Surface, double * R11, double * R12, double * R13, double * R21, double * R22, double * R23, double * R31, double * R32, double * R33, double * xo, double * yo, double * zo );
__declspec(implementation_key(9434)) long ILensDataEditor::GetIndex ( long Surface, long NumberOfWavelengths, double * indexAtWavelength );
__declspec(implementation_key(9435)) VARIANT_BOOL ILensDataEditor::SetLabel ( long Surface, long label );
__declspec(implementation_key(9436)) VARIANT_BOOL ILensDataEditor::GetLabel ( long Surface, long * label );
__declspec(implementation_key(9437)) VARIANT_BOOL ILensDataEditor::FindLabel ( long label, long * Surface );
__declspec(implementation_key(9438)) HRESULT ILensDataEditor::GetPupil ( enum ZemaxApertureType * Type, double * ApertureValue, double * entrancePupilDiameter, double * entrancePupilPosition, double * exitPupilDiameter, double * exitPupilPosition, enum PupilApodizationType * ApodizationType, double * ApodizationFactor );
__declspec(implementation_key(9439)) VARIANT_BOOL ILensDataEditor::GetSag ( long Surface, double X, double Y, double * sag, double * alternateSag );
__declspec(implementation_key(9440)) long ILensDataEditor::CopySurfaces ( long fromSurfaceNumber, long NumberOfSurfaces, long toSurfaceNumber );
__declspec(implementation_key(9441)) long ILensDataEditor::CopySurfacesFrom ( struct ILensDataEditor * fromEditor, long fromSurfaceNumber, long NumberOfSurfaces, long toSurfaceNumber );
__declspec(implementation_key(9442)) VARIANT_BOOL ILDERow::GetIsActive ( );
__declspec(implementation_key(9443)) long ILDERow::GetSurfaceNumber ( );
__declspec(implementation_key(9444)) IEditorCellPtr ILDERow::GetSurfaceCell ( enum SurfaceColumn Col );
__declspec(implementation_key(9445)) _bstr_t ILDERow::GetTypeName ( );
__declspec(implementation_key(9446)) enum SurfaceType ILDERow::GetType ( );
__declspec(implementation_key(9447)) SAFEARRAY * ILDERow::AvailableSurfaceTypes ( );
__declspec(implementation_key(9448)) ISurfaceTypeSettingsPtr ILDERow::GetCurrentTypeSettings ( );
__declspec(implementation_key(9449)) ISurfaceTypeSettingsPtr ILDERow::GetSurfaceTypeSettings ( enum SurfaceType Type );
__declspec(implementation_key(9450)) VARIANT_BOOL ILDERow::ChangeType ( struct ISurfaceTypeSettings * settings );
__declspec(implementation_key(9451)) VARIANT_BOOL ILDERow::GetIsObject ( );
__declspec(implementation_key(9452)) VARIANT_BOOL ILDERow::GetIsImage ( );
__declspec(implementation_key(9453)) VARIANT_BOOL ILDERow::GetIsStop ( );
__declspec(implementation_key(9454)) void ILDERow::PutIsStop ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(9455)) ISurfacePtr ILDERow::GetSurfaceData ( );
__declspec(implementation_key(9456)) ILDETypeDataPtr ILDERow::GetTypeData ( );
__declspec(implementation_key(9457)) ILDEDrawDataPtr ILDERow::GetDrawData ( );
__declspec(implementation_key(9458)) ILDEApertureDataPtr ILDERow::GetApertureData ( );
__declspec(implementation_key(9459)) ILDEScatteringDataPtr ILDERow::GetScatteringData ( );
__declspec(implementation_key(9460)) ILDETiltDecenterDataPtr ILDERow::GetTiltDecenterData ( );
__declspec(implementation_key(9461)) ILDEPhysicalOpticsDataPtr ILDERow::GetPhysicalOpticsData ( );
__declspec(implementation_key(9462)) ILDECoatingDataPtr ILDERow::GetCoatingData ( );
__declspec(implementation_key(9463)) ILDEImportDataPtr ILDERow::GetImportData ( );
__declspec(implementation_key(9464)) _bstr_t ILDERow::GetComment ( );
__declspec(implementation_key(9465)) void ILDERow::PutComment ( _bstr_t pRetVal );
__declspec(implementation_key(9466)) IEditorCellPtr ILDERow::GetCommentCell ( );
__declspec(implementation_key(9467)) double ILDERow::GetRadius ( );
__declspec(implementation_key(9468)) void ILDERow::PutRadius ( double pRetVal );
__declspec(implementation_key(9469)) IEditorCellPtr ILDERow::GetRadiusCell ( );
__declspec(implementation_key(9470)) double ILDERow::GetThickness ( );
__declspec(implementation_key(9471)) void ILDERow::PutThickness ( double pRetVal );
__declspec(implementation_key(9472)) IEditorCellPtr ILDERow::GetThicknessCell ( );
__declspec(implementation_key(9473)) _bstr_t ILDERow::GetMaterial ( );
__declspec(implementation_key(9474)) void ILDERow::PutMaterial ( _bstr_t pRetVal );
__declspec(implementation_key(9475)) IEditorCellPtr ILDERow::GetMaterialCell ( );
__declspec(implementation_key(9476)) _bstr_t ILDERow::GetCoating ( );
__declspec(implementation_key(9477)) void ILDERow::PutCoating ( _bstr_t pRetVal );
__declspec(implementation_key(9478)) IEditorCellPtr ILDERow::GetCoatingCell ( );
__declspec(implementation_key(9479)) double ILDERow::GetSemiDiameter ( );
__declspec(implementation_key(9480)) void ILDERow::PutSemiDiameter ( double pRetVal );
__declspec(implementation_key(9481)) IEditorCellPtr ILDERow::GetSemiDiameterCell ( );
__declspec(implementation_key(9482)) double ILDERow::GetChipZone ( );
__declspec(implementation_key(9483)) void ILDERow::PutChipZone ( double pRetVal );
__declspec(implementation_key(9484)) IEditorCellPtr ILDERow::GetChipZoneCell ( );
__declspec(implementation_key(9485)) double ILDERow::GetMechanicalSemiDiameter ( );
__declspec(implementation_key(9486)) void ILDERow::PutMechanicalSemiDiameter ( double pRetVal );
__declspec(implementation_key(9487)) IEditorCellPtr ILDERow::GetMechanicalSemiDiameterCell ( );
__declspec(implementation_key(9488)) double ILDERow::GetConic ( );
__declspec(implementation_key(9489)) void ILDERow::PutConic ( double pRetVal );
__declspec(implementation_key(9490)) IEditorCellPtr ILDERow::GetConicCell ( );
__declspec(implementation_key(9491)) double ILDERow::GetTCE ( );
__declspec(implementation_key(9492)) void ILDERow::PutTCE ( double pRetVal );
__declspec(implementation_key(9493)) IEditorCellPtr ILDERow::GetTCECell ( );
__declspec(implementation_key(9494)) enum SurfaceType ISurface::GetType ( );
__declspec(implementation_key(9495)) ILDERowPtr ISurface::GetRow ( );
__declspec(implementation_key(9496)) VARIANT_BOOL ISurface::GetIsValid ( );
#pragma stop_map_region

} // namespace ZOSAPI_Interfaces

#pragma pack(pop)
